
demo02_gpio4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000208  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080003b0  080003b0  000103b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080003c0  080003c0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003c0  080003c0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c0  080003c0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c0  080003c0  000103c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080003cc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003cc  00020020  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016aa  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000053b  00000000  00000000  000216d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000239  00000000  00000000  00021c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00021e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f0  00000000  00000000  00021f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018241  00000000  00000000  00021ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000011bb  00000000  00000000  0003a239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c05d  00000000  00000000  0003b3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c7451  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000118  00000000  00000000  000c74a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000398 	.word	0x08000398

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08000398 	.word	0x08000398

080001e8 <LedInit>:
#ifndef LED_C_
#define LED_C_

#include "led.h"

void LedInit(uint32_t pin) {
 80001e8:	b470      	push	{r4, r5, r6}
	// enable GPIO clock
	RCC->AHB1ENR |= BV(AHB1ENR_LEDGPIO_EN);
 80001ea:	4e12      	ldr	r6, [pc, #72]	; (8000234 <LedInit+0x4c>)
	// set GPIO mode as output
	LED_GPIO->MODER &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 80001ec:	4b12      	ldr	r3, [pc, #72]	; (8000238 <LedInit+0x50>)
	RCC->AHB1ENR |= BV(AHB1ENR_LEDGPIO_EN);
 80001ee:	6b34      	ldr	r4, [r6, #48]	; 0x30
	LED_GPIO->MODER &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 80001f0:	0041      	lsls	r1, r0, #1
	RCC->AHB1ENR |= BV(AHB1ENR_LEDGPIO_EN);
 80001f2:	f044 0408 	orr.w	r4, r4, #8
 80001f6:	6334      	str	r4, [r6, #48]	; 0x30
	LED_GPIO->MODER &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 80001f8:	2501      	movs	r5, #1
 80001fa:	1c4a      	adds	r2, r1, #1
 80001fc:	681c      	ldr	r4, [r3, #0]
 80001fe:	fa05 f101 	lsl.w	r1, r5, r1
 8000202:	fa05 f202 	lsl.w	r2, r5, r2
 8000206:	430a      	orrs	r2, r1
 8000208:	ea24 0402 	bic.w	r4, r4, r2
 800020c:	601c      	str	r4, [r3, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 800020e:	681c      	ldr	r4, [r3, #0]
 8000210:	4321      	orrs	r1, r4
 8000212:	6019      	str	r1, [r3, #0]
	// set GPIO speed as low
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 8000214:	6899      	ldr	r1, [r3, #8]
 8000216:	ea21 0102 	bic.w	r1, r1, r2
 800021a:	6099      	str	r1, [r3, #8]
	// set GPIO output type as push-pull
	LED_GPIO->OTYPER &= ~BV(pin);
 800021c:	6859      	ldr	r1, [r3, #4]
 800021e:	fa05 f000 	lsl.w	r0, r5, r0
 8000222:	ea21 0000 	bic.w	r0, r1, r0
 8000226:	6058      	str	r0, [r3, #4]
	// set GPIO pupd as none
	LED_GPIO->PUPDR &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 8000228:	68d9      	ldr	r1, [r3, #12]
 800022a:	ea21 0202 	bic.w	r2, r1, r2
}
 800022e:	bc70      	pop	{r4, r5, r6}
	LED_GPIO->PUPDR &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 8000230:	60da      	str	r2, [r3, #12]
}
 8000232:	4770      	bx	lr
 8000234:	40023800 	.word	0x40023800
 8000238:	40020c00 	.word	0x40020c00

0800023c <LedBlink>:

void LedOn(uint32_t pin) {
	// make pin high
	LED_GPIO->ODR |= BV(pin);
 800023c:	4a0e      	ldr	r2, [pc, #56]	; (8000278 <LedBlink+0x3c>)
void LedOff(uint32_t pin) {
	// make pin low
	LED_GPIO->ODR &= ~BV(pin);
}

void LedBlink(uint32_t pin, uint32_t ms) {
 800023e:	b430      	push	{r4, r5}
	LED_GPIO->ODR |= BV(pin);
 8000240:	6953      	ldr	r3, [r2, #20]

uint32_t DWT_Init(void);

static inline void DelayMs(volatile uint32_t ms) {
	uint32_t init_ticks = DWT->CYCCNT;
	uint32_t ticks = (SystemCoreClock / 1000);
 8000242:	4c0e      	ldr	r4, [pc, #56]	; (800027c <LedBlink+0x40>)
 8000244:	2501      	movs	r5, #1
 8000246:	fa05 f000 	lsl.w	r0, r5, r0
 800024a:	4303      	orrs	r3, r0
 800024c:	6153      	str	r3, [r2, #20]
 800024e:	6823      	ldr	r3, [r4, #0]
 8000250:	4c0b      	ldr	r4, [pc, #44]	; (8000280 <LedBlink+0x44>)
	uint32_t init_ticks = DWT->CYCCNT;
 8000252:	4a0c      	ldr	r2, [pc, #48]	; (8000284 <LedBlink+0x48>)
	uint32_t ticks = (SystemCoreClock / 1000);
 8000254:	fba4 4303 	umull	r4, r3, r4, r3
 8000258:	099b      	lsrs	r3, r3, #6
	uint32_t init_ticks = DWT->CYCCNT;
 800025a:	6854      	ldr	r4, [r2, #4]
	ms *= ticks;
 800025c:	fb01 f103 	mul.w	r1, r1, r3
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000260:	6853      	ldr	r3, [r2, #4]
 8000262:	1b1b      	subs	r3, r3, r4
 8000264:	428b      	cmp	r3, r1
 8000266:	d3fb      	bcc.n	8000260 <LedBlink+0x24>
	LED_GPIO->ODR &= ~BV(pin);
 8000268:	4a03      	ldr	r2, [pc, #12]	; (8000278 <LedBlink+0x3c>)
 800026a:	6953      	ldr	r3, [r2, #20]
 800026c:	ea23 0000 	bic.w	r0, r3, r0
	LedOn(pin);
	DelayMs(ms);
	LedOff(pin);
}
 8000270:	bc30      	pop	{r4, r5}
	LED_GPIO->ODR &= ~BV(pin);
 8000272:	6150      	str	r0, [r2, #20]
}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40020c00 	.word	0x40020c00
 800027c:	20000000 	.word	0x20000000
 8000280:	10624dd3 	.word	0x10624dd3
 8000284:	e0001000 	.word	0xe0001000

08000288 <main>:
	return 0;
}
*/

int main(void)
{
 8000288:	b570      	push	{r4, r5, r6, lr}
	uint32_t i, ledPins[] = { LED_GREEN_PIN, LED_ORANGE_PIN, LED_RED_PIN, LED_BLUE_PIN };
 800028a:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <main+0x34>)
 800028c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
 800028e:	b084      	sub	sp, #16
	uint32_t i, ledPins[] = { LED_GREEN_PIN, LED_ORANGE_PIN, LED_RED_PIN, LED_BLUE_PIN };
 8000290:	466e      	mov	r6, sp
 8000292:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000296:	4634      	mov	r4, r6
 8000298:	ad04      	add	r5, sp, #16
	for(i=0; i<4; i++)
		LedInit(ledPins[i]);
 800029a:	f854 0b04 	ldr.w	r0, [r4], #4
 800029e:	f7ff ffa3 	bl	80001e8 <LedInit>
	for(i=0; i<4; i++)
 80002a2:	42ac      	cmp	r4, r5
 80002a4:	d1f9      	bne.n	800029a <main+0x12>
	uint32_t i, ledPins[] = { LED_GREEN_PIN, LED_ORANGE_PIN, LED_RED_PIN, LED_BLUE_PIN };
 80002a6:	4634      	mov	r4, r6
	while(1) {
		for(i=0; i<4; i++)
			LedBlink(ledPins[i], 500);
 80002a8:	f854 0b04 	ldr.w	r0, [r4], #4
 80002ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80002b0:	f7ff ffc4 	bl	800023c <LedBlink>
		for(i=0; i<4; i++)
 80002b4:	42ac      	cmp	r4, r5
 80002b6:	d1f7      	bne.n	80002a8 <main+0x20>
 80002b8:	e7f5      	b.n	80002a6 <main+0x1e>
 80002ba:	bf00      	nop
 80002bc:	080003b0 	.word	0x080003b0

080002c0 <SystemInit>:


uint32_t DWT_Init(void)
{
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80002c0:	4a0c      	ldr	r2, [pc, #48]	; (80002f4 <SystemInit+0x34>)
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <SystemInit+0x38>)
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80002c4:	68d1      	ldr	r1, [r2, #12]
 80002c6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80002ca:	60d1      	str	r1, [r2, #12]
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80002cc:	68d1      	ldr	r1, [r2, #12]
 80002ce:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80002d2:	60d1      	str	r1, [r2, #12]
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	f022 0201 	bic.w	r2, r2, #1
 80002da:	601a      	str	r2, [r3, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80002dc:	681a      	ldr	r2, [r3, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80002de:	2100      	movs	r1, #0
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80002e0:	f042 0201 	orr.w	r2, r2, #1
 80002e4:	601a      	str	r2, [r3, #0]
    DWT->CYCCNT = 0;
 80002e6:	6059      	str	r1, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80002e8:	bf00      	nop
    __ASM volatile ("NOP");
 80002ea:	bf00      	nop
    __ASM volatile ("NOP");
 80002ec:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80002ee:	685b      	ldr	r3, [r3, #4]
}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	e000edf0 	.word	0xe000edf0
 80002f8:	e0001000 	.word	0xe0001000

080002fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002fc:	480d      	ldr	r0, [pc, #52]	; (8000334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000300:	f7ff ffde 	bl	80002c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000304:	480c      	ldr	r0, [pc, #48]	; (8000338 <LoopForever+0x6>)
  ldr r1, =_edata
 8000306:	490d      	ldr	r1, [pc, #52]	; (800033c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000308:	4a0d      	ldr	r2, [pc, #52]	; (8000340 <LoopForever+0xe>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800030c:	e002      	b.n	8000314 <LoopCopyDataInit>

0800030e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000312:	3304      	adds	r3, #4

08000314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000318:	d3f9      	bcc.n	800030e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800031c:	4c0a      	ldr	r4, [pc, #40]	; (8000348 <LoopForever+0x16>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000320:	e001      	b.n	8000326 <LoopFillZerobss>

08000322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000324:	3204      	adds	r2, #4

08000326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000328:	d3fb      	bcc.n	8000322 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032a:	f000 f811 	bl	8000350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032e:	f7ff ffab 	bl	8000288 <main>

08000332 <LoopForever>:

LoopForever:
    b LoopForever
 8000332:	e7fe      	b.n	8000332 <LoopForever>
  ldr   r0, =_estack
 8000334:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800033c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000340:	080003c8 	.word	0x080003c8
  ldr r2, =_sbss
 8000344:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000348:	20000020 	.word	0x20000020

0800034c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800034c:	e7fe      	b.n	800034c <ADC_IRQHandler>
	...

08000350 <__libc_init_array>:
 8000350:	b570      	push	{r4, r5, r6, lr}
 8000352:	4d0d      	ldr	r5, [pc, #52]	; (8000388 <__libc_init_array+0x38>)
 8000354:	4c0d      	ldr	r4, [pc, #52]	; (800038c <__libc_init_array+0x3c>)
 8000356:	1b64      	subs	r4, r4, r5
 8000358:	10a4      	asrs	r4, r4, #2
 800035a:	2600      	movs	r6, #0
 800035c:	42a6      	cmp	r6, r4
 800035e:	d109      	bne.n	8000374 <__libc_init_array+0x24>
 8000360:	4d0b      	ldr	r5, [pc, #44]	; (8000390 <__libc_init_array+0x40>)
 8000362:	4c0c      	ldr	r4, [pc, #48]	; (8000394 <__libc_init_array+0x44>)
 8000364:	f000 f818 	bl	8000398 <_init>
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	10a4      	asrs	r4, r4, #2
 800036c:	2600      	movs	r6, #0
 800036e:	42a6      	cmp	r6, r4
 8000370:	d105      	bne.n	800037e <__libc_init_array+0x2e>
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f855 3b04 	ldr.w	r3, [r5], #4
 8000378:	4798      	blx	r3
 800037a:	3601      	adds	r6, #1
 800037c:	e7ee      	b.n	800035c <__libc_init_array+0xc>
 800037e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000382:	4798      	blx	r3
 8000384:	3601      	adds	r6, #1
 8000386:	e7f2      	b.n	800036e <__libc_init_array+0x1e>
 8000388:	080003c0 	.word	0x080003c0
 800038c:	080003c0 	.word	0x080003c0
 8000390:	080003c0 	.word	0x080003c0
 8000394:	080003c4 	.word	0x080003c4

08000398 <_init>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr

080003a4 <_fini>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr
