
demo05_exti.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000268  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000410  08000410  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000410  08000410  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000410  08000410  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000410  08000410  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000414  08000414  00010414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  0800041c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800041c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f41  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000070a  00000000  00000000  00021f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000028a  00000000  00000000  00022679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  00022908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000130  00000000  00000000  000229f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018376  00000000  00000000  00022b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001698  00000000  00000000  0003ae96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c643  00000000  00000000  0003c52e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c8b71  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000015c  00000000  00000000  000c8bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080003f8 	.word	0x080003f8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	080003f8 	.word	0x080003f8

080001e8 <LedInit>:
#ifndef LED_C_
#define LED_C_

#include "led.h"

void LedInit(uint32_t pin) {
 80001e8:	b470      	push	{r4, r5, r6}
	// enable GPIO clock
	RCC->AHB1ENR |= BV(AHB1ENR_LEDGPIO_EN);
 80001ea:	4e12      	ldr	r6, [pc, #72]	; (8000234 <LedInit+0x4c>)
	// set GPIO mode as output
	LED_GPIO->MODER &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 80001ec:	4b12      	ldr	r3, [pc, #72]	; (8000238 <LedInit+0x50>)
	RCC->AHB1ENR |= BV(AHB1ENR_LEDGPIO_EN);
 80001ee:	6b34      	ldr	r4, [r6, #48]	; 0x30
	LED_GPIO->MODER &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 80001f0:	0041      	lsls	r1, r0, #1
	RCC->AHB1ENR |= BV(AHB1ENR_LEDGPIO_EN);
 80001f2:	f044 0408 	orr.w	r4, r4, #8
 80001f6:	6334      	str	r4, [r6, #48]	; 0x30
	LED_GPIO->MODER &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 80001f8:	2501      	movs	r5, #1
 80001fa:	1c4a      	adds	r2, r1, #1
 80001fc:	681c      	ldr	r4, [r3, #0]
 80001fe:	fa05 f101 	lsl.w	r1, r5, r1
 8000202:	fa05 f202 	lsl.w	r2, r5, r2
 8000206:	430a      	orrs	r2, r1
 8000208:	ea24 0402 	bic.w	r4, r4, r2
 800020c:	601c      	str	r4, [r3, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 800020e:	681c      	ldr	r4, [r3, #0]
 8000210:	4321      	orrs	r1, r4
 8000212:	6019      	str	r1, [r3, #0]
	// set GPIO speed as low
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 8000214:	6899      	ldr	r1, [r3, #8]
 8000216:	ea21 0102 	bic.w	r1, r1, r2
 800021a:	6099      	str	r1, [r3, #8]
	// set GPIO output type as push-pull
	LED_GPIO->OTYPER &= ~BV(pin);
 800021c:	6859      	ldr	r1, [r3, #4]
 800021e:	fa05 f000 	lsl.w	r0, r5, r0
 8000222:	ea21 0000 	bic.w	r0, r1, r0
 8000226:	6058      	str	r0, [r3, #4]
	// set GPIO pupd as none
	LED_GPIO->PUPDR &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 8000228:	68d9      	ldr	r1, [r3, #12]
 800022a:	ea21 0202 	bic.w	r2, r1, r2
}
 800022e:	bc70      	pop	{r4, r5, r6}
	LED_GPIO->PUPDR &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 8000230:	60da      	str	r2, [r3, #12]
}
 8000232:	4770      	bx	lr
 8000234:	40023800 	.word	0x40023800
 8000238:	40020c00 	.word	0x40020c00

0800023c <LedBlink>:

void LedOn(uint32_t pin) {
	// make pin high
	LED_GPIO->ODR |= BV(pin);
 800023c:	4a0e      	ldr	r2, [pc, #56]	; (8000278 <LedBlink+0x3c>)
void LedOff(uint32_t pin) {
	// make pin low
	LED_GPIO->ODR &= ~BV(pin);
}

void LedBlink(uint32_t pin, uint32_t ms) {
 800023e:	b430      	push	{r4, r5}
	LED_GPIO->ODR |= BV(pin);
 8000240:	6953      	ldr	r3, [r2, #20]

uint32_t DWT_Init(void);

static inline void DelayMs(volatile uint32_t ms) {
	uint32_t init_ticks = DWT->CYCCNT;
	uint32_t ticks = (SystemCoreClock / 1000);
 8000242:	4c0e      	ldr	r4, [pc, #56]	; (800027c <LedBlink+0x40>)
 8000244:	2501      	movs	r5, #1
 8000246:	fa05 f000 	lsl.w	r0, r5, r0
 800024a:	4303      	orrs	r3, r0
 800024c:	6153      	str	r3, [r2, #20]
 800024e:	6823      	ldr	r3, [r4, #0]
 8000250:	4c0b      	ldr	r4, [pc, #44]	; (8000280 <LedBlink+0x44>)
	uint32_t init_ticks = DWT->CYCCNT;
 8000252:	4a0c      	ldr	r2, [pc, #48]	; (8000284 <LedBlink+0x48>)
	uint32_t ticks = (SystemCoreClock / 1000);
 8000254:	fba4 4303 	umull	r4, r3, r4, r3
 8000258:	099b      	lsrs	r3, r3, #6
	uint32_t init_ticks = DWT->CYCCNT;
 800025a:	6854      	ldr	r4, [r2, #4]
	ms *= ticks;
 800025c:	fb01 f103 	mul.w	r1, r1, r3
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000260:	6853      	ldr	r3, [r2, #4]
 8000262:	1b1b      	subs	r3, r3, r4
 8000264:	428b      	cmp	r3, r1
 8000266:	d3fb      	bcc.n	8000260 <LedBlink+0x24>
	LED_GPIO->ODR &= ~BV(pin);
 8000268:	4a03      	ldr	r2, [pc, #12]	; (8000278 <LedBlink+0x3c>)
 800026a:	6953      	ldr	r3, [r2, #20]
 800026c:	ea23 0000 	bic.w	r0, r3, r0
	LedOn(pin);
	DelayMs(ms);
	LedOff(pin);
}
 8000270:	bc30      	pop	{r4, r5}
	LED_GPIO->ODR &= ~BV(pin);
 8000272:	6150      	str	r0, [r2, #20]
}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40020c00 	.word	0x40020c00
 800027c:	20000000 	.word	0x20000000
 8000280:	10624dd3 	.word	0x10624dd3
 8000284:	e0001000 	.word	0xe0001000

08000288 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
	LedInit(LED_BLUE_PIN);
 8000288:	200f      	movs	r0, #15
{
 800028a:	b508      	push	{r3, lr}
	LedInit(LED_BLUE_PIN);
 800028c:	f7ff ffac 	bl	80001e8 <LedInit>
	SwitchInit(SWITCH_PIN);
 8000290:	2000      	movs	r0, #0
 8000292:	f000 f801 	bl	8000298 <SwitchInit>
	while(1);
 8000296:	e7fe      	b.n	8000296 <main+0xe>

08000298 <SwitchInit>:
 *      Author: nilesh
 */
#include "switch.h"
#include "led.h"

void SwitchInit(uint32_t pin) {
 8000298:	b430      	push	{r4, r5}
	// enable GPIO clock
	RCC->AHB1ENR |= BV(AHB1ENR_SWITCH_GPIO_EN);
 800029a:	4d16      	ldr	r5, [pc, #88]	; (80002f4 <SwitchInit+0x5c>)
	// set gpio mode as input
	SWITCH_GPIO->MODER &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 800029c:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <SwitchInit+0x60>)
	RCC->AHB1ENR |= BV(AHB1ENR_SWITCH_GPIO_EN);
 800029e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	SWITCH_GPIO->MODER &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 80002a0:	0041      	lsls	r1, r0, #1
	RCC->AHB1ENR |= BV(AHB1ENR_SWITCH_GPIO_EN);
 80002a2:	f044 0401 	orr.w	r4, r4, #1
 80002a6:	632c      	str	r4, [r5, #48]	; 0x30
	SWITCH_GPIO->MODER &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 80002a8:	2201      	movs	r2, #1
 80002aa:	1c48      	adds	r0, r1, #1
 80002ac:	681d      	ldr	r5, [r3, #0]
	// enable falling edge detection
	EXTI->FTSR |= BV(SWITCH_PIN_EXTI);
	// enable (unmask) exti interrupt for switch (exti0)
	EXTI->IMR |= BV(SWITCH_PIN_EXTI);
	// PA0 --> EXTI0 : configure in SYSCFG EXTICR0 regr
	SYSCFG->EXTICR[0] &= ~(BV(0) | BV(1) | BV(2) | BV(3));
 80002ae:	4c13      	ldr	r4, [pc, #76]	; (80002fc <SwitchInit+0x64>)
	SWITCH_GPIO->MODER &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 80002b0:	fa02 f101 	lsl.w	r1, r2, r1
 80002b4:	fa02 f000 	lsl.w	r0, r2, r0
 80002b8:	4308      	orrs	r0, r1
 80002ba:	ea25 0500 	bic.w	r5, r5, r0
 80002be:	601d      	str	r5, [r3, #0]
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 80002c0:	6899      	ldr	r1, [r3, #8]
	EXTI->FTSR |= BV(SWITCH_PIN_EXTI);
 80002c2:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <SwitchInit+0x68>)
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002c4:	4d0f      	ldr	r5, [pc, #60]	; (8000304 <SwitchInit+0x6c>)
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 80002c6:	ea21 0100 	bic.w	r1, r1, r0
 80002ca:	6099      	str	r1, [r3, #8]
	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2) | BV(pin * 2 + 1));
 80002cc:	68d9      	ldr	r1, [r3, #12]
 80002ce:	ea21 0000 	bic.w	r0, r1, r0
 80002d2:	60d8      	str	r0, [r3, #12]
	EXTI->FTSR |= BV(SWITCH_PIN_EXTI);
 80002d4:	68d3      	ldr	r3, [r2, #12]
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= BV(SWITCH_PIN_EXTI);
 80002dc:	6813      	ldr	r3, [r2, #0]
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6013      	str	r3, [r2, #0]
	SYSCFG->EXTICR[0] &= ~(BV(0) | BV(1) | BV(2) | BV(3));
 80002e4:	68a3      	ldr	r3, [r4, #8]
 80002e6:	2240      	movs	r2, #64	; 0x40
 80002e8:	f023 030f 	bic.w	r3, r3, #15
 80002ec:	60a3      	str	r3, [r4, #8]
 80002ee:	602a      	str	r2, [r5, #0]
	/* configure NVIC to send exti0 interrupt to ARM core */
	// enable exti0 interrupt in ISER
	//NVIC->ISER[0] |= BV(EXTI0_IRQn);
	NVIC_EnableIRQ(EXTI0_IRQn);
}
 80002f0:	bc30      	pop	{r4, r5}
 80002f2:	4770      	bx	lr
 80002f4:	40023800 	.word	0x40023800
 80002f8:	40020000 	.word	0x40020000
 80002fc:	40013800 	.word	0x40013800
 8000300:	40013c00 	.word	0x40013c00
 8000304:	e000e100 	.word	0xe000e100

08000308 <EXTI0_IRQHandler>:
}

// implement interrupt handler for exti0
void EXTI0_IRQHandler(void) {
	// acknowledge the interrupt in exti pending register
	EXTI->PR |= BV(SWITCH_PIN_EXTI);
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <EXTI0_IRQHandler+0x14>)
 800030a:	6953      	ldr	r3, [r2, #20]
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	6153      	str	r3, [r2, #20]
	// blink a led
	LedBlink(LED_BLUE_PIN, 1000);
 8000312:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000316:	200f      	movs	r0, #15
 8000318:	f7ff bf90 	b.w	800023c <LedBlink>
 800031c:	40013c00 	.word	0x40013c00

08000320 <SystemInit>:


uint32_t DWT_Init(void)
{
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000320:	4a0c      	ldr	r2, [pc, #48]	; (8000354 <SystemInit+0x34>)
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000322:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <SystemInit+0x38>)
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000324:	68d1      	ldr	r1, [r2, #12]
 8000326:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800032a:	60d1      	str	r1, [r2, #12]
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800032c:	68d1      	ldr	r1, [r2, #12]
 800032e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8000332:	60d1      	str	r1, [r2, #12]
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	f022 0201 	bic.w	r2, r2, #1
 800033a:	601a      	str	r2, [r3, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800033c:	681a      	ldr	r2, [r3, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800033e:	2100      	movs	r1, #0
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000340:	f042 0201 	orr.w	r2, r2, #1
 8000344:	601a      	str	r2, [r3, #0]
    DWT->CYCCNT = 0;
 8000346:	6059      	str	r1, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000348:	bf00      	nop
    __ASM volatile ("NOP");
 800034a:	bf00      	nop
    __ASM volatile ("NOP");
 800034c:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800034e:	685b      	ldr	r3, [r3, #4]
}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	e000edf0 	.word	0xe000edf0
 8000358:	e0001000 	.word	0xe0001000

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000360:	f7ff ffde 	bl	8000320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	; (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	; (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 f811 	bl	80003b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ff7b 	bl	8000288 <main>

08000392 <LoopForever>:

LoopForever:
    b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003a0:	08000418 	.word	0x08000418
  ldr r2, =_sbss
 80003a4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003a8:	20000020 	.word	0x20000020

080003ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC_IRQHandler>
	...

080003b0 <__libc_init_array>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	4d0d      	ldr	r5, [pc, #52]	; (80003e8 <__libc_init_array+0x38>)
 80003b4:	4c0d      	ldr	r4, [pc, #52]	; (80003ec <__libc_init_array+0x3c>)
 80003b6:	1b64      	subs	r4, r4, r5
 80003b8:	10a4      	asrs	r4, r4, #2
 80003ba:	2600      	movs	r6, #0
 80003bc:	42a6      	cmp	r6, r4
 80003be:	d109      	bne.n	80003d4 <__libc_init_array+0x24>
 80003c0:	4d0b      	ldr	r5, [pc, #44]	; (80003f0 <__libc_init_array+0x40>)
 80003c2:	4c0c      	ldr	r4, [pc, #48]	; (80003f4 <__libc_init_array+0x44>)
 80003c4:	f000 f818 	bl	80003f8 <_init>
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	10a4      	asrs	r4, r4, #2
 80003cc:	2600      	movs	r6, #0
 80003ce:	42a6      	cmp	r6, r4
 80003d0:	d105      	bne.n	80003de <__libc_init_array+0x2e>
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d8:	4798      	blx	r3
 80003da:	3601      	adds	r6, #1
 80003dc:	e7ee      	b.n	80003bc <__libc_init_array+0xc>
 80003de:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e2:	4798      	blx	r3
 80003e4:	3601      	adds	r6, #1
 80003e6:	e7f2      	b.n	80003ce <__libc_init_array+0x1e>
 80003e8:	08000410 	.word	0x08000410
 80003ec:	08000410 	.word	0x08000410
 80003f0:	08000410 	.word	0x08000410
 80003f4:	08000414 	.word	0x08000414

080003f8 <_init>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr

08000404 <_fini>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr
