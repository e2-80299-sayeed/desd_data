
quetion1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08002d90  08002d90  00012d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fa4  08002fa4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002fa4  08002fa4  00012fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fac  08002fac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fac  08002fac  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fb0  08002fb0  00012fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000070  08003024  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08003024  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d49  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014be  00000000  00000000  00028de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  0002a2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b8  00000000  00000000  0002a8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020161  00000000  00000000  0002ae90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c67  00000000  00000000  0004aff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2a7c  00000000  00000000  00052c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001156d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001eec  00000000  00000000  00115728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002d78 	.word	0x08002d78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002d78 	.word	0x08002d78

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <UartReceive>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UartReceive(char str[])
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	char ch;
	int i =0;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]

	do{
		HAL_UART_Receive(&huart2,(uint8_t*)&ch,1, HAL_MAX_DELAY);
 8000584:	f107 010b 	add.w	r1, r7, #11
 8000588:	f04f 33ff 	mov.w	r3, #4294967295
 800058c:	2201      	movs	r2, #1
 800058e:	480f      	ldr	r0, [pc, #60]	; (80005cc <UartReceive+0x54>)
 8000590:	f001 fb1f 	bl	8001bd2 <HAL_UART_Receive>
		str[i] = ch;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	7afa      	ldrb	r2, [r7, #11]
 800059c:	701a      	strb	r2, [r3, #0]
		i++;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3301      	adds	r3, #1
 80005a2:	60fb      	str	r3, [r7, #12]

	}while(ch !='\r');
 80005a4:	7afb      	ldrb	r3, [r7, #11]
 80005a6:	2b0d      	cmp	r3, #13
 80005a8:	d1ec      	bne.n	8000584 <UartReceive+0xc>
	str[i] = '\n';
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	4413      	add	r3, r2
 80005b0:	220a      	movs	r2, #10
 80005b2:	701a      	strb	r2, [r3, #0]
	i++;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	3301      	adds	r3, #1
 80005b8:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4413      	add	r3, r2
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000098 	.word	0x20000098

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b5b0      	push	{r4, r5, r7, lr}
 80005d2:	b09a      	sub	sp, #104	; 0x68
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fa77 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f88b 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f91d 	bl	800081c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f8f1 	bl	80007c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  strcpy(str,"Choose 1 Option.....\r\n1.RED LED ON.\r\n2.RED LED OFF\r\n3.Blue LED ON\r\n4.Blue LED OFF\r\n");
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4a3d      	ldr	r2, [pc, #244]	; (80006e0 <main+0x110>)
 80005ea:	4618      	mov	r0, r3
 80005ec:	4611      	mov	r1, r2
 80005ee:	2354      	movs	r3, #84	; 0x54
 80005f0:	461a      	mov	r2, r3
 80005f2:	f001 fdf1 	bl	80021d8 <memcpy>
	  	  HAL_UART_Transmit(&huart2,(uint8_t*)str , strlen(str),HAL_MAX_DELAY);
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fde9 	bl	80001d0 <strlen>
 80005fe:	4603      	mov	r3, r0
 8000600:	b29a      	uxth	r2, r3
 8000602:	1d39      	adds	r1, r7, #4
 8000604:	f04f 33ff 	mov.w	r3, #4294967295
 8000608:	4836      	ldr	r0, [pc, #216]	; (80006e4 <main+0x114>)
 800060a:	f001 fa50 	bl	8001aae <HAL_UART_Transmit>

	  	  UartReceive(str);
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ffb1 	bl	8000578 <UartReceive>

	  	  sscanf(str,"%d",&choice);
 8000616:	463a      	mov	r2, r7
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4933      	ldr	r1, [pc, #204]	; (80006e8 <main+0x118>)
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fdf1 	bl	8002204 <siscanf>
	  	  HAL_UART_Transmit(&huart2,(uint8_t*)str , strlen(str),HAL_MAX_DELAY);
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff fdd3 	bl	80001d0 <strlen>
 800062a:	4603      	mov	r3, r0
 800062c:	b29a      	uxth	r2, r3
 800062e:	1d39      	adds	r1, r7, #4
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	482b      	ldr	r0, [pc, #172]	; (80006e4 <main+0x114>)
 8000636:	f001 fa3a 	bl	8001aae <HAL_UART_Transmit>

	  	  switch(choice)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	3b01      	subs	r3, #1
 800063e:	2b03      	cmp	r3, #3
 8000640:	d836      	bhi.n	80006b0 <main+0xe0>
 8000642:	a201      	add	r2, pc, #4	; (adr r2, 8000648 <main+0x78>)
 8000644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000648:	08000659 	.word	0x08000659
 800064c:	0800066f 	.word	0x0800066f
 8000650:	08000685 	.word	0x08000685
 8000654:	0800069b 	.word	0x0800069b
	  	  {
	  	  case 1:
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065e:	4823      	ldr	r0, [pc, #140]	; (80006ec <main+0x11c>)
 8000660:	f000 fd4a 	bl	80010f8 <HAL_GPIO_WritePin>
	  		  HAL_Delay(1000);
 8000664:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000668:	f000 faa0 	bl	8000bac <HAL_Delay>
	  		  break;
 800066c:	e037      	b.n	80006de <main+0x10e>

	  	  case 2:
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000674:	481d      	ldr	r0, [pc, #116]	; (80006ec <main+0x11c>)
 8000676:	f000 fd3f 	bl	80010f8 <HAL_GPIO_WritePin>
	  		  HAL_Delay(1000);
 800067a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067e:	f000 fa95 	bl	8000bac <HAL_Delay>
	  		  break;
 8000682:	e02c      	b.n	80006de <main+0x10e>

	  	  case 3:
	  	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800068a:	4818      	ldr	r0, [pc, #96]	; (80006ec <main+0x11c>)
 800068c:	f000 fd34 	bl	80010f8 <HAL_GPIO_WritePin>
	  	  		  HAL_Delay(1000);
 8000690:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000694:	f000 fa8a 	bl	8000bac <HAL_Delay>
	  	  		  break;
 8000698:	e021      	b.n	80006de <main+0x10e>
	  	  case 4:
	  	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006a0:	4812      	ldr	r0, [pc, #72]	; (80006ec <main+0x11c>)
 80006a2:	f000 fd29 	bl	80010f8 <HAL_GPIO_WritePin>
	  	  		  HAL_Delay(1000);
 80006a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006aa:	f000 fa7f 	bl	8000bac <HAL_Delay>
	  	  		  break;
 80006ae:	e016      	b.n	80006de <main+0x10e>
	  	  default:
	  		  strcpy(str,"Invalid Choice.....\r\n");
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <main+0x120>)
 80006b4:	461c      	mov	r4, r3
 80006b6:	4615      	mov	r5, r2
 80006b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006c0:	6020      	str	r0, [r4, #0]
 80006c2:	3404      	adds	r4, #4
 80006c4:	8021      	strh	r1, [r4, #0]
	  		  HAL_UART_Transmit(&huart2,(uint8_t*)str , strlen(str),HAL_MAX_DELAY);
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fd81 	bl	80001d0 <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	1d39      	adds	r1, r7, #4
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	4802      	ldr	r0, [pc, #8]	; (80006e4 <main+0x114>)
 80006da:	f001 f9e8 	bl	8001aae <HAL_UART_Transmit>
	  strcpy(str,"Choose 1 Option.....\r\n1.RED LED ON.\r\n2.RED LED OFF\r\n3.Blue LED ON\r\n4.Blue LED OFF\r\n");
 80006de:	e782      	b.n	80005e6 <main+0x16>
 80006e0:	08002d90 	.word	0x08002d90
 80006e4:	20000098 	.word	0x20000098
 80006e8:	08002de4 	.word	0x08002de4
 80006ec:	40020c00 	.word	0x40020c00
 80006f0:	08002de8 	.word	0x08002de8

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	; 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	2230      	movs	r2, #48	; 0x30
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f001 fd76 	bl	80021f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <SystemClock_Config+0xcc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <SystemClock_Config+0xcc>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <SystemClock_Config+0xcc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <SystemClock_Config+0xd0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <SystemClock_Config+0xd0>)
 800073e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <SystemClock_Config+0xd0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000750:	2302      	movs	r3, #2
 8000752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2310      	movs	r3, #16
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2302      	movs	r3, #2
 800075e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000760:	2300      	movs	r3, #0
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000764:	2308      	movs	r3, #8
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000768:	2332      	movs	r3, #50	; 0x32
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000770:	2307      	movs	r3, #7
 8000772:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	4618      	mov	r0, r3
 800077a:	f000 fcd7 	bl	800112c <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000784:	f000 f88e 	bl	80008a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	230f      	movs	r3, #15
 800078a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078c:	2302      	movs	r3, #2
 800078e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000794:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000798:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800079a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800079e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2101      	movs	r1, #1
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 ff38 	bl	800161c <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007b2:	f000 f877 	bl	80008a4 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	; 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <MX_USART2_UART_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_USART2_UART_Init+0x4c>)
 8000800:	f001 f908 	bl	8001a14 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f84b 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000098 	.word	0x20000098
 8000818:	40004400 	.word	0x40004400

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <MX_GPIO_Init+0x80>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a18      	ldr	r2, [pc, #96]	; (800089c <MX_GPIO_Init+0x80>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_GPIO_Init+0x80>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_GPIO_Init+0x80>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a11      	ldr	r2, [pc, #68]	; (800089c <MX_GPIO_Init+0x80>)
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_GPIO_Init+0x80>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000870:	480b      	ldr	r0, [pc, #44]	; (80008a0 <MX_GPIO_Init+0x84>)
 8000872:	f000 fc41 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000876:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800087a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4619      	mov	r1, r3
 800088e:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_GPIO_Init+0x84>)
 8000890:	f000 fa96 	bl	8000dc0 <HAL_GPIO_Init>

}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020c00 	.word	0x40020c00

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x4c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008ee:	2007      	movs	r0, #7
 80008f0:	f000 fa32 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a19      	ldr	r2, [pc, #100]	; (8000984 <HAL_UART_MspInit+0x84>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d12b      	bne.n	800097a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a17      	ldr	r2, [pc, #92]	; (8000988 <HAL_UART_MspInit+0x88>)
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a10      	ldr	r2, [pc, #64]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800095a:	230c      	movs	r3, #12
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800096a:	2307      	movs	r3, #7
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <HAL_UART_MspInit+0x8c>)
 8000976:	f000 fa23 	bl	8000dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	; 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40004400 	.word	0x40004400
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 f8c6 	bl	8000b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009ec:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <_sbrk+0x5c>)
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <_sbrk+0x60>)
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <_sbrk+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d102      	bne.n	8000a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <_sbrk+0x64>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <_sbrk+0x68>)
 8000a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d207      	bcs.n	8000a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a14:	f001 fbb6 	bl	8002184 <__errno>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	e009      	b.n	8000a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2a:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <_sbrk+0x64>)
 8000a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20020000 	.word	0x20020000
 8000a44:	00000400 	.word	0x00000400
 8000a48:	2000008c 	.word	0x2000008c
 8000a4c:	200000f0 	.word	0x200000f0

08000a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <SystemInit+0x20>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <SystemInit+0x20>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a7a:	490e      	ldr	r1, [pc, #56]	; (8000ab4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a7c:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a90:	4c0b      	ldr	r4, [pc, #44]	; (8000ac0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a9e:	f7ff ffd7 	bl	8000a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f001 fb75 	bl	8002190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa6:	f7ff fd93 	bl	80005d0 <main>
  bx  lr    
 8000aaa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ab8:	08002fb4 	.word	0x08002fb4
  ldr r2, =_sbss
 8000abc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ac0:	200000f0 	.word	0x200000f0

08000ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <HAL_Init+0x40>)
 8000ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_Init+0x40>)
 8000ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_Init+0x40>)
 8000aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f931 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f000 f808 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f7ff fed8 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023c00 	.word	0x40023c00

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_InitTick+0x54>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_InitTick+0x58>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f93b 	bl	8000da6 <HAL_SYSTICK_Config>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00e      	b.n	8000b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d80a      	bhi.n	8000b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f000 f911 	bl	8000d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <HAL_InitTick+0x5c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000004 	.word	0x20000004

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x20>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x24>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_IncTick+0x24>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	200000dc 	.word	0x200000dc

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_GetTick+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	200000dc 	.word	0x200000dc

08000bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb4:	f7ff ffee 	bl	8000b94 <HAL_GetTick>
 8000bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc4:	d005      	beq.n	8000bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_Delay+0x44>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4413      	add	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bd2:	bf00      	nop
 8000bd4:	f7ff ffde 	bl	8000b94 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d8f7      	bhi.n	8000bd4 <HAL_Delay+0x28>
  {
  }
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f7ff ff8e 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff47 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff5c 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff8e 	bl	8000cac <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5d 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ffb0 	bl	8000d14 <SysTick_Config>
 8000db4:	4603      	mov	r3, r0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	; 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	e16b      	b.n	80010b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ddc:	2201      	movs	r2, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	f040 815a 	bne.w	80010ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d005      	beq.n	8000e12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d130      	bne.n	8000e74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	091b      	lsrs	r3, r3, #4
 8000e5e:	f003 0201 	and.w	r2, r3, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d017      	beq.n	8000eb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d123      	bne.n	8000f04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	08da      	lsrs	r2, r3, #3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3208      	adds	r2, #8
 8000ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	08da      	lsrs	r2, r3, #3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3208      	adds	r2, #8
 8000efe:	69b9      	ldr	r1, [r7, #24]
 8000f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0203 	and.w	r2, r3, #3
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 80b4 	beq.w	80010ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b60      	ldr	r3, [pc, #384]	; (80010cc <HAL_GPIO_Init+0x30c>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a5f      	ldr	r2, [pc, #380]	; (80010cc <HAL_GPIO_Init+0x30c>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
 8000f56:	4b5d      	ldr	r3, [pc, #372]	; (80010cc <HAL_GPIO_Init+0x30c>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f62:	4a5b      	ldr	r2, [pc, #364]	; (80010d0 <HAL_GPIO_Init+0x310>)
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	3302      	adds	r3, #2
 8000f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	220f      	movs	r2, #15
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a52      	ldr	r2, [pc, #328]	; (80010d4 <HAL_GPIO_Init+0x314>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d02b      	beq.n	8000fe6 <HAL_GPIO_Init+0x226>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a51      	ldr	r2, [pc, #324]	; (80010d8 <HAL_GPIO_Init+0x318>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d025      	beq.n	8000fe2 <HAL_GPIO_Init+0x222>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a50      	ldr	r2, [pc, #320]	; (80010dc <HAL_GPIO_Init+0x31c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d01f      	beq.n	8000fde <HAL_GPIO_Init+0x21e>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4f      	ldr	r2, [pc, #316]	; (80010e0 <HAL_GPIO_Init+0x320>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d019      	beq.n	8000fda <HAL_GPIO_Init+0x21a>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4e      	ldr	r2, [pc, #312]	; (80010e4 <HAL_GPIO_Init+0x324>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d013      	beq.n	8000fd6 <HAL_GPIO_Init+0x216>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4d      	ldr	r2, [pc, #308]	; (80010e8 <HAL_GPIO_Init+0x328>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d00d      	beq.n	8000fd2 <HAL_GPIO_Init+0x212>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4c      	ldr	r2, [pc, #304]	; (80010ec <HAL_GPIO_Init+0x32c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d007      	beq.n	8000fce <HAL_GPIO_Init+0x20e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4b      	ldr	r2, [pc, #300]	; (80010f0 <HAL_GPIO_Init+0x330>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d101      	bne.n	8000fca <HAL_GPIO_Init+0x20a>
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	e00e      	b.n	8000fe8 <HAL_GPIO_Init+0x228>
 8000fca:	2308      	movs	r3, #8
 8000fcc:	e00c      	b.n	8000fe8 <HAL_GPIO_Init+0x228>
 8000fce:	2306      	movs	r3, #6
 8000fd0:	e00a      	b.n	8000fe8 <HAL_GPIO_Init+0x228>
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	e008      	b.n	8000fe8 <HAL_GPIO_Init+0x228>
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	e006      	b.n	8000fe8 <HAL_GPIO_Init+0x228>
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e004      	b.n	8000fe8 <HAL_GPIO_Init+0x228>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e002      	b.n	8000fe8 <HAL_GPIO_Init+0x228>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <HAL_GPIO_Init+0x228>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	69fa      	ldr	r2, [r7, #28]
 8000fea:	f002 0203 	and.w	r2, r2, #3
 8000fee:	0092      	lsls	r2, r2, #2
 8000ff0:	4093      	lsls	r3, r2
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff8:	4935      	ldr	r1, [pc, #212]	; (80010d0 <HAL_GPIO_Init+0x310>)
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	3302      	adds	r3, #2
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001006:	4b3b      	ldr	r3, [pc, #236]	; (80010f4 <HAL_GPIO_Init+0x334>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800102a:	4a32      	ldr	r2, [pc, #200]	; (80010f4 <HAL_GPIO_Init+0x334>)
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001030:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <HAL_GPIO_Init+0x334>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001054:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <HAL_GPIO_Init+0x334>)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800105a:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <HAL_GPIO_Init+0x334>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800107e:	4a1d      	ldr	r2, [pc, #116]	; (80010f4 <HAL_GPIO_Init+0x334>)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <HAL_GPIO_Init+0x334>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <HAL_GPIO_Init+0x334>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3301      	adds	r3, #1
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	2b0f      	cmp	r3, #15
 80010b8:	f67f ae90 	bls.w	8000ddc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40013800 	.word	0x40013800
 80010d4:	40020000 	.word	0x40020000
 80010d8:	40020400 	.word	0x40020400
 80010dc:	40020800 	.word	0x40020800
 80010e0:	40020c00 	.word	0x40020c00
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40021400 	.word	0x40021400
 80010ec:	40021800 	.word	0x40021800
 80010f0:	40021c00 	.word	0x40021c00
 80010f4:	40013c00 	.word	0x40013c00

080010f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
 8001104:	4613      	mov	r3, r2
 8001106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001108:	787b      	ldrb	r3, [r7, #1]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001114:	e003      	b.n	800111e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001116:	887b      	ldrh	r3, [r7, #2]
 8001118:	041a      	lsls	r2, r3, #16
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	619a      	str	r2, [r3, #24]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e264      	b.n	8001608 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d075      	beq.n	8001236 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800114a:	4ba3      	ldr	r3, [pc, #652]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 030c 	and.w	r3, r3, #12
 8001152:	2b04      	cmp	r3, #4
 8001154:	d00c      	beq.n	8001170 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001156:	4ba0      	ldr	r3, [pc, #640]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800115e:	2b08      	cmp	r3, #8
 8001160:	d112      	bne.n	8001188 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001162:	4b9d      	ldr	r3, [pc, #628]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800116a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800116e:	d10b      	bne.n	8001188 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001170:	4b99      	ldr	r3, [pc, #612]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d05b      	beq.n	8001234 <HAL_RCC_OscConfig+0x108>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d157      	bne.n	8001234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e23f      	b.n	8001608 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001190:	d106      	bne.n	80011a0 <HAL_RCC_OscConfig+0x74>
 8001192:	4b91      	ldr	r3, [pc, #580]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a90      	ldr	r2, [pc, #576]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e01d      	b.n	80011dc <HAL_RCC_OscConfig+0xb0>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x98>
 80011aa:	4b8b      	ldr	r3, [pc, #556]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a8a      	ldr	r2, [pc, #552]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	4b88      	ldr	r3, [pc, #544]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a87      	ldr	r2, [pc, #540]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e00b      	b.n	80011dc <HAL_RCC_OscConfig+0xb0>
 80011c4:	4b84      	ldr	r3, [pc, #528]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a83      	ldr	r2, [pc, #524]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	4b81      	ldr	r3, [pc, #516]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a80      	ldr	r2, [pc, #512]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d013      	beq.n	800120c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fcd6 	bl	8000b94 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fcd2 	bl	8000b94 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b64      	cmp	r3, #100	; 0x64
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e204      	b.n	8001608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	4b76      	ldr	r3, [pc, #472]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f0      	beq.n	80011ec <HAL_RCC_OscConfig+0xc0>
 800120a:	e014      	b.n	8001236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120c:	f7ff fcc2 	bl	8000b94 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001214:	f7ff fcbe 	bl	8000b94 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b64      	cmp	r3, #100	; 0x64
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e1f0      	b.n	8001608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001226:	4b6c      	ldr	r3, [pc, #432]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0xe8>
 8001232:	e000      	b.n	8001236 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d063      	beq.n	800130a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001242:	4b65      	ldr	r3, [pc, #404]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00b      	beq.n	8001266 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800124e:	4b62      	ldr	r3, [pc, #392]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001256:	2b08      	cmp	r3, #8
 8001258:	d11c      	bne.n	8001294 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800125a:	4b5f      	ldr	r3, [pc, #380]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d116      	bne.n	8001294 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001266:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d005      	beq.n	800127e <HAL_RCC_OscConfig+0x152>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d001      	beq.n	800127e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e1c4      	b.n	8001608 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127e:	4b56      	ldr	r3, [pc, #344]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	4952      	ldr	r1, [pc, #328]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800128e:	4313      	orrs	r3, r2
 8001290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001292:	e03a      	b.n	800130a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d020      	beq.n	80012de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800129c:	4b4f      	ldr	r3, [pc, #316]	; (80013dc <HAL_RCC_OscConfig+0x2b0>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a2:	f7ff fc77 	bl	8000b94 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012aa:	f7ff fc73 	bl	8000b94 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e1a5      	b.n	8001608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012bc:	4b46      	ldr	r3, [pc, #280]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f0      	beq.n	80012aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c8:	4b43      	ldr	r3, [pc, #268]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	4940      	ldr	r1, [pc, #256]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	600b      	str	r3, [r1, #0]
 80012dc:	e015      	b.n	800130a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012de:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <HAL_RCC_OscConfig+0x2b0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fc56 	bl	8000b94 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ec:	f7ff fc52 	bl	8000b94 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e184      	b.n	8001608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fe:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	d030      	beq.n	8001378 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d016      	beq.n	800134c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131e:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <HAL_RCC_OscConfig+0x2b4>)
 8001320:	2201      	movs	r2, #1
 8001322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001324:	f7ff fc36 	bl	8000b94 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132c:	f7ff fc32 	bl	8000b94 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e164      	b.n	8001608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133e:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0x200>
 800134a:	e015      	b.n	8001378 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800134c:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <HAL_RCC_OscConfig+0x2b4>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001352:	f7ff fc1f 	bl	8000b94 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800135a:	f7ff fc1b 	bl	8000b94 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e14d      	b.n	8001608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800136e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f0      	bne.n	800135a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 80a0 	beq.w	80014c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10f      	bne.n	80013b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013b2:	2301      	movs	r3, #1
 80013b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_RCC_OscConfig+0x2b8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d121      	bne.n	8001406 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_RCC_OscConfig+0x2b8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_RCC_OscConfig+0x2b8>)
 80013c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ce:	f7ff fbe1 	bl	8000b94 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d4:	e011      	b.n	80013fa <HAL_RCC_OscConfig+0x2ce>
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	42470000 	.word	0x42470000
 80013e0:	42470e80 	.word	0x42470e80
 80013e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e8:	f7ff fbd4 	bl	8000b94 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e106      	b.n	8001608 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fa:	4b85      	ldr	r3, [pc, #532]	; (8001610 <HAL_RCC_OscConfig+0x4e4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d106      	bne.n	800141c <HAL_RCC_OscConfig+0x2f0>
 800140e:	4b81      	ldr	r3, [pc, #516]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001412:	4a80      	ldr	r2, [pc, #512]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6713      	str	r3, [r2, #112]	; 0x70
 800141a:	e01c      	b.n	8001456 <HAL_RCC_OscConfig+0x32a>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b05      	cmp	r3, #5
 8001422:	d10c      	bne.n	800143e <HAL_RCC_OscConfig+0x312>
 8001424:	4b7b      	ldr	r3, [pc, #492]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 8001426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001428:	4a7a      	ldr	r2, [pc, #488]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	6713      	str	r3, [r2, #112]	; 0x70
 8001430:	4b78      	ldr	r3, [pc, #480]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001434:	4a77      	ldr	r2, [pc, #476]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6713      	str	r3, [r2, #112]	; 0x70
 800143c:	e00b      	b.n	8001456 <HAL_RCC_OscConfig+0x32a>
 800143e:	4b75      	ldr	r3, [pc, #468]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 8001440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001442:	4a74      	ldr	r2, [pc, #464]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 8001444:	f023 0301 	bic.w	r3, r3, #1
 8001448:	6713      	str	r3, [r2, #112]	; 0x70
 800144a:	4b72      	ldr	r3, [pc, #456]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144e:	4a71      	ldr	r2, [pc, #452]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 8001450:	f023 0304 	bic.w	r3, r3, #4
 8001454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d015      	beq.n	800148a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145e:	f7ff fb99 	bl	8000b94 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001464:	e00a      	b.n	800147c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001466:	f7ff fb95 	bl	8000b94 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	f241 3288 	movw	r2, #5000	; 0x1388
 8001474:	4293      	cmp	r3, r2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e0c5      	b.n	8001608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147c:	4b65      	ldr	r3, [pc, #404]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0ee      	beq.n	8001466 <HAL_RCC_OscConfig+0x33a>
 8001488:	e014      	b.n	80014b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148a:	f7ff fb83 	bl	8000b94 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001490:	e00a      	b.n	80014a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001492:	f7ff fb7f 	bl	8000b94 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e0af      	b.n	8001608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a8:	4b5a      	ldr	r3, [pc, #360]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 80014aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1ee      	bne.n	8001492 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d105      	bne.n	80014c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ba:	4b56      	ldr	r3, [pc, #344]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a55      	ldr	r2, [pc, #340]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 80014c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 809b 	beq.w	8001606 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014d0:	4b50      	ldr	r3, [pc, #320]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d05c      	beq.n	8001596 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d141      	bne.n	8001568 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e4:	4b4c      	ldr	r3, [pc, #304]	; (8001618 <HAL_RCC_OscConfig+0x4ec>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ea:	f7ff fb53 	bl	8000b94 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f2:	f7ff fb4f 	bl	8000b94 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e081      	b.n	8001608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001504:	4b43      	ldr	r3, [pc, #268]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1f0      	bne.n	80014f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69da      	ldr	r2, [r3, #28]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	431a      	orrs	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	019b      	lsls	r3, r3, #6
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	085b      	lsrs	r3, r3, #1
 8001528:	3b01      	subs	r3, #1
 800152a:	041b      	lsls	r3, r3, #16
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001532:	061b      	lsls	r3, r3, #24
 8001534:	4937      	ldr	r1, [pc, #220]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 8001536:	4313      	orrs	r3, r2
 8001538:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800153a:	4b37      	ldr	r3, [pc, #220]	; (8001618 <HAL_RCC_OscConfig+0x4ec>)
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fb28 	bl	8000b94 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001548:	f7ff fb24 	bl	8000b94 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e056      	b.n	8001608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155a:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x41c>
 8001566:	e04e      	b.n	8001606 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001568:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <HAL_RCC_OscConfig+0x4ec>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff fb11 	bl	8000b94 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001576:	f7ff fb0d 	bl	8000b94 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e03f      	b.n	8001608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1f0      	bne.n	8001576 <HAL_RCC_OscConfig+0x44a>
 8001594:	e037      	b.n	8001606 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e032      	b.n	8001608 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <HAL_RCC_OscConfig+0x4e8>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d028      	beq.n	8001602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d121      	bne.n	8001602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d11a      	bne.n	8001602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015d2:	4013      	ands	r3, r2
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015da:	4293      	cmp	r3, r2
 80015dc:	d111      	bne.n	8001602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	085b      	lsrs	r3, r3, #1
 80015ea:	3b01      	subs	r3, #1
 80015ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015fe:	429a      	cmp	r2, r3
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40007000 	.word	0x40007000
 8001614:	40023800 	.word	0x40023800
 8001618:	42470060 	.word	0x42470060

0800161c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0cc      	b.n	80017ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001630:	4b68      	ldr	r3, [pc, #416]	; (80017d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d90c      	bls.n	8001658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163e:	4b65      	ldr	r3, [pc, #404]	; (80017d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001646:	4b63      	ldr	r3, [pc, #396]	; (80017d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d001      	beq.n	8001658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0b8      	b.n	80017ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d020      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001670:	4b59      	ldr	r3, [pc, #356]	; (80017d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	4a58      	ldr	r2, [pc, #352]	; (80017d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800167a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001688:	4b53      	ldr	r3, [pc, #332]	; (80017d8 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	4a52      	ldr	r2, [pc, #328]	; (80017d8 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001694:	4b50      	ldr	r3, [pc, #320]	; (80017d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	494d      	ldr	r1, [pc, #308]	; (80017d8 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d044      	beq.n	800173c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d107      	bne.n	80016ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ba:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d119      	bne.n	80016fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e07f      	b.n	80017ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d003      	beq.n	80016da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d107      	bne.n	80016ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016da:	4b3f      	ldr	r3, [pc, #252]	; (80017d8 <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d109      	bne.n	80016fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e06f      	b.n	80017ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ea:	4b3b      	ldr	r3, [pc, #236]	; (80017d8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e067      	b.n	80017ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fa:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f023 0203 	bic.w	r2, r3, #3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	4934      	ldr	r1, [pc, #208]	; (80017d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	4313      	orrs	r3, r2
 800170a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800170c:	f7ff fa42 	bl	8000b94 <HAL_GetTick>
 8001710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001712:	e00a      	b.n	800172a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001714:	f7ff fa3e 	bl	8000b94 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e04f      	b.n	80017ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172a:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 020c 	and.w	r2, r3, #12
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	429a      	cmp	r2, r3
 800173a:	d1eb      	bne.n	8001714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800173c:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <HAL_RCC_ClockConfig+0x1b8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d20c      	bcs.n	8001764 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e032      	b.n	80017ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d008      	beq.n	8001782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	4916      	ldr	r1, [pc, #88]	; (80017d8 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	4313      	orrs	r3, r2
 8001780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d009      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	490e      	ldr	r1, [pc, #56]	; (80017d8 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017a2:	f000 f821 	bl	80017e8 <HAL_RCC_GetSysClockFreq>
 80017a6:	4602      	mov	r2, r0
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	490a      	ldr	r1, [pc, #40]	; (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 80017b4:	5ccb      	ldrb	r3, [r1, r3]
 80017b6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ba:	4a09      	ldr	r2, [pc, #36]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff f9a2 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023c00 	.word	0x40023c00
 80017d8:	40023800 	.word	0x40023800
 80017dc:	08002e0c 	.word	0x08002e0c
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000004 	.word	0x20000004

080017e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	2300      	movs	r3, #0
 80017fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001800:	4b67      	ldr	r3, [pc, #412]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 030c 	and.w	r3, r3, #12
 8001808:	2b08      	cmp	r3, #8
 800180a:	d00d      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0x40>
 800180c:	2b08      	cmp	r3, #8
 800180e:	f200 80bd 	bhi.w	800198c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <HAL_RCC_GetSysClockFreq+0x34>
 8001816:	2b04      	cmp	r3, #4
 8001818:	d003      	beq.n	8001822 <HAL_RCC_GetSysClockFreq+0x3a>
 800181a:	e0b7      	b.n	800198c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800181c:	4b61      	ldr	r3, [pc, #388]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800181e:	60bb      	str	r3, [r7, #8]
       break;
 8001820:	e0b7      	b.n	8001992 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001822:	4b61      	ldr	r3, [pc, #388]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001824:	60bb      	str	r3, [r7, #8]
      break;
 8001826:	e0b4      	b.n	8001992 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001828:	4b5d      	ldr	r3, [pc, #372]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001830:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001832:	4b5b      	ldr	r3, [pc, #364]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d04d      	beq.n	80018da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183e:	4b58      	ldr	r3, [pc, #352]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	099b      	lsrs	r3, r3, #6
 8001844:	461a      	mov	r2, r3
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800184e:	f04f 0100 	mov.w	r1, #0
 8001852:	ea02 0800 	and.w	r8, r2, r0
 8001856:	ea03 0901 	and.w	r9, r3, r1
 800185a:	4640      	mov	r0, r8
 800185c:	4649      	mov	r1, r9
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	014b      	lsls	r3, r1, #5
 8001868:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800186c:	0142      	lsls	r2, r0, #5
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	ebb0 0008 	subs.w	r0, r0, r8
 8001876:	eb61 0109 	sbc.w	r1, r1, r9
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	018b      	lsls	r3, r1, #6
 8001884:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001888:	0182      	lsls	r2, r0, #6
 800188a:	1a12      	subs	r2, r2, r0
 800188c:	eb63 0301 	sbc.w	r3, r3, r1
 8001890:	f04f 0000 	mov.w	r0, #0
 8001894:	f04f 0100 	mov.w	r1, #0
 8001898:	00d9      	lsls	r1, r3, #3
 800189a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800189e:	00d0      	lsls	r0, r2, #3
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	eb12 0208 	adds.w	r2, r2, r8
 80018a8:	eb43 0309 	adc.w	r3, r3, r9
 80018ac:	f04f 0000 	mov.w	r0, #0
 80018b0:	f04f 0100 	mov.w	r1, #0
 80018b4:	0259      	lsls	r1, r3, #9
 80018b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80018ba:	0250      	lsls	r0, r2, #9
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	461a      	mov	r2, r3
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	f7fe fcd8 	bl	8000280 <__aeabi_uldivmod>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4613      	mov	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e04a      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018da:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	099b      	lsrs	r3, r3, #6
 80018e0:	461a      	mov	r2, r3
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018ea:	f04f 0100 	mov.w	r1, #0
 80018ee:	ea02 0400 	and.w	r4, r2, r0
 80018f2:	ea03 0501 	and.w	r5, r3, r1
 80018f6:	4620      	mov	r0, r4
 80018f8:	4629      	mov	r1, r5
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	014b      	lsls	r3, r1, #5
 8001904:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001908:	0142      	lsls	r2, r0, #5
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	1b00      	subs	r0, r0, r4
 8001910:	eb61 0105 	sbc.w	r1, r1, r5
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	018b      	lsls	r3, r1, #6
 800191e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001922:	0182      	lsls	r2, r0, #6
 8001924:	1a12      	subs	r2, r2, r0
 8001926:	eb63 0301 	sbc.w	r3, r3, r1
 800192a:	f04f 0000 	mov.w	r0, #0
 800192e:	f04f 0100 	mov.w	r1, #0
 8001932:	00d9      	lsls	r1, r3, #3
 8001934:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001938:	00d0      	lsls	r0, r2, #3
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	1912      	adds	r2, r2, r4
 8001940:	eb45 0303 	adc.w	r3, r5, r3
 8001944:	f04f 0000 	mov.w	r0, #0
 8001948:	f04f 0100 	mov.w	r1, #0
 800194c:	0299      	lsls	r1, r3, #10
 800194e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001952:	0290      	lsls	r0, r2, #10
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	461a      	mov	r2, r3
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	f7fe fc8c 	bl	8000280 <__aeabi_uldivmod>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4613      	mov	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	0c1b      	lsrs	r3, r3, #16
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	3301      	adds	r3, #1
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	fbb2 f3f3 	udiv	r3, r2, r3
 8001988:	60bb      	str	r3, [r7, #8]
      break;
 800198a:	e002      	b.n	8001992 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800198e:	60bb      	str	r3, [r7, #8]
      break;
 8001990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001992:	68bb      	ldr	r3, [r7, #8]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	00f42400 	.word	0x00f42400
 80019a8:	007a1200 	.word	0x007a1200

080019ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000000 	.word	0x20000000

080019c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019c8:	f7ff fff0 	bl	80019ac <HAL_RCC_GetHCLKFreq>
 80019cc:	4602      	mov	r2, r0
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	0a9b      	lsrs	r3, r3, #10
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	4903      	ldr	r1, [pc, #12]	; (80019e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019da:	5ccb      	ldrb	r3, [r1, r3]
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40023800 	.word	0x40023800
 80019e8:	08002e1c 	.word	0x08002e1c

080019ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019f0:	f7ff ffdc 	bl	80019ac <HAL_RCC_GetHCLKFreq>
 80019f4:	4602      	mov	r2, r0
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	0b5b      	lsrs	r3, r3, #13
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	4903      	ldr	r1, [pc, #12]	; (8001a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a02:	5ccb      	ldrb	r3, [r1, r3]
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	08002e1c 	.word	0x08002e1c

08001a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e03f      	b.n	8001aa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7fe ff60 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2224      	movs	r2, #36	; 0x24
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f9cb 	bl	8001df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b08a      	sub	sp, #40	; 0x28
 8001ab2:	af02      	add	r7, sp, #8
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4613      	mov	r3, r2
 8001abc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b20      	cmp	r3, #32
 8001acc:	d17c      	bne.n	8001bc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <HAL_UART_Transmit+0x2c>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e075      	b.n	8001bca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_UART_Transmit+0x3e>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e06e      	b.n	8001bca <HAL_UART_Transmit+0x11c>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2221      	movs	r2, #33	; 0x21
 8001afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b02:	f7ff f847 	bl	8000b94 <HAL_GetTick>
 8001b06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	88fa      	ldrh	r2, [r7, #6]
 8001b0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	88fa      	ldrh	r2, [r7, #6]
 8001b12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b1c:	d108      	bne.n	8001b30 <HAL_UART_Transmit+0x82>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d104      	bne.n	8001b30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	e003      	b.n	8001b38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b40:	e02a      	b.n	8001b98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2180      	movs	r1, #128	; 0x80
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 f8e2 	bl	8001d16 <UART_WaitOnFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e036      	b.n	8001bca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10b      	bne.n	8001b7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	3302      	adds	r3, #2
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	e007      	b.n	8001b8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	781a      	ldrb	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	3301      	adds	r3, #1
 8001b88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1cf      	bne.n	8001b42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2140      	movs	r1, #64	; 0x40
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f8b2 	bl	8001d16 <UART_WaitOnFlagUntilTimeout>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e006      	b.n	8001bca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e000      	b.n	8001bca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001bc8:	2302      	movs	r3, #2
  }
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3720      	adds	r7, #32
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b08a      	sub	sp, #40	; 0x28
 8001bd6:	af02      	add	r7, sp, #8
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	4613      	mov	r3, r2
 8001be0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b20      	cmp	r3, #32
 8001bf0:	f040 808c 	bne.w	8001d0c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <HAL_UART_Receive+0x2e>
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e084      	b.n	8001d0e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_UART_Receive+0x40>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e07d      	b.n	8001d0e <HAL_UART_Receive+0x13c>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2222      	movs	r2, #34	; 0x22
 8001c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c2e:	f7fe ffb1 	bl	8000b94 <HAL_GetTick>
 8001c32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	88fa      	ldrh	r2, [r7, #6]
 8001c38:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	88fa      	ldrh	r2, [r7, #6]
 8001c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c48:	d108      	bne.n	8001c5c <HAL_UART_Receive+0x8a>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d104      	bne.n	8001c5c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	e003      	b.n	8001c64 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001c6c:	e043      	b.n	8001cf6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2200      	movs	r2, #0
 8001c76:	2120      	movs	r1, #32
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f84c 	bl	8001d16 <UART_WaitOnFlagUntilTimeout>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e042      	b.n	8001d0e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	e01f      	b.n	8001ce8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cb0:	d007      	beq.n	8001cc2 <HAL_UART_Receive+0xf0>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10a      	bne.n	8001cd0 <HAL_UART_Receive+0xfe>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	701a      	strb	r2, [r3, #0]
 8001cce:	e008      	b.n	8001ce2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1b6      	bne.n	8001c6e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2220      	movs	r2, #32
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e000      	b.n	8001d0e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001d0c:	2302      	movs	r3, #2
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3720      	adds	r7, #32
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b090      	sub	sp, #64	; 0x40
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	4613      	mov	r3, r2
 8001d24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d26:	e050      	b.n	8001dca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2e:	d04c      	beq.n	8001dca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d36:	f7fe ff2d 	bl	8000b94 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d241      	bcs.n	8001dca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	330c      	adds	r3, #12
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d50:	e853 3f00 	ldrex	r3, [r3]
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	330c      	adds	r3, #12
 8001d64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d66:	637a      	str	r2, [r7, #52]	; 0x34
 8001d68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d6e:	e841 2300 	strex	r3, r2, [r1]
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1e5      	bne.n	8001d46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	3314      	adds	r3, #20
 8001d80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	e853 3f00 	ldrex	r3, [r3]
 8001d88:	613b      	str	r3, [r7, #16]
   return(result);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	3314      	adds	r3, #20
 8001d98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d9a:	623a      	str	r2, [r7, #32]
 8001d9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d9e:	69f9      	ldr	r1, [r7, #28]
 8001da0:	6a3a      	ldr	r2, [r7, #32]
 8001da2:	e841 2300 	strex	r3, r2, [r1]
 8001da6:	61bb      	str	r3, [r7, #24]
   return(result);
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1e5      	bne.n	8001d7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2220      	movs	r2, #32
 8001dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e00f      	b.n	8001dea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	bf0c      	ite	eq
 8001dda:	2301      	moveq	r3, #1
 8001ddc:	2300      	movne	r3, #0
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d09f      	beq.n	8001d28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3740      	adds	r7, #64	; 0x40
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001df8:	b09f      	sub	sp, #124	; 0x7c
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0a:	68d9      	ldr	r1, [r3, #12]
 8001e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	ea40 0301 	orr.w	r3, r0, r1
 8001e14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001e38:	f021 010c 	bic.w	r1, r1, #12
 8001e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e42:	430b      	orrs	r3, r1
 8001e44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e52:	6999      	ldr	r1, [r3, #24]
 8001e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	ea40 0301 	orr.w	r3, r0, r1
 8001e5c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4bc5      	ldr	r3, [pc, #788]	; (8002178 <UART_SetConfig+0x384>)
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d004      	beq.n	8001e72 <UART_SetConfig+0x7e>
 8001e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4bc3      	ldr	r3, [pc, #780]	; (800217c <UART_SetConfig+0x388>)
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d103      	bne.n	8001e7a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e72:	f7ff fdbb 	bl	80019ec <HAL_RCC_GetPCLK2Freq>
 8001e76:	6778      	str	r0, [r7, #116]	; 0x74
 8001e78:	e002      	b.n	8001e80 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e7a:	f7ff fda3 	bl	80019c4 <HAL_RCC_GetPCLK1Freq>
 8001e7e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e88:	f040 80b6 	bne.w	8001ff8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e8e:	461c      	mov	r4, r3
 8001e90:	f04f 0500 	mov.w	r5, #0
 8001e94:	4622      	mov	r2, r4
 8001e96:	462b      	mov	r3, r5
 8001e98:	1891      	adds	r1, r2, r2
 8001e9a:	6439      	str	r1, [r7, #64]	; 0x40
 8001e9c:	415b      	adcs	r3, r3
 8001e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8001ea0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ea4:	1912      	adds	r2, r2, r4
 8001ea6:	eb45 0303 	adc.w	r3, r5, r3
 8001eaa:	f04f 0000 	mov.w	r0, #0
 8001eae:	f04f 0100 	mov.w	r1, #0
 8001eb2:	00d9      	lsls	r1, r3, #3
 8001eb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001eb8:	00d0      	lsls	r0, r2, #3
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	1911      	adds	r1, r2, r4
 8001ec0:	6639      	str	r1, [r7, #96]	; 0x60
 8001ec2:	416b      	adcs	r3, r5
 8001ec4:	667b      	str	r3, [r7, #100]	; 0x64
 8001ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	1891      	adds	r1, r2, r2
 8001ed2:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ed4:	415b      	adcs	r3, r3
 8001ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001edc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ee0:	f7fe f9ce 	bl	8000280 <__aeabi_uldivmod>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4ba5      	ldr	r3, [pc, #660]	; (8002180 <UART_SetConfig+0x38c>)
 8001eea:	fba3 2302 	umull	r2, r3, r3, r2
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	011e      	lsls	r6, r3, #4
 8001ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ef4:	461c      	mov	r4, r3
 8001ef6:	f04f 0500 	mov.w	r5, #0
 8001efa:	4622      	mov	r2, r4
 8001efc:	462b      	mov	r3, r5
 8001efe:	1891      	adds	r1, r2, r2
 8001f00:	6339      	str	r1, [r7, #48]	; 0x30
 8001f02:	415b      	adcs	r3, r3
 8001f04:	637b      	str	r3, [r7, #52]	; 0x34
 8001f06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f0a:	1912      	adds	r2, r2, r4
 8001f0c:	eb45 0303 	adc.w	r3, r5, r3
 8001f10:	f04f 0000 	mov.w	r0, #0
 8001f14:	f04f 0100 	mov.w	r1, #0
 8001f18:	00d9      	lsls	r1, r3, #3
 8001f1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f1e:	00d0      	lsls	r0, r2, #3
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	1911      	adds	r1, r2, r4
 8001f26:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f28:	416b      	adcs	r3, r5
 8001f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	461a      	mov	r2, r3
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	1891      	adds	r1, r2, r2
 8001f38:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f3a:	415b      	adcs	r3, r3
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001f46:	f7fe f99b 	bl	8000280 <__aeabi_uldivmod>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4b8c      	ldr	r3, [pc, #560]	; (8002180 <UART_SetConfig+0x38c>)
 8001f50:	fba3 1302 	umull	r1, r3, r3, r2
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	2164      	movs	r1, #100	; 0x64
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	3332      	adds	r3, #50	; 0x32
 8001f62:	4a87      	ldr	r2, [pc, #540]	; (8002180 <UART_SetConfig+0x38c>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	095b      	lsrs	r3, r3, #5
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f70:	441e      	add	r6, r3
 8001f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f74:	4618      	mov	r0, r3
 8001f76:	f04f 0100 	mov.w	r1, #0
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	1894      	adds	r4, r2, r2
 8001f80:	623c      	str	r4, [r7, #32]
 8001f82:	415b      	adcs	r3, r3
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f8a:	1812      	adds	r2, r2, r0
 8001f8c:	eb41 0303 	adc.w	r3, r1, r3
 8001f90:	f04f 0400 	mov.w	r4, #0
 8001f94:	f04f 0500 	mov.w	r5, #0
 8001f98:	00dd      	lsls	r5, r3, #3
 8001f9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f9e:	00d4      	lsls	r4, r2, #3
 8001fa0:	4622      	mov	r2, r4
 8001fa2:	462b      	mov	r3, r5
 8001fa4:	1814      	adds	r4, r2, r0
 8001fa6:	653c      	str	r4, [r7, #80]	; 0x50
 8001fa8:	414b      	adcs	r3, r1
 8001faa:	657b      	str	r3, [r7, #84]	; 0x54
 8001fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	1891      	adds	r1, r2, r2
 8001fb8:	61b9      	str	r1, [r7, #24]
 8001fba:	415b      	adcs	r3, r3
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fc2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001fc6:	f7fe f95b 	bl	8000280 <__aeabi_uldivmod>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4b6c      	ldr	r3, [pc, #432]	; (8002180 <UART_SetConfig+0x38c>)
 8001fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	2164      	movs	r1, #100	; 0x64
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	3332      	adds	r3, #50	; 0x32
 8001fe2:	4a67      	ldr	r2, [pc, #412]	; (8002180 <UART_SetConfig+0x38c>)
 8001fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe8:	095b      	lsrs	r3, r3, #5
 8001fea:	f003 0207 	and.w	r2, r3, #7
 8001fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4432      	add	r2, r6
 8001ff4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001ff6:	e0b9      	b.n	800216c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ffa:	461c      	mov	r4, r3
 8001ffc:	f04f 0500 	mov.w	r5, #0
 8002000:	4622      	mov	r2, r4
 8002002:	462b      	mov	r3, r5
 8002004:	1891      	adds	r1, r2, r2
 8002006:	6139      	str	r1, [r7, #16]
 8002008:	415b      	adcs	r3, r3
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002010:	1912      	adds	r2, r2, r4
 8002012:	eb45 0303 	adc.w	r3, r5, r3
 8002016:	f04f 0000 	mov.w	r0, #0
 800201a:	f04f 0100 	mov.w	r1, #0
 800201e:	00d9      	lsls	r1, r3, #3
 8002020:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002024:	00d0      	lsls	r0, r2, #3
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	eb12 0804 	adds.w	r8, r2, r4
 800202e:	eb43 0905 	adc.w	r9, r3, r5
 8002032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4618      	mov	r0, r3
 8002038:	f04f 0100 	mov.w	r1, #0
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	008b      	lsls	r3, r1, #2
 8002046:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800204a:	0082      	lsls	r2, r0, #2
 800204c:	4640      	mov	r0, r8
 800204e:	4649      	mov	r1, r9
 8002050:	f7fe f916 	bl	8000280 <__aeabi_uldivmod>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4b49      	ldr	r3, [pc, #292]	; (8002180 <UART_SetConfig+0x38c>)
 800205a:	fba3 2302 	umull	r2, r3, r3, r2
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	011e      	lsls	r6, r3, #4
 8002062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002064:	4618      	mov	r0, r3
 8002066:	f04f 0100 	mov.w	r1, #0
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	1894      	adds	r4, r2, r2
 8002070:	60bc      	str	r4, [r7, #8]
 8002072:	415b      	adcs	r3, r3
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800207a:	1812      	adds	r2, r2, r0
 800207c:	eb41 0303 	adc.w	r3, r1, r3
 8002080:	f04f 0400 	mov.w	r4, #0
 8002084:	f04f 0500 	mov.w	r5, #0
 8002088:	00dd      	lsls	r5, r3, #3
 800208a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800208e:	00d4      	lsls	r4, r2, #3
 8002090:	4622      	mov	r2, r4
 8002092:	462b      	mov	r3, r5
 8002094:	1814      	adds	r4, r2, r0
 8002096:	64bc      	str	r4, [r7, #72]	; 0x48
 8002098:	414b      	adcs	r3, r1
 800209a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800209c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f04f 0100 	mov.w	r1, #0
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	008b      	lsls	r3, r1, #2
 80020b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80020b4:	0082      	lsls	r2, r0, #2
 80020b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80020ba:	f7fe f8e1 	bl	8000280 <__aeabi_uldivmod>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <UART_SetConfig+0x38c>)
 80020c4:	fba3 1302 	umull	r1, r3, r3, r2
 80020c8:	095b      	lsrs	r3, r3, #5
 80020ca:	2164      	movs	r1, #100	; 0x64
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	3332      	adds	r3, #50	; 0x32
 80020d6:	4a2a      	ldr	r2, [pc, #168]	; (8002180 <UART_SetConfig+0x38c>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	095b      	lsrs	r3, r3, #5
 80020de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e2:	441e      	add	r6, r3
 80020e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020e6:	4618      	mov	r0, r3
 80020e8:	f04f 0100 	mov.w	r1, #0
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	1894      	adds	r4, r2, r2
 80020f2:	603c      	str	r4, [r7, #0]
 80020f4:	415b      	adcs	r3, r3
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020fc:	1812      	adds	r2, r2, r0
 80020fe:	eb41 0303 	adc.w	r3, r1, r3
 8002102:	f04f 0400 	mov.w	r4, #0
 8002106:	f04f 0500 	mov.w	r5, #0
 800210a:	00dd      	lsls	r5, r3, #3
 800210c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002110:	00d4      	lsls	r4, r2, #3
 8002112:	4622      	mov	r2, r4
 8002114:	462b      	mov	r3, r5
 8002116:	eb12 0a00 	adds.w	sl, r2, r0
 800211a:	eb43 0b01 	adc.w	fp, r3, r1
 800211e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4618      	mov	r0, r3
 8002124:	f04f 0100 	mov.w	r1, #0
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	008b      	lsls	r3, r1, #2
 8002132:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002136:	0082      	lsls	r2, r0, #2
 8002138:	4650      	mov	r0, sl
 800213a:	4659      	mov	r1, fp
 800213c:	f7fe f8a0 	bl	8000280 <__aeabi_uldivmod>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <UART_SetConfig+0x38c>)
 8002146:	fba3 1302 	umull	r1, r3, r3, r2
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	2164      	movs	r1, #100	; 0x64
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	3332      	adds	r3, #50	; 0x32
 8002158:	4a09      	ldr	r2, [pc, #36]	; (8002180 <UART_SetConfig+0x38c>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	f003 020f 	and.w	r2, r3, #15
 8002164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4432      	add	r2, r6
 800216a:	609a      	str	r2, [r3, #8]
}
 800216c:	bf00      	nop
 800216e:	377c      	adds	r7, #124	; 0x7c
 8002170:	46bd      	mov	sp, r7
 8002172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002176:	bf00      	nop
 8002178:	40011000 	.word	0x40011000
 800217c:	40011400 	.word	0x40011400
 8002180:	51eb851f 	.word	0x51eb851f

08002184 <__errno>:
 8002184:	4b01      	ldr	r3, [pc, #4]	; (800218c <__errno+0x8>)
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	2000000c 	.word	0x2000000c

08002190 <__libc_init_array>:
 8002190:	b570      	push	{r4, r5, r6, lr}
 8002192:	4d0d      	ldr	r5, [pc, #52]	; (80021c8 <__libc_init_array+0x38>)
 8002194:	4c0d      	ldr	r4, [pc, #52]	; (80021cc <__libc_init_array+0x3c>)
 8002196:	1b64      	subs	r4, r4, r5
 8002198:	10a4      	asrs	r4, r4, #2
 800219a:	2600      	movs	r6, #0
 800219c:	42a6      	cmp	r6, r4
 800219e:	d109      	bne.n	80021b4 <__libc_init_array+0x24>
 80021a0:	4d0b      	ldr	r5, [pc, #44]	; (80021d0 <__libc_init_array+0x40>)
 80021a2:	4c0c      	ldr	r4, [pc, #48]	; (80021d4 <__libc_init_array+0x44>)
 80021a4:	f000 fde8 	bl	8002d78 <_init>
 80021a8:	1b64      	subs	r4, r4, r5
 80021aa:	10a4      	asrs	r4, r4, #2
 80021ac:	2600      	movs	r6, #0
 80021ae:	42a6      	cmp	r6, r4
 80021b0:	d105      	bne.n	80021be <__libc_init_array+0x2e>
 80021b2:	bd70      	pop	{r4, r5, r6, pc}
 80021b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b8:	4798      	blx	r3
 80021ba:	3601      	adds	r6, #1
 80021bc:	e7ee      	b.n	800219c <__libc_init_array+0xc>
 80021be:	f855 3b04 	ldr.w	r3, [r5], #4
 80021c2:	4798      	blx	r3
 80021c4:	3601      	adds	r6, #1
 80021c6:	e7f2      	b.n	80021ae <__libc_init_array+0x1e>
 80021c8:	08002fac 	.word	0x08002fac
 80021cc:	08002fac 	.word	0x08002fac
 80021d0:	08002fac 	.word	0x08002fac
 80021d4:	08002fb0 	.word	0x08002fb0

080021d8 <memcpy>:
 80021d8:	440a      	add	r2, r1
 80021da:	4291      	cmp	r1, r2
 80021dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80021e0:	d100      	bne.n	80021e4 <memcpy+0xc>
 80021e2:	4770      	bx	lr
 80021e4:	b510      	push	{r4, lr}
 80021e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021ee:	4291      	cmp	r1, r2
 80021f0:	d1f9      	bne.n	80021e6 <memcpy+0xe>
 80021f2:	bd10      	pop	{r4, pc}

080021f4 <memset>:
 80021f4:	4402      	add	r2, r0
 80021f6:	4603      	mov	r3, r0
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d100      	bne.n	80021fe <memset+0xa>
 80021fc:	4770      	bx	lr
 80021fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002202:	e7f9      	b.n	80021f8 <memset+0x4>

08002204 <siscanf>:
 8002204:	b40e      	push	{r1, r2, r3}
 8002206:	b510      	push	{r4, lr}
 8002208:	b09f      	sub	sp, #124	; 0x7c
 800220a:	ac21      	add	r4, sp, #132	; 0x84
 800220c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8002210:	f854 2b04 	ldr.w	r2, [r4], #4
 8002214:	9201      	str	r2, [sp, #4]
 8002216:	f8ad 101c 	strh.w	r1, [sp, #28]
 800221a:	9004      	str	r0, [sp, #16]
 800221c:	9008      	str	r0, [sp, #32]
 800221e:	f7fd ffd7 	bl	80001d0 <strlen>
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <siscanf+0x50>)
 8002224:	9005      	str	r0, [sp, #20]
 8002226:	9009      	str	r0, [sp, #36]	; 0x24
 8002228:	930d      	str	r3, [sp, #52]	; 0x34
 800222a:	480b      	ldr	r0, [pc, #44]	; (8002258 <siscanf+0x54>)
 800222c:	9a01      	ldr	r2, [sp, #4]
 800222e:	6800      	ldr	r0, [r0, #0]
 8002230:	9403      	str	r4, [sp, #12]
 8002232:	2300      	movs	r3, #0
 8002234:	9311      	str	r3, [sp, #68]	; 0x44
 8002236:	9316      	str	r3, [sp, #88]	; 0x58
 8002238:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800223c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8002240:	a904      	add	r1, sp, #16
 8002242:	4623      	mov	r3, r4
 8002244:	f000 f866 	bl	8002314 <__ssvfiscanf_r>
 8002248:	b01f      	add	sp, #124	; 0x7c
 800224a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800224e:	b003      	add	sp, #12
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	0800225d 	.word	0x0800225d
 8002258:	2000000c 	.word	0x2000000c

0800225c <__seofread>:
 800225c:	2000      	movs	r0, #0
 800225e:	4770      	bx	lr

08002260 <_sungetc_r>:
 8002260:	b538      	push	{r3, r4, r5, lr}
 8002262:	1c4b      	adds	r3, r1, #1
 8002264:	4614      	mov	r4, r2
 8002266:	d103      	bne.n	8002270 <_sungetc_r+0x10>
 8002268:	f04f 35ff 	mov.w	r5, #4294967295
 800226c:	4628      	mov	r0, r5
 800226e:	bd38      	pop	{r3, r4, r5, pc}
 8002270:	8993      	ldrh	r3, [r2, #12]
 8002272:	f023 0320 	bic.w	r3, r3, #32
 8002276:	8193      	strh	r3, [r2, #12]
 8002278:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800227a:	6852      	ldr	r2, [r2, #4]
 800227c:	b2cd      	uxtb	r5, r1
 800227e:	b18b      	cbz	r3, 80022a4 <_sungetc_r+0x44>
 8002280:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002282:	4293      	cmp	r3, r2
 8002284:	dd08      	ble.n	8002298 <_sungetc_r+0x38>
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	1e5a      	subs	r2, r3, #1
 800228a:	6022      	str	r2, [r4, #0]
 800228c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002290:	6863      	ldr	r3, [r4, #4]
 8002292:	3301      	adds	r3, #1
 8002294:	6063      	str	r3, [r4, #4]
 8002296:	e7e9      	b.n	800226c <_sungetc_r+0xc>
 8002298:	4621      	mov	r1, r4
 800229a:	f000 fc3d 	bl	8002b18 <__submore>
 800229e:	2800      	cmp	r0, #0
 80022a0:	d0f1      	beq.n	8002286 <_sungetc_r+0x26>
 80022a2:	e7e1      	b.n	8002268 <_sungetc_r+0x8>
 80022a4:	6921      	ldr	r1, [r4, #16]
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	b151      	cbz	r1, 80022c0 <_sungetc_r+0x60>
 80022aa:	4299      	cmp	r1, r3
 80022ac:	d208      	bcs.n	80022c0 <_sungetc_r+0x60>
 80022ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80022b2:	42a9      	cmp	r1, r5
 80022b4:	d104      	bne.n	80022c0 <_sungetc_r+0x60>
 80022b6:	3b01      	subs	r3, #1
 80022b8:	3201      	adds	r2, #1
 80022ba:	6023      	str	r3, [r4, #0]
 80022bc:	6062      	str	r2, [r4, #4]
 80022be:	e7d5      	b.n	800226c <_sungetc_r+0xc>
 80022c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80022c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022c8:	6363      	str	r3, [r4, #52]	; 0x34
 80022ca:	2303      	movs	r3, #3
 80022cc:	63a3      	str	r3, [r4, #56]	; 0x38
 80022ce:	4623      	mov	r3, r4
 80022d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80022d4:	6023      	str	r3, [r4, #0]
 80022d6:	2301      	movs	r3, #1
 80022d8:	e7dc      	b.n	8002294 <_sungetc_r+0x34>

080022da <__ssrefill_r>:
 80022da:	b510      	push	{r4, lr}
 80022dc:	460c      	mov	r4, r1
 80022de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80022e0:	b169      	cbz	r1, 80022fe <__ssrefill_r+0x24>
 80022e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022e6:	4299      	cmp	r1, r3
 80022e8:	d001      	beq.n	80022ee <__ssrefill_r+0x14>
 80022ea:	f000 fc51 	bl	8002b90 <_free_r>
 80022ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022f0:	6063      	str	r3, [r4, #4]
 80022f2:	2000      	movs	r0, #0
 80022f4:	6360      	str	r0, [r4, #52]	; 0x34
 80022f6:	b113      	cbz	r3, 80022fe <__ssrefill_r+0x24>
 80022f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80022fa:	6023      	str	r3, [r4, #0]
 80022fc:	bd10      	pop	{r4, pc}
 80022fe:	6923      	ldr	r3, [r4, #16]
 8002300:	6023      	str	r3, [r4, #0]
 8002302:	2300      	movs	r3, #0
 8002304:	6063      	str	r3, [r4, #4]
 8002306:	89a3      	ldrh	r3, [r4, #12]
 8002308:	f043 0320 	orr.w	r3, r3, #32
 800230c:	81a3      	strh	r3, [r4, #12]
 800230e:	f04f 30ff 	mov.w	r0, #4294967295
 8002312:	e7f3      	b.n	80022fc <__ssrefill_r+0x22>

08002314 <__ssvfiscanf_r>:
 8002314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002318:	460c      	mov	r4, r1
 800231a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800231e:	2100      	movs	r1, #0
 8002320:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8002324:	49b2      	ldr	r1, [pc, #712]	; (80025f0 <__ssvfiscanf_r+0x2dc>)
 8002326:	91a0      	str	r1, [sp, #640]	; 0x280
 8002328:	f10d 0804 	add.w	r8, sp, #4
 800232c:	49b1      	ldr	r1, [pc, #708]	; (80025f4 <__ssvfiscanf_r+0x2e0>)
 800232e:	4fb2      	ldr	r7, [pc, #712]	; (80025f8 <__ssvfiscanf_r+0x2e4>)
 8002330:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80025fc <__ssvfiscanf_r+0x2e8>
 8002334:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8002338:	4606      	mov	r6, r0
 800233a:	91a1      	str	r1, [sp, #644]	; 0x284
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	f892 a000 	ldrb.w	sl, [r2]
 8002342:	f1ba 0f00 	cmp.w	sl, #0
 8002346:	f000 8151 	beq.w	80025ec <__ssvfiscanf_r+0x2d8>
 800234a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800234e:	f013 0308 	ands.w	r3, r3, #8
 8002352:	f102 0501 	add.w	r5, r2, #1
 8002356:	d019      	beq.n	800238c <__ssvfiscanf_r+0x78>
 8002358:	6863      	ldr	r3, [r4, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	dd0f      	ble.n	800237e <__ssvfiscanf_r+0x6a>
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	781a      	ldrb	r2, [r3, #0]
 8002362:	5cba      	ldrb	r2, [r7, r2]
 8002364:	0712      	lsls	r2, r2, #28
 8002366:	d401      	bmi.n	800236c <__ssvfiscanf_r+0x58>
 8002368:	462a      	mov	r2, r5
 800236a:	e7e8      	b.n	800233e <__ssvfiscanf_r+0x2a>
 800236c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800236e:	3201      	adds	r2, #1
 8002370:	9245      	str	r2, [sp, #276]	; 0x114
 8002372:	6862      	ldr	r2, [r4, #4]
 8002374:	3301      	adds	r3, #1
 8002376:	3a01      	subs	r2, #1
 8002378:	6062      	str	r2, [r4, #4]
 800237a:	6023      	str	r3, [r4, #0]
 800237c:	e7ec      	b.n	8002358 <__ssvfiscanf_r+0x44>
 800237e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002380:	4621      	mov	r1, r4
 8002382:	4630      	mov	r0, r6
 8002384:	4798      	blx	r3
 8002386:	2800      	cmp	r0, #0
 8002388:	d0e9      	beq.n	800235e <__ssvfiscanf_r+0x4a>
 800238a:	e7ed      	b.n	8002368 <__ssvfiscanf_r+0x54>
 800238c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8002390:	f040 8083 	bne.w	800249a <__ssvfiscanf_r+0x186>
 8002394:	9341      	str	r3, [sp, #260]	; 0x104
 8002396:	9343      	str	r3, [sp, #268]	; 0x10c
 8002398:	7853      	ldrb	r3, [r2, #1]
 800239a:	2b2a      	cmp	r3, #42	; 0x2a
 800239c:	bf02      	ittt	eq
 800239e:	2310      	moveq	r3, #16
 80023a0:	1c95      	addeq	r5, r2, #2
 80023a2:	9341      	streq	r3, [sp, #260]	; 0x104
 80023a4:	220a      	movs	r2, #10
 80023a6:	46ab      	mov	fp, r5
 80023a8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80023ac:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80023b0:	2b09      	cmp	r3, #9
 80023b2:	d91d      	bls.n	80023f0 <__ssvfiscanf_r+0xdc>
 80023b4:	4891      	ldr	r0, [pc, #580]	; (80025fc <__ssvfiscanf_r+0x2e8>)
 80023b6:	2203      	movs	r2, #3
 80023b8:	f7fd ff12 	bl	80001e0 <memchr>
 80023bc:	b140      	cbz	r0, 80023d0 <__ssvfiscanf_r+0xbc>
 80023be:	2301      	movs	r3, #1
 80023c0:	eba0 0009 	sub.w	r0, r0, r9
 80023c4:	fa03 f000 	lsl.w	r0, r3, r0
 80023c8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80023ca:	4318      	orrs	r0, r3
 80023cc:	9041      	str	r0, [sp, #260]	; 0x104
 80023ce:	465d      	mov	r5, fp
 80023d0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80023d4:	2b78      	cmp	r3, #120	; 0x78
 80023d6:	d806      	bhi.n	80023e6 <__ssvfiscanf_r+0xd2>
 80023d8:	2b57      	cmp	r3, #87	; 0x57
 80023da:	d810      	bhi.n	80023fe <__ssvfiscanf_r+0xea>
 80023dc:	2b25      	cmp	r3, #37	; 0x25
 80023de:	d05c      	beq.n	800249a <__ssvfiscanf_r+0x186>
 80023e0:	d856      	bhi.n	8002490 <__ssvfiscanf_r+0x17c>
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d074      	beq.n	80024d0 <__ssvfiscanf_r+0x1bc>
 80023e6:	2303      	movs	r3, #3
 80023e8:	9347      	str	r3, [sp, #284]	; 0x11c
 80023ea:	230a      	movs	r3, #10
 80023ec:	9342      	str	r3, [sp, #264]	; 0x108
 80023ee:	e081      	b.n	80024f4 <__ssvfiscanf_r+0x1e0>
 80023f0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80023f2:	fb02 1303 	mla	r3, r2, r3, r1
 80023f6:	3b30      	subs	r3, #48	; 0x30
 80023f8:	9343      	str	r3, [sp, #268]	; 0x10c
 80023fa:	465d      	mov	r5, fp
 80023fc:	e7d3      	b.n	80023a6 <__ssvfiscanf_r+0x92>
 80023fe:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8002402:	2a20      	cmp	r2, #32
 8002404:	d8ef      	bhi.n	80023e6 <__ssvfiscanf_r+0xd2>
 8002406:	a101      	add	r1, pc, #4	; (adr r1, 800240c <__ssvfiscanf_r+0xf8>)
 8002408:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800240c:	080024df 	.word	0x080024df
 8002410:	080023e7 	.word	0x080023e7
 8002414:	080023e7 	.word	0x080023e7
 8002418:	0800253d 	.word	0x0800253d
 800241c:	080023e7 	.word	0x080023e7
 8002420:	080023e7 	.word	0x080023e7
 8002424:	080023e7 	.word	0x080023e7
 8002428:	080023e7 	.word	0x080023e7
 800242c:	080023e7 	.word	0x080023e7
 8002430:	080023e7 	.word	0x080023e7
 8002434:	080023e7 	.word	0x080023e7
 8002438:	08002553 	.word	0x08002553
 800243c:	08002529 	.word	0x08002529
 8002440:	08002497 	.word	0x08002497
 8002444:	08002497 	.word	0x08002497
 8002448:	08002497 	.word	0x08002497
 800244c:	080023e7 	.word	0x080023e7
 8002450:	0800252d 	.word	0x0800252d
 8002454:	080023e7 	.word	0x080023e7
 8002458:	080023e7 	.word	0x080023e7
 800245c:	080023e7 	.word	0x080023e7
 8002460:	080023e7 	.word	0x080023e7
 8002464:	08002563 	.word	0x08002563
 8002468:	08002535 	.word	0x08002535
 800246c:	080024d7 	.word	0x080024d7
 8002470:	080023e7 	.word	0x080023e7
 8002474:	080023e7 	.word	0x080023e7
 8002478:	0800255f 	.word	0x0800255f
 800247c:	080023e7 	.word	0x080023e7
 8002480:	08002529 	.word	0x08002529
 8002484:	080023e7 	.word	0x080023e7
 8002488:	080023e7 	.word	0x080023e7
 800248c:	080024df 	.word	0x080024df
 8002490:	3b45      	subs	r3, #69	; 0x45
 8002492:	2b02      	cmp	r3, #2
 8002494:	d8a7      	bhi.n	80023e6 <__ssvfiscanf_r+0xd2>
 8002496:	2305      	movs	r3, #5
 8002498:	e02b      	b.n	80024f2 <__ssvfiscanf_r+0x1de>
 800249a:	6863      	ldr	r3, [r4, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	dd0d      	ble.n	80024bc <__ssvfiscanf_r+0x1a8>
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	781a      	ldrb	r2, [r3, #0]
 80024a4:	4552      	cmp	r2, sl
 80024a6:	f040 80a1 	bne.w	80025ec <__ssvfiscanf_r+0x2d8>
 80024aa:	3301      	adds	r3, #1
 80024ac:	6862      	ldr	r2, [r4, #4]
 80024ae:	6023      	str	r3, [r4, #0]
 80024b0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80024b2:	3a01      	subs	r2, #1
 80024b4:	3301      	adds	r3, #1
 80024b6:	6062      	str	r2, [r4, #4]
 80024b8:	9345      	str	r3, [sp, #276]	; 0x114
 80024ba:	e755      	b.n	8002368 <__ssvfiscanf_r+0x54>
 80024bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80024be:	4621      	mov	r1, r4
 80024c0:	4630      	mov	r0, r6
 80024c2:	4798      	blx	r3
 80024c4:	2800      	cmp	r0, #0
 80024c6:	d0eb      	beq.n	80024a0 <__ssvfiscanf_r+0x18c>
 80024c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80024ca:	2800      	cmp	r0, #0
 80024cc:	f040 8084 	bne.w	80025d8 <__ssvfiscanf_r+0x2c4>
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	e086      	b.n	80025e4 <__ssvfiscanf_r+0x2d0>
 80024d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80024d8:	f042 0220 	orr.w	r2, r2, #32
 80024dc:	9241      	str	r2, [sp, #260]	; 0x104
 80024de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80024e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e4:	9241      	str	r2, [sp, #260]	; 0x104
 80024e6:	2210      	movs	r2, #16
 80024e8:	2b6f      	cmp	r3, #111	; 0x6f
 80024ea:	9242      	str	r2, [sp, #264]	; 0x108
 80024ec:	bf34      	ite	cc
 80024ee:	2303      	movcc	r3, #3
 80024f0:	2304      	movcs	r3, #4
 80024f2:	9347      	str	r3, [sp, #284]	; 0x11c
 80024f4:	6863      	ldr	r3, [r4, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	dd41      	ble.n	800257e <__ssvfiscanf_r+0x26a>
 80024fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80024fc:	0659      	lsls	r1, r3, #25
 80024fe:	d404      	bmi.n	800250a <__ssvfiscanf_r+0x1f6>
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	781a      	ldrb	r2, [r3, #0]
 8002504:	5cba      	ldrb	r2, [r7, r2]
 8002506:	0712      	lsls	r2, r2, #28
 8002508:	d440      	bmi.n	800258c <__ssvfiscanf_r+0x278>
 800250a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800250c:	2b02      	cmp	r3, #2
 800250e:	dc4f      	bgt.n	80025b0 <__ssvfiscanf_r+0x29c>
 8002510:	466b      	mov	r3, sp
 8002512:	4622      	mov	r2, r4
 8002514:	a941      	add	r1, sp, #260	; 0x104
 8002516:	4630      	mov	r0, r6
 8002518:	f000 f874 	bl	8002604 <_scanf_chars>
 800251c:	2801      	cmp	r0, #1
 800251e:	d065      	beq.n	80025ec <__ssvfiscanf_r+0x2d8>
 8002520:	2802      	cmp	r0, #2
 8002522:	f47f af21 	bne.w	8002368 <__ssvfiscanf_r+0x54>
 8002526:	e7cf      	b.n	80024c8 <__ssvfiscanf_r+0x1b4>
 8002528:	220a      	movs	r2, #10
 800252a:	e7dd      	b.n	80024e8 <__ssvfiscanf_r+0x1d4>
 800252c:	2300      	movs	r3, #0
 800252e:	9342      	str	r3, [sp, #264]	; 0x108
 8002530:	2303      	movs	r3, #3
 8002532:	e7de      	b.n	80024f2 <__ssvfiscanf_r+0x1de>
 8002534:	2308      	movs	r3, #8
 8002536:	9342      	str	r3, [sp, #264]	; 0x108
 8002538:	2304      	movs	r3, #4
 800253a:	e7da      	b.n	80024f2 <__ssvfiscanf_r+0x1de>
 800253c:	4629      	mov	r1, r5
 800253e:	4640      	mov	r0, r8
 8002540:	f000 f9ac 	bl	800289c <__sccl>
 8002544:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800254a:	9341      	str	r3, [sp, #260]	; 0x104
 800254c:	4605      	mov	r5, r0
 800254e:	2301      	movs	r3, #1
 8002550:	e7cf      	b.n	80024f2 <__ssvfiscanf_r+0x1de>
 8002552:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002558:	9341      	str	r3, [sp, #260]	; 0x104
 800255a:	2300      	movs	r3, #0
 800255c:	e7c9      	b.n	80024f2 <__ssvfiscanf_r+0x1de>
 800255e:	2302      	movs	r3, #2
 8002560:	e7c7      	b.n	80024f2 <__ssvfiscanf_r+0x1de>
 8002562:	9841      	ldr	r0, [sp, #260]	; 0x104
 8002564:	06c3      	lsls	r3, r0, #27
 8002566:	f53f aeff 	bmi.w	8002368 <__ssvfiscanf_r+0x54>
 800256a:	9b00      	ldr	r3, [sp, #0]
 800256c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800256e:	1d19      	adds	r1, r3, #4
 8002570:	9100      	str	r1, [sp, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	07c0      	lsls	r0, r0, #31
 8002576:	bf4c      	ite	mi
 8002578:	801a      	strhmi	r2, [r3, #0]
 800257a:	601a      	strpl	r2, [r3, #0]
 800257c:	e6f4      	b.n	8002368 <__ssvfiscanf_r+0x54>
 800257e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002580:	4621      	mov	r1, r4
 8002582:	4630      	mov	r0, r6
 8002584:	4798      	blx	r3
 8002586:	2800      	cmp	r0, #0
 8002588:	d0b7      	beq.n	80024fa <__ssvfiscanf_r+0x1e6>
 800258a:	e79d      	b.n	80024c8 <__ssvfiscanf_r+0x1b4>
 800258c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800258e:	3201      	adds	r2, #1
 8002590:	9245      	str	r2, [sp, #276]	; 0x114
 8002592:	6862      	ldr	r2, [r4, #4]
 8002594:	3a01      	subs	r2, #1
 8002596:	2a00      	cmp	r2, #0
 8002598:	6062      	str	r2, [r4, #4]
 800259a:	dd02      	ble.n	80025a2 <__ssvfiscanf_r+0x28e>
 800259c:	3301      	adds	r3, #1
 800259e:	6023      	str	r3, [r4, #0]
 80025a0:	e7ae      	b.n	8002500 <__ssvfiscanf_r+0x1ec>
 80025a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80025a4:	4621      	mov	r1, r4
 80025a6:	4630      	mov	r0, r6
 80025a8:	4798      	blx	r3
 80025aa:	2800      	cmp	r0, #0
 80025ac:	d0a8      	beq.n	8002500 <__ssvfiscanf_r+0x1ec>
 80025ae:	e78b      	b.n	80024c8 <__ssvfiscanf_r+0x1b4>
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	dc06      	bgt.n	80025c2 <__ssvfiscanf_r+0x2ae>
 80025b4:	466b      	mov	r3, sp
 80025b6:	4622      	mov	r2, r4
 80025b8:	a941      	add	r1, sp, #260	; 0x104
 80025ba:	4630      	mov	r0, r6
 80025bc:	f000 f87a 	bl	80026b4 <_scanf_i>
 80025c0:	e7ac      	b.n	800251c <__ssvfiscanf_r+0x208>
 80025c2:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <__ssvfiscanf_r+0x2ec>)
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f43f aecf 	beq.w	8002368 <__ssvfiscanf_r+0x54>
 80025ca:	466b      	mov	r3, sp
 80025cc:	4622      	mov	r2, r4
 80025ce:	a941      	add	r1, sp, #260	; 0x104
 80025d0:	4630      	mov	r0, r6
 80025d2:	f3af 8000 	nop.w
 80025d6:	e7a1      	b.n	800251c <__ssvfiscanf_r+0x208>
 80025d8:	89a3      	ldrh	r3, [r4, #12]
 80025da:	f013 0f40 	tst.w	r3, #64	; 0x40
 80025de:	bf18      	it	ne
 80025e0:	f04f 30ff 	movne.w	r0, #4294967295
 80025e4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80025e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025ec:	9844      	ldr	r0, [sp, #272]	; 0x110
 80025ee:	e7f9      	b.n	80025e4 <__ssvfiscanf_r+0x2d0>
 80025f0:	08002261 	.word	0x08002261
 80025f4:	080022db 	.word	0x080022db
 80025f8:	08002e44 	.word	0x08002e44
 80025fc:	08002e24 	.word	0x08002e24
 8002600:	00000000 	.word	0x00000000

08002604 <_scanf_chars>:
 8002604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002608:	4615      	mov	r5, r2
 800260a:	688a      	ldr	r2, [r1, #8]
 800260c:	4680      	mov	r8, r0
 800260e:	460c      	mov	r4, r1
 8002610:	b932      	cbnz	r2, 8002620 <_scanf_chars+0x1c>
 8002612:	698a      	ldr	r2, [r1, #24]
 8002614:	2a00      	cmp	r2, #0
 8002616:	bf0c      	ite	eq
 8002618:	2201      	moveq	r2, #1
 800261a:	f04f 32ff 	movne.w	r2, #4294967295
 800261e:	608a      	str	r2, [r1, #8]
 8002620:	6822      	ldr	r2, [r4, #0]
 8002622:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80026b0 <_scanf_chars+0xac>
 8002626:	06d1      	lsls	r1, r2, #27
 8002628:	bf5f      	itttt	pl
 800262a:	681a      	ldrpl	r2, [r3, #0]
 800262c:	1d11      	addpl	r1, r2, #4
 800262e:	6019      	strpl	r1, [r3, #0]
 8002630:	6816      	ldrpl	r6, [r2, #0]
 8002632:	2700      	movs	r7, #0
 8002634:	69a0      	ldr	r0, [r4, #24]
 8002636:	b188      	cbz	r0, 800265c <_scanf_chars+0x58>
 8002638:	2801      	cmp	r0, #1
 800263a:	d107      	bne.n	800264c <_scanf_chars+0x48>
 800263c:	682b      	ldr	r3, [r5, #0]
 800263e:	781a      	ldrb	r2, [r3, #0]
 8002640:	6963      	ldr	r3, [r4, #20]
 8002642:	5c9b      	ldrb	r3, [r3, r2]
 8002644:	b953      	cbnz	r3, 800265c <_scanf_chars+0x58>
 8002646:	bb27      	cbnz	r7, 8002692 <_scanf_chars+0x8e>
 8002648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800264c:	2802      	cmp	r0, #2
 800264e:	d120      	bne.n	8002692 <_scanf_chars+0x8e>
 8002650:	682b      	ldr	r3, [r5, #0]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	f813 3009 	ldrb.w	r3, [r3, r9]
 8002658:	071b      	lsls	r3, r3, #28
 800265a:	d41a      	bmi.n	8002692 <_scanf_chars+0x8e>
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	06da      	lsls	r2, r3, #27
 8002660:	bf5e      	ittt	pl
 8002662:	682b      	ldrpl	r3, [r5, #0]
 8002664:	781b      	ldrbpl	r3, [r3, #0]
 8002666:	f806 3b01 	strbpl.w	r3, [r6], #1
 800266a:	682a      	ldr	r2, [r5, #0]
 800266c:	686b      	ldr	r3, [r5, #4]
 800266e:	3201      	adds	r2, #1
 8002670:	602a      	str	r2, [r5, #0]
 8002672:	68a2      	ldr	r2, [r4, #8]
 8002674:	3b01      	subs	r3, #1
 8002676:	3a01      	subs	r2, #1
 8002678:	606b      	str	r3, [r5, #4]
 800267a:	3701      	adds	r7, #1
 800267c:	60a2      	str	r2, [r4, #8]
 800267e:	b142      	cbz	r2, 8002692 <_scanf_chars+0x8e>
 8002680:	2b00      	cmp	r3, #0
 8002682:	dcd7      	bgt.n	8002634 <_scanf_chars+0x30>
 8002684:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002688:	4629      	mov	r1, r5
 800268a:	4640      	mov	r0, r8
 800268c:	4798      	blx	r3
 800268e:	2800      	cmp	r0, #0
 8002690:	d0d0      	beq.n	8002634 <_scanf_chars+0x30>
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	f013 0310 	ands.w	r3, r3, #16
 8002698:	d105      	bne.n	80026a6 <_scanf_chars+0xa2>
 800269a:	68e2      	ldr	r2, [r4, #12]
 800269c:	3201      	adds	r2, #1
 800269e:	60e2      	str	r2, [r4, #12]
 80026a0:	69a2      	ldr	r2, [r4, #24]
 80026a2:	b102      	cbz	r2, 80026a6 <_scanf_chars+0xa2>
 80026a4:	7033      	strb	r3, [r6, #0]
 80026a6:	6923      	ldr	r3, [r4, #16]
 80026a8:	441f      	add	r7, r3
 80026aa:	6127      	str	r7, [r4, #16]
 80026ac:	2000      	movs	r0, #0
 80026ae:	e7cb      	b.n	8002648 <_scanf_chars+0x44>
 80026b0:	08002e44 	.word	0x08002e44

080026b4 <_scanf_i>:
 80026b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b8:	4698      	mov	r8, r3
 80026ba:	4b74      	ldr	r3, [pc, #464]	; (800288c <_scanf_i+0x1d8>)
 80026bc:	460c      	mov	r4, r1
 80026be:	4682      	mov	sl, r0
 80026c0:	4616      	mov	r6, r2
 80026c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80026c6:	b087      	sub	sp, #28
 80026c8:	ab03      	add	r3, sp, #12
 80026ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80026ce:	4b70      	ldr	r3, [pc, #448]	; (8002890 <_scanf_i+0x1dc>)
 80026d0:	69a1      	ldr	r1, [r4, #24]
 80026d2:	4a70      	ldr	r2, [pc, #448]	; (8002894 <_scanf_i+0x1e0>)
 80026d4:	2903      	cmp	r1, #3
 80026d6:	bf18      	it	ne
 80026d8:	461a      	movne	r2, r3
 80026da:	68a3      	ldr	r3, [r4, #8]
 80026dc:	9201      	str	r2, [sp, #4]
 80026de:	1e5a      	subs	r2, r3, #1
 80026e0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80026e4:	bf88      	it	hi
 80026e6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80026ea:	4627      	mov	r7, r4
 80026ec:	bf82      	ittt	hi
 80026ee:	eb03 0905 	addhi.w	r9, r3, r5
 80026f2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80026f6:	60a3      	strhi	r3, [r4, #8]
 80026f8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80026fc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8002700:	bf98      	it	ls
 8002702:	f04f 0900 	movls.w	r9, #0
 8002706:	6023      	str	r3, [r4, #0]
 8002708:	463d      	mov	r5, r7
 800270a:	f04f 0b00 	mov.w	fp, #0
 800270e:	6831      	ldr	r1, [r6, #0]
 8002710:	ab03      	add	r3, sp, #12
 8002712:	7809      	ldrb	r1, [r1, #0]
 8002714:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8002718:	2202      	movs	r2, #2
 800271a:	f7fd fd61 	bl	80001e0 <memchr>
 800271e:	b328      	cbz	r0, 800276c <_scanf_i+0xb8>
 8002720:	f1bb 0f01 	cmp.w	fp, #1
 8002724:	d159      	bne.n	80027da <_scanf_i+0x126>
 8002726:	6862      	ldr	r2, [r4, #4]
 8002728:	b92a      	cbnz	r2, 8002736 <_scanf_i+0x82>
 800272a:	6822      	ldr	r2, [r4, #0]
 800272c:	2308      	movs	r3, #8
 800272e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002732:	6063      	str	r3, [r4, #4]
 8002734:	6022      	str	r2, [r4, #0]
 8002736:	6822      	ldr	r2, [r4, #0]
 8002738:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800273c:	6022      	str	r2, [r4, #0]
 800273e:	68a2      	ldr	r2, [r4, #8]
 8002740:	1e51      	subs	r1, r2, #1
 8002742:	60a1      	str	r1, [r4, #8]
 8002744:	b192      	cbz	r2, 800276c <_scanf_i+0xb8>
 8002746:	6832      	ldr	r2, [r6, #0]
 8002748:	1c51      	adds	r1, r2, #1
 800274a:	6031      	str	r1, [r6, #0]
 800274c:	7812      	ldrb	r2, [r2, #0]
 800274e:	f805 2b01 	strb.w	r2, [r5], #1
 8002752:	6872      	ldr	r2, [r6, #4]
 8002754:	3a01      	subs	r2, #1
 8002756:	2a00      	cmp	r2, #0
 8002758:	6072      	str	r2, [r6, #4]
 800275a:	dc07      	bgt.n	800276c <_scanf_i+0xb8>
 800275c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8002760:	4631      	mov	r1, r6
 8002762:	4650      	mov	r0, sl
 8002764:	4790      	blx	r2
 8002766:	2800      	cmp	r0, #0
 8002768:	f040 8085 	bne.w	8002876 <_scanf_i+0x1c2>
 800276c:	f10b 0b01 	add.w	fp, fp, #1
 8002770:	f1bb 0f03 	cmp.w	fp, #3
 8002774:	d1cb      	bne.n	800270e <_scanf_i+0x5a>
 8002776:	6863      	ldr	r3, [r4, #4]
 8002778:	b90b      	cbnz	r3, 800277e <_scanf_i+0xca>
 800277a:	230a      	movs	r3, #10
 800277c:	6063      	str	r3, [r4, #4]
 800277e:	6863      	ldr	r3, [r4, #4]
 8002780:	4945      	ldr	r1, [pc, #276]	; (8002898 <_scanf_i+0x1e4>)
 8002782:	6960      	ldr	r0, [r4, #20]
 8002784:	1ac9      	subs	r1, r1, r3
 8002786:	f000 f889 	bl	800289c <__sccl>
 800278a:	f04f 0b00 	mov.w	fp, #0
 800278e:	68a3      	ldr	r3, [r4, #8]
 8002790:	6822      	ldr	r2, [r4, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d03d      	beq.n	8002812 <_scanf_i+0x15e>
 8002796:	6831      	ldr	r1, [r6, #0]
 8002798:	6960      	ldr	r0, [r4, #20]
 800279a:	f891 c000 	ldrb.w	ip, [r1]
 800279e:	f810 000c 	ldrb.w	r0, [r0, ip]
 80027a2:	2800      	cmp	r0, #0
 80027a4:	d035      	beq.n	8002812 <_scanf_i+0x15e>
 80027a6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80027aa:	d124      	bne.n	80027f6 <_scanf_i+0x142>
 80027ac:	0510      	lsls	r0, r2, #20
 80027ae:	d522      	bpl.n	80027f6 <_scanf_i+0x142>
 80027b0:	f10b 0b01 	add.w	fp, fp, #1
 80027b4:	f1b9 0f00 	cmp.w	r9, #0
 80027b8:	d003      	beq.n	80027c2 <_scanf_i+0x10e>
 80027ba:	3301      	adds	r3, #1
 80027bc:	f109 39ff 	add.w	r9, r9, #4294967295
 80027c0:	60a3      	str	r3, [r4, #8]
 80027c2:	6873      	ldr	r3, [r6, #4]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	6073      	str	r3, [r6, #4]
 80027ca:	dd1b      	ble.n	8002804 <_scanf_i+0x150>
 80027cc:	6833      	ldr	r3, [r6, #0]
 80027ce:	3301      	adds	r3, #1
 80027d0:	6033      	str	r3, [r6, #0]
 80027d2:	68a3      	ldr	r3, [r4, #8]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	60a3      	str	r3, [r4, #8]
 80027d8:	e7d9      	b.n	800278e <_scanf_i+0xda>
 80027da:	f1bb 0f02 	cmp.w	fp, #2
 80027de:	d1ae      	bne.n	800273e <_scanf_i+0x8a>
 80027e0:	6822      	ldr	r2, [r4, #0]
 80027e2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80027e6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80027ea:	d1bf      	bne.n	800276c <_scanf_i+0xb8>
 80027ec:	2310      	movs	r3, #16
 80027ee:	6063      	str	r3, [r4, #4]
 80027f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027f4:	e7a2      	b.n	800273c <_scanf_i+0x88>
 80027f6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80027fa:	6022      	str	r2, [r4, #0]
 80027fc:	780b      	ldrb	r3, [r1, #0]
 80027fe:	f805 3b01 	strb.w	r3, [r5], #1
 8002802:	e7de      	b.n	80027c2 <_scanf_i+0x10e>
 8002804:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002808:	4631      	mov	r1, r6
 800280a:	4650      	mov	r0, sl
 800280c:	4798      	blx	r3
 800280e:	2800      	cmp	r0, #0
 8002810:	d0df      	beq.n	80027d2 <_scanf_i+0x11e>
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	05d9      	lsls	r1, r3, #23
 8002816:	d50d      	bpl.n	8002834 <_scanf_i+0x180>
 8002818:	42bd      	cmp	r5, r7
 800281a:	d909      	bls.n	8002830 <_scanf_i+0x17c>
 800281c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002820:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002824:	4632      	mov	r2, r6
 8002826:	4650      	mov	r0, sl
 8002828:	4798      	blx	r3
 800282a:	f105 39ff 	add.w	r9, r5, #4294967295
 800282e:	464d      	mov	r5, r9
 8002830:	42bd      	cmp	r5, r7
 8002832:	d028      	beq.n	8002886 <_scanf_i+0x1d2>
 8002834:	6822      	ldr	r2, [r4, #0]
 8002836:	f012 0210 	ands.w	r2, r2, #16
 800283a:	d113      	bne.n	8002864 <_scanf_i+0x1b0>
 800283c:	702a      	strb	r2, [r5, #0]
 800283e:	6863      	ldr	r3, [r4, #4]
 8002840:	9e01      	ldr	r6, [sp, #4]
 8002842:	4639      	mov	r1, r7
 8002844:	4650      	mov	r0, sl
 8002846:	47b0      	blx	r6
 8002848:	f8d8 3000 	ldr.w	r3, [r8]
 800284c:	6821      	ldr	r1, [r4, #0]
 800284e:	1d1a      	adds	r2, r3, #4
 8002850:	f8c8 2000 	str.w	r2, [r8]
 8002854:	f011 0f20 	tst.w	r1, #32
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	d00f      	beq.n	800287c <_scanf_i+0x1c8>
 800285c:	6018      	str	r0, [r3, #0]
 800285e:	68e3      	ldr	r3, [r4, #12]
 8002860:	3301      	adds	r3, #1
 8002862:	60e3      	str	r3, [r4, #12]
 8002864:	1bed      	subs	r5, r5, r7
 8002866:	44ab      	add	fp, r5
 8002868:	6925      	ldr	r5, [r4, #16]
 800286a:	445d      	add	r5, fp
 800286c:	6125      	str	r5, [r4, #16]
 800286e:	2000      	movs	r0, #0
 8002870:	b007      	add	sp, #28
 8002872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002876:	f04f 0b00 	mov.w	fp, #0
 800287a:	e7ca      	b.n	8002812 <_scanf_i+0x15e>
 800287c:	07ca      	lsls	r2, r1, #31
 800287e:	bf4c      	ite	mi
 8002880:	8018      	strhmi	r0, [r3, #0]
 8002882:	6018      	strpl	r0, [r3, #0]
 8002884:	e7eb      	b.n	800285e <_scanf_i+0x1aa>
 8002886:	2001      	movs	r0, #1
 8002888:	e7f2      	b.n	8002870 <_scanf_i+0x1bc>
 800288a:	bf00      	nop
 800288c:	08002e00 	.word	0x08002e00
 8002890:	08002b15 	.word	0x08002b15
 8002894:	08002a19 	.word	0x08002a19
 8002898:	08002e41 	.word	0x08002e41

0800289c <__sccl>:
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	780b      	ldrb	r3, [r1, #0]
 80028a0:	4604      	mov	r4, r0
 80028a2:	2b5e      	cmp	r3, #94	; 0x5e
 80028a4:	bf0b      	itete	eq
 80028a6:	784b      	ldrbeq	r3, [r1, #1]
 80028a8:	1c48      	addne	r0, r1, #1
 80028aa:	1c88      	addeq	r0, r1, #2
 80028ac:	2200      	movne	r2, #0
 80028ae:	bf08      	it	eq
 80028b0:	2201      	moveq	r2, #1
 80028b2:	1e61      	subs	r1, r4, #1
 80028b4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80028b8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80028bc:	42a9      	cmp	r1, r5
 80028be:	d1fb      	bne.n	80028b8 <__sccl+0x1c>
 80028c0:	b90b      	cbnz	r3, 80028c6 <__sccl+0x2a>
 80028c2:	3801      	subs	r0, #1
 80028c4:	bd70      	pop	{r4, r5, r6, pc}
 80028c6:	f082 0101 	eor.w	r1, r2, #1
 80028ca:	54e1      	strb	r1, [r4, r3]
 80028cc:	1c42      	adds	r2, r0, #1
 80028ce:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80028d2:	2d2d      	cmp	r5, #45	; 0x2d
 80028d4:	f102 36ff 	add.w	r6, r2, #4294967295
 80028d8:	4610      	mov	r0, r2
 80028da:	d006      	beq.n	80028ea <__sccl+0x4e>
 80028dc:	2d5d      	cmp	r5, #93	; 0x5d
 80028de:	d0f1      	beq.n	80028c4 <__sccl+0x28>
 80028e0:	b90d      	cbnz	r5, 80028e6 <__sccl+0x4a>
 80028e2:	4630      	mov	r0, r6
 80028e4:	e7ee      	b.n	80028c4 <__sccl+0x28>
 80028e6:	462b      	mov	r3, r5
 80028e8:	e7ef      	b.n	80028ca <__sccl+0x2e>
 80028ea:	7816      	ldrb	r6, [r2, #0]
 80028ec:	2e5d      	cmp	r6, #93	; 0x5d
 80028ee:	d0fa      	beq.n	80028e6 <__sccl+0x4a>
 80028f0:	42b3      	cmp	r3, r6
 80028f2:	dcf8      	bgt.n	80028e6 <__sccl+0x4a>
 80028f4:	4618      	mov	r0, r3
 80028f6:	3001      	adds	r0, #1
 80028f8:	4286      	cmp	r6, r0
 80028fa:	5421      	strb	r1, [r4, r0]
 80028fc:	dcfb      	bgt.n	80028f6 <__sccl+0x5a>
 80028fe:	43d8      	mvns	r0, r3
 8002900:	4430      	add	r0, r6
 8002902:	1c5d      	adds	r5, r3, #1
 8002904:	42b3      	cmp	r3, r6
 8002906:	bfa8      	it	ge
 8002908:	2000      	movge	r0, #0
 800290a:	182b      	adds	r3, r5, r0
 800290c:	3202      	adds	r2, #2
 800290e:	e7de      	b.n	80028ce <__sccl+0x32>

08002910 <_strtol_l.isra.0>:
 8002910:	2b01      	cmp	r3, #1
 8002912:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002916:	d001      	beq.n	800291c <_strtol_l.isra.0+0xc>
 8002918:	2b24      	cmp	r3, #36	; 0x24
 800291a:	d906      	bls.n	800292a <_strtol_l.isra.0+0x1a>
 800291c:	f7ff fc32 	bl	8002184 <__errno>
 8002920:	2316      	movs	r3, #22
 8002922:	6003      	str	r3, [r0, #0]
 8002924:	2000      	movs	r0, #0
 8002926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800292a:	4f3a      	ldr	r7, [pc, #232]	; (8002a14 <_strtol_l.isra.0+0x104>)
 800292c:	468e      	mov	lr, r1
 800292e:	4676      	mov	r6, lr
 8002930:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002934:	5de5      	ldrb	r5, [r4, r7]
 8002936:	f015 0508 	ands.w	r5, r5, #8
 800293a:	d1f8      	bne.n	800292e <_strtol_l.isra.0+0x1e>
 800293c:	2c2d      	cmp	r4, #45	; 0x2d
 800293e:	d134      	bne.n	80029aa <_strtol_l.isra.0+0x9a>
 8002940:	f89e 4000 	ldrb.w	r4, [lr]
 8002944:	f04f 0801 	mov.w	r8, #1
 8002948:	f106 0e02 	add.w	lr, r6, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d05c      	beq.n	8002a0a <_strtol_l.isra.0+0xfa>
 8002950:	2b10      	cmp	r3, #16
 8002952:	d10c      	bne.n	800296e <_strtol_l.isra.0+0x5e>
 8002954:	2c30      	cmp	r4, #48	; 0x30
 8002956:	d10a      	bne.n	800296e <_strtol_l.isra.0+0x5e>
 8002958:	f89e 4000 	ldrb.w	r4, [lr]
 800295c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002960:	2c58      	cmp	r4, #88	; 0x58
 8002962:	d14d      	bne.n	8002a00 <_strtol_l.isra.0+0xf0>
 8002964:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8002968:	2310      	movs	r3, #16
 800296a:	f10e 0e02 	add.w	lr, lr, #2
 800296e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8002972:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002976:	2600      	movs	r6, #0
 8002978:	fbbc f9f3 	udiv	r9, ip, r3
 800297c:	4635      	mov	r5, r6
 800297e:	fb03 ca19 	mls	sl, r3, r9, ip
 8002982:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8002986:	2f09      	cmp	r7, #9
 8002988:	d818      	bhi.n	80029bc <_strtol_l.isra.0+0xac>
 800298a:	463c      	mov	r4, r7
 800298c:	42a3      	cmp	r3, r4
 800298e:	dd24      	ble.n	80029da <_strtol_l.isra.0+0xca>
 8002990:	2e00      	cmp	r6, #0
 8002992:	db1f      	blt.n	80029d4 <_strtol_l.isra.0+0xc4>
 8002994:	45a9      	cmp	r9, r5
 8002996:	d31d      	bcc.n	80029d4 <_strtol_l.isra.0+0xc4>
 8002998:	d101      	bne.n	800299e <_strtol_l.isra.0+0x8e>
 800299a:	45a2      	cmp	sl, r4
 800299c:	db1a      	blt.n	80029d4 <_strtol_l.isra.0+0xc4>
 800299e:	fb05 4503 	mla	r5, r5, r3, r4
 80029a2:	2601      	movs	r6, #1
 80029a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80029a8:	e7eb      	b.n	8002982 <_strtol_l.isra.0+0x72>
 80029aa:	2c2b      	cmp	r4, #43	; 0x2b
 80029ac:	bf08      	it	eq
 80029ae:	f89e 4000 	ldrbeq.w	r4, [lr]
 80029b2:	46a8      	mov	r8, r5
 80029b4:	bf08      	it	eq
 80029b6:	f106 0e02 	addeq.w	lr, r6, #2
 80029ba:	e7c7      	b.n	800294c <_strtol_l.isra.0+0x3c>
 80029bc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80029c0:	2f19      	cmp	r7, #25
 80029c2:	d801      	bhi.n	80029c8 <_strtol_l.isra.0+0xb8>
 80029c4:	3c37      	subs	r4, #55	; 0x37
 80029c6:	e7e1      	b.n	800298c <_strtol_l.isra.0+0x7c>
 80029c8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80029cc:	2f19      	cmp	r7, #25
 80029ce:	d804      	bhi.n	80029da <_strtol_l.isra.0+0xca>
 80029d0:	3c57      	subs	r4, #87	; 0x57
 80029d2:	e7db      	b.n	800298c <_strtol_l.isra.0+0x7c>
 80029d4:	f04f 36ff 	mov.w	r6, #4294967295
 80029d8:	e7e4      	b.n	80029a4 <_strtol_l.isra.0+0x94>
 80029da:	2e00      	cmp	r6, #0
 80029dc:	da05      	bge.n	80029ea <_strtol_l.isra.0+0xda>
 80029de:	2322      	movs	r3, #34	; 0x22
 80029e0:	6003      	str	r3, [r0, #0]
 80029e2:	4665      	mov	r5, ip
 80029e4:	b942      	cbnz	r2, 80029f8 <_strtol_l.isra.0+0xe8>
 80029e6:	4628      	mov	r0, r5
 80029e8:	e79d      	b.n	8002926 <_strtol_l.isra.0+0x16>
 80029ea:	f1b8 0f00 	cmp.w	r8, #0
 80029ee:	d000      	beq.n	80029f2 <_strtol_l.isra.0+0xe2>
 80029f0:	426d      	negs	r5, r5
 80029f2:	2a00      	cmp	r2, #0
 80029f4:	d0f7      	beq.n	80029e6 <_strtol_l.isra.0+0xd6>
 80029f6:	b10e      	cbz	r6, 80029fc <_strtol_l.isra.0+0xec>
 80029f8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80029fc:	6011      	str	r1, [r2, #0]
 80029fe:	e7f2      	b.n	80029e6 <_strtol_l.isra.0+0xd6>
 8002a00:	2430      	movs	r4, #48	; 0x30
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1b3      	bne.n	800296e <_strtol_l.isra.0+0x5e>
 8002a06:	2308      	movs	r3, #8
 8002a08:	e7b1      	b.n	800296e <_strtol_l.isra.0+0x5e>
 8002a0a:	2c30      	cmp	r4, #48	; 0x30
 8002a0c:	d0a4      	beq.n	8002958 <_strtol_l.isra.0+0x48>
 8002a0e:	230a      	movs	r3, #10
 8002a10:	e7ad      	b.n	800296e <_strtol_l.isra.0+0x5e>
 8002a12:	bf00      	nop
 8002a14:	08002e44 	.word	0x08002e44

08002a18 <_strtol_r>:
 8002a18:	f7ff bf7a 	b.w	8002910 <_strtol_l.isra.0>

08002a1c <_strtoul_l.isra.0>:
 8002a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a20:	4e3b      	ldr	r6, [pc, #236]	; (8002b10 <_strtoul_l.isra.0+0xf4>)
 8002a22:	4686      	mov	lr, r0
 8002a24:	468c      	mov	ip, r1
 8002a26:	4660      	mov	r0, ip
 8002a28:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8002a2c:	5da5      	ldrb	r5, [r4, r6]
 8002a2e:	f015 0508 	ands.w	r5, r5, #8
 8002a32:	d1f8      	bne.n	8002a26 <_strtoul_l.isra.0+0xa>
 8002a34:	2c2d      	cmp	r4, #45	; 0x2d
 8002a36:	d134      	bne.n	8002aa2 <_strtoul_l.isra.0+0x86>
 8002a38:	f89c 4000 	ldrb.w	r4, [ip]
 8002a3c:	f04f 0801 	mov.w	r8, #1
 8002a40:	f100 0c02 	add.w	ip, r0, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d05e      	beq.n	8002b06 <_strtoul_l.isra.0+0xea>
 8002a48:	2b10      	cmp	r3, #16
 8002a4a:	d10c      	bne.n	8002a66 <_strtoul_l.isra.0+0x4a>
 8002a4c:	2c30      	cmp	r4, #48	; 0x30
 8002a4e:	d10a      	bne.n	8002a66 <_strtoul_l.isra.0+0x4a>
 8002a50:	f89c 0000 	ldrb.w	r0, [ip]
 8002a54:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002a58:	2858      	cmp	r0, #88	; 0x58
 8002a5a:	d14f      	bne.n	8002afc <_strtoul_l.isra.0+0xe0>
 8002a5c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8002a60:	2310      	movs	r3, #16
 8002a62:	f10c 0c02 	add.w	ip, ip, #2
 8002a66:	f04f 37ff 	mov.w	r7, #4294967295
 8002a6a:	2500      	movs	r5, #0
 8002a6c:	fbb7 f7f3 	udiv	r7, r7, r3
 8002a70:	fb03 f907 	mul.w	r9, r3, r7
 8002a74:	ea6f 0909 	mvn.w	r9, r9
 8002a78:	4628      	mov	r0, r5
 8002a7a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8002a7e:	2e09      	cmp	r6, #9
 8002a80:	d818      	bhi.n	8002ab4 <_strtoul_l.isra.0+0x98>
 8002a82:	4634      	mov	r4, r6
 8002a84:	42a3      	cmp	r3, r4
 8002a86:	dd24      	ble.n	8002ad2 <_strtoul_l.isra.0+0xb6>
 8002a88:	2d00      	cmp	r5, #0
 8002a8a:	db1f      	blt.n	8002acc <_strtoul_l.isra.0+0xb0>
 8002a8c:	4287      	cmp	r7, r0
 8002a8e:	d31d      	bcc.n	8002acc <_strtoul_l.isra.0+0xb0>
 8002a90:	d101      	bne.n	8002a96 <_strtoul_l.isra.0+0x7a>
 8002a92:	45a1      	cmp	r9, r4
 8002a94:	db1a      	blt.n	8002acc <_strtoul_l.isra.0+0xb0>
 8002a96:	fb00 4003 	mla	r0, r0, r3, r4
 8002a9a:	2501      	movs	r5, #1
 8002a9c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8002aa0:	e7eb      	b.n	8002a7a <_strtoul_l.isra.0+0x5e>
 8002aa2:	2c2b      	cmp	r4, #43	; 0x2b
 8002aa4:	bf08      	it	eq
 8002aa6:	f89c 4000 	ldrbeq.w	r4, [ip]
 8002aaa:	46a8      	mov	r8, r5
 8002aac:	bf08      	it	eq
 8002aae:	f100 0c02 	addeq.w	ip, r0, #2
 8002ab2:	e7c7      	b.n	8002a44 <_strtoul_l.isra.0+0x28>
 8002ab4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8002ab8:	2e19      	cmp	r6, #25
 8002aba:	d801      	bhi.n	8002ac0 <_strtoul_l.isra.0+0xa4>
 8002abc:	3c37      	subs	r4, #55	; 0x37
 8002abe:	e7e1      	b.n	8002a84 <_strtoul_l.isra.0+0x68>
 8002ac0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8002ac4:	2e19      	cmp	r6, #25
 8002ac6:	d804      	bhi.n	8002ad2 <_strtoul_l.isra.0+0xb6>
 8002ac8:	3c57      	subs	r4, #87	; 0x57
 8002aca:	e7db      	b.n	8002a84 <_strtoul_l.isra.0+0x68>
 8002acc:	f04f 35ff 	mov.w	r5, #4294967295
 8002ad0:	e7e4      	b.n	8002a9c <_strtoul_l.isra.0+0x80>
 8002ad2:	2d00      	cmp	r5, #0
 8002ad4:	da07      	bge.n	8002ae6 <_strtoul_l.isra.0+0xca>
 8002ad6:	2322      	movs	r3, #34	; 0x22
 8002ad8:	f8ce 3000 	str.w	r3, [lr]
 8002adc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae0:	b942      	cbnz	r2, 8002af4 <_strtoul_l.isra.0+0xd8>
 8002ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ae6:	f1b8 0f00 	cmp.w	r8, #0
 8002aea:	d000      	beq.n	8002aee <_strtoul_l.isra.0+0xd2>
 8002aec:	4240      	negs	r0, r0
 8002aee:	2a00      	cmp	r2, #0
 8002af0:	d0f7      	beq.n	8002ae2 <_strtoul_l.isra.0+0xc6>
 8002af2:	b10d      	cbz	r5, 8002af8 <_strtoul_l.isra.0+0xdc>
 8002af4:	f10c 31ff 	add.w	r1, ip, #4294967295
 8002af8:	6011      	str	r1, [r2, #0]
 8002afa:	e7f2      	b.n	8002ae2 <_strtoul_l.isra.0+0xc6>
 8002afc:	2430      	movs	r4, #48	; 0x30
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1b1      	bne.n	8002a66 <_strtoul_l.isra.0+0x4a>
 8002b02:	2308      	movs	r3, #8
 8002b04:	e7af      	b.n	8002a66 <_strtoul_l.isra.0+0x4a>
 8002b06:	2c30      	cmp	r4, #48	; 0x30
 8002b08:	d0a2      	beq.n	8002a50 <_strtoul_l.isra.0+0x34>
 8002b0a:	230a      	movs	r3, #10
 8002b0c:	e7ab      	b.n	8002a66 <_strtoul_l.isra.0+0x4a>
 8002b0e:	bf00      	nop
 8002b10:	08002e44 	.word	0x08002e44

08002b14 <_strtoul_r>:
 8002b14:	f7ff bf82 	b.w	8002a1c <_strtoul_l.isra.0>

08002b18 <__submore>:
 8002b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b1c:	460c      	mov	r4, r1
 8002b1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002b20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b24:	4299      	cmp	r1, r3
 8002b26:	d11d      	bne.n	8002b64 <__submore+0x4c>
 8002b28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b2c:	f000 f880 	bl	8002c30 <_malloc_r>
 8002b30:	b918      	cbnz	r0, 8002b3a <__submore+0x22>
 8002b32:	f04f 30ff 	mov.w	r0, #4294967295
 8002b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b3e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002b40:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002b44:	6360      	str	r0, [r4, #52]	; 0x34
 8002b46:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8002b4a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002b4e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8002b52:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002b56:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8002b5a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8002b5e:	6020      	str	r0, [r4, #0]
 8002b60:	2000      	movs	r0, #0
 8002b62:	e7e8      	b.n	8002b36 <__submore+0x1e>
 8002b64:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002b66:	0077      	lsls	r7, r6, #1
 8002b68:	463a      	mov	r2, r7
 8002b6a:	f000 f8bb 	bl	8002ce4 <_realloc_r>
 8002b6e:	4605      	mov	r5, r0
 8002b70:	2800      	cmp	r0, #0
 8002b72:	d0de      	beq.n	8002b32 <__submore+0x1a>
 8002b74:	eb00 0806 	add.w	r8, r0, r6
 8002b78:	4601      	mov	r1, r0
 8002b7a:	4632      	mov	r2, r6
 8002b7c:	4640      	mov	r0, r8
 8002b7e:	f7ff fb2b 	bl	80021d8 <memcpy>
 8002b82:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8002b86:	f8c4 8000 	str.w	r8, [r4]
 8002b8a:	e7e9      	b.n	8002b60 <__submore+0x48>

08002b8c <__retarget_lock_acquire_recursive>:
 8002b8c:	4770      	bx	lr

08002b8e <__retarget_lock_release_recursive>:
 8002b8e:	4770      	bx	lr

08002b90 <_free_r>:
 8002b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b92:	2900      	cmp	r1, #0
 8002b94:	d048      	beq.n	8002c28 <_free_r+0x98>
 8002b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b9a:	9001      	str	r0, [sp, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8002ba2:	bfb8      	it	lt
 8002ba4:	18e4      	addlt	r4, r4, r3
 8002ba6:	f000 f8d3 	bl	8002d50 <__malloc_lock>
 8002baa:	4a20      	ldr	r2, [pc, #128]	; (8002c2c <_free_r+0x9c>)
 8002bac:	9801      	ldr	r0, [sp, #4]
 8002bae:	6813      	ldr	r3, [r2, #0]
 8002bb0:	4615      	mov	r5, r2
 8002bb2:	b933      	cbnz	r3, 8002bc2 <_free_r+0x32>
 8002bb4:	6063      	str	r3, [r4, #4]
 8002bb6:	6014      	str	r4, [r2, #0]
 8002bb8:	b003      	add	sp, #12
 8002bba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002bbe:	f000 b8cd 	b.w	8002d5c <__malloc_unlock>
 8002bc2:	42a3      	cmp	r3, r4
 8002bc4:	d90b      	bls.n	8002bde <_free_r+0x4e>
 8002bc6:	6821      	ldr	r1, [r4, #0]
 8002bc8:	1862      	adds	r2, r4, r1
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	bf04      	itt	eq
 8002bce:	681a      	ldreq	r2, [r3, #0]
 8002bd0:	685b      	ldreq	r3, [r3, #4]
 8002bd2:	6063      	str	r3, [r4, #4]
 8002bd4:	bf04      	itt	eq
 8002bd6:	1852      	addeq	r2, r2, r1
 8002bd8:	6022      	streq	r2, [r4, #0]
 8002bda:	602c      	str	r4, [r5, #0]
 8002bdc:	e7ec      	b.n	8002bb8 <_free_r+0x28>
 8002bde:	461a      	mov	r2, r3
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	b10b      	cbz	r3, 8002be8 <_free_r+0x58>
 8002be4:	42a3      	cmp	r3, r4
 8002be6:	d9fa      	bls.n	8002bde <_free_r+0x4e>
 8002be8:	6811      	ldr	r1, [r2, #0]
 8002bea:	1855      	adds	r5, r2, r1
 8002bec:	42a5      	cmp	r5, r4
 8002bee:	d10b      	bne.n	8002c08 <_free_r+0x78>
 8002bf0:	6824      	ldr	r4, [r4, #0]
 8002bf2:	4421      	add	r1, r4
 8002bf4:	1854      	adds	r4, r2, r1
 8002bf6:	42a3      	cmp	r3, r4
 8002bf8:	6011      	str	r1, [r2, #0]
 8002bfa:	d1dd      	bne.n	8002bb8 <_free_r+0x28>
 8002bfc:	681c      	ldr	r4, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	6053      	str	r3, [r2, #4]
 8002c02:	4421      	add	r1, r4
 8002c04:	6011      	str	r1, [r2, #0]
 8002c06:	e7d7      	b.n	8002bb8 <_free_r+0x28>
 8002c08:	d902      	bls.n	8002c10 <_free_r+0x80>
 8002c0a:	230c      	movs	r3, #12
 8002c0c:	6003      	str	r3, [r0, #0]
 8002c0e:	e7d3      	b.n	8002bb8 <_free_r+0x28>
 8002c10:	6825      	ldr	r5, [r4, #0]
 8002c12:	1961      	adds	r1, r4, r5
 8002c14:	428b      	cmp	r3, r1
 8002c16:	bf04      	itt	eq
 8002c18:	6819      	ldreq	r1, [r3, #0]
 8002c1a:	685b      	ldreq	r3, [r3, #4]
 8002c1c:	6063      	str	r3, [r4, #4]
 8002c1e:	bf04      	itt	eq
 8002c20:	1949      	addeq	r1, r1, r5
 8002c22:	6021      	streq	r1, [r4, #0]
 8002c24:	6054      	str	r4, [r2, #4]
 8002c26:	e7c7      	b.n	8002bb8 <_free_r+0x28>
 8002c28:	b003      	add	sp, #12
 8002c2a:	bd30      	pop	{r4, r5, pc}
 8002c2c:	20000090 	.word	0x20000090

08002c30 <_malloc_r>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	1ccd      	adds	r5, r1, #3
 8002c34:	f025 0503 	bic.w	r5, r5, #3
 8002c38:	3508      	adds	r5, #8
 8002c3a:	2d0c      	cmp	r5, #12
 8002c3c:	bf38      	it	cc
 8002c3e:	250c      	movcc	r5, #12
 8002c40:	2d00      	cmp	r5, #0
 8002c42:	4606      	mov	r6, r0
 8002c44:	db01      	blt.n	8002c4a <_malloc_r+0x1a>
 8002c46:	42a9      	cmp	r1, r5
 8002c48:	d903      	bls.n	8002c52 <_malloc_r+0x22>
 8002c4a:	230c      	movs	r3, #12
 8002c4c:	6033      	str	r3, [r6, #0]
 8002c4e:	2000      	movs	r0, #0
 8002c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c52:	f000 f87d 	bl	8002d50 <__malloc_lock>
 8002c56:	4921      	ldr	r1, [pc, #132]	; (8002cdc <_malloc_r+0xac>)
 8002c58:	680a      	ldr	r2, [r1, #0]
 8002c5a:	4614      	mov	r4, r2
 8002c5c:	b99c      	cbnz	r4, 8002c86 <_malloc_r+0x56>
 8002c5e:	4f20      	ldr	r7, [pc, #128]	; (8002ce0 <_malloc_r+0xb0>)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	b923      	cbnz	r3, 8002c6e <_malloc_r+0x3e>
 8002c64:	4621      	mov	r1, r4
 8002c66:	4630      	mov	r0, r6
 8002c68:	f000 f862 	bl	8002d30 <_sbrk_r>
 8002c6c:	6038      	str	r0, [r7, #0]
 8002c6e:	4629      	mov	r1, r5
 8002c70:	4630      	mov	r0, r6
 8002c72:	f000 f85d 	bl	8002d30 <_sbrk_r>
 8002c76:	1c43      	adds	r3, r0, #1
 8002c78:	d123      	bne.n	8002cc2 <_malloc_r+0x92>
 8002c7a:	230c      	movs	r3, #12
 8002c7c:	6033      	str	r3, [r6, #0]
 8002c7e:	4630      	mov	r0, r6
 8002c80:	f000 f86c 	bl	8002d5c <__malloc_unlock>
 8002c84:	e7e3      	b.n	8002c4e <_malloc_r+0x1e>
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	1b5b      	subs	r3, r3, r5
 8002c8a:	d417      	bmi.n	8002cbc <_malloc_r+0x8c>
 8002c8c:	2b0b      	cmp	r3, #11
 8002c8e:	d903      	bls.n	8002c98 <_malloc_r+0x68>
 8002c90:	6023      	str	r3, [r4, #0]
 8002c92:	441c      	add	r4, r3
 8002c94:	6025      	str	r5, [r4, #0]
 8002c96:	e004      	b.n	8002ca2 <_malloc_r+0x72>
 8002c98:	6863      	ldr	r3, [r4, #4]
 8002c9a:	42a2      	cmp	r2, r4
 8002c9c:	bf0c      	ite	eq
 8002c9e:	600b      	streq	r3, [r1, #0]
 8002ca0:	6053      	strne	r3, [r2, #4]
 8002ca2:	4630      	mov	r0, r6
 8002ca4:	f000 f85a 	bl	8002d5c <__malloc_unlock>
 8002ca8:	f104 000b 	add.w	r0, r4, #11
 8002cac:	1d23      	adds	r3, r4, #4
 8002cae:	f020 0007 	bic.w	r0, r0, #7
 8002cb2:	1ac2      	subs	r2, r0, r3
 8002cb4:	d0cc      	beq.n	8002c50 <_malloc_r+0x20>
 8002cb6:	1a1b      	subs	r3, r3, r0
 8002cb8:	50a3      	str	r3, [r4, r2]
 8002cba:	e7c9      	b.n	8002c50 <_malloc_r+0x20>
 8002cbc:	4622      	mov	r2, r4
 8002cbe:	6864      	ldr	r4, [r4, #4]
 8002cc0:	e7cc      	b.n	8002c5c <_malloc_r+0x2c>
 8002cc2:	1cc4      	adds	r4, r0, #3
 8002cc4:	f024 0403 	bic.w	r4, r4, #3
 8002cc8:	42a0      	cmp	r0, r4
 8002cca:	d0e3      	beq.n	8002c94 <_malloc_r+0x64>
 8002ccc:	1a21      	subs	r1, r4, r0
 8002cce:	4630      	mov	r0, r6
 8002cd0:	f000 f82e 	bl	8002d30 <_sbrk_r>
 8002cd4:	3001      	adds	r0, #1
 8002cd6:	d1dd      	bne.n	8002c94 <_malloc_r+0x64>
 8002cd8:	e7cf      	b.n	8002c7a <_malloc_r+0x4a>
 8002cda:	bf00      	nop
 8002cdc:	20000090 	.word	0x20000090
 8002ce0:	20000094 	.word	0x20000094

08002ce4 <_realloc_r>:
 8002ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce6:	4607      	mov	r7, r0
 8002ce8:	4614      	mov	r4, r2
 8002cea:	460e      	mov	r6, r1
 8002cec:	b921      	cbnz	r1, 8002cf8 <_realloc_r+0x14>
 8002cee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	f7ff bf9c 	b.w	8002c30 <_malloc_r>
 8002cf8:	b922      	cbnz	r2, 8002d04 <_realloc_r+0x20>
 8002cfa:	f7ff ff49 	bl	8002b90 <_free_r>
 8002cfe:	4625      	mov	r5, r4
 8002d00:	4628      	mov	r0, r5
 8002d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d04:	f000 f830 	bl	8002d68 <_malloc_usable_size_r>
 8002d08:	42a0      	cmp	r0, r4
 8002d0a:	d20f      	bcs.n	8002d2c <_realloc_r+0x48>
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	4638      	mov	r0, r7
 8002d10:	f7ff ff8e 	bl	8002c30 <_malloc_r>
 8002d14:	4605      	mov	r5, r0
 8002d16:	2800      	cmp	r0, #0
 8002d18:	d0f2      	beq.n	8002d00 <_realloc_r+0x1c>
 8002d1a:	4631      	mov	r1, r6
 8002d1c:	4622      	mov	r2, r4
 8002d1e:	f7ff fa5b 	bl	80021d8 <memcpy>
 8002d22:	4631      	mov	r1, r6
 8002d24:	4638      	mov	r0, r7
 8002d26:	f7ff ff33 	bl	8002b90 <_free_r>
 8002d2a:	e7e9      	b.n	8002d00 <_realloc_r+0x1c>
 8002d2c:	4635      	mov	r5, r6
 8002d2e:	e7e7      	b.n	8002d00 <_realloc_r+0x1c>

08002d30 <_sbrk_r>:
 8002d30:	b538      	push	{r3, r4, r5, lr}
 8002d32:	4d06      	ldr	r5, [pc, #24]	; (8002d4c <_sbrk_r+0x1c>)
 8002d34:	2300      	movs	r3, #0
 8002d36:	4604      	mov	r4, r0
 8002d38:	4608      	mov	r0, r1
 8002d3a:	602b      	str	r3, [r5, #0]
 8002d3c:	f7fd fe52 	bl	80009e4 <_sbrk>
 8002d40:	1c43      	adds	r3, r0, #1
 8002d42:	d102      	bne.n	8002d4a <_sbrk_r+0x1a>
 8002d44:	682b      	ldr	r3, [r5, #0]
 8002d46:	b103      	cbz	r3, 8002d4a <_sbrk_r+0x1a>
 8002d48:	6023      	str	r3, [r4, #0]
 8002d4a:	bd38      	pop	{r3, r4, r5, pc}
 8002d4c:	200000e0 	.word	0x200000e0

08002d50 <__malloc_lock>:
 8002d50:	4801      	ldr	r0, [pc, #4]	; (8002d58 <__malloc_lock+0x8>)
 8002d52:	f7ff bf1b 	b.w	8002b8c <__retarget_lock_acquire_recursive>
 8002d56:	bf00      	nop
 8002d58:	200000e8 	.word	0x200000e8

08002d5c <__malloc_unlock>:
 8002d5c:	4801      	ldr	r0, [pc, #4]	; (8002d64 <__malloc_unlock+0x8>)
 8002d5e:	f7ff bf16 	b.w	8002b8e <__retarget_lock_release_recursive>
 8002d62:	bf00      	nop
 8002d64:	200000e8 	.word	0x200000e8

08002d68 <_malloc_usable_size_r>:
 8002d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d6c:	1f18      	subs	r0, r3, #4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bfbc      	itt	lt
 8002d72:	580b      	ldrlt	r3, [r1, r0]
 8002d74:	18c0      	addlt	r0, r0, r3
 8002d76:	4770      	bx	lr

08002d78 <_init>:
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7a:	bf00      	nop
 8002d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7e:	bc08      	pop	{r3}
 8002d80:	469e      	mov	lr, r3
 8002d82:	4770      	bx	lr

08002d84 <_fini>:
 8002d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d86:	bf00      	nop
 8002d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8a:	bc08      	pop	{r3}
 8002d8c:	469e      	mov	lr, r3
 8002d8e:	4770      	bx	lr
