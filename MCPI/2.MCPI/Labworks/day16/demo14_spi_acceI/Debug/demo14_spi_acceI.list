
demo14_spi_acceI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000360c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003800  08003800  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003800  08003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003808  08003808  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003808  08003808  00013808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800380c  0800380c  0001380c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000070  08003880  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08003880  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4f5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001925  00000000  00000000  0002b595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000850  00000000  00000000  0002cec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b8  00000000  00000000  0002d710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002083f  00000000  00000000  0002dec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a16c  00000000  00000000  0004e707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4c58  00000000  00000000  00058873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011d4cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000251c  00000000  00000000  0011d520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003784 	.word	0x08003784

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003784 	.word	0x08003784

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <LIS3DSH_WriteIO>:
#define _LIS3DSH_CS_DISABLE		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET)

static SPI_HandleTypeDef accSPI_Handle;

// Accel IO Functions
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	6039      	str	r1, [r7, #0]
 8000572:	71fb      	strb	r3, [r7, #7]
 8000574:	4613      	mov	r3, r2
 8000576:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	73fb      	strb	r3, [r7, #15]
	// Enable CS
	_LIS3DSH_CS_ENABLE;
 800057c:	2200      	movs	r2, #0
 800057e:	2108      	movs	r1, #8
 8000580:	480c      	ldr	r0, [pc, #48]	; (80005b4 <LIS3DSH_WriteIO+0x4c>)
 8000582:	f000 ff53 	bl	800142c <HAL_GPIO_WritePin>
	// Send Accel Register Address
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8000586:	f107 010f 	add.w	r1, r7, #15
 800058a:	230a      	movs	r3, #10
 800058c:	2201      	movs	r2, #1
 800058e:	480a      	ldr	r0, [pc, #40]	; (80005b8 <LIS3DSH_WriteIO+0x50>)
 8000590:	f001 fc63 	bl	8001e5a <HAL_SPI_Transmit>
	// Send Accel Register Value
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 20);
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	b29a      	uxth	r2, r3
 8000598:	2314      	movs	r3, #20
 800059a:	6839      	ldr	r1, [r7, #0]
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <LIS3DSH_WriteIO+0x50>)
 800059e:	f001 fc5c 	bl	8001e5a <HAL_SPI_Transmit>
	// Disable CS
	_LIS3DSH_CS_DISABLE;
 80005a2:	2201      	movs	r2, #1
 80005a4:	2108      	movs	r1, #8
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <LIS3DSH_WriteIO+0x4c>)
 80005a8:	f000 ff40 	bl	800142c <HAL_GPIO_WritePin>
}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000
 80005b8:	2000008c 	.word	0x2000008c

080005bc <LIS3DSH_ReadIO>:

void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	6039      	str	r1, [r7, #0]
 80005c6:	71fb      	strb	r3, [r7, #7]
 80005c8:	4613      	mov	r3, r2
 80005ca:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	723b      	strb	r3, [r7, #8]
	// Enable CS
	_LIS3DSH_CS_ENABLE;
 80005d6:	2200      	movs	r2, #0
 80005d8:	2108      	movs	r1, #8
 80005da:	4818      	ldr	r0, [pc, #96]	; (800063c <LIS3DSH_ReadIO+0x80>)
 80005dc:	f000 ff26 	bl	800142c <HAL_GPIO_WritePin>
	// Send Accel Register Address
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 80005e0:	f107 0108 	add.w	r1, r7, #8
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	4815      	ldr	r0, [pc, #84]	; (8000640 <LIS3DSH_ReadIO+0x84>)
 80005ea:	f001 fc36 	bl	8001e5a <HAL_SPI_Transmit>
	// Receive Accel Register Value
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 20);
 80005ee:	79bb      	ldrb	r3, [r7, #6]
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	f107 0108 	add.w	r1, r7, #8
 80005f6:	2314      	movs	r3, #20
 80005f8:	4811      	ldr	r0, [pc, #68]	; (8000640 <LIS3DSH_ReadIO+0x84>)
 80005fa:	f001 fd6a 	bl	80020d2 <HAL_SPI_Receive>
	// Disable CS
	_LIS3DSH_CS_DISABLE;
 80005fe:	2201      	movs	r2, #1
 8000600:	2108      	movs	r1, #8
 8000602:	480e      	ldr	r0, [pc, #56]	; (800063c <LIS3DSH_ReadIO+0x80>)
 8000604:	f000 ff12 	bl	800142c <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<size; i++)
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
 800060c:	e00c      	b.n	8000628 <LIS3DSH_ReadIO+0x6c>
		dataR[i] = spiBuf[i];
 800060e:	7bfa      	ldrb	r2, [r7, #15]
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	6839      	ldr	r1, [r7, #0]
 8000614:	440b      	add	r3, r1
 8000616:	f107 0110 	add.w	r1, r7, #16
 800061a:	440a      	add	r2, r1
 800061c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000620:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<size; i++)
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	3301      	adds	r3, #1
 8000626:	73fb      	strb	r3, [r7, #15]
 8000628:	7bfa      	ldrb	r2, [r7, #15]
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3ee      	bcc.n	800060e <LIS3DSH_ReadIO+0x52>
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000
 8000640:	2000008c 	.word	0x2000008c

08000644 <LIS3DSH_Init>:

// Accel Init
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypedef *accInitDef) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
	uint8_t spiData;
	// copy accSPI into global var
	accSPI_Handle = *accSPI;
 800064e:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <LIS3DSH_Init+0x40>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4610      	mov	r0, r2
 8000654:	4619      	mov	r1, r3
 8000656:	2358      	movs	r3, #88	; 0x58
 8000658:	461a      	mov	r2, r3
 800065a:	f002 fc5d 	bl	8002f18 <memcpy>
	// enable X, Y axes and set output data rate -- CTRL_REG4
	spiData = accInitDef->dataRate | accInitDef->enableAxes;
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	785b      	ldrb	r3, [r3, #1]
 8000666:	4313      	orrs	r3, r2
 8000668:	b2db      	uxtb	r3, r3
 800066a:	73fb      	strb	r3, [r7, #15]
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 800066c:	f107 030f 	add.w	r3, r7, #15
 8000670:	2201      	movs	r2, #1
 8000672:	4619      	mov	r1, r3
 8000674:	2020      	movs	r0, #32
 8000676:	f7ff ff77 	bl	8000568 <LIS3DSH_WriteIO>
	// if interrupt enable, enable DRDY interrupt -- LIS3DSH_CTRL_REG3_ADDR -- assignment
}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000008c 	.word	0x2000008c

08000688 <LIS3DSH_GetRawData>:

// Accel Get Raw Data
LIS3DSH_RawData LIS3DSH_GetRawData(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_RawData dataRaw;
	// read 16-bit X axis data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	2202      	movs	r2, #2
 8000696:	4619      	mov	r1, r3
 8000698:	2028      	movs	r0, #40	; 0x28
 800069a:	f7ff ff8f 	bl	80005bc <LIS3DSH_ReadIO>
	dataRaw.x = (spiBuf[1] << 8) + spiBuf[0];
 800069e:	7d7b      	ldrb	r3, [r7, #21]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	7d3b      	ldrb	r3, [r7, #20]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	4413      	add	r3, r2
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	b21b      	sxth	r3, r3
 80006b0:	81bb      	strh	r3, [r7, #12]
	// read 16-bit Y axis data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2202      	movs	r2, #2
 80006b8:	4619      	mov	r1, r3
 80006ba:	202a      	movs	r0, #42	; 0x2a
 80006bc:	f7ff ff7e 	bl	80005bc <LIS3DSH_ReadIO>
	dataRaw.y = (spiBuf[1] << 8) + spiBuf[0];
 80006c0:	7d7b      	ldrb	r3, [r7, #21]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	021b      	lsls	r3, r3, #8
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	7d3b      	ldrb	r3, [r7, #20]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	4413      	add	r3, r2
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	81fb      	strh	r3, [r7, #14]
	// read 16-bit Z axis data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	2202      	movs	r2, #2
 80006da:	4619      	mov	r1, r3
 80006dc:	202c      	movs	r0, #44	; 0x2c
 80006de:	f7ff ff6d 	bl	80005bc <LIS3DSH_ReadIO>
	dataRaw.z = (spiBuf[1] << 8) + spiBuf[0];
 80006e2:	7d7b      	ldrb	r3, [r7, #21]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	021b      	lsls	r3, r3, #8
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	7d3b      	ldrb	r3, [r7, #20]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	4413      	add	r3, r2
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	b21b      	sxth	r3, r3
 80006f4:	823b      	strh	r3, [r7, #16]
	return dataRaw;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	461a      	mov	r2, r3
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	6010      	str	r0, [r2, #0]
 8000702:	889b      	ldrh	r3, [r3, #4]
 8000704:	8093      	strh	r3, [r2, #4]
}
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <LIS3DSH_DRdy>:

// Accel Poll if Ready
bool LIS3DSH_DRdy(void) {
 800070e:	b580      	push	{r7, lr}
 8000710:	b082      	sub	sp, #8
 8000712:	af00      	add	r7, sp, #0
	uint8_t accStatus;
	do {
		LIS3DSH_ReadIO(LIS3DSH_STATUS_ADDR, &accStatus, 1);
 8000714:	1dfb      	adds	r3, r7, #7
 8000716:	2201      	movs	r2, #1
 8000718:	4619      	mov	r1, r3
 800071a:	2027      	movs	r0, #39	; 0x27
 800071c:	f7ff ff4e 	bl	80005bc <LIS3DSH_ReadIO>
	}while((accStatus & LIS3DSH_STATUS_XYZ_Msk) == 0);
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 0307 	and.w	r3, r3, #7
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0f4      	beq.n	8000714 <LIS3DSH_DRdy+0x6>
	return true;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08e      	sub	sp, #56	; 0x38
 8000738:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f000 fb5f 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f8d1 	bl	80008e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f000 f999 	bl	8000a78 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000746:	f000 f937 	bl	80009b8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800074a:	f000 f96b 	bl	8000a24 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  acc_conf.dataRate = LIS3DSH_DATARATE_25;
 800074e:	2340      	movs	r3, #64	; 0x40
 8000750:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  acc_conf.enableAxes = LIS3DSH_XYZ_ENABLE;
 8000754:	2307      	movs	r3, #7
 8000756:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  acc_conf.interruptEnable = false;
 800075a:	2300      	movs	r3, #0
 800075c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  LIS3DSH_Init(&hspi1,&acc_conf);
 8000760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000764:	4619      	mov	r1, r3
 8000766:	485b      	ldr	r0, [pc, #364]	; (80008d4 <main+0x1a0>)
 8000768:	f7ff ff6c 	bl	8000644 <LIS3DSH_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  LIS3DSH_DRdy();
 800076c:	f7ff ffcf 	bl	800070e <LIS3DSH_DRdy>

	  acc_data = LIS3DSH_GetRawData();
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff87 	bl	8000688 <LIS3DSH_GetRawData>

	  len= sprintf(str,"x =%d, y = %d, z = %d\r\n",acc_data.x,acc_data.y,acc_data.z);
 800077a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800077e:	461a      	mov	r2, r3
 8000780:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000784:	4619      	mov	r1, r3
 8000786:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800078a:	4638      	mov	r0, r7
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	460b      	mov	r3, r1
 8000790:	4951      	ldr	r1, [pc, #324]	; (80008d8 <main+0x1a4>)
 8000792:	f002 fbd7 	bl	8002f44 <siprintf>
 8000796:	62f8      	str	r0, [r7, #44]	; 0x2c
	  HAL_UART_Transmit(&huart2,(uint8_t*)str, len, HAL_MAX_DELAY);
 8000798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800079a:	b29a      	uxth	r2, r3
 800079c:	4639      	mov	r1, r7
 800079e:	f04f 33ff 	mov.w	r3, #4294967295
 80007a2:	484e      	ldr	r0, [pc, #312]	; (80008dc <main+0x1a8>)
 80007a4:	f002 f8c5 	bl	8002932 <HAL_UART_Transmit>


	  if(acc_data.x < -2048)
 80007a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80007ac:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 80007b0:	da06      	bge.n	80007c0 <main+0x8c>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b8:	4849      	ldr	r0, [pc, #292]	; (80008e0 <main+0x1ac>)
 80007ba:	f000 fe37 	bl	800142c <HAL_GPIO_WritePin>
 80007be:	e005      	b.n	80007cc <main+0x98>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c6:	4846      	ldr	r0, [pc, #280]	; (80008e0 <main+0x1ac>)
 80007c8:	f000 fe30 	bl	800142c <HAL_GPIO_WritePin>
	  }


	  if(acc_data.x > +2048)
 80007cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80007d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007d4:	dd06      	ble.n	80007e4 <main+0xb0>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007dc:	4840      	ldr	r0, [pc, #256]	; (80008e0 <main+0x1ac>)
 80007de:	f000 fe25 	bl	800142c <HAL_GPIO_WritePin>
 80007e2:	e005      	b.n	80007f0 <main+0xbc>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ea:	483d      	ldr	r0, [pc, #244]	; (80008e0 <main+0x1ac>)
 80007ec:	f000 fe1e 	bl	800142c <HAL_GPIO_WritePin>
	  }


	  if(acc_data.y < -2048)
 80007f0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80007f4:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 80007f8:	da06      	bge.n	8000808 <main+0xd4>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000800:	4837      	ldr	r0, [pc, #220]	; (80008e0 <main+0x1ac>)
 8000802:	f000 fe13 	bl	800142c <HAL_GPIO_WritePin>
 8000806:	e005      	b.n	8000814 <main+0xe0>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080e:	4834      	ldr	r0, [pc, #208]	; (80008e0 <main+0x1ac>)
 8000810:	f000 fe0c 	bl	800142c <HAL_GPIO_WritePin>
	  }

	  if(acc_data.y > +2048)
 8000814:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800081c:	dd06      	ble.n	800082c <main+0xf8>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000824:	482e      	ldr	r0, [pc, #184]	; (80008e0 <main+0x1ac>)
 8000826:	f000 fe01 	bl	800142c <HAL_GPIO_WritePin>
 800082a:	e005      	b.n	8000838 <main+0x104>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000832:	482b      	ldr	r0, [pc, #172]	; (80008e0 <main+0x1ac>)
 8000834:	f000 fdfa 	bl	800142c <HAL_GPIO_WritePin>
	  }


	  if(acc_data.z < -1048)
 8000838:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800083c:	f513 6f83 	cmn.w	r3, #1048	; 0x418
 8000840:	da18      	bge.n	8000874 <main+0x140>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000848:	4825      	ldr	r0, [pc, #148]	; (80008e0 <main+0x1ac>)
 800084a:	f000 fdef 	bl	800142c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000854:	4822      	ldr	r0, [pc, #136]	; (80008e0 <main+0x1ac>)
 8000856:	f000 fde9 	bl	800142c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000860:	481f      	ldr	r0, [pc, #124]	; (80008e0 <main+0x1ac>)
 8000862:	f000 fde3 	bl	800142c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086c:	481c      	ldr	r0, [pc, #112]	; (80008e0 <main+0x1ac>)
 800086e:	f000 fddd 	bl	800142c <HAL_GPIO_WritePin>
 8000872:	e017      	b.n	80008a4 <main+0x170>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087a:	4819      	ldr	r0, [pc, #100]	; (80008e0 <main+0x1ac>)
 800087c:	f000 fdd6 	bl	800142c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000886:	4816      	ldr	r0, [pc, #88]	; (80008e0 <main+0x1ac>)
 8000888:	f000 fdd0 	bl	800142c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000892:	4813      	ldr	r0, [pc, #76]	; (80008e0 <main+0x1ac>)
 8000894:	f000 fdca 	bl	800142c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089e:	4810      	ldr	r0, [pc, #64]	; (80008e0 <main+0x1ac>)
 80008a0:	f000 fdc4 	bl	800142c <HAL_GPIO_WritePin>

	  }

	  if(acc_data.z > +1048)
 80008a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80008a8:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 80008ac:	dd06      	ble.n	80008bc <main+0x188>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b4:	480a      	ldr	r0, [pc, #40]	; (80008e0 <main+0x1ac>)
 80008b6:	f000 fdb9 	bl	800142c <HAL_GPIO_WritePin>
 80008ba:	e005      	b.n	80008c8 <main+0x194>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c2:	4807      	ldr	r0, [pc, #28]	; (80008e0 <main+0x1ac>)
 80008c4:	f000 fdb2 	bl	800142c <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(1000);
 80008c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008cc:	f000 fb08 	bl	8000ee0 <HAL_Delay>
	  LIS3DSH_DRdy();
 80008d0:	e74c      	b.n	800076c <main+0x38>
 80008d2:	bf00      	nop
 80008d4:	200000f0 	.word	0x200000f0
 80008d8:	0800379c 	.word	0x0800379c
 80008dc:	20000148 	.word	0x20000148
 80008e0:	40020c00 	.word	0x40020c00

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b094      	sub	sp, #80	; 0x50
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 0320 	add.w	r3, r7, #32
 80008ee:	2230      	movs	r2, #48	; 0x30
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 fb1e 	bl	8002f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <SystemClock_Config+0xcc>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	4a27      	ldr	r2, [pc, #156]	; (80009b0 <SystemClock_Config+0xcc>)
 8000912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000916:	6413      	str	r3, [r2, #64]	; 0x40
 8000918:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <SystemClock_Config+0xcc>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <SystemClock_Config+0xd0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a21      	ldr	r2, [pc, #132]	; (80009b4 <SystemClock_Config+0xd0>)
 800092e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <SystemClock_Config+0xd0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000944:	2301      	movs	r3, #1
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000948:	2310      	movs	r3, #16
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2302      	movs	r3, #2
 800094e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000950:	2300      	movs	r3, #0
 8000952:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000954:	2308      	movs	r3, #8
 8000956:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000958:	2332      	movs	r3, #50	; 0x32
 800095a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800095c:	2304      	movs	r3, #4
 800095e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000960:	2307      	movs	r3, #7
 8000962:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000964:	f107 0320 	add.w	r3, r7, #32
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fd79 	bl	8001460 <HAL_RCC_OscConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000974:	f000 f8e8 	bl	8000b48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000978:	230f      	movs	r3, #15
 800097a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097c:	2302      	movs	r3, #2
 800097e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000984:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000988:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800098a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800098e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f000 ffda 	bl	8001950 <HAL_RCC_ClockConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009a2:	f000 f8d1 	bl	8000b48 <Error_Handler>
  }
}
 80009a6:	bf00      	nop
 80009a8:	3750      	adds	r7, #80	; 0x50
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40007000 	.word	0x40007000

080009b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_SPI1_Init+0x64>)
 80009be:	4a18      	ldr	r2, [pc, #96]	; (8000a20 <MX_SPI1_Init+0x68>)
 80009c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_SPI1_Init+0x64>)
 80009c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_SPI1_Init+0x64>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_SPI1_Init+0x64>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_SPI1_Init+0x64>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_SPI1_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_SPI1_Init+0x64>)
 80009e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_SPI1_Init+0x64>)
 80009ec:	2210      	movs	r2, #16
 80009ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <MX_SPI1_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_SPI1_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <MX_SPI1_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_SPI1_Init+0x64>)
 8000a04:	220a      	movs	r2, #10
 8000a06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_SPI1_Init+0x64>)
 8000a0a:	f001 f99d 	bl	8001d48 <HAL_SPI_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a14:	f000 f898 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200000f0 	.word	0x200000f0
 8000a20:	40013000 	.word	0x40013000

08000a24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <MX_USART2_UART_Init+0x50>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a5c:	f001 ff1c 	bl	8002898 <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a66:	f000 f86f 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000148 	.word	0x20000148
 8000a74:	40004400 	.word	0x40004400

08000a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <MX_GPIO_Init+0xc4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a29      	ldr	r2, [pc, #164]	; (8000b3c <MX_GPIO_Init+0xc4>)
 8000a98:	f043 0310 	orr.w	r3, r3, #16
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <MX_GPIO_Init+0xc4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0310 	and.w	r3, r3, #16
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <MX_GPIO_Init+0xc4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <MX_GPIO_Init+0xc4>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <MX_GPIO_Init+0xc4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_GPIO_Init+0xc4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <MX_GPIO_Init+0xc4>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_GPIO_Init+0xc4>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2108      	movs	r1, #8
 8000ae6:	4816      	ldr	r0, [pc, #88]	; (8000b40 <MX_GPIO_Init+0xc8>)
 8000ae8:	f000 fca0 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000af2:	4814      	ldr	r0, [pc, #80]	; (8000b44 <MX_GPIO_Init+0xcc>)
 8000af4:	f000 fc9a 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000af8:	2308      	movs	r3, #8
 8000afa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480c      	ldr	r0, [pc, #48]	; (8000b40 <MX_GPIO_Init+0xc8>)
 8000b10:	f000 faf0 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b14:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_GPIO_Init+0xcc>)
 8000b2e:	f000 fae1 	bl	80010f4 <HAL_GPIO_Init>

}
 8000b32:	bf00      	nop
 8000b34:	3720      	adds	r7, #32
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40020c00 	.word	0x40020c00

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>
	...

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b92:	2007      	movs	r0, #7
 8000b94:	f000 fa7a 	bl	800108c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <HAL_SPI_MspInit+0x84>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d12b      	bne.n	8000c1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bfe:	23e0      	movs	r3, #224	; 0xe0
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c0e:	2305      	movs	r3, #5
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_SPI_MspInit+0x8c>)
 8000c1a:	f000 fa6b 	bl	80010f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40013000 	.word	0x40013000
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000

08000c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a19      	ldr	r2, [pc, #100]	; (8000cb8 <HAL_UART_MspInit+0x84>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12b      	bne.n	8000cae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_UART_MspInit+0x88>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_UART_MspInit+0x88>)
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_UART_MspInit+0x88>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_UART_MspInit+0x88>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_UART_MspInit+0x88>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_UART_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c8e:	230c      	movs	r3, #12
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c9e:	2307      	movs	r3, #7
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <HAL_UART_MspInit+0x8c>)
 8000caa:	f000 fa23 	bl	80010f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	; 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40004400 	.word	0x40004400
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <NMI_Handler+0x4>

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d10:	f000 f8c6 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <_sbrk+0x5c>)
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <_sbrk+0x60>)
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <_sbrk+0x64>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <_sbrk+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d207      	bcs.n	8000d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d48:	f002 f8bc 	bl	8002ec4 <__errno>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	220c      	movs	r2, #12
 8000d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	e009      	b.n	8000d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <_sbrk+0x64>)
 8000d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20020000 	.word	0x20020000
 8000d78:	00000400 	.word	0x00000400
 8000d7c:	200000e4 	.word	0x200000e4
 8000d80:	200001a0 	.word	0x200001a0

08000d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <SystemInit+0x20>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <SystemInit+0x20>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dac:	480d      	ldr	r0, [pc, #52]	; (8000de4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dae:	490e      	ldr	r1, [pc, #56]	; (8000de8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db0:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc4:	4c0b      	ldr	r4, [pc, #44]	; (8000df4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dd2:	f7ff ffd7 	bl	8000d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f002 f87b 	bl	8002ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dda:	f7ff fcab 	bl	8000734 <main>
  bx  lr    
 8000dde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dec:	08003810 	.word	0x08003810
  ldr r2, =_sbss
 8000df0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000df4:	200001a0 	.word	0x200001a0

08000df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <HAL_Init+0x40>)
 8000e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_Init+0x40>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_Init+0x40>)
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f931 	bl	800108c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f808 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fe90 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x54>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x58>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f93b 	bl	80010da <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00e      	b.n	8000e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d80a      	bhi.n	8000e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f000 f911 	bl	80010a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e80:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <HAL_InitTick+0x5c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x20>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	2000018c 	.word	0x2000018c

08000ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_GetTick+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	2000018c 	.word	0x2000018c

08000ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee8:	f7ff ffee 	bl	8000ec8 <HAL_GetTick>
 8000eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef8:	d005      	beq.n	8000f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <HAL_Delay+0x44>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f06:	bf00      	nop
 8000f08:	f7ff ffde 	bl	8000ec8 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d8f7      	bhi.n	8000f08 <HAL_Delay+0x28>
  {
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008

08000f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f44:	4013      	ands	r3, r2
 8000f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5a:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	60d3      	str	r3, [r2, #12]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <__NVIC_GetPriorityGrouping+0x18>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	f003 0307 	and.w	r3, r3, #7
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001058:	d301      	bcc.n	800105e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105a:	2301      	movs	r3, #1
 800105c:	e00f      	b.n	800107e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <SysTick_Config+0x40>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001066:	210f      	movs	r1, #15
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f7ff ff8e 	bl	8000f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <SysTick_Config+0x40>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <SysTick_Config+0x40>)
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000e010 	.word	0xe000e010

0800108c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff47 	bl	8000f28 <__NVIC_SetPriorityGrouping>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b4:	f7ff ff5c 	bl	8000f70 <__NVIC_GetPriorityGrouping>
 80010b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	f7ff ff8e 	bl	8000fe0 <NVIC_EncodePriority>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff5d 	bl	8000f8c <__NVIC_SetPriority>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ffb0 	bl	8001048 <SysTick_Config>
 80010e8:	4603      	mov	r3, r0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	e16b      	b.n	80013e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001110:	2201      	movs	r2, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	429a      	cmp	r2, r3
 800112a:	f040 815a 	bne.w	80013e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b01      	cmp	r3, #1
 8001138:	d005      	beq.n	8001146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001142:	2b02      	cmp	r3, #2
 8001144:	d130      	bne.n	80011a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800117c:	2201      	movs	r2, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 0201 	and.w	r2, r3, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d017      	beq.n	80011e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d123      	bne.n	8001238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	69b9      	ldr	r1, [r7, #24]
 8001234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0203 	and.w	r2, r3, #3
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80b4 	beq.w	80013e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b60      	ldr	r3, [pc, #384]	; (8001400 <HAL_GPIO_Init+0x30c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a5f      	ldr	r2, [pc, #380]	; (8001400 <HAL_GPIO_Init+0x30c>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b5d      	ldr	r3, [pc, #372]	; (8001400 <HAL_GPIO_Init+0x30c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001296:	4a5b      	ldr	r2, [pc, #364]	; (8001404 <HAL_GPIO_Init+0x310>)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a52      	ldr	r2, [pc, #328]	; (8001408 <HAL_GPIO_Init+0x314>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d02b      	beq.n	800131a <HAL_GPIO_Init+0x226>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a51      	ldr	r2, [pc, #324]	; (800140c <HAL_GPIO_Init+0x318>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d025      	beq.n	8001316 <HAL_GPIO_Init+0x222>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a50      	ldr	r2, [pc, #320]	; (8001410 <HAL_GPIO_Init+0x31c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d01f      	beq.n	8001312 <HAL_GPIO_Init+0x21e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4f      	ldr	r2, [pc, #316]	; (8001414 <HAL_GPIO_Init+0x320>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d019      	beq.n	800130e <HAL_GPIO_Init+0x21a>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4e      	ldr	r2, [pc, #312]	; (8001418 <HAL_GPIO_Init+0x324>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0x216>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4d      	ldr	r2, [pc, #308]	; (800141c <HAL_GPIO_Init+0x328>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00d      	beq.n	8001306 <HAL_GPIO_Init+0x212>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4c      	ldr	r2, [pc, #304]	; (8001420 <HAL_GPIO_Init+0x32c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d007      	beq.n	8001302 <HAL_GPIO_Init+0x20e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4b      	ldr	r2, [pc, #300]	; (8001424 <HAL_GPIO_Init+0x330>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_GPIO_Init+0x20a>
 80012fa:	2307      	movs	r3, #7
 80012fc:	e00e      	b.n	800131c <HAL_GPIO_Init+0x228>
 80012fe:	2308      	movs	r3, #8
 8001300:	e00c      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001302:	2306      	movs	r3, #6
 8001304:	e00a      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001306:	2305      	movs	r3, #5
 8001308:	e008      	b.n	800131c <HAL_GPIO_Init+0x228>
 800130a:	2304      	movs	r3, #4
 800130c:	e006      	b.n	800131c <HAL_GPIO_Init+0x228>
 800130e:	2303      	movs	r3, #3
 8001310:	e004      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001312:	2302      	movs	r3, #2
 8001314:	e002      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <HAL_GPIO_Init+0x228>
 800131a:	2300      	movs	r3, #0
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	f002 0203 	and.w	r2, r2, #3
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	4093      	lsls	r3, r2
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800132c:	4935      	ldr	r1, [pc, #212]	; (8001404 <HAL_GPIO_Init+0x310>)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	3302      	adds	r3, #2
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800133a:	4b3b      	ldr	r3, [pc, #236]	; (8001428 <HAL_GPIO_Init+0x334>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800135e:	4a32      	ldr	r2, [pc, #200]	; (8001428 <HAL_GPIO_Init+0x334>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001364:	4b30      	ldr	r3, [pc, #192]	; (8001428 <HAL_GPIO_Init+0x334>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <HAL_GPIO_Init+0x334>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <HAL_GPIO_Init+0x334>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013b2:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_GPIO_Init+0x334>)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HAL_GPIO_Init+0x334>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013dc:	4a12      	ldr	r2, [pc, #72]	; (8001428 <HAL_GPIO_Init+0x334>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3301      	adds	r3, #1
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	2b0f      	cmp	r3, #15
 80013ec:	f67f ae90 	bls.w	8001110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800
 8001404:	40013800 	.word	0x40013800
 8001408:	40020000 	.word	0x40020000
 800140c:	40020400 	.word	0x40020400
 8001410:	40020800 	.word	0x40020800
 8001414:	40020c00 	.word	0x40020c00
 8001418:	40021000 	.word	0x40021000
 800141c:	40021400 	.word	0x40021400
 8001420:	40021800 	.word	0x40021800
 8001424:	40021c00 	.word	0x40021c00
 8001428:	40013c00 	.word	0x40013c00

0800142c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001448:	e003      	b.n	8001452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800144a:	887b      	ldrh	r3, [r7, #2]
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	619a      	str	r2, [r3, #24]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e264      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d075      	beq.n	800156a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800147e:	4ba3      	ldr	r3, [pc, #652]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b04      	cmp	r3, #4
 8001488:	d00c      	beq.n	80014a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800148a:	4ba0      	ldr	r3, [pc, #640]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001492:	2b08      	cmp	r3, #8
 8001494:	d112      	bne.n	80014bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001496:	4b9d      	ldr	r3, [pc, #628]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014a2:	d10b      	bne.n	80014bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	4b99      	ldr	r3, [pc, #612]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d05b      	beq.n	8001568 <HAL_RCC_OscConfig+0x108>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d157      	bne.n	8001568 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e23f      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c4:	d106      	bne.n	80014d4 <HAL_RCC_OscConfig+0x74>
 80014c6:	4b91      	ldr	r3, [pc, #580]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a90      	ldr	r2, [pc, #576]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e01d      	b.n	8001510 <HAL_RCC_OscConfig+0xb0>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x98>
 80014de:	4b8b      	ldr	r3, [pc, #556]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a8a      	ldr	r2, [pc, #552]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b88      	ldr	r3, [pc, #544]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a87      	ldr	r2, [pc, #540]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e00b      	b.n	8001510 <HAL_RCC_OscConfig+0xb0>
 80014f8:	4b84      	ldr	r3, [pc, #528]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a83      	ldr	r2, [pc, #524]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b81      	ldr	r3, [pc, #516]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a80      	ldr	r2, [pc, #512]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 800150a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d013      	beq.n	8001540 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fcd6 	bl	8000ec8 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fcd2 	bl	8000ec8 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e204      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b76      	ldr	r3, [pc, #472]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0xc0>
 800153e:	e014      	b.n	800156a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fcc2 	bl	8000ec8 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fcbe 	bl	8000ec8 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e1f0      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	4b6c      	ldr	r3, [pc, #432]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0xe8>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d063      	beq.n	800163e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001576:	4b65      	ldr	r3, [pc, #404]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00b      	beq.n	800159a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001582:	4b62      	ldr	r3, [pc, #392]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800158a:	2b08      	cmp	r3, #8
 800158c:	d11c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800158e:	4b5f      	ldr	r3, [pc, #380]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d116      	bne.n	80015c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	4b5c      	ldr	r3, [pc, #368]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <HAL_RCC_OscConfig+0x152>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d001      	beq.n	80015b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e1c4      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b2:	4b56      	ldr	r3, [pc, #344]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4952      	ldr	r1, [pc, #328]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	e03a      	b.n	800163e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d0:	4b4f      	ldr	r3, [pc, #316]	; (8001710 <HAL_RCC_OscConfig+0x2b0>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d6:	f7ff fc77 	bl	8000ec8 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015de:	f7ff fc73 	bl	8000ec8 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e1a5      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	4b46      	ldr	r3, [pc, #280]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fc:	4b43      	ldr	r3, [pc, #268]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4940      	ldr	r1, [pc, #256]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
 8001610:	e015      	b.n	800163e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001612:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_RCC_OscConfig+0x2b0>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fc56 	bl	8000ec8 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001620:	f7ff fc52 	bl	8000ec8 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e184      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d030      	beq.n	80016ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d016      	beq.n	8001680 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001652:	4b30      	ldr	r3, [pc, #192]	; (8001714 <HAL_RCC_OscConfig+0x2b4>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001658:	f7ff fc36 	bl	8000ec8 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001660:	f7ff fc32 	bl	8000ec8 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e164      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	4b26      	ldr	r3, [pc, #152]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x200>
 800167e:	e015      	b.n	80016ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001680:	4b24      	ldr	r3, [pc, #144]	; (8001714 <HAL_RCC_OscConfig+0x2b4>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff fc1f 	bl	8000ec8 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800168e:	f7ff fc1b 	bl	8000ec8 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e14d      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80016a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f0      	bne.n	800168e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80a0 	beq.w	80017fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10f      	bne.n	80016ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e6:	2301      	movs	r3, #1
 80016e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_RCC_OscConfig+0x2b8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d121      	bne.n	800173a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_RCC_OscConfig+0x2b8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HAL_RCC_OscConfig+0x2b8>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001702:	f7ff fbe1 	bl	8000ec8 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	e011      	b.n	800172e <HAL_RCC_OscConfig+0x2ce>
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	42470000 	.word	0x42470000
 8001714:	42470e80 	.word	0x42470e80
 8001718:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171c:	f7ff fbd4 	bl	8000ec8 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e106      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172e:	4b85      	ldr	r3, [pc, #532]	; (8001944 <HAL_RCC_OscConfig+0x4e4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d106      	bne.n	8001750 <HAL_RCC_OscConfig+0x2f0>
 8001742:	4b81      	ldr	r3, [pc, #516]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001746:	4a80      	ldr	r2, [pc, #512]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6713      	str	r3, [r2, #112]	; 0x70
 800174e:	e01c      	b.n	800178a <HAL_RCC_OscConfig+0x32a>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b05      	cmp	r3, #5
 8001756:	d10c      	bne.n	8001772 <HAL_RCC_OscConfig+0x312>
 8001758:	4b7b      	ldr	r3, [pc, #492]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 800175a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175c:	4a7a      	ldr	r2, [pc, #488]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	6713      	str	r3, [r2, #112]	; 0x70
 8001764:	4b78      	ldr	r3, [pc, #480]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001768:	4a77      	ldr	r2, [pc, #476]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6713      	str	r3, [r2, #112]	; 0x70
 8001770:	e00b      	b.n	800178a <HAL_RCC_OscConfig+0x32a>
 8001772:	4b75      	ldr	r3, [pc, #468]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001776:	4a74      	ldr	r2, [pc, #464]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	6713      	str	r3, [r2, #112]	; 0x70
 800177e:	4b72      	ldr	r3, [pc, #456]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001782:	4a71      	ldr	r2, [pc, #452]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001784:	f023 0304 	bic.w	r3, r3, #4
 8001788:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d015      	beq.n	80017be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001792:	f7ff fb99 	bl	8000ec8 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001798:	e00a      	b.n	80017b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179a:	f7ff fb95 	bl	8000ec8 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e0c5      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b0:	4b65      	ldr	r3, [pc, #404]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 80017b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0ee      	beq.n	800179a <HAL_RCC_OscConfig+0x33a>
 80017bc:	e014      	b.n	80017e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017be:	f7ff fb83 	bl	8000ec8 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c4:	e00a      	b.n	80017dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c6:	f7ff fb7f 	bl	8000ec8 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e0af      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017dc:	4b5a      	ldr	r3, [pc, #360]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 80017de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1ee      	bne.n	80017c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d105      	bne.n	80017fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ee:	4b56      	ldr	r3, [pc, #344]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a55      	ldr	r2, [pc, #340]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 80017f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 809b 	beq.w	800193a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001804:	4b50      	ldr	r3, [pc, #320]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 030c 	and.w	r3, r3, #12
 800180c:	2b08      	cmp	r3, #8
 800180e:	d05c      	beq.n	80018ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d141      	bne.n	800189c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001818:	4b4c      	ldr	r3, [pc, #304]	; (800194c <HAL_RCC_OscConfig+0x4ec>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff fb53 	bl	8000ec8 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001826:	f7ff fb4f 	bl	8000ec8 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e081      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001838:	4b43      	ldr	r3, [pc, #268]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f0      	bne.n	8001826 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69da      	ldr	r2, [r3, #28]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	019b      	lsls	r3, r3, #6
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	085b      	lsrs	r3, r3, #1
 800185c:	3b01      	subs	r3, #1
 800185e:	041b      	lsls	r3, r3, #16
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	061b      	lsls	r3, r3, #24
 8001868:	4937      	ldr	r1, [pc, #220]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 800186a:	4313      	orrs	r3, r2
 800186c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800186e:	4b37      	ldr	r3, [pc, #220]	; (800194c <HAL_RCC_OscConfig+0x4ec>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff fb28 	bl	8000ec8 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187c:	f7ff fb24 	bl	8000ec8 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e056      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188e:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x41c>
 800189a:	e04e      	b.n	800193a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189c:	4b2b      	ldr	r3, [pc, #172]	; (800194c <HAL_RCC_OscConfig+0x4ec>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff fb11 	bl	8000ec8 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018aa:	f7ff fb0d 	bl	8000ec8 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e03f      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018bc:	4b22      	ldr	r3, [pc, #136]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f0      	bne.n	80018aa <HAL_RCC_OscConfig+0x44a>
 80018c8:	e037      	b.n	800193a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e032      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d028      	beq.n	8001936 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d121      	bne.n	8001936 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d11a      	bne.n	8001936 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001906:	4013      	ands	r3, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800190c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800190e:	4293      	cmp	r3, r2
 8001910:	d111      	bne.n	8001936 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	085b      	lsrs	r3, r3, #1
 800191e:	3b01      	subs	r3, #1
 8001920:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d107      	bne.n	8001936 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d001      	beq.n	800193a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40007000 	.word	0x40007000
 8001948:	40023800 	.word	0x40023800
 800194c:	42470060 	.word	0x42470060

08001950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0cc      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001964:	4b68      	ldr	r3, [pc, #416]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d90c      	bls.n	800198c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b65      	ldr	r3, [pc, #404]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b63      	ldr	r3, [pc, #396]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0b8      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d020      	beq.n	80019da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a4:	4b59      	ldr	r3, [pc, #356]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4a58      	ldr	r2, [pc, #352]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019bc:	4b53      	ldr	r3, [pc, #332]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4a52      	ldr	r2, [pc, #328]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c8:	4b50      	ldr	r3, [pc, #320]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	494d      	ldr	r1, [pc, #308]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d044      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d119      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e07f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d003      	beq.n	8001a0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0e:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e06f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e067      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2e:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f023 0203 	bic.w	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4934      	ldr	r1, [pc, #208]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a40:	f7ff fa42 	bl	8000ec8 <HAL_GetTick>
 8001a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a48:	f7ff fa3e 	bl	8000ec8 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e04f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 020c 	and.w	r2, r3, #12
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d1eb      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a70:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d20c      	bcs.n	8001a98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e032      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4916      	ldr	r1, [pc, #88]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	490e      	ldr	r1, [pc, #56]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ad6:	f000 f821 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8001ada:	4602      	mov	r2, r0
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	490a      	ldr	r1, [pc, #40]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	5ccb      	ldrb	r3, [r1, r3]
 8001aea:	fa22 f303 	lsr.w	r3, r2, r3
 8001aee:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f9a2 	bl	8000e40 <HAL_InitTick>

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023c00 	.word	0x40023c00
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	080037b4 	.word	0x080037b4
 8001b14:	20000000 	.word	0x20000000
 8001b18:	20000004 	.word	0x20000004

08001b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b34:	4b67      	ldr	r3, [pc, #412]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d00d      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0x40>
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	f200 80bd 	bhi.w	8001cc0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0x34>
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d003      	beq.n	8001b56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b4e:	e0b7      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b50:	4b61      	ldr	r3, [pc, #388]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b52:	60bb      	str	r3, [r7, #8]
       break;
 8001b54:	e0b7      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b56:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b58:	60bb      	str	r3, [r7, #8]
      break;
 8001b5a:	e0b4      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b5c:	4b5d      	ldr	r3, [pc, #372]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b66:	4b5b      	ldr	r3, [pc, #364]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d04d      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b72:	4b58      	ldr	r3, [pc, #352]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	099b      	lsrs	r3, r3, #6
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b82:	f04f 0100 	mov.w	r1, #0
 8001b86:	ea02 0800 	and.w	r8, r2, r0
 8001b8a:	ea03 0901 	and.w	r9, r3, r1
 8001b8e:	4640      	mov	r0, r8
 8001b90:	4649      	mov	r1, r9
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	014b      	lsls	r3, r1, #5
 8001b9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ba0:	0142      	lsls	r2, r0, #5
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	ebb0 0008 	subs.w	r0, r0, r8
 8001baa:	eb61 0109 	sbc.w	r1, r1, r9
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	018b      	lsls	r3, r1, #6
 8001bb8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bbc:	0182      	lsls	r2, r0, #6
 8001bbe:	1a12      	subs	r2, r2, r0
 8001bc0:	eb63 0301 	sbc.w	r3, r3, r1
 8001bc4:	f04f 0000 	mov.w	r0, #0
 8001bc8:	f04f 0100 	mov.w	r1, #0
 8001bcc:	00d9      	lsls	r1, r3, #3
 8001bce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bd2:	00d0      	lsls	r0, r2, #3
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	eb12 0208 	adds.w	r2, r2, r8
 8001bdc:	eb43 0309 	adc.w	r3, r3, r9
 8001be0:	f04f 0000 	mov.w	r0, #0
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	0259      	lsls	r1, r3, #9
 8001bea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001bee:	0250      	lsls	r0, r2, #9
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	f7fe fb36 	bl	8000270 <__aeabi_uldivmod>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4613      	mov	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e04a      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0e:	4b31      	ldr	r3, [pc, #196]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	099b      	lsrs	r3, r3, #6
 8001c14:	461a      	mov	r2, r3
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c1e:	f04f 0100 	mov.w	r1, #0
 8001c22:	ea02 0400 	and.w	r4, r2, r0
 8001c26:	ea03 0501 	and.w	r5, r3, r1
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	014b      	lsls	r3, r1, #5
 8001c38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c3c:	0142      	lsls	r2, r0, #5
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	1b00      	subs	r0, r0, r4
 8001c44:	eb61 0105 	sbc.w	r1, r1, r5
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	018b      	lsls	r3, r1, #6
 8001c52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c56:	0182      	lsls	r2, r0, #6
 8001c58:	1a12      	subs	r2, r2, r0
 8001c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c5e:	f04f 0000 	mov.w	r0, #0
 8001c62:	f04f 0100 	mov.w	r1, #0
 8001c66:	00d9      	lsls	r1, r3, #3
 8001c68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c6c:	00d0      	lsls	r0, r2, #3
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	1912      	adds	r2, r2, r4
 8001c74:	eb45 0303 	adc.w	r3, r5, r3
 8001c78:	f04f 0000 	mov.w	r0, #0
 8001c7c:	f04f 0100 	mov.w	r1, #0
 8001c80:	0299      	lsls	r1, r3, #10
 8001c82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c86:	0290      	lsls	r0, r2, #10
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	461a      	mov	r2, r3
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	f7fe faea 	bl	8000270 <__aeabi_uldivmod>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbc:	60bb      	str	r3, [r7, #8]
      break;
 8001cbe:	e002      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001cc2:	60bb      	str	r3, [r7, #8]
      break;
 8001cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	00f42400 	.word	0x00f42400
 8001cdc:	007a1200 	.word	0x007a1200

08001ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000000 	.word	0x20000000

08001cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cfc:	f7ff fff0 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	0a9b      	lsrs	r3, r3, #10
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	4903      	ldr	r1, [pc, #12]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	080037c4 	.word	0x080037c4

08001d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d24:	f7ff ffdc 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	0b5b      	lsrs	r3, r3, #13
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	4903      	ldr	r1, [pc, #12]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d36:	5ccb      	ldrb	r3, [r1, r3]
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40023800 	.word	0x40023800
 8001d44:	080037c4 	.word	0x080037c4

08001d48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e07b      	b.n	8001e52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d108      	bne.n	8001d74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d6a:	d009      	beq.n	8001d80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
 8001d72:	e005      	b.n	8001d80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe ff02 	bl	8000ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001db6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e04:	ea42 0103 	orr.w	r1, r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	0c1b      	lsrs	r3, r3, #16
 8001e1e:	f003 0104 	and.w	r1, r3, #4
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	f003 0210 	and.w	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	69da      	ldr	r2, [r3, #28]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b088      	sub	sp, #32
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	4613      	mov	r3, r2
 8001e68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_SPI_Transmit+0x22>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e126      	b.n	80020ca <HAL_SPI_Transmit+0x270>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e84:	f7ff f820 	bl	8000ec8 <HAL_GetTick>
 8001e88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d002      	beq.n	8001ea0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e9e:	e10b      	b.n	80020b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <HAL_SPI_Transmit+0x52>
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d102      	bne.n	8001eb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001eb0:	e102      	b.n	80020b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	88fa      	ldrh	r2, [r7, #6]
 8001eca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	88fa      	ldrh	r2, [r7, #6]
 8001ed0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ef8:	d10f      	bne.n	8001f1a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f24:	2b40      	cmp	r3, #64	; 0x40
 8001f26:	d007      	beq.n	8001f38 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f40:	d14b      	bne.n	8001fda <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <HAL_SPI_Transmit+0xf6>
 8001f4a:	8afb      	ldrh	r3, [r7, #22]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d13e      	bne.n	8001fce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	881a      	ldrh	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	1c9a      	adds	r2, r3, #2
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f74:	e02b      	b.n	8001fce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d112      	bne.n	8001faa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	881a      	ldrh	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	1c9a      	adds	r2, r3, #2
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fa8:	e011      	b.n	8001fce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001faa:	f7fe ff8d 	bl	8000ec8 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d803      	bhi.n	8001fc2 <HAL_SPI_Transmit+0x168>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d102      	bne.n	8001fc8 <HAL_SPI_Transmit+0x16e>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001fcc:	e074      	b.n	80020b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1ce      	bne.n	8001f76 <HAL_SPI_Transmit+0x11c>
 8001fd8:	e04c      	b.n	8002074 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d002      	beq.n	8001fe8 <HAL_SPI_Transmit+0x18e>
 8001fe2:	8afb      	ldrh	r3, [r7, #22]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d140      	bne.n	800206a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	330c      	adds	r3, #12
 8001ff2:	7812      	ldrb	r2, [r2, #0]
 8001ff4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800200e:	e02c      	b.n	800206a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b02      	cmp	r3, #2
 800201c:	d113      	bne.n	8002046 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	330c      	adds	r3, #12
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	86da      	strh	r2, [r3, #54]	; 0x36
 8002044:	e011      	b.n	800206a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002046:	f7fe ff3f 	bl	8000ec8 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d803      	bhi.n	800205e <HAL_SPI_Transmit+0x204>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d102      	bne.n	8002064 <HAL_SPI_Transmit+0x20a>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002068:	e026      	b.n	80020b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1cd      	bne.n	8002010 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	6839      	ldr	r1, [r7, #0]
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 fbcb 	bl	8002814 <SPI_EndRxTxTransaction>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10a      	bne.n	80020a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	77fb      	strb	r3, [r7, #31]
 80020b4:	e000      	b.n	80020b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80020b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3720      	adds	r7, #32
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b088      	sub	sp, #32
 80020d6:	af02      	add	r7, sp, #8
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	4613      	mov	r3, r2
 80020e0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020ee:	d112      	bne.n	8002116 <HAL_SPI_Receive+0x44>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10e      	bne.n	8002116 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2204      	movs	r2, #4
 80020fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002100:	88fa      	ldrh	r2, [r7, #6]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	4613      	mov	r3, r2
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f8f1 	bl	80022f4 <HAL_SPI_TransmitReceive>
 8002112:	4603      	mov	r3, r0
 8002114:	e0ea      	b.n	80022ec <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_SPI_Receive+0x52>
 8002120:	2302      	movs	r3, #2
 8002122:	e0e3      	b.n	80022ec <HAL_SPI_Receive+0x21a>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800212c:	f7fe fecc 	bl	8000ec8 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b01      	cmp	r3, #1
 800213c:	d002      	beq.n	8002144 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800213e:	2302      	movs	r3, #2
 8002140:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002142:	e0ca      	b.n	80022da <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <HAL_SPI_Receive+0x7e>
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002154:	e0c1      	b.n	80022da <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2204      	movs	r2, #4
 800215a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	88fa      	ldrh	r2, [r7, #6]
 800216e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	88fa      	ldrh	r2, [r7, #6]
 8002174:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800219c:	d10f      	bne.n	80021be <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c8:	2b40      	cmp	r3, #64	; 0x40
 80021ca:	d007      	beq.n	80021dc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d162      	bne.n	80022aa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80021e4:	e02e      	b.n	8002244 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d115      	bne.n	8002220 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f103 020c 	add.w	r2, r3, #12
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002214:	b29b      	uxth	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800221e:	e011      	b.n	8002244 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002220:	f7fe fe52 	bl	8000ec8 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d803      	bhi.n	8002238 <HAL_SPI_Receive+0x166>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002236:	d102      	bne.n	800223e <HAL_SPI_Receive+0x16c>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002242:	e04a      	b.n	80022da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1cb      	bne.n	80021e6 <HAL_SPI_Receive+0x114>
 800224e:	e031      	b.n	80022b4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b01      	cmp	r3, #1
 800225c:	d113      	bne.n	8002286 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	b292      	uxth	r2, r2
 800226a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002270:	1c9a      	adds	r2, r3, #2
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002284:	e011      	b.n	80022aa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002286:	f7fe fe1f 	bl	8000ec8 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d803      	bhi.n	800229e <HAL_SPI_Receive+0x1cc>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d102      	bne.n	80022a4 <HAL_SPI_Receive+0x1d2>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80022a8:	e017      	b.n	80022da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1cd      	bne.n	8002250 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	6839      	ldr	r1, [r7, #0]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 fa45 	bl	8002748 <SPI_EndRxTransaction>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2220      	movs	r2, #32
 80022c8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	75fb      	strb	r3, [r7, #23]
 80022d6:	e000      	b.n	80022da <HAL_SPI_Receive+0x208>
  }

error :
 80022d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08c      	sub	sp, #48	; 0x30
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002302:	2301      	movs	r3, #1
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_SPI_TransmitReceive+0x26>
 8002316:	2302      	movs	r3, #2
 8002318:	e18a      	b.n	8002630 <HAL_SPI_TransmitReceive+0x33c>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002322:	f7fe fdd1 	bl	8000ec8 <HAL_GetTick>
 8002326:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800232e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002338:	887b      	ldrh	r3, [r7, #2]
 800233a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800233c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002340:	2b01      	cmp	r3, #1
 8002342:	d00f      	beq.n	8002364 <HAL_SPI_TransmitReceive+0x70>
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800234a:	d107      	bne.n	800235c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d103      	bne.n	800235c <HAL_SPI_TransmitReceive+0x68>
 8002354:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002358:	2b04      	cmp	r3, #4
 800235a:	d003      	beq.n	8002364 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800235c:	2302      	movs	r3, #2
 800235e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002362:	e15b      	b.n	800261c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_SPI_TransmitReceive+0x82>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <HAL_SPI_TransmitReceive+0x82>
 8002370:	887b      	ldrh	r3, [r7, #2]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800237c:	e14e      	b.n	800261c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b04      	cmp	r3, #4
 8002388:	d003      	beq.n	8002392 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2205      	movs	r2, #5
 800238e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	887a      	ldrh	r2, [r7, #2]
 80023a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	887a      	ldrh	r2, [r7, #2]
 80023a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	887a      	ldrh	r2, [r7, #2]
 80023ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d2:	2b40      	cmp	r3, #64	; 0x40
 80023d4:	d007      	beq.n	80023e6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ee:	d178      	bne.n	80024e2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_SPI_TransmitReceive+0x10a>
 80023f8:	8b7b      	ldrh	r3, [r7, #26]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d166      	bne.n	80024cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	881a      	ldrh	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	1c9a      	adds	r2, r3, #2
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002422:	e053      	b.n	80024cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b02      	cmp	r3, #2
 8002430:	d11b      	bne.n	800246a <HAL_SPI_TransmitReceive+0x176>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d016      	beq.n	800246a <HAL_SPI_TransmitReceive+0x176>
 800243c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243e:	2b01      	cmp	r3, #1
 8002440:	d113      	bne.n	800246a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	881a      	ldrh	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	1c9a      	adds	r2, r3, #2
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d119      	bne.n	80024ac <HAL_SPI_TransmitReceive+0x1b8>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800247c:	b29b      	uxth	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d014      	beq.n	80024ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248c:	b292      	uxth	r2, r2
 800248e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	1c9a      	adds	r2, r3, #2
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024a8:	2301      	movs	r3, #1
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024ac:	f7fe fd0c 	bl	8000ec8 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d807      	bhi.n	80024cc <HAL_SPI_TransmitReceive+0x1d8>
 80024bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c2:	d003      	beq.n	80024cc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024ca:	e0a7      	b.n	800261c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1a6      	bne.n	8002424 <HAL_SPI_TransmitReceive+0x130>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1a1      	bne.n	8002424 <HAL_SPI_TransmitReceive+0x130>
 80024e0:	e07c      	b.n	80025dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_SPI_TransmitReceive+0x1fc>
 80024ea:	8b7b      	ldrh	r3, [r7, #26]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d16b      	bne.n	80025c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	330c      	adds	r3, #12
 80024fa:	7812      	ldrb	r2, [r2, #0]
 80024fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800250c:	b29b      	uxth	r3, r3
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002516:	e057      	b.n	80025c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b02      	cmp	r3, #2
 8002524:	d11c      	bne.n	8002560 <HAL_SPI_TransmitReceive+0x26c>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d017      	beq.n	8002560 <HAL_SPI_TransmitReceive+0x26c>
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002532:	2b01      	cmp	r3, #1
 8002534:	d114      	bne.n	8002560 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	330c      	adds	r3, #12
 8002540:	7812      	ldrb	r2, [r2, #0]
 8002542:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b01      	cmp	r3, #1
 800256c:	d119      	bne.n	80025a2 <HAL_SPI_TransmitReceive+0x2ae>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d014      	beq.n	80025a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800259e:	2301      	movs	r3, #1
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025a2:	f7fe fc91 	bl	8000ec8 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d803      	bhi.n	80025ba <HAL_SPI_TransmitReceive+0x2c6>
 80025b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b8:	d102      	bne.n	80025c0 <HAL_SPI_TransmitReceive+0x2cc>
 80025ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d103      	bne.n	80025c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025c6:	e029      	b.n	800261c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1a2      	bne.n	8002518 <HAL_SPI_TransmitReceive+0x224>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d19d      	bne.n	8002518 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f917 	bl	8002814 <SPI_EndRxTxTransaction>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d006      	beq.n	80025fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2220      	movs	r2, #32
 80025f6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80025f8:	e010      	b.n	800261c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10b      	bne.n	800261a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	e000      	b.n	800261c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800261a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800262c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002630:	4618      	mov	r0, r3
 8002632:	3730      	adds	r7, #48	; 0x30
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	4613      	mov	r3, r2
 8002646:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002648:	f7fe fc3e 	bl	8000ec8 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	4413      	add	r3, r2
 8002656:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002658:	f7fe fc36 	bl	8000ec8 <HAL_GetTick>
 800265c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800265e:	4b39      	ldr	r3, [pc, #228]	; (8002744 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	015b      	lsls	r3, r3, #5
 8002664:	0d1b      	lsrs	r3, r3, #20
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	fb02 f303 	mul.w	r3, r2, r3
 800266c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800266e:	e054      	b.n	800271a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002676:	d050      	beq.n	800271a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002678:	f7fe fc26 	bl	8000ec8 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	429a      	cmp	r2, r3
 8002686:	d902      	bls.n	800268e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d13d      	bne.n	800270a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800269c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026a6:	d111      	bne.n	80026cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b0:	d004      	beq.n	80026bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ba:	d107      	bne.n	80026cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d4:	d10f      	bne.n	80026f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e017      	b.n	800273a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	3b01      	subs	r3, #1
 8002718:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4013      	ands	r3, r2
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	429a      	cmp	r2, r3
 8002728:	bf0c      	ite	eq
 800272a:	2301      	moveq	r3, #1
 800272c:	2300      	movne	r3, #0
 800272e:	b2db      	uxtb	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	429a      	cmp	r2, r3
 8002736:	d19b      	bne.n	8002670 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3720      	adds	r7, #32
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000000 	.word	0x20000000

08002748 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800275c:	d111      	bne.n	8002782 <SPI_EndRxTransaction+0x3a>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002766:	d004      	beq.n	8002772 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002770:	d107      	bne.n	8002782 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002780:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800278a:	d12a      	bne.n	80027e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002794:	d012      	beq.n	80027bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2200      	movs	r2, #0
 800279e:	2180      	movs	r1, #128	; 0x80
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f7ff ff49 	bl	8002638 <SPI_WaitFlagStateUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d02d      	beq.n	8002808 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b0:	f043 0220 	orr.w	r2, r3, #32
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e026      	b.n	800280a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2200      	movs	r2, #0
 80027c4:	2101      	movs	r1, #1
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f7ff ff36 	bl	8002638 <SPI_WaitFlagStateUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d01a      	beq.n	8002808 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	f043 0220 	orr.w	r2, r3, #32
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e013      	b.n	800280a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2200      	movs	r2, #0
 80027ea:	2101      	movs	r1, #1
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f7ff ff23 	bl	8002638 <SPI_WaitFlagStateUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d007      	beq.n	8002808 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e000      	b.n	800280a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <SPI_EndRxTxTransaction+0x7c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a1b      	ldr	r2, [pc, #108]	; (8002894 <SPI_EndRxTxTransaction+0x80>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	0d5b      	lsrs	r3, r3, #21
 800282c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002830:	fb02 f303 	mul.w	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800283e:	d112      	bne.n	8002866 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2200      	movs	r2, #0
 8002848:	2180      	movs	r1, #128	; 0x80
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f7ff fef4 	bl	8002638 <SPI_WaitFlagStateUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d016      	beq.n	8002884 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285a:	f043 0220 	orr.w	r2, r3, #32
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e00f      	b.n	8002886 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	3b01      	subs	r3, #1
 8002870:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287c:	2b80      	cmp	r3, #128	; 0x80
 800287e:	d0f2      	beq.n	8002866 <SPI_EndRxTxTransaction+0x52>
 8002880:	e000      	b.n	8002884 <SPI_EndRxTxTransaction+0x70>
        break;
 8002882:	bf00      	nop
  }

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000000 	.word	0x20000000
 8002894:	165e9f81 	.word	0x165e9f81

08002898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e03f      	b.n	800292a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe f9b8 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2224      	movs	r2, #36	; 0x24
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f929 	bl	8002b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695a      	ldr	r2, [r3, #20]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b08a      	sub	sp, #40	; 0x28
 8002936:	af02      	add	r7, sp, #8
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	603b      	str	r3, [r7, #0]
 800293e:	4613      	mov	r3, r2
 8002940:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b20      	cmp	r3, #32
 8002950:	d17c      	bne.n	8002a4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <HAL_UART_Transmit+0x2c>
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e075      	b.n	8002a4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_UART_Transmit+0x3e>
 800296c:	2302      	movs	r3, #2
 800296e:	e06e      	b.n	8002a4e <HAL_UART_Transmit+0x11c>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2221      	movs	r2, #33	; 0x21
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002986:	f7fe fa9f 	bl	8000ec8 <HAL_GetTick>
 800298a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	88fa      	ldrh	r2, [r7, #6]
 8002990:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	88fa      	ldrh	r2, [r7, #6]
 8002996:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a0:	d108      	bne.n	80029b4 <HAL_UART_Transmit+0x82>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d104      	bne.n	80029b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	e003      	b.n	80029bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029c4:	e02a      	b.n	8002a1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2200      	movs	r2, #0
 80029ce:	2180      	movs	r1, #128	; 0x80
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f840 	bl	8002a56 <UART_WaitOnFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e036      	b.n	8002a4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10b      	bne.n	80029fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	3302      	adds	r3, #2
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	e007      	b.n	8002a0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1cf      	bne.n	80029c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2140      	movs	r1, #64	; 0x40
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f810 	bl	8002a56 <UART_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e006      	b.n	8002a4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e000      	b.n	8002a4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a4c:	2302      	movs	r3, #2
  }
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b090      	sub	sp, #64	; 0x40
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	603b      	str	r3, [r7, #0]
 8002a62:	4613      	mov	r3, r2
 8002a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a66:	e050      	b.n	8002b0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6e:	d04c      	beq.n	8002b0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a76:	f7fe fa27 	bl	8000ec8 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d241      	bcs.n	8002b0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a90:	e853 3f00 	ldrex	r3, [r3]
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	330c      	adds	r3, #12
 8002aa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aa6:	637a      	str	r2, [r7, #52]	; 0x34
 8002aa8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aae:	e841 2300 	strex	r3, r2, [r1]
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1e5      	bne.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3314      	adds	r3, #20
 8002ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	e853 3f00 	ldrex	r3, [r3]
 8002ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	3314      	adds	r3, #20
 8002ad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ada:	623a      	str	r2, [r7, #32]
 8002adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ade:	69f9      	ldr	r1, [r7, #28]
 8002ae0:	6a3a      	ldr	r2, [r7, #32]
 8002ae2:	e841 2300 	strex	r3, r2, [r1]
 8002ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1e5      	bne.n	8002aba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e00f      	b.n	8002b2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4013      	ands	r3, r2
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	bf0c      	ite	eq
 8002b1a:	2301      	moveq	r3, #1
 8002b1c:	2300      	movne	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d09f      	beq.n	8002a68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3740      	adds	r7, #64	; 0x40
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b38:	b09f      	sub	sp, #124	; 0x7c
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b4a:	68d9      	ldr	r1, [r3, #12]
 8002b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	ea40 0301 	orr.w	r3, r0, r1
 8002b54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b78:	f021 010c 	bic.w	r1, r1, #12
 8002b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b82:	430b      	orrs	r3, r1
 8002b84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b92:	6999      	ldr	r1, [r3, #24]
 8002b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	ea40 0301 	orr.w	r3, r0, r1
 8002b9c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4bc5      	ldr	r3, [pc, #788]	; (8002eb8 <UART_SetConfig+0x384>)
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d004      	beq.n	8002bb2 <UART_SetConfig+0x7e>
 8002ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4bc3      	ldr	r3, [pc, #780]	; (8002ebc <UART_SetConfig+0x388>)
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d103      	bne.n	8002bba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bb2:	f7ff f8b5 	bl	8001d20 <HAL_RCC_GetPCLK2Freq>
 8002bb6:	6778      	str	r0, [r7, #116]	; 0x74
 8002bb8:	e002      	b.n	8002bc0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bba:	f7ff f89d 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 8002bbe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc8:	f040 80b6 	bne.w	8002d38 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bce:	461c      	mov	r4, r3
 8002bd0:	f04f 0500 	mov.w	r5, #0
 8002bd4:	4622      	mov	r2, r4
 8002bd6:	462b      	mov	r3, r5
 8002bd8:	1891      	adds	r1, r2, r2
 8002bda:	6439      	str	r1, [r7, #64]	; 0x40
 8002bdc:	415b      	adcs	r3, r3
 8002bde:	647b      	str	r3, [r7, #68]	; 0x44
 8002be0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002be4:	1912      	adds	r2, r2, r4
 8002be6:	eb45 0303 	adc.w	r3, r5, r3
 8002bea:	f04f 0000 	mov.w	r0, #0
 8002bee:	f04f 0100 	mov.w	r1, #0
 8002bf2:	00d9      	lsls	r1, r3, #3
 8002bf4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bf8:	00d0      	lsls	r0, r2, #3
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	1911      	adds	r1, r2, r4
 8002c00:	6639      	str	r1, [r7, #96]	; 0x60
 8002c02:	416b      	adcs	r3, r5
 8002c04:	667b      	str	r3, [r7, #100]	; 0x64
 8002c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	1891      	adds	r1, r2, r2
 8002c12:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c14:	415b      	adcs	r3, r3
 8002c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c1c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002c20:	f7fd fb26 	bl	8000270 <__aeabi_uldivmod>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4ba5      	ldr	r3, [pc, #660]	; (8002ec0 <UART_SetConfig+0x38c>)
 8002c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	011e      	lsls	r6, r3, #4
 8002c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c34:	461c      	mov	r4, r3
 8002c36:	f04f 0500 	mov.w	r5, #0
 8002c3a:	4622      	mov	r2, r4
 8002c3c:	462b      	mov	r3, r5
 8002c3e:	1891      	adds	r1, r2, r2
 8002c40:	6339      	str	r1, [r7, #48]	; 0x30
 8002c42:	415b      	adcs	r3, r3
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
 8002c46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c4a:	1912      	adds	r2, r2, r4
 8002c4c:	eb45 0303 	adc.w	r3, r5, r3
 8002c50:	f04f 0000 	mov.w	r0, #0
 8002c54:	f04f 0100 	mov.w	r1, #0
 8002c58:	00d9      	lsls	r1, r3, #3
 8002c5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c5e:	00d0      	lsls	r0, r2, #3
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	1911      	adds	r1, r2, r4
 8002c66:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c68:	416b      	adcs	r3, r5
 8002c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	461a      	mov	r2, r3
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	1891      	adds	r1, r2, r2
 8002c78:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c7a:	415b      	adcs	r3, r3
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c82:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002c86:	f7fd faf3 	bl	8000270 <__aeabi_uldivmod>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4b8c      	ldr	r3, [pc, #560]	; (8002ec0 <UART_SetConfig+0x38c>)
 8002c90:	fba3 1302 	umull	r1, r3, r3, r2
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	2164      	movs	r1, #100	; 0x64
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	3332      	adds	r3, #50	; 0x32
 8002ca2:	4a87      	ldr	r2, [pc, #540]	; (8002ec0 <UART_SetConfig+0x38c>)
 8002ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cb0:	441e      	add	r6, r3
 8002cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f04f 0100 	mov.w	r1, #0
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	1894      	adds	r4, r2, r2
 8002cc0:	623c      	str	r4, [r7, #32]
 8002cc2:	415b      	adcs	r3, r3
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cca:	1812      	adds	r2, r2, r0
 8002ccc:	eb41 0303 	adc.w	r3, r1, r3
 8002cd0:	f04f 0400 	mov.w	r4, #0
 8002cd4:	f04f 0500 	mov.w	r5, #0
 8002cd8:	00dd      	lsls	r5, r3, #3
 8002cda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002cde:	00d4      	lsls	r4, r2, #3
 8002ce0:	4622      	mov	r2, r4
 8002ce2:	462b      	mov	r3, r5
 8002ce4:	1814      	adds	r4, r2, r0
 8002ce6:	653c      	str	r4, [r7, #80]	; 0x50
 8002ce8:	414b      	adcs	r3, r1
 8002cea:	657b      	str	r3, [r7, #84]	; 0x54
 8002cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	1891      	adds	r1, r2, r2
 8002cf8:	61b9      	str	r1, [r7, #24]
 8002cfa:	415b      	adcs	r3, r3
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d02:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002d06:	f7fd fab3 	bl	8000270 <__aeabi_uldivmod>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4b6c      	ldr	r3, [pc, #432]	; (8002ec0 <UART_SetConfig+0x38c>)
 8002d10:	fba3 1302 	umull	r1, r3, r3, r2
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	2164      	movs	r1, #100	; 0x64
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	3332      	adds	r3, #50	; 0x32
 8002d22:	4a67      	ldr	r2, [pc, #412]	; (8002ec0 <UART_SetConfig+0x38c>)
 8002d24:	fba2 2303 	umull	r2, r3, r2, r3
 8002d28:	095b      	lsrs	r3, r3, #5
 8002d2a:	f003 0207 	and.w	r2, r3, #7
 8002d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4432      	add	r2, r6
 8002d34:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d36:	e0b9      	b.n	8002eac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d3a:	461c      	mov	r4, r3
 8002d3c:	f04f 0500 	mov.w	r5, #0
 8002d40:	4622      	mov	r2, r4
 8002d42:	462b      	mov	r3, r5
 8002d44:	1891      	adds	r1, r2, r2
 8002d46:	6139      	str	r1, [r7, #16]
 8002d48:	415b      	adcs	r3, r3
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d50:	1912      	adds	r2, r2, r4
 8002d52:	eb45 0303 	adc.w	r3, r5, r3
 8002d56:	f04f 0000 	mov.w	r0, #0
 8002d5a:	f04f 0100 	mov.w	r1, #0
 8002d5e:	00d9      	lsls	r1, r3, #3
 8002d60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d64:	00d0      	lsls	r0, r2, #3
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	eb12 0804 	adds.w	r8, r2, r4
 8002d6e:	eb43 0905 	adc.w	r9, r3, r5
 8002d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f04f 0100 	mov.w	r1, #0
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	008b      	lsls	r3, r1, #2
 8002d86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d8a:	0082      	lsls	r2, r0, #2
 8002d8c:	4640      	mov	r0, r8
 8002d8e:	4649      	mov	r1, r9
 8002d90:	f7fd fa6e 	bl	8000270 <__aeabi_uldivmod>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4b49      	ldr	r3, [pc, #292]	; (8002ec0 <UART_SetConfig+0x38c>)
 8002d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	011e      	lsls	r6, r3, #4
 8002da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002da4:	4618      	mov	r0, r3
 8002da6:	f04f 0100 	mov.w	r1, #0
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	1894      	adds	r4, r2, r2
 8002db0:	60bc      	str	r4, [r7, #8]
 8002db2:	415b      	adcs	r3, r3
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dba:	1812      	adds	r2, r2, r0
 8002dbc:	eb41 0303 	adc.w	r3, r1, r3
 8002dc0:	f04f 0400 	mov.w	r4, #0
 8002dc4:	f04f 0500 	mov.w	r5, #0
 8002dc8:	00dd      	lsls	r5, r3, #3
 8002dca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002dce:	00d4      	lsls	r4, r2, #3
 8002dd0:	4622      	mov	r2, r4
 8002dd2:	462b      	mov	r3, r5
 8002dd4:	1814      	adds	r4, r2, r0
 8002dd6:	64bc      	str	r4, [r7, #72]	; 0x48
 8002dd8:	414b      	adcs	r3, r1
 8002dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f04f 0100 	mov.w	r1, #0
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	008b      	lsls	r3, r1, #2
 8002df0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002df4:	0082      	lsls	r2, r0, #2
 8002df6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002dfa:	f7fd fa39 	bl	8000270 <__aeabi_uldivmod>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4b2f      	ldr	r3, [pc, #188]	; (8002ec0 <UART_SetConfig+0x38c>)
 8002e04:	fba3 1302 	umull	r1, r3, r3, r2
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	2164      	movs	r1, #100	; 0x64
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	3332      	adds	r3, #50	; 0x32
 8002e16:	4a2a      	ldr	r2, [pc, #168]	; (8002ec0 <UART_SetConfig+0x38c>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e22:	441e      	add	r6, r3
 8002e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e26:	4618      	mov	r0, r3
 8002e28:	f04f 0100 	mov.w	r1, #0
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	1894      	adds	r4, r2, r2
 8002e32:	603c      	str	r4, [r7, #0]
 8002e34:	415b      	adcs	r3, r3
 8002e36:	607b      	str	r3, [r7, #4]
 8002e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e3c:	1812      	adds	r2, r2, r0
 8002e3e:	eb41 0303 	adc.w	r3, r1, r3
 8002e42:	f04f 0400 	mov.w	r4, #0
 8002e46:	f04f 0500 	mov.w	r5, #0
 8002e4a:	00dd      	lsls	r5, r3, #3
 8002e4c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e50:	00d4      	lsls	r4, r2, #3
 8002e52:	4622      	mov	r2, r4
 8002e54:	462b      	mov	r3, r5
 8002e56:	eb12 0a00 	adds.w	sl, r2, r0
 8002e5a:	eb43 0b01 	adc.w	fp, r3, r1
 8002e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f04f 0100 	mov.w	r1, #0
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	008b      	lsls	r3, r1, #2
 8002e72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e76:	0082      	lsls	r2, r0, #2
 8002e78:	4650      	mov	r0, sl
 8002e7a:	4659      	mov	r1, fp
 8002e7c:	f7fd f9f8 	bl	8000270 <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <UART_SetConfig+0x38c>)
 8002e86:	fba3 1302 	umull	r1, r3, r3, r2
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	2164      	movs	r1, #100	; 0x64
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	3332      	adds	r3, #50	; 0x32
 8002e98:	4a09      	ldr	r2, [pc, #36]	; (8002ec0 <UART_SetConfig+0x38c>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	f003 020f 	and.w	r2, r3, #15
 8002ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4432      	add	r2, r6
 8002eaa:	609a      	str	r2, [r3, #8]
}
 8002eac:	bf00      	nop
 8002eae:	377c      	adds	r7, #124	; 0x7c
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40011000 	.word	0x40011000
 8002ebc:	40011400 	.word	0x40011400
 8002ec0:	51eb851f 	.word	0x51eb851f

08002ec4 <__errno>:
 8002ec4:	4b01      	ldr	r3, [pc, #4]	; (8002ecc <__errno+0x8>)
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	2000000c 	.word	0x2000000c

08002ed0 <__libc_init_array>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	4d0d      	ldr	r5, [pc, #52]	; (8002f08 <__libc_init_array+0x38>)
 8002ed4:	4c0d      	ldr	r4, [pc, #52]	; (8002f0c <__libc_init_array+0x3c>)
 8002ed6:	1b64      	subs	r4, r4, r5
 8002ed8:	10a4      	asrs	r4, r4, #2
 8002eda:	2600      	movs	r6, #0
 8002edc:	42a6      	cmp	r6, r4
 8002ede:	d109      	bne.n	8002ef4 <__libc_init_array+0x24>
 8002ee0:	4d0b      	ldr	r5, [pc, #44]	; (8002f10 <__libc_init_array+0x40>)
 8002ee2:	4c0c      	ldr	r4, [pc, #48]	; (8002f14 <__libc_init_array+0x44>)
 8002ee4:	f000 fc4e 	bl	8003784 <_init>
 8002ee8:	1b64      	subs	r4, r4, r5
 8002eea:	10a4      	asrs	r4, r4, #2
 8002eec:	2600      	movs	r6, #0
 8002eee:	42a6      	cmp	r6, r4
 8002ef0:	d105      	bne.n	8002efe <__libc_init_array+0x2e>
 8002ef2:	bd70      	pop	{r4, r5, r6, pc}
 8002ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef8:	4798      	blx	r3
 8002efa:	3601      	adds	r6, #1
 8002efc:	e7ee      	b.n	8002edc <__libc_init_array+0xc>
 8002efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f02:	4798      	blx	r3
 8002f04:	3601      	adds	r6, #1
 8002f06:	e7f2      	b.n	8002eee <__libc_init_array+0x1e>
 8002f08:	08003808 	.word	0x08003808
 8002f0c:	08003808 	.word	0x08003808
 8002f10:	08003808 	.word	0x08003808
 8002f14:	0800380c 	.word	0x0800380c

08002f18 <memcpy>:
 8002f18:	440a      	add	r2, r1
 8002f1a:	4291      	cmp	r1, r2
 8002f1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f20:	d100      	bne.n	8002f24 <memcpy+0xc>
 8002f22:	4770      	bx	lr
 8002f24:	b510      	push	{r4, lr}
 8002f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f2e:	4291      	cmp	r1, r2
 8002f30:	d1f9      	bne.n	8002f26 <memcpy+0xe>
 8002f32:	bd10      	pop	{r4, pc}

08002f34 <memset>:
 8002f34:	4402      	add	r2, r0
 8002f36:	4603      	mov	r3, r0
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d100      	bne.n	8002f3e <memset+0xa>
 8002f3c:	4770      	bx	lr
 8002f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f42:	e7f9      	b.n	8002f38 <memset+0x4>

08002f44 <siprintf>:
 8002f44:	b40e      	push	{r1, r2, r3}
 8002f46:	b500      	push	{lr}
 8002f48:	b09c      	sub	sp, #112	; 0x70
 8002f4a:	ab1d      	add	r3, sp, #116	; 0x74
 8002f4c:	9002      	str	r0, [sp, #8]
 8002f4e:	9006      	str	r0, [sp, #24]
 8002f50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f54:	4809      	ldr	r0, [pc, #36]	; (8002f7c <siprintf+0x38>)
 8002f56:	9107      	str	r1, [sp, #28]
 8002f58:	9104      	str	r1, [sp, #16]
 8002f5a:	4909      	ldr	r1, [pc, #36]	; (8002f80 <siprintf+0x3c>)
 8002f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f60:	9105      	str	r1, [sp, #20]
 8002f62:	6800      	ldr	r0, [r0, #0]
 8002f64:	9301      	str	r3, [sp, #4]
 8002f66:	a902      	add	r1, sp, #8
 8002f68:	f000 f868 	bl	800303c <_svfiprintf_r>
 8002f6c:	9b02      	ldr	r3, [sp, #8]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
 8002f72:	b01c      	add	sp, #112	; 0x70
 8002f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f78:	b003      	add	sp, #12
 8002f7a:	4770      	bx	lr
 8002f7c:	2000000c 	.word	0x2000000c
 8002f80:	ffff0208 	.word	0xffff0208

08002f84 <__ssputs_r>:
 8002f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f88:	688e      	ldr	r6, [r1, #8]
 8002f8a:	429e      	cmp	r6, r3
 8002f8c:	4682      	mov	sl, r0
 8002f8e:	460c      	mov	r4, r1
 8002f90:	4690      	mov	r8, r2
 8002f92:	461f      	mov	r7, r3
 8002f94:	d838      	bhi.n	8003008 <__ssputs_r+0x84>
 8002f96:	898a      	ldrh	r2, [r1, #12]
 8002f98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f9c:	d032      	beq.n	8003004 <__ssputs_r+0x80>
 8002f9e:	6825      	ldr	r5, [r4, #0]
 8002fa0:	6909      	ldr	r1, [r1, #16]
 8002fa2:	eba5 0901 	sub.w	r9, r5, r1
 8002fa6:	6965      	ldr	r5, [r4, #20]
 8002fa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	444b      	add	r3, r9
 8002fb4:	106d      	asrs	r5, r5, #1
 8002fb6:	429d      	cmp	r5, r3
 8002fb8:	bf38      	it	cc
 8002fba:	461d      	movcc	r5, r3
 8002fbc:	0553      	lsls	r3, r2, #21
 8002fbe:	d531      	bpl.n	8003024 <__ssputs_r+0xa0>
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	f000 fb39 	bl	8003638 <_malloc_r>
 8002fc6:	4606      	mov	r6, r0
 8002fc8:	b950      	cbnz	r0, 8002fe0 <__ssputs_r+0x5c>
 8002fca:	230c      	movs	r3, #12
 8002fcc:	f8ca 3000 	str.w	r3, [sl]
 8002fd0:	89a3      	ldrh	r3, [r4, #12]
 8002fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fd6:	81a3      	strh	r3, [r4, #12]
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fe0:	6921      	ldr	r1, [r4, #16]
 8002fe2:	464a      	mov	r2, r9
 8002fe4:	f7ff ff98 	bl	8002f18 <memcpy>
 8002fe8:	89a3      	ldrh	r3, [r4, #12]
 8002fea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff2:	81a3      	strh	r3, [r4, #12]
 8002ff4:	6126      	str	r6, [r4, #16]
 8002ff6:	6165      	str	r5, [r4, #20]
 8002ff8:	444e      	add	r6, r9
 8002ffa:	eba5 0509 	sub.w	r5, r5, r9
 8002ffe:	6026      	str	r6, [r4, #0]
 8003000:	60a5      	str	r5, [r4, #8]
 8003002:	463e      	mov	r6, r7
 8003004:	42be      	cmp	r6, r7
 8003006:	d900      	bls.n	800300a <__ssputs_r+0x86>
 8003008:	463e      	mov	r6, r7
 800300a:	4632      	mov	r2, r6
 800300c:	6820      	ldr	r0, [r4, #0]
 800300e:	4641      	mov	r1, r8
 8003010:	f000 faa8 	bl	8003564 <memmove>
 8003014:	68a3      	ldr	r3, [r4, #8]
 8003016:	6822      	ldr	r2, [r4, #0]
 8003018:	1b9b      	subs	r3, r3, r6
 800301a:	4432      	add	r2, r6
 800301c:	60a3      	str	r3, [r4, #8]
 800301e:	6022      	str	r2, [r4, #0]
 8003020:	2000      	movs	r0, #0
 8003022:	e7db      	b.n	8002fdc <__ssputs_r+0x58>
 8003024:	462a      	mov	r2, r5
 8003026:	f000 fb61 	bl	80036ec <_realloc_r>
 800302a:	4606      	mov	r6, r0
 800302c:	2800      	cmp	r0, #0
 800302e:	d1e1      	bne.n	8002ff4 <__ssputs_r+0x70>
 8003030:	6921      	ldr	r1, [r4, #16]
 8003032:	4650      	mov	r0, sl
 8003034:	f000 fab0 	bl	8003598 <_free_r>
 8003038:	e7c7      	b.n	8002fca <__ssputs_r+0x46>
	...

0800303c <_svfiprintf_r>:
 800303c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003040:	4698      	mov	r8, r3
 8003042:	898b      	ldrh	r3, [r1, #12]
 8003044:	061b      	lsls	r3, r3, #24
 8003046:	b09d      	sub	sp, #116	; 0x74
 8003048:	4607      	mov	r7, r0
 800304a:	460d      	mov	r5, r1
 800304c:	4614      	mov	r4, r2
 800304e:	d50e      	bpl.n	800306e <_svfiprintf_r+0x32>
 8003050:	690b      	ldr	r3, [r1, #16]
 8003052:	b963      	cbnz	r3, 800306e <_svfiprintf_r+0x32>
 8003054:	2140      	movs	r1, #64	; 0x40
 8003056:	f000 faef 	bl	8003638 <_malloc_r>
 800305a:	6028      	str	r0, [r5, #0]
 800305c:	6128      	str	r0, [r5, #16]
 800305e:	b920      	cbnz	r0, 800306a <_svfiprintf_r+0x2e>
 8003060:	230c      	movs	r3, #12
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	f04f 30ff 	mov.w	r0, #4294967295
 8003068:	e0d1      	b.n	800320e <_svfiprintf_r+0x1d2>
 800306a:	2340      	movs	r3, #64	; 0x40
 800306c:	616b      	str	r3, [r5, #20]
 800306e:	2300      	movs	r3, #0
 8003070:	9309      	str	r3, [sp, #36]	; 0x24
 8003072:	2320      	movs	r3, #32
 8003074:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003078:	f8cd 800c 	str.w	r8, [sp, #12]
 800307c:	2330      	movs	r3, #48	; 0x30
 800307e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003228 <_svfiprintf_r+0x1ec>
 8003082:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003086:	f04f 0901 	mov.w	r9, #1
 800308a:	4623      	mov	r3, r4
 800308c:	469a      	mov	sl, r3
 800308e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003092:	b10a      	cbz	r2, 8003098 <_svfiprintf_r+0x5c>
 8003094:	2a25      	cmp	r2, #37	; 0x25
 8003096:	d1f9      	bne.n	800308c <_svfiprintf_r+0x50>
 8003098:	ebba 0b04 	subs.w	fp, sl, r4
 800309c:	d00b      	beq.n	80030b6 <_svfiprintf_r+0x7a>
 800309e:	465b      	mov	r3, fp
 80030a0:	4622      	mov	r2, r4
 80030a2:	4629      	mov	r1, r5
 80030a4:	4638      	mov	r0, r7
 80030a6:	f7ff ff6d 	bl	8002f84 <__ssputs_r>
 80030aa:	3001      	adds	r0, #1
 80030ac:	f000 80aa 	beq.w	8003204 <_svfiprintf_r+0x1c8>
 80030b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030b2:	445a      	add	r2, fp
 80030b4:	9209      	str	r2, [sp, #36]	; 0x24
 80030b6:	f89a 3000 	ldrb.w	r3, [sl]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80a2 	beq.w	8003204 <_svfiprintf_r+0x1c8>
 80030c0:	2300      	movs	r3, #0
 80030c2:	f04f 32ff 	mov.w	r2, #4294967295
 80030c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030ca:	f10a 0a01 	add.w	sl, sl, #1
 80030ce:	9304      	str	r3, [sp, #16]
 80030d0:	9307      	str	r3, [sp, #28]
 80030d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030d6:	931a      	str	r3, [sp, #104]	; 0x68
 80030d8:	4654      	mov	r4, sl
 80030da:	2205      	movs	r2, #5
 80030dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030e0:	4851      	ldr	r0, [pc, #324]	; (8003228 <_svfiprintf_r+0x1ec>)
 80030e2:	f7fd f875 	bl	80001d0 <memchr>
 80030e6:	9a04      	ldr	r2, [sp, #16]
 80030e8:	b9d8      	cbnz	r0, 8003122 <_svfiprintf_r+0xe6>
 80030ea:	06d0      	lsls	r0, r2, #27
 80030ec:	bf44      	itt	mi
 80030ee:	2320      	movmi	r3, #32
 80030f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030f4:	0711      	lsls	r1, r2, #28
 80030f6:	bf44      	itt	mi
 80030f8:	232b      	movmi	r3, #43	; 0x2b
 80030fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003102:	2b2a      	cmp	r3, #42	; 0x2a
 8003104:	d015      	beq.n	8003132 <_svfiprintf_r+0xf6>
 8003106:	9a07      	ldr	r2, [sp, #28]
 8003108:	4654      	mov	r4, sl
 800310a:	2000      	movs	r0, #0
 800310c:	f04f 0c0a 	mov.w	ip, #10
 8003110:	4621      	mov	r1, r4
 8003112:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003116:	3b30      	subs	r3, #48	; 0x30
 8003118:	2b09      	cmp	r3, #9
 800311a:	d94e      	bls.n	80031ba <_svfiprintf_r+0x17e>
 800311c:	b1b0      	cbz	r0, 800314c <_svfiprintf_r+0x110>
 800311e:	9207      	str	r2, [sp, #28]
 8003120:	e014      	b.n	800314c <_svfiprintf_r+0x110>
 8003122:	eba0 0308 	sub.w	r3, r0, r8
 8003126:	fa09 f303 	lsl.w	r3, r9, r3
 800312a:	4313      	orrs	r3, r2
 800312c:	9304      	str	r3, [sp, #16]
 800312e:	46a2      	mov	sl, r4
 8003130:	e7d2      	b.n	80030d8 <_svfiprintf_r+0x9c>
 8003132:	9b03      	ldr	r3, [sp, #12]
 8003134:	1d19      	adds	r1, r3, #4
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	9103      	str	r1, [sp, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	bfbb      	ittet	lt
 800313e:	425b      	neglt	r3, r3
 8003140:	f042 0202 	orrlt.w	r2, r2, #2
 8003144:	9307      	strge	r3, [sp, #28]
 8003146:	9307      	strlt	r3, [sp, #28]
 8003148:	bfb8      	it	lt
 800314a:	9204      	strlt	r2, [sp, #16]
 800314c:	7823      	ldrb	r3, [r4, #0]
 800314e:	2b2e      	cmp	r3, #46	; 0x2e
 8003150:	d10c      	bne.n	800316c <_svfiprintf_r+0x130>
 8003152:	7863      	ldrb	r3, [r4, #1]
 8003154:	2b2a      	cmp	r3, #42	; 0x2a
 8003156:	d135      	bne.n	80031c4 <_svfiprintf_r+0x188>
 8003158:	9b03      	ldr	r3, [sp, #12]
 800315a:	1d1a      	adds	r2, r3, #4
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	9203      	str	r2, [sp, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	bfb8      	it	lt
 8003164:	f04f 33ff 	movlt.w	r3, #4294967295
 8003168:	3402      	adds	r4, #2
 800316a:	9305      	str	r3, [sp, #20]
 800316c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003238 <_svfiprintf_r+0x1fc>
 8003170:	7821      	ldrb	r1, [r4, #0]
 8003172:	2203      	movs	r2, #3
 8003174:	4650      	mov	r0, sl
 8003176:	f7fd f82b 	bl	80001d0 <memchr>
 800317a:	b140      	cbz	r0, 800318e <_svfiprintf_r+0x152>
 800317c:	2340      	movs	r3, #64	; 0x40
 800317e:	eba0 000a 	sub.w	r0, r0, sl
 8003182:	fa03 f000 	lsl.w	r0, r3, r0
 8003186:	9b04      	ldr	r3, [sp, #16]
 8003188:	4303      	orrs	r3, r0
 800318a:	3401      	adds	r4, #1
 800318c:	9304      	str	r3, [sp, #16]
 800318e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003192:	4826      	ldr	r0, [pc, #152]	; (800322c <_svfiprintf_r+0x1f0>)
 8003194:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003198:	2206      	movs	r2, #6
 800319a:	f7fd f819 	bl	80001d0 <memchr>
 800319e:	2800      	cmp	r0, #0
 80031a0:	d038      	beq.n	8003214 <_svfiprintf_r+0x1d8>
 80031a2:	4b23      	ldr	r3, [pc, #140]	; (8003230 <_svfiprintf_r+0x1f4>)
 80031a4:	bb1b      	cbnz	r3, 80031ee <_svfiprintf_r+0x1b2>
 80031a6:	9b03      	ldr	r3, [sp, #12]
 80031a8:	3307      	adds	r3, #7
 80031aa:	f023 0307 	bic.w	r3, r3, #7
 80031ae:	3308      	adds	r3, #8
 80031b0:	9303      	str	r3, [sp, #12]
 80031b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031b4:	4433      	add	r3, r6
 80031b6:	9309      	str	r3, [sp, #36]	; 0x24
 80031b8:	e767      	b.n	800308a <_svfiprintf_r+0x4e>
 80031ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80031be:	460c      	mov	r4, r1
 80031c0:	2001      	movs	r0, #1
 80031c2:	e7a5      	b.n	8003110 <_svfiprintf_r+0xd4>
 80031c4:	2300      	movs	r3, #0
 80031c6:	3401      	adds	r4, #1
 80031c8:	9305      	str	r3, [sp, #20]
 80031ca:	4619      	mov	r1, r3
 80031cc:	f04f 0c0a 	mov.w	ip, #10
 80031d0:	4620      	mov	r0, r4
 80031d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031d6:	3a30      	subs	r2, #48	; 0x30
 80031d8:	2a09      	cmp	r2, #9
 80031da:	d903      	bls.n	80031e4 <_svfiprintf_r+0x1a8>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0c5      	beq.n	800316c <_svfiprintf_r+0x130>
 80031e0:	9105      	str	r1, [sp, #20]
 80031e2:	e7c3      	b.n	800316c <_svfiprintf_r+0x130>
 80031e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80031e8:	4604      	mov	r4, r0
 80031ea:	2301      	movs	r3, #1
 80031ec:	e7f0      	b.n	80031d0 <_svfiprintf_r+0x194>
 80031ee:	ab03      	add	r3, sp, #12
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	462a      	mov	r2, r5
 80031f4:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <_svfiprintf_r+0x1f8>)
 80031f6:	a904      	add	r1, sp, #16
 80031f8:	4638      	mov	r0, r7
 80031fa:	f3af 8000 	nop.w
 80031fe:	1c42      	adds	r2, r0, #1
 8003200:	4606      	mov	r6, r0
 8003202:	d1d6      	bne.n	80031b2 <_svfiprintf_r+0x176>
 8003204:	89ab      	ldrh	r3, [r5, #12]
 8003206:	065b      	lsls	r3, r3, #25
 8003208:	f53f af2c 	bmi.w	8003064 <_svfiprintf_r+0x28>
 800320c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800320e:	b01d      	add	sp, #116	; 0x74
 8003210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003214:	ab03      	add	r3, sp, #12
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	462a      	mov	r2, r5
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <_svfiprintf_r+0x1f8>)
 800321c:	a904      	add	r1, sp, #16
 800321e:	4638      	mov	r0, r7
 8003220:	f000 f87a 	bl	8003318 <_printf_i>
 8003224:	e7eb      	b.n	80031fe <_svfiprintf_r+0x1c2>
 8003226:	bf00      	nop
 8003228:	080037cc 	.word	0x080037cc
 800322c:	080037d6 	.word	0x080037d6
 8003230:	00000000 	.word	0x00000000
 8003234:	08002f85 	.word	0x08002f85
 8003238:	080037d2 	.word	0x080037d2

0800323c <_printf_common>:
 800323c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003240:	4616      	mov	r6, r2
 8003242:	4699      	mov	r9, r3
 8003244:	688a      	ldr	r2, [r1, #8]
 8003246:	690b      	ldr	r3, [r1, #16]
 8003248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800324c:	4293      	cmp	r3, r2
 800324e:	bfb8      	it	lt
 8003250:	4613      	movlt	r3, r2
 8003252:	6033      	str	r3, [r6, #0]
 8003254:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003258:	4607      	mov	r7, r0
 800325a:	460c      	mov	r4, r1
 800325c:	b10a      	cbz	r2, 8003262 <_printf_common+0x26>
 800325e:	3301      	adds	r3, #1
 8003260:	6033      	str	r3, [r6, #0]
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	0699      	lsls	r1, r3, #26
 8003266:	bf42      	ittt	mi
 8003268:	6833      	ldrmi	r3, [r6, #0]
 800326a:	3302      	addmi	r3, #2
 800326c:	6033      	strmi	r3, [r6, #0]
 800326e:	6825      	ldr	r5, [r4, #0]
 8003270:	f015 0506 	ands.w	r5, r5, #6
 8003274:	d106      	bne.n	8003284 <_printf_common+0x48>
 8003276:	f104 0a19 	add.w	sl, r4, #25
 800327a:	68e3      	ldr	r3, [r4, #12]
 800327c:	6832      	ldr	r2, [r6, #0]
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	42ab      	cmp	r3, r5
 8003282:	dc26      	bgt.n	80032d2 <_printf_common+0x96>
 8003284:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003288:	1e13      	subs	r3, r2, #0
 800328a:	6822      	ldr	r2, [r4, #0]
 800328c:	bf18      	it	ne
 800328e:	2301      	movne	r3, #1
 8003290:	0692      	lsls	r2, r2, #26
 8003292:	d42b      	bmi.n	80032ec <_printf_common+0xb0>
 8003294:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003298:	4649      	mov	r1, r9
 800329a:	4638      	mov	r0, r7
 800329c:	47c0      	blx	r8
 800329e:	3001      	adds	r0, #1
 80032a0:	d01e      	beq.n	80032e0 <_printf_common+0xa4>
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	68e5      	ldr	r5, [r4, #12]
 80032a6:	6832      	ldr	r2, [r6, #0]
 80032a8:	f003 0306 	and.w	r3, r3, #6
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	bf08      	it	eq
 80032b0:	1aad      	subeq	r5, r5, r2
 80032b2:	68a3      	ldr	r3, [r4, #8]
 80032b4:	6922      	ldr	r2, [r4, #16]
 80032b6:	bf0c      	ite	eq
 80032b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032bc:	2500      	movne	r5, #0
 80032be:	4293      	cmp	r3, r2
 80032c0:	bfc4      	itt	gt
 80032c2:	1a9b      	subgt	r3, r3, r2
 80032c4:	18ed      	addgt	r5, r5, r3
 80032c6:	2600      	movs	r6, #0
 80032c8:	341a      	adds	r4, #26
 80032ca:	42b5      	cmp	r5, r6
 80032cc:	d11a      	bne.n	8003304 <_printf_common+0xc8>
 80032ce:	2000      	movs	r0, #0
 80032d0:	e008      	b.n	80032e4 <_printf_common+0xa8>
 80032d2:	2301      	movs	r3, #1
 80032d4:	4652      	mov	r2, sl
 80032d6:	4649      	mov	r1, r9
 80032d8:	4638      	mov	r0, r7
 80032da:	47c0      	blx	r8
 80032dc:	3001      	adds	r0, #1
 80032de:	d103      	bne.n	80032e8 <_printf_common+0xac>
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295
 80032e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e8:	3501      	adds	r5, #1
 80032ea:	e7c6      	b.n	800327a <_printf_common+0x3e>
 80032ec:	18e1      	adds	r1, r4, r3
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	2030      	movs	r0, #48	; 0x30
 80032f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032f6:	4422      	add	r2, r4
 80032f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003300:	3302      	adds	r3, #2
 8003302:	e7c7      	b.n	8003294 <_printf_common+0x58>
 8003304:	2301      	movs	r3, #1
 8003306:	4622      	mov	r2, r4
 8003308:	4649      	mov	r1, r9
 800330a:	4638      	mov	r0, r7
 800330c:	47c0      	blx	r8
 800330e:	3001      	adds	r0, #1
 8003310:	d0e6      	beq.n	80032e0 <_printf_common+0xa4>
 8003312:	3601      	adds	r6, #1
 8003314:	e7d9      	b.n	80032ca <_printf_common+0x8e>
	...

08003318 <_printf_i>:
 8003318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800331c:	460c      	mov	r4, r1
 800331e:	4691      	mov	r9, r2
 8003320:	7e27      	ldrb	r7, [r4, #24]
 8003322:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003324:	2f78      	cmp	r7, #120	; 0x78
 8003326:	4680      	mov	r8, r0
 8003328:	469a      	mov	sl, r3
 800332a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800332e:	d807      	bhi.n	8003340 <_printf_i+0x28>
 8003330:	2f62      	cmp	r7, #98	; 0x62
 8003332:	d80a      	bhi.n	800334a <_printf_i+0x32>
 8003334:	2f00      	cmp	r7, #0
 8003336:	f000 80d8 	beq.w	80034ea <_printf_i+0x1d2>
 800333a:	2f58      	cmp	r7, #88	; 0x58
 800333c:	f000 80a3 	beq.w	8003486 <_printf_i+0x16e>
 8003340:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003344:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003348:	e03a      	b.n	80033c0 <_printf_i+0xa8>
 800334a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800334e:	2b15      	cmp	r3, #21
 8003350:	d8f6      	bhi.n	8003340 <_printf_i+0x28>
 8003352:	a001      	add	r0, pc, #4	; (adr r0, 8003358 <_printf_i+0x40>)
 8003354:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003358:	080033b1 	.word	0x080033b1
 800335c:	080033c5 	.word	0x080033c5
 8003360:	08003341 	.word	0x08003341
 8003364:	08003341 	.word	0x08003341
 8003368:	08003341 	.word	0x08003341
 800336c:	08003341 	.word	0x08003341
 8003370:	080033c5 	.word	0x080033c5
 8003374:	08003341 	.word	0x08003341
 8003378:	08003341 	.word	0x08003341
 800337c:	08003341 	.word	0x08003341
 8003380:	08003341 	.word	0x08003341
 8003384:	080034d1 	.word	0x080034d1
 8003388:	080033f5 	.word	0x080033f5
 800338c:	080034b3 	.word	0x080034b3
 8003390:	08003341 	.word	0x08003341
 8003394:	08003341 	.word	0x08003341
 8003398:	080034f3 	.word	0x080034f3
 800339c:	08003341 	.word	0x08003341
 80033a0:	080033f5 	.word	0x080033f5
 80033a4:	08003341 	.word	0x08003341
 80033a8:	08003341 	.word	0x08003341
 80033ac:	080034bb 	.word	0x080034bb
 80033b0:	680b      	ldr	r3, [r1, #0]
 80033b2:	1d1a      	adds	r2, r3, #4
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	600a      	str	r2, [r1, #0]
 80033b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0a3      	b.n	800350c <_printf_i+0x1f4>
 80033c4:	6825      	ldr	r5, [r4, #0]
 80033c6:	6808      	ldr	r0, [r1, #0]
 80033c8:	062e      	lsls	r6, r5, #24
 80033ca:	f100 0304 	add.w	r3, r0, #4
 80033ce:	d50a      	bpl.n	80033e6 <_printf_i+0xce>
 80033d0:	6805      	ldr	r5, [r0, #0]
 80033d2:	600b      	str	r3, [r1, #0]
 80033d4:	2d00      	cmp	r5, #0
 80033d6:	da03      	bge.n	80033e0 <_printf_i+0xc8>
 80033d8:	232d      	movs	r3, #45	; 0x2d
 80033da:	426d      	negs	r5, r5
 80033dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033e0:	485e      	ldr	r0, [pc, #376]	; (800355c <_printf_i+0x244>)
 80033e2:	230a      	movs	r3, #10
 80033e4:	e019      	b.n	800341a <_printf_i+0x102>
 80033e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80033ea:	6805      	ldr	r5, [r0, #0]
 80033ec:	600b      	str	r3, [r1, #0]
 80033ee:	bf18      	it	ne
 80033f0:	b22d      	sxthne	r5, r5
 80033f2:	e7ef      	b.n	80033d4 <_printf_i+0xbc>
 80033f4:	680b      	ldr	r3, [r1, #0]
 80033f6:	6825      	ldr	r5, [r4, #0]
 80033f8:	1d18      	adds	r0, r3, #4
 80033fa:	6008      	str	r0, [r1, #0]
 80033fc:	0628      	lsls	r0, r5, #24
 80033fe:	d501      	bpl.n	8003404 <_printf_i+0xec>
 8003400:	681d      	ldr	r5, [r3, #0]
 8003402:	e002      	b.n	800340a <_printf_i+0xf2>
 8003404:	0669      	lsls	r1, r5, #25
 8003406:	d5fb      	bpl.n	8003400 <_printf_i+0xe8>
 8003408:	881d      	ldrh	r5, [r3, #0]
 800340a:	4854      	ldr	r0, [pc, #336]	; (800355c <_printf_i+0x244>)
 800340c:	2f6f      	cmp	r7, #111	; 0x6f
 800340e:	bf0c      	ite	eq
 8003410:	2308      	moveq	r3, #8
 8003412:	230a      	movne	r3, #10
 8003414:	2100      	movs	r1, #0
 8003416:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800341a:	6866      	ldr	r6, [r4, #4]
 800341c:	60a6      	str	r6, [r4, #8]
 800341e:	2e00      	cmp	r6, #0
 8003420:	bfa2      	ittt	ge
 8003422:	6821      	ldrge	r1, [r4, #0]
 8003424:	f021 0104 	bicge.w	r1, r1, #4
 8003428:	6021      	strge	r1, [r4, #0]
 800342a:	b90d      	cbnz	r5, 8003430 <_printf_i+0x118>
 800342c:	2e00      	cmp	r6, #0
 800342e:	d04d      	beq.n	80034cc <_printf_i+0x1b4>
 8003430:	4616      	mov	r6, r2
 8003432:	fbb5 f1f3 	udiv	r1, r5, r3
 8003436:	fb03 5711 	mls	r7, r3, r1, r5
 800343a:	5dc7      	ldrb	r7, [r0, r7]
 800343c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003440:	462f      	mov	r7, r5
 8003442:	42bb      	cmp	r3, r7
 8003444:	460d      	mov	r5, r1
 8003446:	d9f4      	bls.n	8003432 <_printf_i+0x11a>
 8003448:	2b08      	cmp	r3, #8
 800344a:	d10b      	bne.n	8003464 <_printf_i+0x14c>
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	07df      	lsls	r7, r3, #31
 8003450:	d508      	bpl.n	8003464 <_printf_i+0x14c>
 8003452:	6923      	ldr	r3, [r4, #16]
 8003454:	6861      	ldr	r1, [r4, #4]
 8003456:	4299      	cmp	r1, r3
 8003458:	bfde      	ittt	le
 800345a:	2330      	movle	r3, #48	; 0x30
 800345c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003460:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003464:	1b92      	subs	r2, r2, r6
 8003466:	6122      	str	r2, [r4, #16]
 8003468:	f8cd a000 	str.w	sl, [sp]
 800346c:	464b      	mov	r3, r9
 800346e:	aa03      	add	r2, sp, #12
 8003470:	4621      	mov	r1, r4
 8003472:	4640      	mov	r0, r8
 8003474:	f7ff fee2 	bl	800323c <_printf_common>
 8003478:	3001      	adds	r0, #1
 800347a:	d14c      	bne.n	8003516 <_printf_i+0x1fe>
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	b004      	add	sp, #16
 8003482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003486:	4835      	ldr	r0, [pc, #212]	; (800355c <_printf_i+0x244>)
 8003488:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	680e      	ldr	r6, [r1, #0]
 8003490:	061f      	lsls	r7, r3, #24
 8003492:	f856 5b04 	ldr.w	r5, [r6], #4
 8003496:	600e      	str	r6, [r1, #0]
 8003498:	d514      	bpl.n	80034c4 <_printf_i+0x1ac>
 800349a:	07d9      	lsls	r1, r3, #31
 800349c:	bf44      	itt	mi
 800349e:	f043 0320 	orrmi.w	r3, r3, #32
 80034a2:	6023      	strmi	r3, [r4, #0]
 80034a4:	b91d      	cbnz	r5, 80034ae <_printf_i+0x196>
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	f023 0320 	bic.w	r3, r3, #32
 80034ac:	6023      	str	r3, [r4, #0]
 80034ae:	2310      	movs	r3, #16
 80034b0:	e7b0      	b.n	8003414 <_printf_i+0xfc>
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	f043 0320 	orr.w	r3, r3, #32
 80034b8:	6023      	str	r3, [r4, #0]
 80034ba:	2378      	movs	r3, #120	; 0x78
 80034bc:	4828      	ldr	r0, [pc, #160]	; (8003560 <_printf_i+0x248>)
 80034be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034c2:	e7e3      	b.n	800348c <_printf_i+0x174>
 80034c4:	065e      	lsls	r6, r3, #25
 80034c6:	bf48      	it	mi
 80034c8:	b2ad      	uxthmi	r5, r5
 80034ca:	e7e6      	b.n	800349a <_printf_i+0x182>
 80034cc:	4616      	mov	r6, r2
 80034ce:	e7bb      	b.n	8003448 <_printf_i+0x130>
 80034d0:	680b      	ldr	r3, [r1, #0]
 80034d2:	6826      	ldr	r6, [r4, #0]
 80034d4:	6960      	ldr	r0, [r4, #20]
 80034d6:	1d1d      	adds	r5, r3, #4
 80034d8:	600d      	str	r5, [r1, #0]
 80034da:	0635      	lsls	r5, r6, #24
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	d501      	bpl.n	80034e4 <_printf_i+0x1cc>
 80034e0:	6018      	str	r0, [r3, #0]
 80034e2:	e002      	b.n	80034ea <_printf_i+0x1d2>
 80034e4:	0671      	lsls	r1, r6, #25
 80034e6:	d5fb      	bpl.n	80034e0 <_printf_i+0x1c8>
 80034e8:	8018      	strh	r0, [r3, #0]
 80034ea:	2300      	movs	r3, #0
 80034ec:	6123      	str	r3, [r4, #16]
 80034ee:	4616      	mov	r6, r2
 80034f0:	e7ba      	b.n	8003468 <_printf_i+0x150>
 80034f2:	680b      	ldr	r3, [r1, #0]
 80034f4:	1d1a      	adds	r2, r3, #4
 80034f6:	600a      	str	r2, [r1, #0]
 80034f8:	681e      	ldr	r6, [r3, #0]
 80034fa:	6862      	ldr	r2, [r4, #4]
 80034fc:	2100      	movs	r1, #0
 80034fe:	4630      	mov	r0, r6
 8003500:	f7fc fe66 	bl	80001d0 <memchr>
 8003504:	b108      	cbz	r0, 800350a <_printf_i+0x1f2>
 8003506:	1b80      	subs	r0, r0, r6
 8003508:	6060      	str	r0, [r4, #4]
 800350a:	6863      	ldr	r3, [r4, #4]
 800350c:	6123      	str	r3, [r4, #16]
 800350e:	2300      	movs	r3, #0
 8003510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003514:	e7a8      	b.n	8003468 <_printf_i+0x150>
 8003516:	6923      	ldr	r3, [r4, #16]
 8003518:	4632      	mov	r2, r6
 800351a:	4649      	mov	r1, r9
 800351c:	4640      	mov	r0, r8
 800351e:	47d0      	blx	sl
 8003520:	3001      	adds	r0, #1
 8003522:	d0ab      	beq.n	800347c <_printf_i+0x164>
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	079b      	lsls	r3, r3, #30
 8003528:	d413      	bmi.n	8003552 <_printf_i+0x23a>
 800352a:	68e0      	ldr	r0, [r4, #12]
 800352c:	9b03      	ldr	r3, [sp, #12]
 800352e:	4298      	cmp	r0, r3
 8003530:	bfb8      	it	lt
 8003532:	4618      	movlt	r0, r3
 8003534:	e7a4      	b.n	8003480 <_printf_i+0x168>
 8003536:	2301      	movs	r3, #1
 8003538:	4632      	mov	r2, r6
 800353a:	4649      	mov	r1, r9
 800353c:	4640      	mov	r0, r8
 800353e:	47d0      	blx	sl
 8003540:	3001      	adds	r0, #1
 8003542:	d09b      	beq.n	800347c <_printf_i+0x164>
 8003544:	3501      	adds	r5, #1
 8003546:	68e3      	ldr	r3, [r4, #12]
 8003548:	9903      	ldr	r1, [sp, #12]
 800354a:	1a5b      	subs	r3, r3, r1
 800354c:	42ab      	cmp	r3, r5
 800354e:	dcf2      	bgt.n	8003536 <_printf_i+0x21e>
 8003550:	e7eb      	b.n	800352a <_printf_i+0x212>
 8003552:	2500      	movs	r5, #0
 8003554:	f104 0619 	add.w	r6, r4, #25
 8003558:	e7f5      	b.n	8003546 <_printf_i+0x22e>
 800355a:	bf00      	nop
 800355c:	080037dd 	.word	0x080037dd
 8003560:	080037ee 	.word	0x080037ee

08003564 <memmove>:
 8003564:	4288      	cmp	r0, r1
 8003566:	b510      	push	{r4, lr}
 8003568:	eb01 0402 	add.w	r4, r1, r2
 800356c:	d902      	bls.n	8003574 <memmove+0x10>
 800356e:	4284      	cmp	r4, r0
 8003570:	4623      	mov	r3, r4
 8003572:	d807      	bhi.n	8003584 <memmove+0x20>
 8003574:	1e43      	subs	r3, r0, #1
 8003576:	42a1      	cmp	r1, r4
 8003578:	d008      	beq.n	800358c <memmove+0x28>
 800357a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800357e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003582:	e7f8      	b.n	8003576 <memmove+0x12>
 8003584:	4402      	add	r2, r0
 8003586:	4601      	mov	r1, r0
 8003588:	428a      	cmp	r2, r1
 800358a:	d100      	bne.n	800358e <memmove+0x2a>
 800358c:	bd10      	pop	{r4, pc}
 800358e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003596:	e7f7      	b.n	8003588 <memmove+0x24>

08003598 <_free_r>:
 8003598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800359a:	2900      	cmp	r1, #0
 800359c:	d048      	beq.n	8003630 <_free_r+0x98>
 800359e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035a2:	9001      	str	r0, [sp, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f1a1 0404 	sub.w	r4, r1, #4
 80035aa:	bfb8      	it	lt
 80035ac:	18e4      	addlt	r4, r4, r3
 80035ae:	f000 f8d3 	bl	8003758 <__malloc_lock>
 80035b2:	4a20      	ldr	r2, [pc, #128]	; (8003634 <_free_r+0x9c>)
 80035b4:	9801      	ldr	r0, [sp, #4]
 80035b6:	6813      	ldr	r3, [r2, #0]
 80035b8:	4615      	mov	r5, r2
 80035ba:	b933      	cbnz	r3, 80035ca <_free_r+0x32>
 80035bc:	6063      	str	r3, [r4, #4]
 80035be:	6014      	str	r4, [r2, #0]
 80035c0:	b003      	add	sp, #12
 80035c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035c6:	f000 b8cd 	b.w	8003764 <__malloc_unlock>
 80035ca:	42a3      	cmp	r3, r4
 80035cc:	d90b      	bls.n	80035e6 <_free_r+0x4e>
 80035ce:	6821      	ldr	r1, [r4, #0]
 80035d0:	1862      	adds	r2, r4, r1
 80035d2:	4293      	cmp	r3, r2
 80035d4:	bf04      	itt	eq
 80035d6:	681a      	ldreq	r2, [r3, #0]
 80035d8:	685b      	ldreq	r3, [r3, #4]
 80035da:	6063      	str	r3, [r4, #4]
 80035dc:	bf04      	itt	eq
 80035de:	1852      	addeq	r2, r2, r1
 80035e0:	6022      	streq	r2, [r4, #0]
 80035e2:	602c      	str	r4, [r5, #0]
 80035e4:	e7ec      	b.n	80035c0 <_free_r+0x28>
 80035e6:	461a      	mov	r2, r3
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	b10b      	cbz	r3, 80035f0 <_free_r+0x58>
 80035ec:	42a3      	cmp	r3, r4
 80035ee:	d9fa      	bls.n	80035e6 <_free_r+0x4e>
 80035f0:	6811      	ldr	r1, [r2, #0]
 80035f2:	1855      	adds	r5, r2, r1
 80035f4:	42a5      	cmp	r5, r4
 80035f6:	d10b      	bne.n	8003610 <_free_r+0x78>
 80035f8:	6824      	ldr	r4, [r4, #0]
 80035fa:	4421      	add	r1, r4
 80035fc:	1854      	adds	r4, r2, r1
 80035fe:	42a3      	cmp	r3, r4
 8003600:	6011      	str	r1, [r2, #0]
 8003602:	d1dd      	bne.n	80035c0 <_free_r+0x28>
 8003604:	681c      	ldr	r4, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	6053      	str	r3, [r2, #4]
 800360a:	4421      	add	r1, r4
 800360c:	6011      	str	r1, [r2, #0]
 800360e:	e7d7      	b.n	80035c0 <_free_r+0x28>
 8003610:	d902      	bls.n	8003618 <_free_r+0x80>
 8003612:	230c      	movs	r3, #12
 8003614:	6003      	str	r3, [r0, #0]
 8003616:	e7d3      	b.n	80035c0 <_free_r+0x28>
 8003618:	6825      	ldr	r5, [r4, #0]
 800361a:	1961      	adds	r1, r4, r5
 800361c:	428b      	cmp	r3, r1
 800361e:	bf04      	itt	eq
 8003620:	6819      	ldreq	r1, [r3, #0]
 8003622:	685b      	ldreq	r3, [r3, #4]
 8003624:	6063      	str	r3, [r4, #4]
 8003626:	bf04      	itt	eq
 8003628:	1949      	addeq	r1, r1, r5
 800362a:	6021      	streq	r1, [r4, #0]
 800362c:	6054      	str	r4, [r2, #4]
 800362e:	e7c7      	b.n	80035c0 <_free_r+0x28>
 8003630:	b003      	add	sp, #12
 8003632:	bd30      	pop	{r4, r5, pc}
 8003634:	200000e8 	.word	0x200000e8

08003638 <_malloc_r>:
 8003638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363a:	1ccd      	adds	r5, r1, #3
 800363c:	f025 0503 	bic.w	r5, r5, #3
 8003640:	3508      	adds	r5, #8
 8003642:	2d0c      	cmp	r5, #12
 8003644:	bf38      	it	cc
 8003646:	250c      	movcc	r5, #12
 8003648:	2d00      	cmp	r5, #0
 800364a:	4606      	mov	r6, r0
 800364c:	db01      	blt.n	8003652 <_malloc_r+0x1a>
 800364e:	42a9      	cmp	r1, r5
 8003650:	d903      	bls.n	800365a <_malloc_r+0x22>
 8003652:	230c      	movs	r3, #12
 8003654:	6033      	str	r3, [r6, #0]
 8003656:	2000      	movs	r0, #0
 8003658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800365a:	f000 f87d 	bl	8003758 <__malloc_lock>
 800365e:	4921      	ldr	r1, [pc, #132]	; (80036e4 <_malloc_r+0xac>)
 8003660:	680a      	ldr	r2, [r1, #0]
 8003662:	4614      	mov	r4, r2
 8003664:	b99c      	cbnz	r4, 800368e <_malloc_r+0x56>
 8003666:	4f20      	ldr	r7, [pc, #128]	; (80036e8 <_malloc_r+0xb0>)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	b923      	cbnz	r3, 8003676 <_malloc_r+0x3e>
 800366c:	4621      	mov	r1, r4
 800366e:	4630      	mov	r0, r6
 8003670:	f000 f862 	bl	8003738 <_sbrk_r>
 8003674:	6038      	str	r0, [r7, #0]
 8003676:	4629      	mov	r1, r5
 8003678:	4630      	mov	r0, r6
 800367a:	f000 f85d 	bl	8003738 <_sbrk_r>
 800367e:	1c43      	adds	r3, r0, #1
 8003680:	d123      	bne.n	80036ca <_malloc_r+0x92>
 8003682:	230c      	movs	r3, #12
 8003684:	6033      	str	r3, [r6, #0]
 8003686:	4630      	mov	r0, r6
 8003688:	f000 f86c 	bl	8003764 <__malloc_unlock>
 800368c:	e7e3      	b.n	8003656 <_malloc_r+0x1e>
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	1b5b      	subs	r3, r3, r5
 8003692:	d417      	bmi.n	80036c4 <_malloc_r+0x8c>
 8003694:	2b0b      	cmp	r3, #11
 8003696:	d903      	bls.n	80036a0 <_malloc_r+0x68>
 8003698:	6023      	str	r3, [r4, #0]
 800369a:	441c      	add	r4, r3
 800369c:	6025      	str	r5, [r4, #0]
 800369e:	e004      	b.n	80036aa <_malloc_r+0x72>
 80036a0:	6863      	ldr	r3, [r4, #4]
 80036a2:	42a2      	cmp	r2, r4
 80036a4:	bf0c      	ite	eq
 80036a6:	600b      	streq	r3, [r1, #0]
 80036a8:	6053      	strne	r3, [r2, #4]
 80036aa:	4630      	mov	r0, r6
 80036ac:	f000 f85a 	bl	8003764 <__malloc_unlock>
 80036b0:	f104 000b 	add.w	r0, r4, #11
 80036b4:	1d23      	adds	r3, r4, #4
 80036b6:	f020 0007 	bic.w	r0, r0, #7
 80036ba:	1ac2      	subs	r2, r0, r3
 80036bc:	d0cc      	beq.n	8003658 <_malloc_r+0x20>
 80036be:	1a1b      	subs	r3, r3, r0
 80036c0:	50a3      	str	r3, [r4, r2]
 80036c2:	e7c9      	b.n	8003658 <_malloc_r+0x20>
 80036c4:	4622      	mov	r2, r4
 80036c6:	6864      	ldr	r4, [r4, #4]
 80036c8:	e7cc      	b.n	8003664 <_malloc_r+0x2c>
 80036ca:	1cc4      	adds	r4, r0, #3
 80036cc:	f024 0403 	bic.w	r4, r4, #3
 80036d0:	42a0      	cmp	r0, r4
 80036d2:	d0e3      	beq.n	800369c <_malloc_r+0x64>
 80036d4:	1a21      	subs	r1, r4, r0
 80036d6:	4630      	mov	r0, r6
 80036d8:	f000 f82e 	bl	8003738 <_sbrk_r>
 80036dc:	3001      	adds	r0, #1
 80036de:	d1dd      	bne.n	800369c <_malloc_r+0x64>
 80036e0:	e7cf      	b.n	8003682 <_malloc_r+0x4a>
 80036e2:	bf00      	nop
 80036e4:	200000e8 	.word	0x200000e8
 80036e8:	200000ec 	.word	0x200000ec

080036ec <_realloc_r>:
 80036ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ee:	4607      	mov	r7, r0
 80036f0:	4614      	mov	r4, r2
 80036f2:	460e      	mov	r6, r1
 80036f4:	b921      	cbnz	r1, 8003700 <_realloc_r+0x14>
 80036f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80036fa:	4611      	mov	r1, r2
 80036fc:	f7ff bf9c 	b.w	8003638 <_malloc_r>
 8003700:	b922      	cbnz	r2, 800370c <_realloc_r+0x20>
 8003702:	f7ff ff49 	bl	8003598 <_free_r>
 8003706:	4625      	mov	r5, r4
 8003708:	4628      	mov	r0, r5
 800370a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800370c:	f000 f830 	bl	8003770 <_malloc_usable_size_r>
 8003710:	42a0      	cmp	r0, r4
 8003712:	d20f      	bcs.n	8003734 <_realloc_r+0x48>
 8003714:	4621      	mov	r1, r4
 8003716:	4638      	mov	r0, r7
 8003718:	f7ff ff8e 	bl	8003638 <_malloc_r>
 800371c:	4605      	mov	r5, r0
 800371e:	2800      	cmp	r0, #0
 8003720:	d0f2      	beq.n	8003708 <_realloc_r+0x1c>
 8003722:	4631      	mov	r1, r6
 8003724:	4622      	mov	r2, r4
 8003726:	f7ff fbf7 	bl	8002f18 <memcpy>
 800372a:	4631      	mov	r1, r6
 800372c:	4638      	mov	r0, r7
 800372e:	f7ff ff33 	bl	8003598 <_free_r>
 8003732:	e7e9      	b.n	8003708 <_realloc_r+0x1c>
 8003734:	4635      	mov	r5, r6
 8003736:	e7e7      	b.n	8003708 <_realloc_r+0x1c>

08003738 <_sbrk_r>:
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	4d06      	ldr	r5, [pc, #24]	; (8003754 <_sbrk_r+0x1c>)
 800373c:	2300      	movs	r3, #0
 800373e:	4604      	mov	r4, r0
 8003740:	4608      	mov	r0, r1
 8003742:	602b      	str	r3, [r5, #0]
 8003744:	f7fd fae8 	bl	8000d18 <_sbrk>
 8003748:	1c43      	adds	r3, r0, #1
 800374a:	d102      	bne.n	8003752 <_sbrk_r+0x1a>
 800374c:	682b      	ldr	r3, [r5, #0]
 800374e:	b103      	cbz	r3, 8003752 <_sbrk_r+0x1a>
 8003750:	6023      	str	r3, [r4, #0]
 8003752:	bd38      	pop	{r3, r4, r5, pc}
 8003754:	20000190 	.word	0x20000190

08003758 <__malloc_lock>:
 8003758:	4801      	ldr	r0, [pc, #4]	; (8003760 <__malloc_lock+0x8>)
 800375a:	f000 b811 	b.w	8003780 <__retarget_lock_acquire_recursive>
 800375e:	bf00      	nop
 8003760:	20000198 	.word	0x20000198

08003764 <__malloc_unlock>:
 8003764:	4801      	ldr	r0, [pc, #4]	; (800376c <__malloc_unlock+0x8>)
 8003766:	f000 b80c 	b.w	8003782 <__retarget_lock_release_recursive>
 800376a:	bf00      	nop
 800376c:	20000198 	.word	0x20000198

08003770 <_malloc_usable_size_r>:
 8003770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003774:	1f18      	subs	r0, r3, #4
 8003776:	2b00      	cmp	r3, #0
 8003778:	bfbc      	itt	lt
 800377a:	580b      	ldrlt	r3, [r1, r0]
 800377c:	18c0      	addlt	r0, r0, r3
 800377e:	4770      	bx	lr

08003780 <__retarget_lock_acquire_recursive>:
 8003780:	4770      	bx	lr

08003782 <__retarget_lock_release_recursive>:
 8003782:	4770      	bx	lr

08003784 <_init>:
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	bf00      	nop
 8003788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378a:	bc08      	pop	{r3}
 800378c:	469e      	mov	lr, r3
 800378e:	4770      	bx	lr

08003790 <_fini>:
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	bf00      	nop
 8003794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003796:	bc08      	pop	{r3}
 8003798:	469e      	mov	lr, r3
 800379a:	4770      	bx	lr
