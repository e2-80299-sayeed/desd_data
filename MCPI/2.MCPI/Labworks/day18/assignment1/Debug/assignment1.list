
assignment1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000301c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080031ac  080031ac  000131ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003204  08003204  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003204  08003204  00013204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800320c  0800320c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800320c  0800320c  0001320c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003210  08003210  00013210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08003284  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003284  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0c0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001707  00000000  00000000  0002a160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0002b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  0002bf90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000215a1  00000000  00000000  0002c630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000915b  00000000  00000000  0004dbd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf340  00000000  00000000  00056d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012606c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002038  00000000  00000000  001260c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003194 	.word	0x08003194

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003194 	.word	0x08003194

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b090      	sub	sp, #64	; 0x40
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fb29 	bl	8000bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f8a7 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f98b 	bl	8000890 <MX_GPIO_Init>
  MX_ADC1_Init();
 800057a:	f000 f90d 	bl	8000798 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800057e:	f000 f95d 	bl	800083c <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 8000582:	484c      	ldr	r0, [pc, #304]	; (80006b4 <main+0x14c>)
 8000584:	f000 fbf8 	bl	8000d78 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000588:	f04f 31ff 	mov.w	r1, #4294967295
 800058c:	4849      	ldr	r0, [pc, #292]	; (80006b4 <main+0x14c>)
 800058e:	f000 fcc5 	bl	8000f1c <HAL_ADC_PollForConversion>

	  	  result = HAL_ADC_GetValue(&hadc1);
 8000592:	4848      	ldr	r0, [pc, #288]	; (80006b4 <main+0x14c>)
 8000594:	f000 fd4d 	bl	8001032 <HAL_ADC_GetValue>
 8000598:	63f8      	str	r0, [r7, #60]	; 0x3c

	  	  if(result > 500)
 800059a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800059c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005a0:	d917      	bls.n	80005d2 <main+0x6a>
	  	  {
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a8:	4843      	ldr	r0, [pc, #268]	; (80006b8 <main+0x150>)
 80005aa:	f001 f9ef 	bl	800198c <HAL_GPIO_WritePin>

	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b4:	4840      	ldr	r0, [pc, #256]	; (80006b8 <main+0x150>)
 80005b6:	f001 f9e9 	bl	800198c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c0:	483d      	ldr	r0, [pc, #244]	; (80006b8 <main+0x150>)
 80005c2:	f001 f9e3 	bl	800198c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005cc:	483a      	ldr	r0, [pc, #232]	; (80006b8 <main+0x150>)
 80005ce:	f001 f9dd 	bl	800198c <HAL_GPIO_WritePin>
	  	  }
	  	  if(result > 1000)
 80005d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005d8:	d917      	bls.n	800060a <main+0xa2>
	  	  {
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e0:	4835      	ldr	r0, [pc, #212]	; (80006b8 <main+0x150>)
 80005e2:	f001 f9d3 	bl	800198c <HAL_GPIO_WritePin>


	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ec:	4832      	ldr	r0, [pc, #200]	; (80006b8 <main+0x150>)
 80005ee:	f001 f9cd 	bl	800198c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f8:	482f      	ldr	r0, [pc, #188]	; (80006b8 <main+0x150>)
 80005fa:	f001 f9c7 	bl	800198c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000604:	482c      	ldr	r0, [pc, #176]	; (80006b8 <main+0x150>)
 8000606:	f001 f9c1 	bl	800198c <HAL_GPIO_WritePin>
	  	  }
	  	  if(result > 2000)
 800060a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800060c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000610:	d917      	bls.n	8000642 <main+0xda>
	  	  {
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000618:	4827      	ldr	r0, [pc, #156]	; (80006b8 <main+0x150>)
 800061a:	f001 f9b7 	bl	800198c <HAL_GPIO_WritePin>


	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000624:	4824      	ldr	r0, [pc, #144]	; (80006b8 <main+0x150>)
 8000626:	f001 f9b1 	bl	800198c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000630:	4821      	ldr	r0, [pc, #132]	; (80006b8 <main+0x150>)
 8000632:	f001 f9ab 	bl	800198c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800063c:	481e      	ldr	r0, [pc, #120]	; (80006b8 <main+0x150>)
 800063e:	f001 f9a5 	bl	800198c <HAL_GPIO_WritePin>
	  	  }
	  	  if(result > 3000)
 8000642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000644:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000648:	4293      	cmp	r3, r2
 800064a:	d918      	bls.n	800067e <main+0x116>
	  	  {
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000652:	4819      	ldr	r0, [pc, #100]	; (80006b8 <main+0x150>)
 8000654:	f001 f99a 	bl	800198c <HAL_GPIO_WritePin>

	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065e:	4816      	ldr	r0, [pc, #88]	; (80006b8 <main+0x150>)
 8000660:	f001 f994 	bl	800198c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066a:	4813      	ldr	r0, [pc, #76]	; (80006b8 <main+0x150>)
 800066c:	f001 f98e 	bl	800198c <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000676:	4810      	ldr	r0, [pc, #64]	; (80006b8 <main+0x150>)
 8000678:	f001 f988 	bl	800198c <HAL_GPIO_WritePin>
 800067c:	e005      	b.n	800068a <main+0x122>
	  	  }
	  	  else
	  	  {
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <main+0x150>)
 8000686:	f001 f981 	bl	800198c <HAL_GPIO_WritePin>
	  	  }

	  	  len = sprintf(str, "ADC =%lu\r\n",result);
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800068e:	490b      	ldr	r1, [pc, #44]	; (80006bc <main+0x154>)
 8000690:	4618      	mov	r0, r3
 8000692:	f002 f951 	bl	8002938 <siprintf>
 8000696:	63b8      	str	r0, [r7, #56]	; 0x38
	  	  HAL_UART_Transmit(&huart2, (uint8_t*)str, len, HAL_MAX_DELAY);
 8000698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800069a:	b29a      	uxth	r2, r3
 800069c:	1d39      	adds	r1, r7, #4
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
 80006a2:	4807      	ldr	r0, [pc, #28]	; (80006c0 <main+0x158>)
 80006a4:	f001 fe4d 	bl	8002342 <HAL_UART_Transmit>

	  	  HAL_Delay(1000);
 80006a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ac:	f000 fafc 	bl	8000ca8 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80006b0:	e767      	b.n	8000582 <main+0x1a>
 80006b2:	bf00      	nop
 80006b4:	20000098 	.word	0x20000098
 80006b8:	40020c00 	.word	0x40020c00
 80006bc:	080031ac 	.word	0x080031ac
 80006c0:	200000e0 	.word	0x200000e0

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 f928 	bl	8002928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	; (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000738:	2332      	movs	r3, #50	; 0x32
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073c:	2304      	movs	r3, #4
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000740:	2307      	movs	r3, #7
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f939 	bl	80019c0 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 f8e0 	bl	8000918 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f001 fb9a 	bl	8001eb0 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 f8c9 	bl	8000918 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_ADC1_Init+0x98>)
 80007ac:	4a21      	ldr	r2, [pc, #132]	; (8000834 <MX_ADC1_Init+0x9c>)
 80007ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_ADC1_Init+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <MX_ADC1_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_ADC1_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_ADC1_Init+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_ADC1_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_ADC1_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_ADC1_Init+0x98>)
 80007d8:	4a17      	ldr	r2, [pc, #92]	; (8000838 <MX_ADC1_Init+0xa0>)
 80007da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_ADC1_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_ADC1_Init+0x98>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_ADC1_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_ADC1_Init+0x98>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f6:	480e      	ldr	r0, [pc, #56]	; (8000830 <MX_ADC1_Init+0x98>)
 80007f8:	f000 fa7a 	bl	8000cf0 <HAL_ADC_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000802:	f000 f889 	bl	8000918 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800080a:	2301      	movs	r3, #1
 800080c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000812:	463b      	mov	r3, r7
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <MX_ADC1_Init+0x98>)
 8000818:	f000 fc18 	bl	800104c <HAL_ADC_ConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000822:	f000 f879 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000098 	.word	0x20000098
 8000834:	40012000 	.word	0x40012000
 8000838:	0f000001 	.word	0x0f000001

0800083c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <MX_USART2_UART_Init+0x50>)
 8000844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000874:	f001 fd18 	bl	80022a8 <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800087e:	f000 f84b 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200000e0 	.word	0x200000e0
 800088c:	40004400 	.word	0x40004400

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_GPIO_Init+0x80>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a18      	ldr	r2, [pc, #96]	; (8000910 <MX_GPIO_Init+0x80>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_GPIO_Init+0x80>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_GPIO_Init+0x80>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a11      	ldr	r2, [pc, #68]	; (8000910 <MX_GPIO_Init+0x80>)
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_GPIO_Init+0x80>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0308 	and.w	r3, r3, #8
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <MX_GPIO_Init+0x84>)
 80008e6:	f001 f851 	bl	800198c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008ea:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	4619      	mov	r1, r3
 8000902:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_GPIO_Init+0x84>)
 8000904:	f000 fea6 	bl	8001654 <HAL_GPIO_Init>

}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40020c00 	.word	0x40020c00

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	e7fe      	b.n	8000920 <Error_Handler+0x8>
	...

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <HAL_MspInit+0x4c>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_MspInit+0x4c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <HAL_MspInit+0x4c>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000962:	2007      	movs	r0, #7
 8000964:	f000 fe42 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800

08000974 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <HAL_ADC_MspInit+0x7c>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d127      	bne.n	80009e6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <HAL_ADC_MspInit+0x80>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <HAL_ADC_MspInit+0x80>)
 80009a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <HAL_ADC_MspInit+0x80>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_ADC_MspInit+0x80>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_ADC_MspInit+0x80>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_ADC_MspInit+0x80>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ce:	2301      	movs	r3, #1
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d2:	2303      	movs	r3, #3
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <HAL_ADC_MspInit+0x84>)
 80009e2:	f000 fe37 	bl	8001654 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40012000 	.word	0x40012000
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020000 	.word	0x40020000

080009fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <HAL_UART_MspInit+0x84>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d12b      	bne.n	8000a76 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a56:	230c      	movs	r3, #12
 8000a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a66:	2307      	movs	r3, #7
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <HAL_UART_MspInit+0x8c>)
 8000a72:	f000 fdef 	bl	8001654 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40004400 	.word	0x40004400
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f000 f8c6 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae8:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <_sbrk+0x5c>)
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <_sbrk+0x60>)
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <_sbrk+0x64>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <_sbrk+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d207      	bcs.n	8000b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b10:	f001 fee0 	bl	80028d4 <__errno>
 8000b14:	4603      	mov	r3, r0
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	e009      	b.n	8000b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <_sbrk+0x64>)
 8000b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20020000 	.word	0x20020000
 8000b40:	00000400 	.word	0x00000400
 8000b44:	2000008c 	.word	0x2000008c
 8000b48:	20000138 	.word	0x20000138

08000b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <SystemInit+0x20>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <SystemInit+0x20>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b76:	490e      	ldr	r1, [pc, #56]	; (8000bb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b78:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b8c:	4c0b      	ldr	r4, [pc, #44]	; (8000bbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b9a:	f7ff ffd7 	bl	8000b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f001 fe9f 	bl	80028e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba2:	f7ff fce1 	bl	8000568 <main>
  bx  lr    
 8000ba6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ba8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bb4:	08003214 	.word	0x08003214
  ldr r2, =_sbss
 8000bb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bbc:	20000138 	.word	0x20000138

08000bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC_IRQHandler>
	...

08000bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <HAL_Init+0x40>)
 8000bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_Init+0x40>)
 8000bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_Init+0x40>)
 8000be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 fcfd 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 f808 	bl	8000c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fe94 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023c00 	.word	0x40023c00

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x54>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x58>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fd07 	bl	800163a <HAL_SYSTICK_Config>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00e      	b.n	8000c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d80a      	bhi.n	8000c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f000 fcdd 	bl	8001602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <HAL_InitTick+0x5c>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e000      	b.n	8000c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000004 	.word	0x20000004

08000c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000124 	.word	0x20000124

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000124 	.word	0x20000124

08000ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb0:	f7ff ffee 	bl	8000c90 <HAL_GetTick>
 8000cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc0:	d005      	beq.n	8000cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_Delay+0x44>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4413      	add	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cce:	bf00      	nop
 8000cd0:	f7ff ffde 	bl	8000c90 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d8f7      	bhi.n	8000cd0 <HAL_Delay+0x28>
  {
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008

08000cf0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e033      	b.n	8000d6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d109      	bne.n	8000d22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff fe30 	bl	8000974 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d118      	bne.n	8000d60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d36:	f023 0302 	bic.w	r3, r3, #2
 8000d3a:	f043 0202 	orr.w	r2, r3, #2
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f000 faa4 	bl	8001290 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f023 0303 	bic.w	r3, r3, #3
 8000d56:	f043 0201 	orr.w	r2, r3, #1
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d5e:	e001      	b.n	8000d64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d101      	bne.n	8000d92 <HAL_ADC_Start+0x1a>
 8000d8e:	2302      	movs	r3, #2
 8000d90:	e0b2      	b.n	8000ef8 <HAL_ADC_Start+0x180>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2201      	movs	r2, #1
 8000d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d018      	beq.n	8000dda <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f042 0201 	orr.w	r2, r2, #1
 8000db6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000db8:	4b52      	ldr	r3, [pc, #328]	; (8000f04 <HAL_ADC_Start+0x18c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a52      	ldr	r2, [pc, #328]	; (8000f08 <HAL_ADC_Start+0x190>)
 8000dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc2:	0c9a      	lsrs	r2, r3, #18
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000dcc:	e002      	b.n	8000dd4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1f9      	bne.n	8000dce <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d17a      	bne.n	8000ede <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000df0:	f023 0301 	bic.w	r3, r3, #1
 8000df4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d007      	beq.n	8000e1a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e26:	d106      	bne.n	8000e36 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2c:	f023 0206 	bic.w	r2, r3, #6
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	645a      	str	r2, [r3, #68]	; 0x44
 8000e34:	e002      	b.n	8000e3c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e44:	4b31      	ldr	r3, [pc, #196]	; (8000f0c <HAL_ADC_Start+0x194>)
 8000e46:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e50:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 031f 	and.w	r3, r3, #31
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d12a      	bne.n	8000eb4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a2b      	ldr	r2, [pc, #172]	; (8000f10 <HAL_ADC_Start+0x198>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d015      	beq.n	8000e94 <HAL_ADC_Start+0x11c>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a29      	ldr	r2, [pc, #164]	; (8000f14 <HAL_ADC_Start+0x19c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d105      	bne.n	8000e7e <HAL_ADC_Start+0x106>
 8000e72:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <HAL_ADC_Start+0x194>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 031f 	and.w	r3, r3, #31
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00a      	beq.n	8000e94 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a25      	ldr	r2, [pc, #148]	; (8000f18 <HAL_ADC_Start+0x1a0>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d136      	bne.n	8000ef6 <HAL_ADC_Start+0x17e>
 8000e88:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <HAL_ADC_Start+0x194>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0310 	and.w	r3, r3, #16
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d130      	bne.n	8000ef6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d129      	bne.n	8000ef6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	e020      	b.n	8000ef6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a15      	ldr	r2, [pc, #84]	; (8000f10 <HAL_ADC_Start+0x198>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d11b      	bne.n	8000ef6 <HAL_ADC_Start+0x17e>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d114      	bne.n	8000ef6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	e00b      	b.n	8000ef6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f043 0210 	orr.w	r2, r3, #16
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f043 0201 	orr.w	r2, r3, #1
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	20000000 	.word	0x20000000
 8000f08:	431bde83 	.word	0x431bde83
 8000f0c:	40012300 	.word	0x40012300
 8000f10:	40012000 	.word	0x40012000
 8000f14:	40012100 	.word	0x40012100
 8000f18:	40012200 	.word	0x40012200

08000f1c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f38:	d113      	bne.n	8000f62 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f48:	d10b      	bne.n	8000f62 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f043 0220 	orr.w	r2, r3, #32
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e063      	b.n	800102a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000f62:	f7ff fe95 	bl	8000c90 <HAL_GetTick>
 8000f66:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f68:	e021      	b.n	8000fae <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f70:	d01d      	beq.n	8000fae <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d007      	beq.n	8000f88 <HAL_ADC_PollForConversion+0x6c>
 8000f78:	f7ff fe8a 	bl	8000c90 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d212      	bcs.n	8000fae <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d00b      	beq.n	8000fae <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f043 0204 	orr.w	r2, r3, #4
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e03d      	b.n	800102a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d1d6      	bne.n	8000f6a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f06f 0212 	mvn.w	r2, #18
 8000fc4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d123      	bne.n	8001028 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d11f      	bne.n	8001028 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d006      	beq.n	8001004 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001000:	2b00      	cmp	r3, #0
 8001002:	d111      	bne.n	8001028 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d105      	bne.n	8001028 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f043 0201 	orr.w	r2, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001060:	2b01      	cmp	r3, #1
 8001062:	d101      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x1c>
 8001064:	2302      	movs	r3, #2
 8001066:	e105      	b.n	8001274 <HAL_ADC_ConfigChannel+0x228>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b09      	cmp	r3, #9
 8001076:	d925      	bls.n	80010c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68d9      	ldr	r1, [r3, #12]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	b29b      	uxth	r3, r3
 8001084:	461a      	mov	r2, r3
 8001086:	4613      	mov	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	3b1e      	subs	r3, #30
 800108e:	2207      	movs	r2, #7
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43da      	mvns	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	400a      	ands	r2, r1
 800109c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	68d9      	ldr	r1, [r3, #12]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4403      	add	r3, r0
 80010b6:	3b1e      	subs	r3, #30
 80010b8:	409a      	lsls	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	430a      	orrs	r2, r1
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	e022      	b.n	800110a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	6919      	ldr	r1, [r3, #16]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	2207      	movs	r2, #7
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	400a      	ands	r2, r1
 80010e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6919      	ldr	r1, [r3, #16]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	4603      	mov	r3, r0
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4403      	add	r3, r0
 8001100:	409a      	lsls	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b06      	cmp	r3, #6
 8001110:	d824      	bhi.n	800115c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	3b05      	subs	r3, #5
 8001124:	221f      	movs	r2, #31
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	400a      	ands	r2, r1
 8001132:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	b29b      	uxth	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	3b05      	subs	r3, #5
 800114e:	fa00 f203 	lsl.w	r2, r0, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	635a      	str	r2, [r3, #52]	; 0x34
 800115a:	e04c      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b0c      	cmp	r3, #12
 8001162:	d824      	bhi.n	80011ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	3b23      	subs	r3, #35	; 0x23
 8001176:	221f      	movs	r2, #31
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43da      	mvns	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	400a      	ands	r2, r1
 8001184:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	b29b      	uxth	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	3b23      	subs	r3, #35	; 0x23
 80011a0:	fa00 f203 	lsl.w	r2, r0, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	631a      	str	r2, [r3, #48]	; 0x30
 80011ac:	e023      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	3b41      	subs	r3, #65	; 0x41
 80011c0:	221f      	movs	r2, #31
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	400a      	ands	r2, r1
 80011ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	3b41      	subs	r3, #65	; 0x41
 80011ea:	fa00 f203 	lsl.w	r2, r0, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011f6:	4b22      	ldr	r3, [pc, #136]	; (8001280 <HAL_ADC_ConfigChannel+0x234>)
 80011f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a21      	ldr	r2, [pc, #132]	; (8001284 <HAL_ADC_ConfigChannel+0x238>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d109      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1cc>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b12      	cmp	r3, #18
 800120a:	d105      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a19      	ldr	r2, [pc, #100]	; (8001284 <HAL_ADC_ConfigChannel+0x238>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d123      	bne.n	800126a <HAL_ADC_ConfigChannel+0x21e>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b10      	cmp	r3, #16
 8001228:	d003      	beq.n	8001232 <HAL_ADC_ConfigChannel+0x1e6>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b11      	cmp	r3, #17
 8001230:	d11b      	bne.n	800126a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b10      	cmp	r3, #16
 8001244:	d111      	bne.n	800126a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_ADC_ConfigChannel+0x23c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a10      	ldr	r2, [pc, #64]	; (800128c <HAL_ADC_ConfigChannel+0x240>)
 800124c:	fba2 2303 	umull	r2, r3, r2, r3
 8001250:	0c9a      	lsrs	r2, r3, #18
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800125c:	e002      	b.n	8001264 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	3b01      	subs	r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f9      	bne.n	800125e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40012300 	.word	0x40012300
 8001284:	40012000 	.word	0x40012000
 8001288:	20000000 	.word	0x20000000
 800128c:	431bde83 	.word	0x431bde83

08001290 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001298:	4b79      	ldr	r3, [pc, #484]	; (8001480 <ADC_Init+0x1f0>)
 800129a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	431a      	orrs	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6859      	ldr	r1, [r3, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	021a      	lsls	r2, r3, #8
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6859      	ldr	r1, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800130a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6899      	ldr	r1, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001322:	4a58      	ldr	r2, [pc, #352]	; (8001484 <ADC_Init+0x1f4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d022      	beq.n	800136e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001336:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6899      	ldr	r1, [r3, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001358:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6899      	ldr	r1, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	e00f      	b.n	800138e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800137c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800138c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0202 	bic.w	r2, r2, #2
 800139c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6899      	ldr	r1, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7e1b      	ldrb	r3, [r3, #24]
 80013a8:	005a      	lsls	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d01b      	beq.n	80013f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6859      	ldr	r1, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	3b01      	subs	r3, #1
 80013e8:	035a      	lsls	r2, r3, #13
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	e007      	b.n	8001404 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001402:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001412:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	3b01      	subs	r3, #1
 8001420:	051a      	lsls	r2, r3, #20
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001438:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6899      	ldr	r1, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001446:	025a      	lsls	r2, r3, #9
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800145e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6899      	ldr	r1, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	029a      	lsls	r2, r3, #10
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	609a      	str	r2, [r3, #8]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40012300 	.word	0x40012300
 8001484:	0f000001 	.word	0x0f000001

08001488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	60d3      	str	r3, [r2, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	; (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	; (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b8:	d301      	bcc.n	80015be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00f      	b.n	80015de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <SysTick_Config+0x40>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c6:	210f      	movs	r1, #15
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f7ff ff8e 	bl	80014ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <SysTick_Config+0x40>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <SysTick_Config+0x40>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010

080015ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff47 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001614:	f7ff ff5c 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 8001618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff8e 	bl	8001540 <NVIC_EncodePriority>
 8001624:	4602      	mov	r2, r0
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff5d 	bl	80014ec <__NVIC_SetPriority>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffb0 	bl	80015a8 <SysTick_Config>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	e16b      	b.n	8001948 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001670:	2201      	movs	r2, #1
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	429a      	cmp	r2, r3
 800168a:	f040 815a 	bne.w	8001942 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b01      	cmp	r3, #1
 8001698:	d005      	beq.n	80016a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d130      	bne.n	8001708 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	2203      	movs	r2, #3
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016dc:	2201      	movs	r2, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 0201 	and.w	r2, r3, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b03      	cmp	r3, #3
 8001712:	d017      	beq.n	8001744 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	2203      	movs	r2, #3
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d123      	bne.n	8001798 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	69b9      	ldr	r1, [r7, #24]
 8001794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0203 	and.w	r2, r3, #3
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80b4 	beq.w	8001942 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b60      	ldr	r3, [pc, #384]	; (8001960 <HAL_GPIO_Init+0x30c>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a5f      	ldr	r2, [pc, #380]	; (8001960 <HAL_GPIO_Init+0x30c>)
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b5d      	ldr	r3, [pc, #372]	; (8001960 <HAL_GPIO_Init+0x30c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017f6:	4a5b      	ldr	r2, [pc, #364]	; (8001964 <HAL_GPIO_Init+0x310>)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	3302      	adds	r3, #2
 80017fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	220f      	movs	r2, #15
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a52      	ldr	r2, [pc, #328]	; (8001968 <HAL_GPIO_Init+0x314>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d02b      	beq.n	800187a <HAL_GPIO_Init+0x226>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a51      	ldr	r2, [pc, #324]	; (800196c <HAL_GPIO_Init+0x318>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d025      	beq.n	8001876 <HAL_GPIO_Init+0x222>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a50      	ldr	r2, [pc, #320]	; (8001970 <HAL_GPIO_Init+0x31c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d01f      	beq.n	8001872 <HAL_GPIO_Init+0x21e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4f      	ldr	r2, [pc, #316]	; (8001974 <HAL_GPIO_Init+0x320>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d019      	beq.n	800186e <HAL_GPIO_Init+0x21a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4e      	ldr	r2, [pc, #312]	; (8001978 <HAL_GPIO_Init+0x324>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d013      	beq.n	800186a <HAL_GPIO_Init+0x216>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a4d      	ldr	r2, [pc, #308]	; (800197c <HAL_GPIO_Init+0x328>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d00d      	beq.n	8001866 <HAL_GPIO_Init+0x212>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4c      	ldr	r2, [pc, #304]	; (8001980 <HAL_GPIO_Init+0x32c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d007      	beq.n	8001862 <HAL_GPIO_Init+0x20e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4b      	ldr	r2, [pc, #300]	; (8001984 <HAL_GPIO_Init+0x330>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d101      	bne.n	800185e <HAL_GPIO_Init+0x20a>
 800185a:	2307      	movs	r3, #7
 800185c:	e00e      	b.n	800187c <HAL_GPIO_Init+0x228>
 800185e:	2308      	movs	r3, #8
 8001860:	e00c      	b.n	800187c <HAL_GPIO_Init+0x228>
 8001862:	2306      	movs	r3, #6
 8001864:	e00a      	b.n	800187c <HAL_GPIO_Init+0x228>
 8001866:	2305      	movs	r3, #5
 8001868:	e008      	b.n	800187c <HAL_GPIO_Init+0x228>
 800186a:	2304      	movs	r3, #4
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x228>
 800186e:	2303      	movs	r3, #3
 8001870:	e004      	b.n	800187c <HAL_GPIO_Init+0x228>
 8001872:	2302      	movs	r3, #2
 8001874:	e002      	b.n	800187c <HAL_GPIO_Init+0x228>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <HAL_GPIO_Init+0x228>
 800187a:	2300      	movs	r3, #0
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	f002 0203 	and.w	r2, r2, #3
 8001882:	0092      	lsls	r2, r2, #2
 8001884:	4093      	lsls	r3, r2
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800188c:	4935      	ldr	r1, [pc, #212]	; (8001964 <HAL_GPIO_Init+0x310>)
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	3302      	adds	r3, #2
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800189a:	4b3b      	ldr	r3, [pc, #236]	; (8001988 <HAL_GPIO_Init+0x334>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018be:	4a32      	ldr	r2, [pc, #200]	; (8001988 <HAL_GPIO_Init+0x334>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018c4:	4b30      	ldr	r3, [pc, #192]	; (8001988 <HAL_GPIO_Init+0x334>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018e8:	4a27      	ldr	r2, [pc, #156]	; (8001988 <HAL_GPIO_Init+0x334>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ee:	4b26      	ldr	r3, [pc, #152]	; (8001988 <HAL_GPIO_Init+0x334>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001912:	4a1d      	ldr	r2, [pc, #116]	; (8001988 <HAL_GPIO_Init+0x334>)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <HAL_GPIO_Init+0x334>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800193c:	4a12      	ldr	r2, [pc, #72]	; (8001988 <HAL_GPIO_Init+0x334>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3301      	adds	r3, #1
 8001946:	61fb      	str	r3, [r7, #28]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	2b0f      	cmp	r3, #15
 800194c:	f67f ae90 	bls.w	8001670 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3724      	adds	r7, #36	; 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40013800 	.word	0x40013800
 8001968:	40020000 	.word	0x40020000
 800196c:	40020400 	.word	0x40020400
 8001970:	40020800 	.word	0x40020800
 8001974:	40020c00 	.word	0x40020c00
 8001978:	40021000 	.word	0x40021000
 800197c:	40021400 	.word	0x40021400
 8001980:	40021800 	.word	0x40021800
 8001984:	40021c00 	.word	0x40021c00
 8001988:	40013c00 	.word	0x40013c00

0800198c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
 8001998:	4613      	mov	r3, r2
 800199a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800199c:	787b      	ldrb	r3, [r7, #1]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019a8:	e003      	b.n	80019b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	041a      	lsls	r2, r3, #16
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	619a      	str	r2, [r3, #24]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e264      	b.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d075      	beq.n	8001aca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019de:	4ba3      	ldr	r3, [pc, #652]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d00c      	beq.n	8001a04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ea:	4ba0      	ldr	r3, [pc, #640]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d112      	bne.n	8001a1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019f6:	4b9d      	ldr	r3, [pc, #628]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a02:	d10b      	bne.n	8001a1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a04:	4b99      	ldr	r3, [pc, #612]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d05b      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x108>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d157      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e23f      	b.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a24:	d106      	bne.n	8001a34 <HAL_RCC_OscConfig+0x74>
 8001a26:	4b91      	ldr	r3, [pc, #580]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a90      	ldr	r2, [pc, #576]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e01d      	b.n	8001a70 <HAL_RCC_OscConfig+0xb0>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x98>
 8001a3e:	4b8b      	ldr	r3, [pc, #556]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a8a      	ldr	r2, [pc, #552]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b88      	ldr	r3, [pc, #544]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a87      	ldr	r2, [pc, #540]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0xb0>
 8001a58:	4b84      	ldr	r3, [pc, #528]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a83      	ldr	r2, [pc, #524]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b81      	ldr	r3, [pc, #516]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a80      	ldr	r2, [pc, #512]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d013      	beq.n	8001aa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff f90a 	bl	8000c90 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff f906 	bl	8000c90 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e204      	b.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	4b76      	ldr	r3, [pc, #472]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0xc0>
 8001a9e:	e014      	b.n	8001aca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f8f6 	bl	8000c90 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff f8f2 	bl	8000c90 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e1f0      	b.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	4b6c      	ldr	r3, [pc, #432]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0xe8>
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d063      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ad6:	4b65      	ldr	r3, [pc, #404]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00b      	beq.n	8001afa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae2:	4b62      	ldr	r3, [pc, #392]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d11c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aee:	4b5f      	ldr	r3, [pc, #380]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d116      	bne.n	8001b28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	4b5c      	ldr	r3, [pc, #368]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x152>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e1c4      	b.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b12:	4b56      	ldr	r3, [pc, #344]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4952      	ldr	r1, [pc, #328]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	e03a      	b.n	8001b9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b30:	4b4f      	ldr	r3, [pc, #316]	; (8001c70 <HAL_RCC_OscConfig+0x2b0>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff f8ab 	bl	8000c90 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b3e:	f7ff f8a7 	bl	8000c90 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e1a5      	b.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b50:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5c:	4b43      	ldr	r3, [pc, #268]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4940      	ldr	r1, [pc, #256]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]
 8001b70:	e015      	b.n	8001b9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b72:	4b3f      	ldr	r3, [pc, #252]	; (8001c70 <HAL_RCC_OscConfig+0x2b0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff f88a 	bl	8000c90 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b80:	f7ff f886 	bl	8000c90 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e184      	b.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b92:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d030      	beq.n	8001c0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d016      	beq.n	8001be0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb2:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <HAL_RCC_OscConfig+0x2b4>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb8:	f7ff f86a 	bl	8000c90 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc0:	f7ff f866 	bl	8000c90 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e164      	b.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd2:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x200>
 8001bde:	e015      	b.n	8001c0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be0:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <HAL_RCC_OscConfig+0x2b4>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be6:	f7ff f853 	bl	8000c90 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bee:	f7ff f84f 	bl	8000c90 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e14d      	b.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f0      	bne.n	8001bee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a0 	beq.w	8001d5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10f      	bne.n	8001c4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a0e      	ldr	r2, [pc, #56]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c46:	2301      	movs	r3, #1
 8001c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_OscConfig+0x2b8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d121      	bne.n	8001c9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <HAL_RCC_OscConfig+0x2b8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <HAL_RCC_OscConfig+0x2b8>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c62:	f7ff f815 	bl	8000c90 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	e011      	b.n	8001c8e <HAL_RCC_OscConfig+0x2ce>
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	42470000 	.word	0x42470000
 8001c74:	42470e80 	.word	0x42470e80
 8001c78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7c:	f7ff f808 	bl	8000c90 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e106      	b.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8e:	4b85      	ldr	r3, [pc, #532]	; (8001ea4 <HAL_RCC_OscConfig+0x4e4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d106      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x2f0>
 8001ca2:	4b81      	ldr	r3, [pc, #516]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca6:	4a80      	ldr	r2, [pc, #512]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6713      	str	r3, [r2, #112]	; 0x70
 8001cae:	e01c      	b.n	8001cea <HAL_RCC_OscConfig+0x32a>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b05      	cmp	r3, #5
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x312>
 8001cb8:	4b7b      	ldr	r3, [pc, #492]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	4a7a      	ldr	r2, [pc, #488]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc4:	4b78      	ldr	r3, [pc, #480]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	4a77      	ldr	r2, [pc, #476]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd0:	e00b      	b.n	8001cea <HAL_RCC_OscConfig+0x32a>
 8001cd2:	4b75      	ldr	r3, [pc, #468]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd6:	4a74      	ldr	r2, [pc, #464]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cde:	4b72      	ldr	r3, [pc, #456]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce2:	4a71      	ldr	r2, [pc, #452]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001ce4:	f023 0304 	bic.w	r3, r3, #4
 8001ce8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d015      	beq.n	8001d1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf2:	f7fe ffcd 	bl	8000c90 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7fe ffc9 	bl	8000c90 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e0c5      	b.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d10:	4b65      	ldr	r3, [pc, #404]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0ee      	beq.n	8001cfa <HAL_RCC_OscConfig+0x33a>
 8001d1c:	e014      	b.n	8001d48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1e:	f7fe ffb7 	bl	8000c90 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d24:	e00a      	b.n	8001d3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7fe ffb3 	bl	8000c90 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e0af      	b.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3c:	4b5a      	ldr	r3, [pc, #360]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1ee      	bne.n	8001d26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d105      	bne.n	8001d5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4e:	4b56      	ldr	r3, [pc, #344]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a55      	ldr	r2, [pc, #340]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 809b 	beq.w	8001e9a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d64:	4b50      	ldr	r3, [pc, #320]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d05c      	beq.n	8001e2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d141      	bne.n	8001dfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d78:	4b4c      	ldr	r3, [pc, #304]	; (8001eac <HAL_RCC_OscConfig+0x4ec>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7fe ff87 	bl	8000c90 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d86:	f7fe ff83 	bl	8000c90 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e081      	b.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d98:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f0      	bne.n	8001d86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69da      	ldr	r2, [r3, #28]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	019b      	lsls	r3, r3, #6
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dba:	085b      	lsrs	r3, r3, #1
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	041b      	lsls	r3, r3, #16
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	061b      	lsls	r3, r3, #24
 8001dc8:	4937      	ldr	r1, [pc, #220]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dce:	4b37      	ldr	r3, [pc, #220]	; (8001eac <HAL_RCC_OscConfig+0x4ec>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7fe ff5c 	bl	8000c90 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7fe ff58 	bl	8000c90 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e056      	b.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dee:	4b2e      	ldr	r3, [pc, #184]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x41c>
 8001dfa:	e04e      	b.n	8001e9a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfc:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <HAL_RCC_OscConfig+0x4ec>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7fe ff45 	bl	8000c90 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7fe ff41 	bl	8000c90 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e03f      	b.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1c:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x44a>
 8001e28:	e037      	b.n	8001e9a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e032      	b.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <HAL_RCC_OscConfig+0x4e8>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d028      	beq.n	8001e96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d121      	bne.n	8001e96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d11a      	bne.n	8001e96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e66:	4013      	ands	r3, r2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e6c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d111      	bne.n	8001e96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	085b      	lsrs	r3, r3, #1
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40007000 	.word	0x40007000
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	42470060 	.word	0x42470060

08001eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0cc      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b68      	ldr	r3, [pc, #416]	; (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d90c      	bls.n	8001eec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b65      	ldr	r3, [pc, #404]	; (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	4b63      	ldr	r3, [pc, #396]	; (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0b8      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d020      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f04:	4b59      	ldr	r3, [pc, #356]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	4a58      	ldr	r2, [pc, #352]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f1c:	4b53      	ldr	r3, [pc, #332]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4a52      	ldr	r2, [pc, #328]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f28:	4b50      	ldr	r3, [pc, #320]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	494d      	ldr	r1, [pc, #308]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d044      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d119      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e07f      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d003      	beq.n	8001f6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6e:	4b3f      	ldr	r3, [pc, #252]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e06f      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e067      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8e:	4b37      	ldr	r3, [pc, #220]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f023 0203 	bic.w	r2, r3, #3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4934      	ldr	r1, [pc, #208]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa0:	f7fe fe76 	bl	8000c90 <HAL_GetTick>
 8001fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa8:	f7fe fe72 	bl	8000c90 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e04f      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	4b2b      	ldr	r3, [pc, #172]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 020c 	and.w	r2, r3, #12
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d1eb      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b25      	ldr	r3, [pc, #148]	; (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d20c      	bcs.n	8001ff8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b22      	ldr	r3, [pc, #136]	; (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b20      	ldr	r3, [pc, #128]	; (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e032      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4916      	ldr	r1, [pc, #88]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	4313      	orrs	r3, r2
 8002014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d009      	beq.n	8002036 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	490e      	ldr	r1, [pc, #56]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002036:	f000 f821 	bl	800207c <HAL_RCC_GetSysClockFreq>
 800203a:	4602      	mov	r2, r0
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	490a      	ldr	r1, [pc, #40]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	5ccb      	ldrb	r3, [r1, r3]
 800204a:	fa22 f303 	lsr.w	r3, r2, r3
 800204e:	4a09      	ldr	r2, [pc, #36]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x1c8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fdd6 	bl	8000c08 <HAL_InitTick>

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023c00 	.word	0x40023c00
 800206c:	40023800 	.word	0x40023800
 8002070:	080031b8 	.word	0x080031b8
 8002074:	20000000 	.word	0x20000000
 8002078:	20000004 	.word	0x20000004

0800207c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800207c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	2300      	movs	r3, #0
 800208e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002094:	4b67      	ldr	r3, [pc, #412]	; (8002234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 030c 	and.w	r3, r3, #12
 800209c:	2b08      	cmp	r3, #8
 800209e:	d00d      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x40>
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	f200 80bd 	bhi.w	8002220 <HAL_RCC_GetSysClockFreq+0x1a4>
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x34>
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80020ae:	e0b7      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020b0:	4b61      	ldr	r3, [pc, #388]	; (8002238 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80020b2:	60bb      	str	r3, [r7, #8]
       break;
 80020b4:	e0b7      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020b6:	4b61      	ldr	r3, [pc, #388]	; (800223c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80020b8:	60bb      	str	r3, [r7, #8]
      break;
 80020ba:	e0b4      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020bc:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020c6:	4b5b      	ldr	r3, [pc, #364]	; (8002234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d04d      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d2:	4b58      	ldr	r3, [pc, #352]	; (8002234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	099b      	lsrs	r3, r3, #6
 80020d8:	461a      	mov	r2, r3
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020e2:	f04f 0100 	mov.w	r1, #0
 80020e6:	ea02 0800 	and.w	r8, r2, r0
 80020ea:	ea03 0901 	and.w	r9, r3, r1
 80020ee:	4640      	mov	r0, r8
 80020f0:	4649      	mov	r1, r9
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	014b      	lsls	r3, r1, #5
 80020fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002100:	0142      	lsls	r2, r0, #5
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	ebb0 0008 	subs.w	r0, r0, r8
 800210a:	eb61 0109 	sbc.w	r1, r1, r9
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	018b      	lsls	r3, r1, #6
 8002118:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800211c:	0182      	lsls	r2, r0, #6
 800211e:	1a12      	subs	r2, r2, r0
 8002120:	eb63 0301 	sbc.w	r3, r3, r1
 8002124:	f04f 0000 	mov.w	r0, #0
 8002128:	f04f 0100 	mov.w	r1, #0
 800212c:	00d9      	lsls	r1, r3, #3
 800212e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002132:	00d0      	lsls	r0, r2, #3
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	eb12 0208 	adds.w	r2, r2, r8
 800213c:	eb43 0309 	adc.w	r3, r3, r9
 8002140:	f04f 0000 	mov.w	r0, #0
 8002144:	f04f 0100 	mov.w	r1, #0
 8002148:	0259      	lsls	r1, r3, #9
 800214a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800214e:	0250      	lsls	r0, r2, #9
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	461a      	mov	r2, r3
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	f7fe f886 	bl	8000270 <__aeabi_uldivmod>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4613      	mov	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	e04a      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800216e:	4b31      	ldr	r3, [pc, #196]	; (8002234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	099b      	lsrs	r3, r3, #6
 8002174:	461a      	mov	r2, r3
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800217e:	f04f 0100 	mov.w	r1, #0
 8002182:	ea02 0400 	and.w	r4, r2, r0
 8002186:	ea03 0501 	and.w	r5, r3, r1
 800218a:	4620      	mov	r0, r4
 800218c:	4629      	mov	r1, r5
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	014b      	lsls	r3, r1, #5
 8002198:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800219c:	0142      	lsls	r2, r0, #5
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	1b00      	subs	r0, r0, r4
 80021a4:	eb61 0105 	sbc.w	r1, r1, r5
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	018b      	lsls	r3, r1, #6
 80021b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021b6:	0182      	lsls	r2, r0, #6
 80021b8:	1a12      	subs	r2, r2, r0
 80021ba:	eb63 0301 	sbc.w	r3, r3, r1
 80021be:	f04f 0000 	mov.w	r0, #0
 80021c2:	f04f 0100 	mov.w	r1, #0
 80021c6:	00d9      	lsls	r1, r3, #3
 80021c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021cc:	00d0      	lsls	r0, r2, #3
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	1912      	adds	r2, r2, r4
 80021d4:	eb45 0303 	adc.w	r3, r5, r3
 80021d8:	f04f 0000 	mov.w	r0, #0
 80021dc:	f04f 0100 	mov.w	r1, #0
 80021e0:	0299      	lsls	r1, r3, #10
 80021e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021e6:	0290      	lsls	r0, r2, #10
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	f7fe f83a 	bl	8000270 <__aeabi_uldivmod>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4613      	mov	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	0c1b      	lsrs	r3, r3, #16
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	3301      	adds	r3, #1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	60bb      	str	r3, [r7, #8]
      break;
 800221e:	e002      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002222:	60bb      	str	r3, [r7, #8]
      break;
 8002224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002226:	68bb      	ldr	r3, [r7, #8]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	00f42400 	.word	0x00f42400
 800223c:	007a1200 	.word	0x007a1200

08002240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <HAL_RCC_GetHCLKFreq+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000000 	.word	0x20000000

08002258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800225c:	f7ff fff0 	bl	8002240 <HAL_RCC_GetHCLKFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0a9b      	lsrs	r3, r3, #10
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4903      	ldr	r1, [pc, #12]	; (800227c <HAL_RCC_GetPCLK1Freq+0x24>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800
 800227c:	080031c8 	.word	0x080031c8

08002280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002284:	f7ff ffdc 	bl	8002240 <HAL_RCC_GetHCLKFreq>
 8002288:	4602      	mov	r2, r0
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	0b5b      	lsrs	r3, r3, #13
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	4903      	ldr	r1, [pc, #12]	; (80022a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002296:	5ccb      	ldrb	r3, [r1, r3]
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800229c:	4618      	mov	r0, r3
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40023800 	.word	0x40023800
 80022a4:	080031c8 	.word	0x080031c8

080022a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e03f      	b.n	800233a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7fe fb94 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2224      	movs	r2, #36	; 0x24
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f929 	bl	8002544 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002300:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002310:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002320:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b08a      	sub	sp, #40	; 0x28
 8002346:	af02      	add	r7, sp, #8
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	4613      	mov	r3, r2
 8002350:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b20      	cmp	r3, #32
 8002360:	d17c      	bne.n	800245c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <HAL_UART_Transmit+0x2c>
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e075      	b.n	800245e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_UART_Transmit+0x3e>
 800237c:	2302      	movs	r3, #2
 800237e:	e06e      	b.n	800245e <HAL_UART_Transmit+0x11c>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2221      	movs	r2, #33	; 0x21
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002396:	f7fe fc7b 	bl	8000c90 <HAL_GetTick>
 800239a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	88fa      	ldrh	r2, [r7, #6]
 80023a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	88fa      	ldrh	r2, [r7, #6]
 80023a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b0:	d108      	bne.n	80023c4 <HAL_UART_Transmit+0x82>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d104      	bne.n	80023c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	e003      	b.n	80023cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023d4:	e02a      	b.n	800242c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2200      	movs	r2, #0
 80023de:	2180      	movs	r1, #128	; 0x80
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f840 	bl	8002466 <UART_WaitOnFlagUntilTimeout>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e036      	b.n	800245e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10b      	bne.n	800240e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002404:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	3302      	adds	r3, #2
 800240a:	61bb      	str	r3, [r7, #24]
 800240c:	e007      	b.n	800241e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	781a      	ldrb	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	3301      	adds	r3, #1
 800241c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002430:	b29b      	uxth	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1cf      	bne.n	80023d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2200      	movs	r2, #0
 800243e:	2140      	movs	r1, #64	; 0x40
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f810 	bl	8002466 <UART_WaitOnFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e006      	b.n	800245e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	e000      	b.n	800245e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800245c:	2302      	movs	r3, #2
  }
}
 800245e:	4618      	mov	r0, r3
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b090      	sub	sp, #64	; 0x40
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	603b      	str	r3, [r7, #0]
 8002472:	4613      	mov	r3, r2
 8002474:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002476:	e050      	b.n	800251a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800247a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247e:	d04c      	beq.n	800251a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002482:	2b00      	cmp	r3, #0
 8002484:	d007      	beq.n	8002496 <UART_WaitOnFlagUntilTimeout+0x30>
 8002486:	f7fe fc03 	bl	8000c90 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002492:	429a      	cmp	r2, r3
 8002494:	d241      	bcs.n	800251a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	330c      	adds	r3, #12
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	e853 3f00 	ldrex	r3, [r3]
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	330c      	adds	r3, #12
 80024b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024b6:	637a      	str	r2, [r7, #52]	; 0x34
 80024b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024be:	e841 2300 	strex	r3, r2, [r1]
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1e5      	bne.n	8002496 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	3314      	adds	r3, #20
 80024d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	e853 3f00 	ldrex	r3, [r3]
 80024d8:	613b      	str	r3, [r7, #16]
   return(result);
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3314      	adds	r3, #20
 80024e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024ea:	623a      	str	r2, [r7, #32]
 80024ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ee:	69f9      	ldr	r1, [r7, #28]
 80024f0:	6a3a      	ldr	r2, [r7, #32]
 80024f2:	e841 2300 	strex	r3, r2, [r1]
 80024f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1e5      	bne.n	80024ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e00f      	b.n	800253a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4013      	ands	r3, r2
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	429a      	cmp	r2, r3
 8002528:	bf0c      	ite	eq
 800252a:	2301      	moveq	r3, #1
 800252c:	2300      	movne	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	429a      	cmp	r2, r3
 8002536:	d09f      	beq.n	8002478 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3740      	adds	r7, #64	; 0x40
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002548:	b09f      	sub	sp, #124	; 0x7c
 800254a:	af00      	add	r7, sp, #0
 800254c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800254e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255a:	68d9      	ldr	r1, [r3, #12]
 800255c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	ea40 0301 	orr.w	r3, r0, r1
 8002564:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	431a      	orrs	r2, r3
 8002570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	431a      	orrs	r2, r3
 8002576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4313      	orrs	r3, r2
 800257c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800257e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002588:	f021 010c 	bic.w	r1, r1, #12
 800258c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002592:	430b      	orrs	r3, r1
 8002594:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a2:	6999      	ldr	r1, [r3, #24]
 80025a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	ea40 0301 	orr.w	r3, r0, r1
 80025ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4bc5      	ldr	r3, [pc, #788]	; (80028c8 <UART_SetConfig+0x384>)
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d004      	beq.n	80025c2 <UART_SetConfig+0x7e>
 80025b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4bc3      	ldr	r3, [pc, #780]	; (80028cc <UART_SetConfig+0x388>)
 80025be:	429a      	cmp	r2, r3
 80025c0:	d103      	bne.n	80025ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025c2:	f7ff fe5d 	bl	8002280 <HAL_RCC_GetPCLK2Freq>
 80025c6:	6778      	str	r0, [r7, #116]	; 0x74
 80025c8:	e002      	b.n	80025d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025ca:	f7ff fe45 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 80025ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025d8:	f040 80b6 	bne.w	8002748 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025de:	461c      	mov	r4, r3
 80025e0:	f04f 0500 	mov.w	r5, #0
 80025e4:	4622      	mov	r2, r4
 80025e6:	462b      	mov	r3, r5
 80025e8:	1891      	adds	r1, r2, r2
 80025ea:	6439      	str	r1, [r7, #64]	; 0x40
 80025ec:	415b      	adcs	r3, r3
 80025ee:	647b      	str	r3, [r7, #68]	; 0x44
 80025f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025f4:	1912      	adds	r2, r2, r4
 80025f6:	eb45 0303 	adc.w	r3, r5, r3
 80025fa:	f04f 0000 	mov.w	r0, #0
 80025fe:	f04f 0100 	mov.w	r1, #0
 8002602:	00d9      	lsls	r1, r3, #3
 8002604:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002608:	00d0      	lsls	r0, r2, #3
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	1911      	adds	r1, r2, r4
 8002610:	6639      	str	r1, [r7, #96]	; 0x60
 8002612:	416b      	adcs	r3, r5
 8002614:	667b      	str	r3, [r7, #100]	; 0x64
 8002616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	461a      	mov	r2, r3
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	1891      	adds	r1, r2, r2
 8002622:	63b9      	str	r1, [r7, #56]	; 0x38
 8002624:	415b      	adcs	r3, r3
 8002626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002628:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800262c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002630:	f7fd fe1e 	bl	8000270 <__aeabi_uldivmod>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4ba5      	ldr	r3, [pc, #660]	; (80028d0 <UART_SetConfig+0x38c>)
 800263a:	fba3 2302 	umull	r2, r3, r3, r2
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	011e      	lsls	r6, r3, #4
 8002642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002644:	461c      	mov	r4, r3
 8002646:	f04f 0500 	mov.w	r5, #0
 800264a:	4622      	mov	r2, r4
 800264c:	462b      	mov	r3, r5
 800264e:	1891      	adds	r1, r2, r2
 8002650:	6339      	str	r1, [r7, #48]	; 0x30
 8002652:	415b      	adcs	r3, r3
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
 8002656:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800265a:	1912      	adds	r2, r2, r4
 800265c:	eb45 0303 	adc.w	r3, r5, r3
 8002660:	f04f 0000 	mov.w	r0, #0
 8002664:	f04f 0100 	mov.w	r1, #0
 8002668:	00d9      	lsls	r1, r3, #3
 800266a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800266e:	00d0      	lsls	r0, r2, #3
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	1911      	adds	r1, r2, r4
 8002676:	65b9      	str	r1, [r7, #88]	; 0x58
 8002678:	416b      	adcs	r3, r5
 800267a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800267c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	461a      	mov	r2, r3
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	1891      	adds	r1, r2, r2
 8002688:	62b9      	str	r1, [r7, #40]	; 0x28
 800268a:	415b      	adcs	r3, r3
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800268e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002692:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002696:	f7fd fdeb 	bl	8000270 <__aeabi_uldivmod>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4b8c      	ldr	r3, [pc, #560]	; (80028d0 <UART_SetConfig+0x38c>)
 80026a0:	fba3 1302 	umull	r1, r3, r3, r2
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	2164      	movs	r1, #100	; 0x64
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	3332      	adds	r3, #50	; 0x32
 80026b2:	4a87      	ldr	r2, [pc, #540]	; (80028d0 <UART_SetConfig+0x38c>)
 80026b4:	fba2 2303 	umull	r2, r3, r2, r3
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026c0:	441e      	add	r6, r3
 80026c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026c4:	4618      	mov	r0, r3
 80026c6:	f04f 0100 	mov.w	r1, #0
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	1894      	adds	r4, r2, r2
 80026d0:	623c      	str	r4, [r7, #32]
 80026d2:	415b      	adcs	r3, r3
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
 80026d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026da:	1812      	adds	r2, r2, r0
 80026dc:	eb41 0303 	adc.w	r3, r1, r3
 80026e0:	f04f 0400 	mov.w	r4, #0
 80026e4:	f04f 0500 	mov.w	r5, #0
 80026e8:	00dd      	lsls	r5, r3, #3
 80026ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026ee:	00d4      	lsls	r4, r2, #3
 80026f0:	4622      	mov	r2, r4
 80026f2:	462b      	mov	r3, r5
 80026f4:	1814      	adds	r4, r2, r0
 80026f6:	653c      	str	r4, [r7, #80]	; 0x50
 80026f8:	414b      	adcs	r3, r1
 80026fa:	657b      	str	r3, [r7, #84]	; 0x54
 80026fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	461a      	mov	r2, r3
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	1891      	adds	r1, r2, r2
 8002708:	61b9      	str	r1, [r7, #24]
 800270a:	415b      	adcs	r3, r3
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002712:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002716:	f7fd fdab 	bl	8000270 <__aeabi_uldivmod>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4b6c      	ldr	r3, [pc, #432]	; (80028d0 <UART_SetConfig+0x38c>)
 8002720:	fba3 1302 	umull	r1, r3, r3, r2
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	2164      	movs	r1, #100	; 0x64
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	3332      	adds	r3, #50	; 0x32
 8002732:	4a67      	ldr	r2, [pc, #412]	; (80028d0 <UART_SetConfig+0x38c>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	f003 0207 	and.w	r2, r3, #7
 800273e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4432      	add	r2, r6
 8002744:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002746:	e0b9      	b.n	80028bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800274a:	461c      	mov	r4, r3
 800274c:	f04f 0500 	mov.w	r5, #0
 8002750:	4622      	mov	r2, r4
 8002752:	462b      	mov	r3, r5
 8002754:	1891      	adds	r1, r2, r2
 8002756:	6139      	str	r1, [r7, #16]
 8002758:	415b      	adcs	r3, r3
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002760:	1912      	adds	r2, r2, r4
 8002762:	eb45 0303 	adc.w	r3, r5, r3
 8002766:	f04f 0000 	mov.w	r0, #0
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	00d9      	lsls	r1, r3, #3
 8002770:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002774:	00d0      	lsls	r0, r2, #3
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	eb12 0804 	adds.w	r8, r2, r4
 800277e:	eb43 0905 	adc.w	r9, r3, r5
 8002782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4618      	mov	r0, r3
 8002788:	f04f 0100 	mov.w	r1, #0
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	008b      	lsls	r3, r1, #2
 8002796:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800279a:	0082      	lsls	r2, r0, #2
 800279c:	4640      	mov	r0, r8
 800279e:	4649      	mov	r1, r9
 80027a0:	f7fd fd66 	bl	8000270 <__aeabi_uldivmod>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4b49      	ldr	r3, [pc, #292]	; (80028d0 <UART_SetConfig+0x38c>)
 80027aa:	fba3 2302 	umull	r2, r3, r3, r2
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	011e      	lsls	r6, r3, #4
 80027b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027b4:	4618      	mov	r0, r3
 80027b6:	f04f 0100 	mov.w	r1, #0
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	1894      	adds	r4, r2, r2
 80027c0:	60bc      	str	r4, [r7, #8]
 80027c2:	415b      	adcs	r3, r3
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027ca:	1812      	adds	r2, r2, r0
 80027cc:	eb41 0303 	adc.w	r3, r1, r3
 80027d0:	f04f 0400 	mov.w	r4, #0
 80027d4:	f04f 0500 	mov.w	r5, #0
 80027d8:	00dd      	lsls	r5, r3, #3
 80027da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80027de:	00d4      	lsls	r4, r2, #3
 80027e0:	4622      	mov	r2, r4
 80027e2:	462b      	mov	r3, r5
 80027e4:	1814      	adds	r4, r2, r0
 80027e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80027e8:	414b      	adcs	r3, r1
 80027ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f04f 0100 	mov.w	r1, #0
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	008b      	lsls	r3, r1, #2
 8002800:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002804:	0082      	lsls	r2, r0, #2
 8002806:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800280a:	f7fd fd31 	bl	8000270 <__aeabi_uldivmod>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <UART_SetConfig+0x38c>)
 8002814:	fba3 1302 	umull	r1, r3, r3, r2
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	2164      	movs	r1, #100	; 0x64
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	3332      	adds	r3, #50	; 0x32
 8002826:	4a2a      	ldr	r2, [pc, #168]	; (80028d0 <UART_SetConfig+0x38c>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002832:	441e      	add	r6, r3
 8002834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002836:	4618      	mov	r0, r3
 8002838:	f04f 0100 	mov.w	r1, #0
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	1894      	adds	r4, r2, r2
 8002842:	603c      	str	r4, [r7, #0]
 8002844:	415b      	adcs	r3, r3
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800284c:	1812      	adds	r2, r2, r0
 800284e:	eb41 0303 	adc.w	r3, r1, r3
 8002852:	f04f 0400 	mov.w	r4, #0
 8002856:	f04f 0500 	mov.w	r5, #0
 800285a:	00dd      	lsls	r5, r3, #3
 800285c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002860:	00d4      	lsls	r4, r2, #3
 8002862:	4622      	mov	r2, r4
 8002864:	462b      	mov	r3, r5
 8002866:	eb12 0a00 	adds.w	sl, r2, r0
 800286a:	eb43 0b01 	adc.w	fp, r3, r1
 800286e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4618      	mov	r0, r3
 8002874:	f04f 0100 	mov.w	r1, #0
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	008b      	lsls	r3, r1, #2
 8002882:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002886:	0082      	lsls	r2, r0, #2
 8002888:	4650      	mov	r0, sl
 800288a:	4659      	mov	r1, fp
 800288c:	f7fd fcf0 	bl	8000270 <__aeabi_uldivmod>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <UART_SetConfig+0x38c>)
 8002896:	fba3 1302 	umull	r1, r3, r3, r2
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	2164      	movs	r1, #100	; 0x64
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	3332      	adds	r3, #50	; 0x32
 80028a8:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <UART_SetConfig+0x38c>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	f003 020f 	and.w	r2, r3, #15
 80028b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4432      	add	r2, r6
 80028ba:	609a      	str	r2, [r3, #8]
}
 80028bc:	bf00      	nop
 80028be:	377c      	adds	r7, #124	; 0x7c
 80028c0:	46bd      	mov	sp, r7
 80028c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028c6:	bf00      	nop
 80028c8:	40011000 	.word	0x40011000
 80028cc:	40011400 	.word	0x40011400
 80028d0:	51eb851f 	.word	0x51eb851f

080028d4 <__errno>:
 80028d4:	4b01      	ldr	r3, [pc, #4]	; (80028dc <__errno+0x8>)
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	2000000c 	.word	0x2000000c

080028e0 <__libc_init_array>:
 80028e0:	b570      	push	{r4, r5, r6, lr}
 80028e2:	4d0d      	ldr	r5, [pc, #52]	; (8002918 <__libc_init_array+0x38>)
 80028e4:	4c0d      	ldr	r4, [pc, #52]	; (800291c <__libc_init_array+0x3c>)
 80028e6:	1b64      	subs	r4, r4, r5
 80028e8:	10a4      	asrs	r4, r4, #2
 80028ea:	2600      	movs	r6, #0
 80028ec:	42a6      	cmp	r6, r4
 80028ee:	d109      	bne.n	8002904 <__libc_init_array+0x24>
 80028f0:	4d0b      	ldr	r5, [pc, #44]	; (8002920 <__libc_init_array+0x40>)
 80028f2:	4c0c      	ldr	r4, [pc, #48]	; (8002924 <__libc_init_array+0x44>)
 80028f4:	f000 fc4e 	bl	8003194 <_init>
 80028f8:	1b64      	subs	r4, r4, r5
 80028fa:	10a4      	asrs	r4, r4, #2
 80028fc:	2600      	movs	r6, #0
 80028fe:	42a6      	cmp	r6, r4
 8002900:	d105      	bne.n	800290e <__libc_init_array+0x2e>
 8002902:	bd70      	pop	{r4, r5, r6, pc}
 8002904:	f855 3b04 	ldr.w	r3, [r5], #4
 8002908:	4798      	blx	r3
 800290a:	3601      	adds	r6, #1
 800290c:	e7ee      	b.n	80028ec <__libc_init_array+0xc>
 800290e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002912:	4798      	blx	r3
 8002914:	3601      	adds	r6, #1
 8002916:	e7f2      	b.n	80028fe <__libc_init_array+0x1e>
 8002918:	0800320c 	.word	0x0800320c
 800291c:	0800320c 	.word	0x0800320c
 8002920:	0800320c 	.word	0x0800320c
 8002924:	08003210 	.word	0x08003210

08002928 <memset>:
 8002928:	4402      	add	r2, r0
 800292a:	4603      	mov	r3, r0
 800292c:	4293      	cmp	r3, r2
 800292e:	d100      	bne.n	8002932 <memset+0xa>
 8002930:	4770      	bx	lr
 8002932:	f803 1b01 	strb.w	r1, [r3], #1
 8002936:	e7f9      	b.n	800292c <memset+0x4>

08002938 <siprintf>:
 8002938:	b40e      	push	{r1, r2, r3}
 800293a:	b500      	push	{lr}
 800293c:	b09c      	sub	sp, #112	; 0x70
 800293e:	ab1d      	add	r3, sp, #116	; 0x74
 8002940:	9002      	str	r0, [sp, #8]
 8002942:	9006      	str	r0, [sp, #24]
 8002944:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002948:	4809      	ldr	r0, [pc, #36]	; (8002970 <siprintf+0x38>)
 800294a:	9107      	str	r1, [sp, #28]
 800294c:	9104      	str	r1, [sp, #16]
 800294e:	4909      	ldr	r1, [pc, #36]	; (8002974 <siprintf+0x3c>)
 8002950:	f853 2b04 	ldr.w	r2, [r3], #4
 8002954:	9105      	str	r1, [sp, #20]
 8002956:	6800      	ldr	r0, [r0, #0]
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	a902      	add	r1, sp, #8
 800295c:	f000 f868 	bl	8002a30 <_svfiprintf_r>
 8002960:	9b02      	ldr	r3, [sp, #8]
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	b01c      	add	sp, #112	; 0x70
 8002968:	f85d eb04 	ldr.w	lr, [sp], #4
 800296c:	b003      	add	sp, #12
 800296e:	4770      	bx	lr
 8002970:	2000000c 	.word	0x2000000c
 8002974:	ffff0208 	.word	0xffff0208

08002978 <__ssputs_r>:
 8002978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800297c:	688e      	ldr	r6, [r1, #8]
 800297e:	429e      	cmp	r6, r3
 8002980:	4682      	mov	sl, r0
 8002982:	460c      	mov	r4, r1
 8002984:	4690      	mov	r8, r2
 8002986:	461f      	mov	r7, r3
 8002988:	d838      	bhi.n	80029fc <__ssputs_r+0x84>
 800298a:	898a      	ldrh	r2, [r1, #12]
 800298c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002990:	d032      	beq.n	80029f8 <__ssputs_r+0x80>
 8002992:	6825      	ldr	r5, [r4, #0]
 8002994:	6909      	ldr	r1, [r1, #16]
 8002996:	eba5 0901 	sub.w	r9, r5, r1
 800299a:	6965      	ldr	r5, [r4, #20]
 800299c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029a4:	3301      	adds	r3, #1
 80029a6:	444b      	add	r3, r9
 80029a8:	106d      	asrs	r5, r5, #1
 80029aa:	429d      	cmp	r5, r3
 80029ac:	bf38      	it	cc
 80029ae:	461d      	movcc	r5, r3
 80029b0:	0553      	lsls	r3, r2, #21
 80029b2:	d531      	bpl.n	8002a18 <__ssputs_r+0xa0>
 80029b4:	4629      	mov	r1, r5
 80029b6:	f000 fb47 	bl	8003048 <_malloc_r>
 80029ba:	4606      	mov	r6, r0
 80029bc:	b950      	cbnz	r0, 80029d4 <__ssputs_r+0x5c>
 80029be:	230c      	movs	r3, #12
 80029c0:	f8ca 3000 	str.w	r3, [sl]
 80029c4:	89a3      	ldrh	r3, [r4, #12]
 80029c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ca:	81a3      	strh	r3, [r4, #12]
 80029cc:	f04f 30ff 	mov.w	r0, #4294967295
 80029d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029d4:	6921      	ldr	r1, [r4, #16]
 80029d6:	464a      	mov	r2, r9
 80029d8:	f000 fabe 	bl	8002f58 <memcpy>
 80029dc:	89a3      	ldrh	r3, [r4, #12]
 80029de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e6:	81a3      	strh	r3, [r4, #12]
 80029e8:	6126      	str	r6, [r4, #16]
 80029ea:	6165      	str	r5, [r4, #20]
 80029ec:	444e      	add	r6, r9
 80029ee:	eba5 0509 	sub.w	r5, r5, r9
 80029f2:	6026      	str	r6, [r4, #0]
 80029f4:	60a5      	str	r5, [r4, #8]
 80029f6:	463e      	mov	r6, r7
 80029f8:	42be      	cmp	r6, r7
 80029fa:	d900      	bls.n	80029fe <__ssputs_r+0x86>
 80029fc:	463e      	mov	r6, r7
 80029fe:	4632      	mov	r2, r6
 8002a00:	6820      	ldr	r0, [r4, #0]
 8002a02:	4641      	mov	r1, r8
 8002a04:	f000 fab6 	bl	8002f74 <memmove>
 8002a08:	68a3      	ldr	r3, [r4, #8]
 8002a0a:	6822      	ldr	r2, [r4, #0]
 8002a0c:	1b9b      	subs	r3, r3, r6
 8002a0e:	4432      	add	r2, r6
 8002a10:	60a3      	str	r3, [r4, #8]
 8002a12:	6022      	str	r2, [r4, #0]
 8002a14:	2000      	movs	r0, #0
 8002a16:	e7db      	b.n	80029d0 <__ssputs_r+0x58>
 8002a18:	462a      	mov	r2, r5
 8002a1a:	f000 fb6f 	bl	80030fc <_realloc_r>
 8002a1e:	4606      	mov	r6, r0
 8002a20:	2800      	cmp	r0, #0
 8002a22:	d1e1      	bne.n	80029e8 <__ssputs_r+0x70>
 8002a24:	6921      	ldr	r1, [r4, #16]
 8002a26:	4650      	mov	r0, sl
 8002a28:	f000 fabe 	bl	8002fa8 <_free_r>
 8002a2c:	e7c7      	b.n	80029be <__ssputs_r+0x46>
	...

08002a30 <_svfiprintf_r>:
 8002a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a34:	4698      	mov	r8, r3
 8002a36:	898b      	ldrh	r3, [r1, #12]
 8002a38:	061b      	lsls	r3, r3, #24
 8002a3a:	b09d      	sub	sp, #116	; 0x74
 8002a3c:	4607      	mov	r7, r0
 8002a3e:	460d      	mov	r5, r1
 8002a40:	4614      	mov	r4, r2
 8002a42:	d50e      	bpl.n	8002a62 <_svfiprintf_r+0x32>
 8002a44:	690b      	ldr	r3, [r1, #16]
 8002a46:	b963      	cbnz	r3, 8002a62 <_svfiprintf_r+0x32>
 8002a48:	2140      	movs	r1, #64	; 0x40
 8002a4a:	f000 fafd 	bl	8003048 <_malloc_r>
 8002a4e:	6028      	str	r0, [r5, #0]
 8002a50:	6128      	str	r0, [r5, #16]
 8002a52:	b920      	cbnz	r0, 8002a5e <_svfiprintf_r+0x2e>
 8002a54:	230c      	movs	r3, #12
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5c:	e0d1      	b.n	8002c02 <_svfiprintf_r+0x1d2>
 8002a5e:	2340      	movs	r3, #64	; 0x40
 8002a60:	616b      	str	r3, [r5, #20]
 8002a62:	2300      	movs	r3, #0
 8002a64:	9309      	str	r3, [sp, #36]	; 0x24
 8002a66:	2320      	movs	r3, #32
 8002a68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a70:	2330      	movs	r3, #48	; 0x30
 8002a72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002c1c <_svfiprintf_r+0x1ec>
 8002a76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a7a:	f04f 0901 	mov.w	r9, #1
 8002a7e:	4623      	mov	r3, r4
 8002a80:	469a      	mov	sl, r3
 8002a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a86:	b10a      	cbz	r2, 8002a8c <_svfiprintf_r+0x5c>
 8002a88:	2a25      	cmp	r2, #37	; 0x25
 8002a8a:	d1f9      	bne.n	8002a80 <_svfiprintf_r+0x50>
 8002a8c:	ebba 0b04 	subs.w	fp, sl, r4
 8002a90:	d00b      	beq.n	8002aaa <_svfiprintf_r+0x7a>
 8002a92:	465b      	mov	r3, fp
 8002a94:	4622      	mov	r2, r4
 8002a96:	4629      	mov	r1, r5
 8002a98:	4638      	mov	r0, r7
 8002a9a:	f7ff ff6d 	bl	8002978 <__ssputs_r>
 8002a9e:	3001      	adds	r0, #1
 8002aa0:	f000 80aa 	beq.w	8002bf8 <_svfiprintf_r+0x1c8>
 8002aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002aa6:	445a      	add	r2, fp
 8002aa8:	9209      	str	r2, [sp, #36]	; 0x24
 8002aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 80a2 	beq.w	8002bf8 <_svfiprintf_r+0x1c8>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8002aba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002abe:	f10a 0a01 	add.w	sl, sl, #1
 8002ac2:	9304      	str	r3, [sp, #16]
 8002ac4:	9307      	str	r3, [sp, #28]
 8002ac6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002aca:	931a      	str	r3, [sp, #104]	; 0x68
 8002acc:	4654      	mov	r4, sl
 8002ace:	2205      	movs	r2, #5
 8002ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ad4:	4851      	ldr	r0, [pc, #324]	; (8002c1c <_svfiprintf_r+0x1ec>)
 8002ad6:	f7fd fb7b 	bl	80001d0 <memchr>
 8002ada:	9a04      	ldr	r2, [sp, #16]
 8002adc:	b9d8      	cbnz	r0, 8002b16 <_svfiprintf_r+0xe6>
 8002ade:	06d0      	lsls	r0, r2, #27
 8002ae0:	bf44      	itt	mi
 8002ae2:	2320      	movmi	r3, #32
 8002ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ae8:	0711      	lsls	r1, r2, #28
 8002aea:	bf44      	itt	mi
 8002aec:	232b      	movmi	r3, #43	; 0x2b
 8002aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002af2:	f89a 3000 	ldrb.w	r3, [sl]
 8002af6:	2b2a      	cmp	r3, #42	; 0x2a
 8002af8:	d015      	beq.n	8002b26 <_svfiprintf_r+0xf6>
 8002afa:	9a07      	ldr	r2, [sp, #28]
 8002afc:	4654      	mov	r4, sl
 8002afe:	2000      	movs	r0, #0
 8002b00:	f04f 0c0a 	mov.w	ip, #10
 8002b04:	4621      	mov	r1, r4
 8002b06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b0a:	3b30      	subs	r3, #48	; 0x30
 8002b0c:	2b09      	cmp	r3, #9
 8002b0e:	d94e      	bls.n	8002bae <_svfiprintf_r+0x17e>
 8002b10:	b1b0      	cbz	r0, 8002b40 <_svfiprintf_r+0x110>
 8002b12:	9207      	str	r2, [sp, #28]
 8002b14:	e014      	b.n	8002b40 <_svfiprintf_r+0x110>
 8002b16:	eba0 0308 	sub.w	r3, r0, r8
 8002b1a:	fa09 f303 	lsl.w	r3, r9, r3
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	9304      	str	r3, [sp, #16]
 8002b22:	46a2      	mov	sl, r4
 8002b24:	e7d2      	b.n	8002acc <_svfiprintf_r+0x9c>
 8002b26:	9b03      	ldr	r3, [sp, #12]
 8002b28:	1d19      	adds	r1, r3, #4
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	9103      	str	r1, [sp, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bfbb      	ittet	lt
 8002b32:	425b      	neglt	r3, r3
 8002b34:	f042 0202 	orrlt.w	r2, r2, #2
 8002b38:	9307      	strge	r3, [sp, #28]
 8002b3a:	9307      	strlt	r3, [sp, #28]
 8002b3c:	bfb8      	it	lt
 8002b3e:	9204      	strlt	r2, [sp, #16]
 8002b40:	7823      	ldrb	r3, [r4, #0]
 8002b42:	2b2e      	cmp	r3, #46	; 0x2e
 8002b44:	d10c      	bne.n	8002b60 <_svfiprintf_r+0x130>
 8002b46:	7863      	ldrb	r3, [r4, #1]
 8002b48:	2b2a      	cmp	r3, #42	; 0x2a
 8002b4a:	d135      	bne.n	8002bb8 <_svfiprintf_r+0x188>
 8002b4c:	9b03      	ldr	r3, [sp, #12]
 8002b4e:	1d1a      	adds	r2, r3, #4
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	9203      	str	r2, [sp, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bfb8      	it	lt
 8002b58:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b5c:	3402      	adds	r4, #2
 8002b5e:	9305      	str	r3, [sp, #20]
 8002b60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002c2c <_svfiprintf_r+0x1fc>
 8002b64:	7821      	ldrb	r1, [r4, #0]
 8002b66:	2203      	movs	r2, #3
 8002b68:	4650      	mov	r0, sl
 8002b6a:	f7fd fb31 	bl	80001d0 <memchr>
 8002b6e:	b140      	cbz	r0, 8002b82 <_svfiprintf_r+0x152>
 8002b70:	2340      	movs	r3, #64	; 0x40
 8002b72:	eba0 000a 	sub.w	r0, r0, sl
 8002b76:	fa03 f000 	lsl.w	r0, r3, r0
 8002b7a:	9b04      	ldr	r3, [sp, #16]
 8002b7c:	4303      	orrs	r3, r0
 8002b7e:	3401      	adds	r4, #1
 8002b80:	9304      	str	r3, [sp, #16]
 8002b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b86:	4826      	ldr	r0, [pc, #152]	; (8002c20 <_svfiprintf_r+0x1f0>)
 8002b88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b8c:	2206      	movs	r2, #6
 8002b8e:	f7fd fb1f 	bl	80001d0 <memchr>
 8002b92:	2800      	cmp	r0, #0
 8002b94:	d038      	beq.n	8002c08 <_svfiprintf_r+0x1d8>
 8002b96:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <_svfiprintf_r+0x1f4>)
 8002b98:	bb1b      	cbnz	r3, 8002be2 <_svfiprintf_r+0x1b2>
 8002b9a:	9b03      	ldr	r3, [sp, #12]
 8002b9c:	3307      	adds	r3, #7
 8002b9e:	f023 0307 	bic.w	r3, r3, #7
 8002ba2:	3308      	adds	r3, #8
 8002ba4:	9303      	str	r3, [sp, #12]
 8002ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ba8:	4433      	add	r3, r6
 8002baa:	9309      	str	r3, [sp, #36]	; 0x24
 8002bac:	e767      	b.n	8002a7e <_svfiprintf_r+0x4e>
 8002bae:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bb2:	460c      	mov	r4, r1
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	e7a5      	b.n	8002b04 <_svfiprintf_r+0xd4>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	3401      	adds	r4, #1
 8002bbc:	9305      	str	r3, [sp, #20]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f04f 0c0a 	mov.w	ip, #10
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bca:	3a30      	subs	r2, #48	; 0x30
 8002bcc:	2a09      	cmp	r2, #9
 8002bce:	d903      	bls.n	8002bd8 <_svfiprintf_r+0x1a8>
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0c5      	beq.n	8002b60 <_svfiprintf_r+0x130>
 8002bd4:	9105      	str	r1, [sp, #20]
 8002bd6:	e7c3      	b.n	8002b60 <_svfiprintf_r+0x130>
 8002bd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bdc:	4604      	mov	r4, r0
 8002bde:	2301      	movs	r3, #1
 8002be0:	e7f0      	b.n	8002bc4 <_svfiprintf_r+0x194>
 8002be2:	ab03      	add	r3, sp, #12
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	462a      	mov	r2, r5
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <_svfiprintf_r+0x1f8>)
 8002bea:	a904      	add	r1, sp, #16
 8002bec:	4638      	mov	r0, r7
 8002bee:	f3af 8000 	nop.w
 8002bf2:	1c42      	adds	r2, r0, #1
 8002bf4:	4606      	mov	r6, r0
 8002bf6:	d1d6      	bne.n	8002ba6 <_svfiprintf_r+0x176>
 8002bf8:	89ab      	ldrh	r3, [r5, #12]
 8002bfa:	065b      	lsls	r3, r3, #25
 8002bfc:	f53f af2c 	bmi.w	8002a58 <_svfiprintf_r+0x28>
 8002c00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c02:	b01d      	add	sp, #116	; 0x74
 8002c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c08:	ab03      	add	r3, sp, #12
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	462a      	mov	r2, r5
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <_svfiprintf_r+0x1f8>)
 8002c10:	a904      	add	r1, sp, #16
 8002c12:	4638      	mov	r0, r7
 8002c14:	f000 f87a 	bl	8002d0c <_printf_i>
 8002c18:	e7eb      	b.n	8002bf2 <_svfiprintf_r+0x1c2>
 8002c1a:	bf00      	nop
 8002c1c:	080031d0 	.word	0x080031d0
 8002c20:	080031da 	.word	0x080031da
 8002c24:	00000000 	.word	0x00000000
 8002c28:	08002979 	.word	0x08002979
 8002c2c:	080031d6 	.word	0x080031d6

08002c30 <_printf_common>:
 8002c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c34:	4616      	mov	r6, r2
 8002c36:	4699      	mov	r9, r3
 8002c38:	688a      	ldr	r2, [r1, #8]
 8002c3a:	690b      	ldr	r3, [r1, #16]
 8002c3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c40:	4293      	cmp	r3, r2
 8002c42:	bfb8      	it	lt
 8002c44:	4613      	movlt	r3, r2
 8002c46:	6033      	str	r3, [r6, #0]
 8002c48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c4c:	4607      	mov	r7, r0
 8002c4e:	460c      	mov	r4, r1
 8002c50:	b10a      	cbz	r2, 8002c56 <_printf_common+0x26>
 8002c52:	3301      	adds	r3, #1
 8002c54:	6033      	str	r3, [r6, #0]
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	0699      	lsls	r1, r3, #26
 8002c5a:	bf42      	ittt	mi
 8002c5c:	6833      	ldrmi	r3, [r6, #0]
 8002c5e:	3302      	addmi	r3, #2
 8002c60:	6033      	strmi	r3, [r6, #0]
 8002c62:	6825      	ldr	r5, [r4, #0]
 8002c64:	f015 0506 	ands.w	r5, r5, #6
 8002c68:	d106      	bne.n	8002c78 <_printf_common+0x48>
 8002c6a:	f104 0a19 	add.w	sl, r4, #25
 8002c6e:	68e3      	ldr	r3, [r4, #12]
 8002c70:	6832      	ldr	r2, [r6, #0]
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	42ab      	cmp	r3, r5
 8002c76:	dc26      	bgt.n	8002cc6 <_printf_common+0x96>
 8002c78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c7c:	1e13      	subs	r3, r2, #0
 8002c7e:	6822      	ldr	r2, [r4, #0]
 8002c80:	bf18      	it	ne
 8002c82:	2301      	movne	r3, #1
 8002c84:	0692      	lsls	r2, r2, #26
 8002c86:	d42b      	bmi.n	8002ce0 <_printf_common+0xb0>
 8002c88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c8c:	4649      	mov	r1, r9
 8002c8e:	4638      	mov	r0, r7
 8002c90:	47c0      	blx	r8
 8002c92:	3001      	adds	r0, #1
 8002c94:	d01e      	beq.n	8002cd4 <_printf_common+0xa4>
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	68e5      	ldr	r5, [r4, #12]
 8002c9a:	6832      	ldr	r2, [r6, #0]
 8002c9c:	f003 0306 	and.w	r3, r3, #6
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	bf08      	it	eq
 8002ca4:	1aad      	subeq	r5, r5, r2
 8002ca6:	68a3      	ldr	r3, [r4, #8]
 8002ca8:	6922      	ldr	r2, [r4, #16]
 8002caa:	bf0c      	ite	eq
 8002cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cb0:	2500      	movne	r5, #0
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	bfc4      	itt	gt
 8002cb6:	1a9b      	subgt	r3, r3, r2
 8002cb8:	18ed      	addgt	r5, r5, r3
 8002cba:	2600      	movs	r6, #0
 8002cbc:	341a      	adds	r4, #26
 8002cbe:	42b5      	cmp	r5, r6
 8002cc0:	d11a      	bne.n	8002cf8 <_printf_common+0xc8>
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	e008      	b.n	8002cd8 <_printf_common+0xa8>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	4652      	mov	r2, sl
 8002cca:	4649      	mov	r1, r9
 8002ccc:	4638      	mov	r0, r7
 8002cce:	47c0      	blx	r8
 8002cd0:	3001      	adds	r0, #1
 8002cd2:	d103      	bne.n	8002cdc <_printf_common+0xac>
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cdc:	3501      	adds	r5, #1
 8002cde:	e7c6      	b.n	8002c6e <_printf_common+0x3e>
 8002ce0:	18e1      	adds	r1, r4, r3
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	2030      	movs	r0, #48	; 0x30
 8002ce6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cea:	4422      	add	r2, r4
 8002cec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	e7c7      	b.n	8002c88 <_printf_common+0x58>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	4622      	mov	r2, r4
 8002cfc:	4649      	mov	r1, r9
 8002cfe:	4638      	mov	r0, r7
 8002d00:	47c0      	blx	r8
 8002d02:	3001      	adds	r0, #1
 8002d04:	d0e6      	beq.n	8002cd4 <_printf_common+0xa4>
 8002d06:	3601      	adds	r6, #1
 8002d08:	e7d9      	b.n	8002cbe <_printf_common+0x8e>
	...

08002d0c <_printf_i>:
 8002d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d10:	460c      	mov	r4, r1
 8002d12:	4691      	mov	r9, r2
 8002d14:	7e27      	ldrb	r7, [r4, #24]
 8002d16:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002d18:	2f78      	cmp	r7, #120	; 0x78
 8002d1a:	4680      	mov	r8, r0
 8002d1c:	469a      	mov	sl, r3
 8002d1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d22:	d807      	bhi.n	8002d34 <_printf_i+0x28>
 8002d24:	2f62      	cmp	r7, #98	; 0x62
 8002d26:	d80a      	bhi.n	8002d3e <_printf_i+0x32>
 8002d28:	2f00      	cmp	r7, #0
 8002d2a:	f000 80d8 	beq.w	8002ede <_printf_i+0x1d2>
 8002d2e:	2f58      	cmp	r7, #88	; 0x58
 8002d30:	f000 80a3 	beq.w	8002e7a <_printf_i+0x16e>
 8002d34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002d38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d3c:	e03a      	b.n	8002db4 <_printf_i+0xa8>
 8002d3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d42:	2b15      	cmp	r3, #21
 8002d44:	d8f6      	bhi.n	8002d34 <_printf_i+0x28>
 8002d46:	a001      	add	r0, pc, #4	; (adr r0, 8002d4c <_printf_i+0x40>)
 8002d48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002d4c:	08002da5 	.word	0x08002da5
 8002d50:	08002db9 	.word	0x08002db9
 8002d54:	08002d35 	.word	0x08002d35
 8002d58:	08002d35 	.word	0x08002d35
 8002d5c:	08002d35 	.word	0x08002d35
 8002d60:	08002d35 	.word	0x08002d35
 8002d64:	08002db9 	.word	0x08002db9
 8002d68:	08002d35 	.word	0x08002d35
 8002d6c:	08002d35 	.word	0x08002d35
 8002d70:	08002d35 	.word	0x08002d35
 8002d74:	08002d35 	.word	0x08002d35
 8002d78:	08002ec5 	.word	0x08002ec5
 8002d7c:	08002de9 	.word	0x08002de9
 8002d80:	08002ea7 	.word	0x08002ea7
 8002d84:	08002d35 	.word	0x08002d35
 8002d88:	08002d35 	.word	0x08002d35
 8002d8c:	08002ee7 	.word	0x08002ee7
 8002d90:	08002d35 	.word	0x08002d35
 8002d94:	08002de9 	.word	0x08002de9
 8002d98:	08002d35 	.word	0x08002d35
 8002d9c:	08002d35 	.word	0x08002d35
 8002da0:	08002eaf 	.word	0x08002eaf
 8002da4:	680b      	ldr	r3, [r1, #0]
 8002da6:	1d1a      	adds	r2, r3, #4
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	600a      	str	r2, [r1, #0]
 8002dac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0a3      	b.n	8002f00 <_printf_i+0x1f4>
 8002db8:	6825      	ldr	r5, [r4, #0]
 8002dba:	6808      	ldr	r0, [r1, #0]
 8002dbc:	062e      	lsls	r6, r5, #24
 8002dbe:	f100 0304 	add.w	r3, r0, #4
 8002dc2:	d50a      	bpl.n	8002dda <_printf_i+0xce>
 8002dc4:	6805      	ldr	r5, [r0, #0]
 8002dc6:	600b      	str	r3, [r1, #0]
 8002dc8:	2d00      	cmp	r5, #0
 8002dca:	da03      	bge.n	8002dd4 <_printf_i+0xc8>
 8002dcc:	232d      	movs	r3, #45	; 0x2d
 8002dce:	426d      	negs	r5, r5
 8002dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dd4:	485e      	ldr	r0, [pc, #376]	; (8002f50 <_printf_i+0x244>)
 8002dd6:	230a      	movs	r3, #10
 8002dd8:	e019      	b.n	8002e0e <_printf_i+0x102>
 8002dda:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002dde:	6805      	ldr	r5, [r0, #0]
 8002de0:	600b      	str	r3, [r1, #0]
 8002de2:	bf18      	it	ne
 8002de4:	b22d      	sxthne	r5, r5
 8002de6:	e7ef      	b.n	8002dc8 <_printf_i+0xbc>
 8002de8:	680b      	ldr	r3, [r1, #0]
 8002dea:	6825      	ldr	r5, [r4, #0]
 8002dec:	1d18      	adds	r0, r3, #4
 8002dee:	6008      	str	r0, [r1, #0]
 8002df0:	0628      	lsls	r0, r5, #24
 8002df2:	d501      	bpl.n	8002df8 <_printf_i+0xec>
 8002df4:	681d      	ldr	r5, [r3, #0]
 8002df6:	e002      	b.n	8002dfe <_printf_i+0xf2>
 8002df8:	0669      	lsls	r1, r5, #25
 8002dfa:	d5fb      	bpl.n	8002df4 <_printf_i+0xe8>
 8002dfc:	881d      	ldrh	r5, [r3, #0]
 8002dfe:	4854      	ldr	r0, [pc, #336]	; (8002f50 <_printf_i+0x244>)
 8002e00:	2f6f      	cmp	r7, #111	; 0x6f
 8002e02:	bf0c      	ite	eq
 8002e04:	2308      	moveq	r3, #8
 8002e06:	230a      	movne	r3, #10
 8002e08:	2100      	movs	r1, #0
 8002e0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e0e:	6866      	ldr	r6, [r4, #4]
 8002e10:	60a6      	str	r6, [r4, #8]
 8002e12:	2e00      	cmp	r6, #0
 8002e14:	bfa2      	ittt	ge
 8002e16:	6821      	ldrge	r1, [r4, #0]
 8002e18:	f021 0104 	bicge.w	r1, r1, #4
 8002e1c:	6021      	strge	r1, [r4, #0]
 8002e1e:	b90d      	cbnz	r5, 8002e24 <_printf_i+0x118>
 8002e20:	2e00      	cmp	r6, #0
 8002e22:	d04d      	beq.n	8002ec0 <_printf_i+0x1b4>
 8002e24:	4616      	mov	r6, r2
 8002e26:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e2a:	fb03 5711 	mls	r7, r3, r1, r5
 8002e2e:	5dc7      	ldrb	r7, [r0, r7]
 8002e30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e34:	462f      	mov	r7, r5
 8002e36:	42bb      	cmp	r3, r7
 8002e38:	460d      	mov	r5, r1
 8002e3a:	d9f4      	bls.n	8002e26 <_printf_i+0x11a>
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d10b      	bne.n	8002e58 <_printf_i+0x14c>
 8002e40:	6823      	ldr	r3, [r4, #0]
 8002e42:	07df      	lsls	r7, r3, #31
 8002e44:	d508      	bpl.n	8002e58 <_printf_i+0x14c>
 8002e46:	6923      	ldr	r3, [r4, #16]
 8002e48:	6861      	ldr	r1, [r4, #4]
 8002e4a:	4299      	cmp	r1, r3
 8002e4c:	bfde      	ittt	le
 8002e4e:	2330      	movle	r3, #48	; 0x30
 8002e50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e58:	1b92      	subs	r2, r2, r6
 8002e5a:	6122      	str	r2, [r4, #16]
 8002e5c:	f8cd a000 	str.w	sl, [sp]
 8002e60:	464b      	mov	r3, r9
 8002e62:	aa03      	add	r2, sp, #12
 8002e64:	4621      	mov	r1, r4
 8002e66:	4640      	mov	r0, r8
 8002e68:	f7ff fee2 	bl	8002c30 <_printf_common>
 8002e6c:	3001      	adds	r0, #1
 8002e6e:	d14c      	bne.n	8002f0a <_printf_i+0x1fe>
 8002e70:	f04f 30ff 	mov.w	r0, #4294967295
 8002e74:	b004      	add	sp, #16
 8002e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e7a:	4835      	ldr	r0, [pc, #212]	; (8002f50 <_printf_i+0x244>)
 8002e7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	680e      	ldr	r6, [r1, #0]
 8002e84:	061f      	lsls	r7, r3, #24
 8002e86:	f856 5b04 	ldr.w	r5, [r6], #4
 8002e8a:	600e      	str	r6, [r1, #0]
 8002e8c:	d514      	bpl.n	8002eb8 <_printf_i+0x1ac>
 8002e8e:	07d9      	lsls	r1, r3, #31
 8002e90:	bf44      	itt	mi
 8002e92:	f043 0320 	orrmi.w	r3, r3, #32
 8002e96:	6023      	strmi	r3, [r4, #0]
 8002e98:	b91d      	cbnz	r5, 8002ea2 <_printf_i+0x196>
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	f023 0320 	bic.w	r3, r3, #32
 8002ea0:	6023      	str	r3, [r4, #0]
 8002ea2:	2310      	movs	r3, #16
 8002ea4:	e7b0      	b.n	8002e08 <_printf_i+0xfc>
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	f043 0320 	orr.w	r3, r3, #32
 8002eac:	6023      	str	r3, [r4, #0]
 8002eae:	2378      	movs	r3, #120	; 0x78
 8002eb0:	4828      	ldr	r0, [pc, #160]	; (8002f54 <_printf_i+0x248>)
 8002eb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002eb6:	e7e3      	b.n	8002e80 <_printf_i+0x174>
 8002eb8:	065e      	lsls	r6, r3, #25
 8002eba:	bf48      	it	mi
 8002ebc:	b2ad      	uxthmi	r5, r5
 8002ebe:	e7e6      	b.n	8002e8e <_printf_i+0x182>
 8002ec0:	4616      	mov	r6, r2
 8002ec2:	e7bb      	b.n	8002e3c <_printf_i+0x130>
 8002ec4:	680b      	ldr	r3, [r1, #0]
 8002ec6:	6826      	ldr	r6, [r4, #0]
 8002ec8:	6960      	ldr	r0, [r4, #20]
 8002eca:	1d1d      	adds	r5, r3, #4
 8002ecc:	600d      	str	r5, [r1, #0]
 8002ece:	0635      	lsls	r5, r6, #24
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	d501      	bpl.n	8002ed8 <_printf_i+0x1cc>
 8002ed4:	6018      	str	r0, [r3, #0]
 8002ed6:	e002      	b.n	8002ede <_printf_i+0x1d2>
 8002ed8:	0671      	lsls	r1, r6, #25
 8002eda:	d5fb      	bpl.n	8002ed4 <_printf_i+0x1c8>
 8002edc:	8018      	strh	r0, [r3, #0]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	6123      	str	r3, [r4, #16]
 8002ee2:	4616      	mov	r6, r2
 8002ee4:	e7ba      	b.n	8002e5c <_printf_i+0x150>
 8002ee6:	680b      	ldr	r3, [r1, #0]
 8002ee8:	1d1a      	adds	r2, r3, #4
 8002eea:	600a      	str	r2, [r1, #0]
 8002eec:	681e      	ldr	r6, [r3, #0]
 8002eee:	6862      	ldr	r2, [r4, #4]
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	f7fd f96c 	bl	80001d0 <memchr>
 8002ef8:	b108      	cbz	r0, 8002efe <_printf_i+0x1f2>
 8002efa:	1b80      	subs	r0, r0, r6
 8002efc:	6060      	str	r0, [r4, #4]
 8002efe:	6863      	ldr	r3, [r4, #4]
 8002f00:	6123      	str	r3, [r4, #16]
 8002f02:	2300      	movs	r3, #0
 8002f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f08:	e7a8      	b.n	8002e5c <_printf_i+0x150>
 8002f0a:	6923      	ldr	r3, [r4, #16]
 8002f0c:	4632      	mov	r2, r6
 8002f0e:	4649      	mov	r1, r9
 8002f10:	4640      	mov	r0, r8
 8002f12:	47d0      	blx	sl
 8002f14:	3001      	adds	r0, #1
 8002f16:	d0ab      	beq.n	8002e70 <_printf_i+0x164>
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	079b      	lsls	r3, r3, #30
 8002f1c:	d413      	bmi.n	8002f46 <_printf_i+0x23a>
 8002f1e:	68e0      	ldr	r0, [r4, #12]
 8002f20:	9b03      	ldr	r3, [sp, #12]
 8002f22:	4298      	cmp	r0, r3
 8002f24:	bfb8      	it	lt
 8002f26:	4618      	movlt	r0, r3
 8002f28:	e7a4      	b.n	8002e74 <_printf_i+0x168>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	4632      	mov	r2, r6
 8002f2e:	4649      	mov	r1, r9
 8002f30:	4640      	mov	r0, r8
 8002f32:	47d0      	blx	sl
 8002f34:	3001      	adds	r0, #1
 8002f36:	d09b      	beq.n	8002e70 <_printf_i+0x164>
 8002f38:	3501      	adds	r5, #1
 8002f3a:	68e3      	ldr	r3, [r4, #12]
 8002f3c:	9903      	ldr	r1, [sp, #12]
 8002f3e:	1a5b      	subs	r3, r3, r1
 8002f40:	42ab      	cmp	r3, r5
 8002f42:	dcf2      	bgt.n	8002f2a <_printf_i+0x21e>
 8002f44:	e7eb      	b.n	8002f1e <_printf_i+0x212>
 8002f46:	2500      	movs	r5, #0
 8002f48:	f104 0619 	add.w	r6, r4, #25
 8002f4c:	e7f5      	b.n	8002f3a <_printf_i+0x22e>
 8002f4e:	bf00      	nop
 8002f50:	080031e1 	.word	0x080031e1
 8002f54:	080031f2 	.word	0x080031f2

08002f58 <memcpy>:
 8002f58:	440a      	add	r2, r1
 8002f5a:	4291      	cmp	r1, r2
 8002f5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f60:	d100      	bne.n	8002f64 <memcpy+0xc>
 8002f62:	4770      	bx	lr
 8002f64:	b510      	push	{r4, lr}
 8002f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f6e:	4291      	cmp	r1, r2
 8002f70:	d1f9      	bne.n	8002f66 <memcpy+0xe>
 8002f72:	bd10      	pop	{r4, pc}

08002f74 <memmove>:
 8002f74:	4288      	cmp	r0, r1
 8002f76:	b510      	push	{r4, lr}
 8002f78:	eb01 0402 	add.w	r4, r1, r2
 8002f7c:	d902      	bls.n	8002f84 <memmove+0x10>
 8002f7e:	4284      	cmp	r4, r0
 8002f80:	4623      	mov	r3, r4
 8002f82:	d807      	bhi.n	8002f94 <memmove+0x20>
 8002f84:	1e43      	subs	r3, r0, #1
 8002f86:	42a1      	cmp	r1, r4
 8002f88:	d008      	beq.n	8002f9c <memmove+0x28>
 8002f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f92:	e7f8      	b.n	8002f86 <memmove+0x12>
 8002f94:	4402      	add	r2, r0
 8002f96:	4601      	mov	r1, r0
 8002f98:	428a      	cmp	r2, r1
 8002f9a:	d100      	bne.n	8002f9e <memmove+0x2a>
 8002f9c:	bd10      	pop	{r4, pc}
 8002f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002fa6:	e7f7      	b.n	8002f98 <memmove+0x24>

08002fa8 <_free_r>:
 8002fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002faa:	2900      	cmp	r1, #0
 8002fac:	d048      	beq.n	8003040 <_free_r+0x98>
 8002fae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fb2:	9001      	str	r0, [sp, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f1a1 0404 	sub.w	r4, r1, #4
 8002fba:	bfb8      	it	lt
 8002fbc:	18e4      	addlt	r4, r4, r3
 8002fbe:	f000 f8d3 	bl	8003168 <__malloc_lock>
 8002fc2:	4a20      	ldr	r2, [pc, #128]	; (8003044 <_free_r+0x9c>)
 8002fc4:	9801      	ldr	r0, [sp, #4]
 8002fc6:	6813      	ldr	r3, [r2, #0]
 8002fc8:	4615      	mov	r5, r2
 8002fca:	b933      	cbnz	r3, 8002fda <_free_r+0x32>
 8002fcc:	6063      	str	r3, [r4, #4]
 8002fce:	6014      	str	r4, [r2, #0]
 8002fd0:	b003      	add	sp, #12
 8002fd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fd6:	f000 b8cd 	b.w	8003174 <__malloc_unlock>
 8002fda:	42a3      	cmp	r3, r4
 8002fdc:	d90b      	bls.n	8002ff6 <_free_r+0x4e>
 8002fde:	6821      	ldr	r1, [r4, #0]
 8002fe0:	1862      	adds	r2, r4, r1
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	bf04      	itt	eq
 8002fe6:	681a      	ldreq	r2, [r3, #0]
 8002fe8:	685b      	ldreq	r3, [r3, #4]
 8002fea:	6063      	str	r3, [r4, #4]
 8002fec:	bf04      	itt	eq
 8002fee:	1852      	addeq	r2, r2, r1
 8002ff0:	6022      	streq	r2, [r4, #0]
 8002ff2:	602c      	str	r4, [r5, #0]
 8002ff4:	e7ec      	b.n	8002fd0 <_free_r+0x28>
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	b10b      	cbz	r3, 8003000 <_free_r+0x58>
 8002ffc:	42a3      	cmp	r3, r4
 8002ffe:	d9fa      	bls.n	8002ff6 <_free_r+0x4e>
 8003000:	6811      	ldr	r1, [r2, #0]
 8003002:	1855      	adds	r5, r2, r1
 8003004:	42a5      	cmp	r5, r4
 8003006:	d10b      	bne.n	8003020 <_free_r+0x78>
 8003008:	6824      	ldr	r4, [r4, #0]
 800300a:	4421      	add	r1, r4
 800300c:	1854      	adds	r4, r2, r1
 800300e:	42a3      	cmp	r3, r4
 8003010:	6011      	str	r1, [r2, #0]
 8003012:	d1dd      	bne.n	8002fd0 <_free_r+0x28>
 8003014:	681c      	ldr	r4, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	6053      	str	r3, [r2, #4]
 800301a:	4421      	add	r1, r4
 800301c:	6011      	str	r1, [r2, #0]
 800301e:	e7d7      	b.n	8002fd0 <_free_r+0x28>
 8003020:	d902      	bls.n	8003028 <_free_r+0x80>
 8003022:	230c      	movs	r3, #12
 8003024:	6003      	str	r3, [r0, #0]
 8003026:	e7d3      	b.n	8002fd0 <_free_r+0x28>
 8003028:	6825      	ldr	r5, [r4, #0]
 800302a:	1961      	adds	r1, r4, r5
 800302c:	428b      	cmp	r3, r1
 800302e:	bf04      	itt	eq
 8003030:	6819      	ldreq	r1, [r3, #0]
 8003032:	685b      	ldreq	r3, [r3, #4]
 8003034:	6063      	str	r3, [r4, #4]
 8003036:	bf04      	itt	eq
 8003038:	1949      	addeq	r1, r1, r5
 800303a:	6021      	streq	r1, [r4, #0]
 800303c:	6054      	str	r4, [r2, #4]
 800303e:	e7c7      	b.n	8002fd0 <_free_r+0x28>
 8003040:	b003      	add	sp, #12
 8003042:	bd30      	pop	{r4, r5, pc}
 8003044:	20000090 	.word	0x20000090

08003048 <_malloc_r>:
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	1ccd      	adds	r5, r1, #3
 800304c:	f025 0503 	bic.w	r5, r5, #3
 8003050:	3508      	adds	r5, #8
 8003052:	2d0c      	cmp	r5, #12
 8003054:	bf38      	it	cc
 8003056:	250c      	movcc	r5, #12
 8003058:	2d00      	cmp	r5, #0
 800305a:	4606      	mov	r6, r0
 800305c:	db01      	blt.n	8003062 <_malloc_r+0x1a>
 800305e:	42a9      	cmp	r1, r5
 8003060:	d903      	bls.n	800306a <_malloc_r+0x22>
 8003062:	230c      	movs	r3, #12
 8003064:	6033      	str	r3, [r6, #0]
 8003066:	2000      	movs	r0, #0
 8003068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800306a:	f000 f87d 	bl	8003168 <__malloc_lock>
 800306e:	4921      	ldr	r1, [pc, #132]	; (80030f4 <_malloc_r+0xac>)
 8003070:	680a      	ldr	r2, [r1, #0]
 8003072:	4614      	mov	r4, r2
 8003074:	b99c      	cbnz	r4, 800309e <_malloc_r+0x56>
 8003076:	4f20      	ldr	r7, [pc, #128]	; (80030f8 <_malloc_r+0xb0>)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	b923      	cbnz	r3, 8003086 <_malloc_r+0x3e>
 800307c:	4621      	mov	r1, r4
 800307e:	4630      	mov	r0, r6
 8003080:	f000 f862 	bl	8003148 <_sbrk_r>
 8003084:	6038      	str	r0, [r7, #0]
 8003086:	4629      	mov	r1, r5
 8003088:	4630      	mov	r0, r6
 800308a:	f000 f85d 	bl	8003148 <_sbrk_r>
 800308e:	1c43      	adds	r3, r0, #1
 8003090:	d123      	bne.n	80030da <_malloc_r+0x92>
 8003092:	230c      	movs	r3, #12
 8003094:	6033      	str	r3, [r6, #0]
 8003096:	4630      	mov	r0, r6
 8003098:	f000 f86c 	bl	8003174 <__malloc_unlock>
 800309c:	e7e3      	b.n	8003066 <_malloc_r+0x1e>
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	1b5b      	subs	r3, r3, r5
 80030a2:	d417      	bmi.n	80030d4 <_malloc_r+0x8c>
 80030a4:	2b0b      	cmp	r3, #11
 80030a6:	d903      	bls.n	80030b0 <_malloc_r+0x68>
 80030a8:	6023      	str	r3, [r4, #0]
 80030aa:	441c      	add	r4, r3
 80030ac:	6025      	str	r5, [r4, #0]
 80030ae:	e004      	b.n	80030ba <_malloc_r+0x72>
 80030b0:	6863      	ldr	r3, [r4, #4]
 80030b2:	42a2      	cmp	r2, r4
 80030b4:	bf0c      	ite	eq
 80030b6:	600b      	streq	r3, [r1, #0]
 80030b8:	6053      	strne	r3, [r2, #4]
 80030ba:	4630      	mov	r0, r6
 80030bc:	f000 f85a 	bl	8003174 <__malloc_unlock>
 80030c0:	f104 000b 	add.w	r0, r4, #11
 80030c4:	1d23      	adds	r3, r4, #4
 80030c6:	f020 0007 	bic.w	r0, r0, #7
 80030ca:	1ac2      	subs	r2, r0, r3
 80030cc:	d0cc      	beq.n	8003068 <_malloc_r+0x20>
 80030ce:	1a1b      	subs	r3, r3, r0
 80030d0:	50a3      	str	r3, [r4, r2]
 80030d2:	e7c9      	b.n	8003068 <_malloc_r+0x20>
 80030d4:	4622      	mov	r2, r4
 80030d6:	6864      	ldr	r4, [r4, #4]
 80030d8:	e7cc      	b.n	8003074 <_malloc_r+0x2c>
 80030da:	1cc4      	adds	r4, r0, #3
 80030dc:	f024 0403 	bic.w	r4, r4, #3
 80030e0:	42a0      	cmp	r0, r4
 80030e2:	d0e3      	beq.n	80030ac <_malloc_r+0x64>
 80030e4:	1a21      	subs	r1, r4, r0
 80030e6:	4630      	mov	r0, r6
 80030e8:	f000 f82e 	bl	8003148 <_sbrk_r>
 80030ec:	3001      	adds	r0, #1
 80030ee:	d1dd      	bne.n	80030ac <_malloc_r+0x64>
 80030f0:	e7cf      	b.n	8003092 <_malloc_r+0x4a>
 80030f2:	bf00      	nop
 80030f4:	20000090 	.word	0x20000090
 80030f8:	20000094 	.word	0x20000094

080030fc <_realloc_r>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	4607      	mov	r7, r0
 8003100:	4614      	mov	r4, r2
 8003102:	460e      	mov	r6, r1
 8003104:	b921      	cbnz	r1, 8003110 <_realloc_r+0x14>
 8003106:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800310a:	4611      	mov	r1, r2
 800310c:	f7ff bf9c 	b.w	8003048 <_malloc_r>
 8003110:	b922      	cbnz	r2, 800311c <_realloc_r+0x20>
 8003112:	f7ff ff49 	bl	8002fa8 <_free_r>
 8003116:	4625      	mov	r5, r4
 8003118:	4628      	mov	r0, r5
 800311a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800311c:	f000 f830 	bl	8003180 <_malloc_usable_size_r>
 8003120:	42a0      	cmp	r0, r4
 8003122:	d20f      	bcs.n	8003144 <_realloc_r+0x48>
 8003124:	4621      	mov	r1, r4
 8003126:	4638      	mov	r0, r7
 8003128:	f7ff ff8e 	bl	8003048 <_malloc_r>
 800312c:	4605      	mov	r5, r0
 800312e:	2800      	cmp	r0, #0
 8003130:	d0f2      	beq.n	8003118 <_realloc_r+0x1c>
 8003132:	4631      	mov	r1, r6
 8003134:	4622      	mov	r2, r4
 8003136:	f7ff ff0f 	bl	8002f58 <memcpy>
 800313a:	4631      	mov	r1, r6
 800313c:	4638      	mov	r0, r7
 800313e:	f7ff ff33 	bl	8002fa8 <_free_r>
 8003142:	e7e9      	b.n	8003118 <_realloc_r+0x1c>
 8003144:	4635      	mov	r5, r6
 8003146:	e7e7      	b.n	8003118 <_realloc_r+0x1c>

08003148 <_sbrk_r>:
 8003148:	b538      	push	{r3, r4, r5, lr}
 800314a:	4d06      	ldr	r5, [pc, #24]	; (8003164 <_sbrk_r+0x1c>)
 800314c:	2300      	movs	r3, #0
 800314e:	4604      	mov	r4, r0
 8003150:	4608      	mov	r0, r1
 8003152:	602b      	str	r3, [r5, #0]
 8003154:	f7fd fcc4 	bl	8000ae0 <_sbrk>
 8003158:	1c43      	adds	r3, r0, #1
 800315a:	d102      	bne.n	8003162 <_sbrk_r+0x1a>
 800315c:	682b      	ldr	r3, [r5, #0]
 800315e:	b103      	cbz	r3, 8003162 <_sbrk_r+0x1a>
 8003160:	6023      	str	r3, [r4, #0]
 8003162:	bd38      	pop	{r3, r4, r5, pc}
 8003164:	20000128 	.word	0x20000128

08003168 <__malloc_lock>:
 8003168:	4801      	ldr	r0, [pc, #4]	; (8003170 <__malloc_lock+0x8>)
 800316a:	f000 b811 	b.w	8003190 <__retarget_lock_acquire_recursive>
 800316e:	bf00      	nop
 8003170:	20000130 	.word	0x20000130

08003174 <__malloc_unlock>:
 8003174:	4801      	ldr	r0, [pc, #4]	; (800317c <__malloc_unlock+0x8>)
 8003176:	f000 b80c 	b.w	8003192 <__retarget_lock_release_recursive>
 800317a:	bf00      	nop
 800317c:	20000130 	.word	0x20000130

08003180 <_malloc_usable_size_r>:
 8003180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003184:	1f18      	subs	r0, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	bfbc      	itt	lt
 800318a:	580b      	ldrlt	r3, [r1, r0]
 800318c:	18c0      	addlt	r0, r0, r3
 800318e:	4770      	bx	lr

08003190 <__retarget_lock_acquire_recursive>:
 8003190:	4770      	bx	lr

08003192 <__retarget_lock_release_recursive>:
 8003192:	4770      	bx	lr

08003194 <_init>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	bf00      	nop
 8003198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319a:	bc08      	pop	{r3}
 800319c:	469e      	mov	lr, r3
 800319e:	4770      	bx	lr

080031a0 <_fini>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	bf00      	nop
 80031a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a6:	bc08      	pop	{r3}
 80031a8:	469e      	mov	lr, r3
 80031aa:	4770      	bx	lr
