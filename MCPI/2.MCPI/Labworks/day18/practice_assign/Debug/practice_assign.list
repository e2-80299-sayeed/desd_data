
practice_assign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004444  08004444  00014444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800449c  0800449c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800449c  0800449c  0001449c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044a4  080044a4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044a4  080044a4  000144a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044a8  080044a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080044ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  0800451c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800451c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dea  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021aa  00000000  00000000  00030e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00033038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00033e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227cc  00000000  00000000  00034b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103d8  00000000  00000000  000572ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7f38  00000000  00000000  000676c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013f5fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e3c  00000000  00000000  0013f650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800442c 	.word	0x0800442c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800442c 	.word	0x0800442c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fbf8 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f816 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f966 	bl	8000844 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000578:	f000 f87c 	bl	8000674 <MX_ADC1_Init>
  MX_TIM6_Init();
 800057c:	f000 f8cc 	bl	8000718 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000580:	f000 f900 	bl	8000784 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8000584:	f000 f934 	bl	80007f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim6);
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <main+0x30>)
 800058a:	f002 f97d 	bl	8002888 <HAL_TIM_Base_Start_IT>
HAL_TIM_Base_Start_IT(&htim7);
 800058e:	4803      	ldr	r0, [pc, #12]	; (800059c <main+0x34>)
 8000590:	f002 f97a 	bl	8002888 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000594:	e7fe      	b.n	8000594 <main+0x2c>
 8000596:	bf00      	nop
 8000598:	200000e0 	.word	0x200000e0
 800059c:	2000016c 	.word	0x2000016c

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fb06 	bl	8003bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a27      	ldr	r2, [pc, #156]	; (800066c <SystemClock_Config+0xcc>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b25      	ldr	r3, [pc, #148]	; (800066c <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a21      	ldr	r2, [pc, #132]	; (8000670 <SystemClock_Config+0xd0>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	2310      	movs	r3, #16
 8000606:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000608:	2302      	movs	r3, #2
 800060a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000610:	2308      	movs	r3, #8
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000614:	2332      	movs	r3, #50	; 0x32
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000618:	2304      	movs	r3, #4
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800061c:	2307      	movs	r3, #7
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fc6b 	bl	8001f00 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000630:	f000 f9c2 	bl	80009b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000640:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fecc 	bl	80023f0 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800065e:	f000 f9ab 	bl	80009b8 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	; 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000686:	4b21      	ldr	r3, [pc, #132]	; (800070c <MX_ADC1_Init+0x98>)
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <MX_ADC1_Init+0x9c>)
 800068a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000698:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_ADC1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800069e:	4b1b      	ldr	r3, [pc, #108]	; (800070c <MX_ADC1_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_ADC1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_ADC1_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_ADC1_Init+0x98>)
 80006b4:	4a17      	ldr	r2, [pc, #92]	; (8000714 <MX_ADC1_Init+0xa0>)
 80006b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_ADC1_Init+0x98>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_ADC1_Init+0x98>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_ADC1_Init+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_ADC1_Init+0x98>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d2:	480e      	ldr	r0, [pc, #56]	; (800070c <MX_ADC1_Init+0x98>)
 80006d4:	f000 fbb6 	bl	8000e44 <HAL_ADC_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006de:	f000 f96b 	bl	80009b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	4619      	mov	r1, r3
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <MX_ADC1_Init+0x98>)
 80006f4:	f000 fe68 	bl	80013c8 <HAL_ADC_ConfigChannel>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006fe:	f000 f95b 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000098 	.word	0x20000098
 8000710:	40012000 	.word	0x40012000
 8000714:	0f000001 	.word	0x0f000001

08000718 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_TIM6_Init+0x64>)
 8000728:	4a15      	ldr	r2, [pc, #84]	; (8000780 <MX_TIM6_Init+0x68>)
 800072a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 12499;
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_TIM6_Init+0x64>)
 800072e:	f243 02d3 	movw	r2, #12499	; 0x30d3
 8000732:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_TIM6_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2999;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_TIM6_Init+0x64>)
 800073c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000740:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_TIM6_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <MX_TIM6_Init+0x64>)
 800074a:	f002 f84d 	bl	80027e8 <HAL_TIM_Base_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000754:	f000 f930 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_TIM6_Init+0x64>)
 8000766:	f002 facf 	bl	8002d08 <HAL_TIMEx_MasterConfigSynchronization>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000770:	f000 f922 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000e0 	.word	0x200000e0
 8000780:	40001000 	.word	0x40001000

08000784 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_TIM7_Init+0x64>)
 8000794:	4a15      	ldr	r2, [pc, #84]	; (80007ec <MX_TIM7_Init+0x68>)
 8000796:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 12499;
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_TIM7_Init+0x64>)
 800079a:	f243 02d3 	movw	r2, #12499	; 0x30d3
 800079e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_TIM7_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_TIM7_Init+0x64>)
 80007a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_TIM7_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <MX_TIM7_Init+0x64>)
 80007b6:	f002 f817 	bl	80027e8 <HAL_TIM_Base_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80007c0:	f000 f8fa 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c4:	2300      	movs	r3, #0
 80007c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80007cc:	463b      	mov	r3, r7
 80007ce:	4619      	mov	r1, r3
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_TIM7_Init+0x64>)
 80007d2:	f002 fa99 	bl	8002d08 <HAL_TIMEx_MasterConfigSynchronization>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80007dc:	f000 f8ec 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000016c 	.word	0x2000016c
 80007ec:	40001400 	.word	0x40001400

080007f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USART2_UART_Init+0x4c>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	; (8000840 <MX_USART2_UART_Init+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_USART2_UART_Init+0x4c>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USART2_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000828:	f002 fafe 	bl	8002e28 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000832:	f000 f8c1 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000128 	.word	0x20000128
 8000840:	40004400 	.word	0x40004400

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_GPIO_Init+0x80>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <MX_GPIO_Init+0x80>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_GPIO_Init+0x80>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_GPIO_Init+0x80>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <MX_GPIO_Init+0x80>)
 8000880:	f043 0308 	orr.w	r3, r3, #8
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_GPIO_Init+0x80>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000898:	480b      	ldr	r0, [pc, #44]	; (80008c8 <MX_GPIO_Init+0x84>)
 800089a:	f001 fafd 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800089e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	4619      	mov	r1, r3
 80008b6:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_GPIO_Init+0x84>)
 80008b8:	f001 f952 	bl	8001b60 <HAL_GPIO_Init>

}
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020c00 	.word	0x40020c00

080008cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a0d      	ldr	r2, [pc, #52]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d109      	bne.n	80008f0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e2:	480b      	ldr	r0, [pc, #44]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80008e4:	f001 fad8 	bl	8001e98 <HAL_GPIO_WritePin>
		HAL_ADC_Start_IT(&hadc1);
 80008e8:	480a      	ldr	r0, [pc, #40]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80008ea:	f000 faef 	bl	8000ecc <HAL_ADC_Start_IT>
	}
	else if(htim == &htim7)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	}
}
 80008ee:	e008      	b.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x36>
	else if(htim == &htim7)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a09      	ldr	r2, [pc, #36]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d104      	bne.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x36>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80008f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80008fe:	f001 fae4 	bl	8001eca <HAL_GPIO_TogglePin>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200000e0 	.word	0x200000e0
 8000910:	40020c00 	.word	0x40020c00
 8000914:	20000098 	.word	0x20000098
 8000918:	2000016c 	.word	0x2000016c

0800091c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b098      	sub	sp, #96	; 0x60
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	char str[80];
	int len;
	uint32_t result;

	if(hadc == &hadc1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <HAL_ADC_ConvCpltCallback+0x54>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d11c      	bne.n	8000966 <HAL_ADC_ConvCpltCallback+0x4a>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000932:	4810      	ldr	r0, [pc, #64]	; (8000974 <HAL_ADC_ConvCpltCallback+0x58>)
 8000934:	f001 fab0 	bl	8001e98 <HAL_GPIO_WritePin>
		result = HAL_ADC_GetValue(hadc);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f000 fd23 	bl	8001384 <HAL_ADC_GetValue>
 800093e:	65f8      	str	r0, [r7, #92]	; 0x5c

		HAL_ADC_Stop_IT(hadc);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f000 fba1 	bl	8001088 <HAL_ADC_Stop_IT>

		len = sprintf(str,"ADC = %d\r\n",(int)result);
 8000946:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	490a      	ldr	r1, [pc, #40]	; (8000978 <HAL_ADC_ConvCpltCallback+0x5c>)
 800094e:	4618      	mov	r0, r3
 8000950:	f003 f93e 	bl	8003bd0 <siprintf>
 8000954:	65b8      	str	r0, [r7, #88]	; 0x58

		HAL_UART_Transmit_IT(&huart2, (uint8_t*)str,len);
 8000956:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000958:	b29a      	uxth	r2, r3
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	4619      	mov	r1, r3
 8000960:	4806      	ldr	r0, [pc, #24]	; (800097c <HAL_ADC_ConvCpltCallback+0x60>)
 8000962:	f002 faae 	bl	8002ec2 <HAL_UART_Transmit_IT>
	}
}
 8000966:	bf00      	nop
 8000968:	3760      	adds	r7, #96	; 0x60
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000098 	.word	0x20000098
 8000974:	40020c00 	.word	0x40020c00
 8000978:	08004444 	.word	0x08004444
 800097c:	20000128 	.word	0x20000128

08000980 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000988:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <HAL_UART_TxCpltCallback+0x34>)
 800098e:	f001 fa9c 	bl	8001eca <HAL_GPIO_TogglePin>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000998:	4806      	ldr	r0, [pc, #24]	; (80009b4 <HAL_UART_TxCpltCallback+0x34>)
 800099a:	f001 fa7d 	bl	8001e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a4:	4803      	ldr	r0, [pc, #12]	; (80009b4 <HAL_UART_TxCpltCallback+0x34>)
 80009a6:	f001 fa77 	bl	8001e98 <HAL_GPIO_WritePin>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40020c00 	.word	0x40020c00

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a02:	2007      	movs	r0, #7
 8000a04:	f000 ffd8 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <HAL_ADC_MspInit+0x8c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d12f      	bne.n	8000a96 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <HAL_ADC_MspInit+0x90>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <HAL_ADC_MspInit+0x90>)
 8000a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_ADC_MspInit+0x90>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <HAL_ADC_MspInit+0x90>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <HAL_ADC_MspInit+0x90>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_ADC_MspInit+0x90>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a72:	2303      	movs	r3, #3
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <HAL_ADC_MspInit+0x94>)
 8000a82:	f001 f86d 	bl	8001b60 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2012      	movs	r0, #18
 8000a8c:	f000 ff9f 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a90:	2012      	movs	r0, #18
 8000a92:	f000 ffb8 	bl	8001a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	; 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40012000 	.word	0x40012000
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000

08000aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1c      	ldr	r2, [pc, #112]	; (8000b2c <HAL_TIM_Base_MspInit+0x80>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d116      	bne.n	8000aec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <HAL_TIM_Base_MspInit+0x84>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a1a      	ldr	r2, [pc, #104]	; (8000b30 <HAL_TIM_Base_MspInit+0x84>)
 8000ac8:	f043 0310 	orr.w	r3, r3, #16
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <HAL_TIM_Base_MspInit+0x84>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2036      	movs	r0, #54	; 0x36
 8000ae0:	f000 ff75 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ae4:	2036      	movs	r0, #54	; 0x36
 8000ae6:	f000 ff8e 	bl	8001a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000aea:	e01a      	b.n	8000b22 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <HAL_TIM_Base_MspInit+0x88>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d115      	bne.n	8000b22 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <HAL_TIM_Base_MspInit+0x84>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <HAL_TIM_Base_MspInit+0x84>)
 8000b00:	f043 0320 	orr.w	r3, r3, #32
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_TIM_Base_MspInit+0x84>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 0320 	and.w	r3, r3, #32
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	2037      	movs	r0, #55	; 0x37
 8000b18:	f000 ff59 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b1c:	2037      	movs	r0, #55	; 0x37
 8000b1e:	f000 ff72 	bl	8001a06 <HAL_NVIC_EnableIRQ>
}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40001000 	.word	0x40001000
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40001400 	.word	0x40001400

08000b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a1d      	ldr	r2, [pc, #116]	; (8000bcc <HAL_UART_MspInit+0x94>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d133      	bne.n	8000bc2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <HAL_UART_MspInit+0x98>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a1b      	ldr	r2, [pc, #108]	; (8000bd0 <HAL_UART_MspInit+0x98>)
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_UART_MspInit+0x98>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_UART_MspInit+0x98>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <HAL_UART_MspInit+0x98>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_UART_MspInit+0x98>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b92:	230c      	movs	r3, #12
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <HAL_UART_MspInit+0x9c>)
 8000bae:	f000 ffd7 	bl	8001b60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2026      	movs	r0, #38	; 0x26
 8000bb8:	f000 ff09 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bbc:	2026      	movs	r0, #38	; 0x26
 8000bbe:	f000 ff22 	bl	8001a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c24:	f000 f8ee 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <ADC_IRQHandler+0x10>)
 8000c32:	f000 fa66 	bl	8001102 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000098 	.word	0x20000098

08000c40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <USART2_IRQHandler+0x10>)
 8000c46:	f002 f981 	bl	8002f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000128 	.word	0x20000128

08000c54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <TIM6_DAC_IRQHandler+0x10>)
 8000c5a:	f001 fe85 	bl	8002968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200000e0 	.word	0x200000e0

08000c68 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <TIM7_IRQHandler+0x10>)
 8000c6e:	f001 fe7b 	bl	8002968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000016c 	.word	0x2000016c

08000c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <_sbrk+0x5c>)
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <_sbrk+0x60>)
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <_sbrk+0x64>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <_sbrk+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d207      	bcs.n	8000cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cac:	f002 ff5e 	bl	8003b6c <__errno>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cba:	e009      	b.n	8000cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <_sbrk+0x64>)
 8000ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cce:	68fb      	ldr	r3, [r7, #12]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20020000 	.word	0x20020000
 8000cdc:	00000400 	.word	0x00000400
 8000ce0:	2000008c 	.word	0x2000008c
 8000ce4:	200001c8 	.word	0x200001c8

08000ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <SystemInit+0x20>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf2:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <SystemInit+0x20>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d12:	490e      	ldr	r1, [pc, #56]	; (8000d4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d14:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d28:	4c0b      	ldr	r4, [pc, #44]	; (8000d58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d36:	f7ff ffd7 	bl	8000ce8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f002 ff1d 	bl	8003b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3e:	f7ff fc13 	bl	8000568 <main>
  bx  lr    
 8000d42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d50:	080044ac 	.word	0x080044ac
  ldr r2, =_sbss
 8000d54:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d58:	200001c8 	.word	0x200001c8

08000d5c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <CAN1_RX0_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0d      	ldr	r2, [pc, #52]	; (8000da0 <HAL_Init+0x40>)
 8000d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <HAL_Init+0x40>)
 8000d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <HAL_Init+0x40>)
 8000d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 fe15 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f000 f808 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fe16 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023c00 	.word	0x40023c00

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_InitTick+0x54>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_InitTick+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 fe2d 	bl	8001a22 <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00e      	b.n	8000df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d80a      	bhi.n	8000dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 fdf5 	bl	80019ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <HAL_InitTick+0x5c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	200001b4 	.word	0x200001b4

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	200001b4 	.word	0x200001b4

08000e44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e033      	b.n	8000ec2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d109      	bne.n	8000e76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff fdd6 	bl	8000a14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d118      	bne.n	8000eb4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e8a:	f023 0302 	bic.w	r3, r3, #2
 8000e8e:	f043 0202 	orr.w	r2, r3, #2
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f000 fbb8 	bl	800160c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f023 0303 	bic.w	r3, r3, #3
 8000eaa:	f043 0201 	orr.w	r2, r3, #1
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	641a      	str	r2, [r3, #64]	; 0x40
 8000eb2:	e001      	b.n	8000eb8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d101      	bne.n	8000ee6 <HAL_ADC_Start_IT+0x1a>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e0bd      	b.n	8001062 <HAL_ADC_Start_IT+0x196>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d018      	beq.n	8000f2e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0201 	orr.w	r2, r2, #1
 8000f0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f0c:	4b58      	ldr	r3, [pc, #352]	; (8001070 <HAL_ADC_Start_IT+0x1a4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a58      	ldr	r2, [pc, #352]	; (8001074 <HAL_ADC_Start_IT+0x1a8>)
 8000f12:	fba2 2303 	umull	r2, r3, r2, r3
 8000f16:	0c9a      	lsrs	r2, r3, #18
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f20:	e002      	b.n	8000f28 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f9      	bne.n	8000f22 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	f040 8085 	bne.w	8001048 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f46:	f023 0301 	bic.w	r3, r3, #1
 8000f4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d007      	beq.n	8000f70 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f7c:	d106      	bne.n	8000f8c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f023 0206 	bic.w	r2, r3, #6
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	645a      	str	r2, [r3, #68]	; 0x44
 8000f8a:	e002      	b.n	8000f92 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f9a:	4b37      	ldr	r3, [pc, #220]	; (8001078 <HAL_ADC_Start_IT+0x1ac>)
 8000f9c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000fa6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	6812      	ldr	r2, [r2, #0]
 8000fb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fb6:	f043 0320 	orr.w	r3, r3, #32
 8000fba:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 031f 	and.w	r3, r3, #31
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d12a      	bne.n	800101e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a2b      	ldr	r2, [pc, #172]	; (800107c <HAL_ADC_Start_IT+0x1b0>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d015      	beq.n	8000ffe <HAL_ADC_Start_IT+0x132>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a2a      	ldr	r2, [pc, #168]	; (8001080 <HAL_ADC_Start_IT+0x1b4>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d105      	bne.n	8000fe8 <HAL_ADC_Start_IT+0x11c>
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <HAL_ADC_Start_IT+0x1ac>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 031f 	and.w	r3, r3, #31
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00a      	beq.n	8000ffe <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a25      	ldr	r2, [pc, #148]	; (8001084 <HAL_ADC_Start_IT+0x1b8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d136      	bne.n	8001060 <HAL_ADC_Start_IT+0x194>
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <HAL_ADC_Start_IT+0x1ac>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d130      	bne.n	8001060 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d129      	bne.n	8001060 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	e020      	b.n	8001060 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a16      	ldr	r2, [pc, #88]	; (800107c <HAL_ADC_Start_IT+0x1b0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d11b      	bne.n	8001060 <HAL_ADC_Start_IT+0x194>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d114      	bne.n	8001060 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	e00b      	b.n	8001060 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f043 0210 	orr.w	r2, r3, #16
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001058:	f043 0201 	orr.w	r2, r3, #1
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000000 	.word	0x20000000
 8001074:	431bde83 	.word	0x431bde83
 8001078:	40012300 	.word	0x40012300
 800107c:	40012000 	.word	0x40012000
 8001080:	40012100 	.word	0x40012100
 8001084:	40012200 	.word	0x40012200

08001088 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001096:	2b01      	cmp	r3, #1
 8001098:	d101      	bne.n	800109e <HAL_ADC_Stop_IT+0x16>
 800109a:	2302      	movs	r3, #2
 800109c:	e02b      	b.n	80010f6 <HAL_ADC_Stop_IT+0x6e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2201      	movs	r2, #1
 80010a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0201 	bic.w	r2, r2, #1
 80010b4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d113      	bne.n	80010ec <HAL_ADC_Stop_IT+0x64>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6812      	ldr	r2, [r2, #0]
 80010ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80010d2:	f023 0320 	bic.w	r3, r3, #32
 80010d6:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010e0:	f023 0301 	bic.w	r3, r3, #1
 80010e4:	f043 0201 	orr.w	r2, r3, #1
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b02      	cmp	r3, #2
 800111e:	bf0c      	ite	eq
 8001120:	2301      	moveq	r3, #1
 8001122:	2300      	movne	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0320 	and.w	r3, r3, #32
 8001132:	2b20      	cmp	r3, #32
 8001134:	bf0c      	ite	eq
 8001136:	2301      	moveq	r3, #1
 8001138:	2300      	movne	r3, #0
 800113a:	b2db      	uxtb	r3, r3
 800113c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d049      	beq.n	80011d8 <HAL_ADC_IRQHandler+0xd6>
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d046      	beq.n	80011d8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	2b00      	cmp	r3, #0
 8001154:	d105      	bne.n	8001162 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d12b      	bne.n	80011c8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001174:	2b00      	cmp	r3, #0
 8001176:	d127      	bne.n	80011c8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001182:	2b00      	cmp	r3, #0
 8001184:	d006      	beq.n	8001194 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001190:	2b00      	cmp	r3, #0
 8001192:	d119      	bne.n	80011c8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0220 	bic.w	r2, r2, #32
 80011a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d105      	bne.n	80011c8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f043 0201 	orr.w	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff fba7 	bl	800091c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f06f 0212 	mvn.w	r2, #18
 80011d6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf0c      	ite	eq
 80011e6:	2301      	moveq	r3, #1
 80011e8:	2300      	movne	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f8:	2b80      	cmp	r3, #128	; 0x80
 80011fa:	bf0c      	ite	eq
 80011fc:	2301      	moveq	r3, #1
 80011fe:	2300      	movne	r3, #0
 8001200:	b2db      	uxtb	r3, r3
 8001202:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d057      	beq.n	80012ba <HAL_ADC_IRQHandler+0x1b8>
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d054      	beq.n	80012ba <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	2b00      	cmp	r3, #0
 800121a:	d105      	bne.n	8001228 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d139      	bne.n	80012aa <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800124e:	2b00      	cmp	r3, #0
 8001250:	d12b      	bne.n	80012aa <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800125c:	2b00      	cmp	r3, #0
 800125e:	d124      	bne.n	80012aa <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800126a:	2b00      	cmp	r3, #0
 800126c:	d11d      	bne.n	80012aa <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001272:	2b00      	cmp	r3, #0
 8001274:	d119      	bne.n	80012aa <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001284:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129a:	2b00      	cmp	r3, #0
 800129c:	d105      	bne.n	80012aa <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f043 0201 	orr.w	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 faaa 	bl	8001804 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f06f 020c 	mvn.w	r2, #12
 80012b8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	bf0c      	ite	eq
 80012c8:	2301      	moveq	r3, #1
 80012ca:	2300      	movne	r3, #0
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012da:	2b40      	cmp	r3, #64	; 0x40
 80012dc:	bf0c      	ite	eq
 80012de:	2301      	moveq	r3, #1
 80012e0:	2300      	movne	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d017      	beq.n	800131c <HAL_ADC_IRQHandler+0x21a>
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d014      	beq.n	800131c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d10d      	bne.n	800131c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f846 	bl	800139e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f06f 0201 	mvn.w	r2, #1
 800131a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0320 	and.w	r3, r3, #32
 8001326:	2b20      	cmp	r3, #32
 8001328:	bf0c      	ite	eq
 800132a:	2301      	moveq	r3, #1
 800132c:	2300      	movne	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800133c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001340:	bf0c      	ite	eq
 8001342:	2301      	moveq	r3, #1
 8001344:	2300      	movne	r3, #0
 8001346:	b2db      	uxtb	r3, r3
 8001348:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d015      	beq.n	800137c <HAL_ADC_IRQHandler+0x27a>
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d012      	beq.n	800137c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f043 0202 	orr.w	r2, r3, #2
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f06f 0220 	mvn.w	r2, #32
 800136a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f820 	bl	80013b2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f06f 0220 	mvn.w	r2, #32
 800137a:	601a      	str	r2, [r3, #0]
  }
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x1c>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e105      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x228>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b09      	cmp	r3, #9
 80013f2:	d925      	bls.n	8001440 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68d9      	ldr	r1, [r3, #12]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	4613      	mov	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	3b1e      	subs	r3, #30
 800140a:	2207      	movs	r2, #7
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43da      	mvns	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	400a      	ands	r2, r1
 8001418:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68d9      	ldr	r1, [r3, #12]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	b29b      	uxth	r3, r3
 800142a:	4618      	mov	r0, r3
 800142c:	4603      	mov	r3, r0
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4403      	add	r3, r0
 8001432:	3b1e      	subs	r3, #30
 8001434:	409a      	lsls	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	e022      	b.n	8001486 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6919      	ldr	r1, [r3, #16]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	4613      	mov	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	2207      	movs	r2, #7
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	400a      	ands	r2, r1
 8001462:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6919      	ldr	r1, [r3, #16]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	b29b      	uxth	r3, r3
 8001474:	4618      	mov	r0, r3
 8001476:	4603      	mov	r3, r0
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4403      	add	r3, r0
 800147c:	409a      	lsls	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b06      	cmp	r3, #6
 800148c:	d824      	bhi.n	80014d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	3b05      	subs	r3, #5
 80014a0:	221f      	movs	r2, #31
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	400a      	ands	r2, r1
 80014ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	3b05      	subs	r3, #5
 80014ca:	fa00 f203 	lsl.w	r2, r0, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	635a      	str	r2, [r3, #52]	; 0x34
 80014d6:	e04c      	b.n	8001572 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b0c      	cmp	r3, #12
 80014de:	d824      	bhi.n	800152a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	3b23      	subs	r3, #35	; 0x23
 80014f2:	221f      	movs	r2, #31
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43da      	mvns	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	400a      	ands	r2, r1
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	b29b      	uxth	r3, r3
 800150e:	4618      	mov	r0, r3
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	3b23      	subs	r3, #35	; 0x23
 800151c:	fa00 f203 	lsl.w	r2, r0, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	631a      	str	r2, [r3, #48]	; 0x30
 8001528:	e023      	b.n	8001572 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	3b41      	subs	r3, #65	; 0x41
 800153c:	221f      	movs	r2, #31
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	400a      	ands	r2, r1
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	b29b      	uxth	r3, r3
 8001558:	4618      	mov	r0, r3
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	3b41      	subs	r3, #65	; 0x41
 8001566:	fa00 f203 	lsl.w	r2, r0, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001572:	4b22      	ldr	r3, [pc, #136]	; (80015fc <HAL_ADC_ConfigChannel+0x234>)
 8001574:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a21      	ldr	r2, [pc, #132]	; (8001600 <HAL_ADC_ConfigChannel+0x238>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d109      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x1cc>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b12      	cmp	r3, #18
 8001586:	d105      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a19      	ldr	r2, [pc, #100]	; (8001600 <HAL_ADC_ConfigChannel+0x238>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d123      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x21e>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b10      	cmp	r3, #16
 80015a4:	d003      	beq.n	80015ae <HAL_ADC_ConfigChannel+0x1e6>
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b11      	cmp	r3, #17
 80015ac:	d11b      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b10      	cmp	r3, #16
 80015c0:	d111      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <HAL_ADC_ConfigChannel+0x23c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a10      	ldr	r2, [pc, #64]	; (8001608 <HAL_ADC_ConfigChannel+0x240>)
 80015c8:	fba2 2303 	umull	r2, r3, r2, r3
 80015cc:	0c9a      	lsrs	r2, r3, #18
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015d8:	e002      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	3b01      	subs	r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f9      	bne.n	80015da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	40012300 	.word	0x40012300
 8001600:	40012000 	.word	0x40012000
 8001604:	20000000 	.word	0x20000000
 8001608:	431bde83 	.word	0x431bde83

0800160c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001614:	4b79      	ldr	r3, [pc, #484]	; (80017fc <ADC_Init+0x1f0>)
 8001616:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	431a      	orrs	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001640:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	021a      	lsls	r2, r3, #8
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001664:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6859      	ldr	r1, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001686:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6899      	ldr	r1, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	4a58      	ldr	r2, [pc, #352]	; (8001800 <ADC_Init+0x1f4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d022      	beq.n	80016ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6899      	ldr	r1, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6899      	ldr	r1, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	e00f      	b.n	800170a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001708:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0202 	bic.w	r2, r2, #2
 8001718:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6899      	ldr	r1, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7e1b      	ldrb	r3, [r3, #24]
 8001724:	005a      	lsls	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d01b      	beq.n	8001770 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001746:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001756:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6859      	ldr	r1, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	3b01      	subs	r3, #1
 8001764:	035a      	lsls	r2, r3, #13
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	e007      	b.n	8001780 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800177e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	3b01      	subs	r3, #1
 800179c:	051a      	lsls	r2, r3, #20
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6899      	ldr	r1, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017c2:	025a      	lsls	r2, r3, #9
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6899      	ldr	r1, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	029a      	lsls	r2, r3, #10
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	609a      	str	r2, [r3, #8]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40012300 	.word	0x40012300
 8001800:	0f000001 	.word	0x0f000001

08001804 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184a:	4a04      	ldr	r2, [pc, #16]	; (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	60d3      	str	r3, [r2, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <__NVIC_GetPriorityGrouping+0x18>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	f003 0307 	and.w	r3, r3, #7
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	db0b      	blt.n	80018a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	4907      	ldr	r1, [pc, #28]	; (80018b4 <__NVIC_EnableIRQ+0x38>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	2001      	movs	r0, #1
 800189e:	fa00 f202 	lsl.w	r2, r0, r2
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000e100 	.word	0xe000e100

080018b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	; (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	; (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
         );
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	; 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001984:	d301      	bcc.n	800198a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2301      	movs	r3, #1
 8001988:	e00f      	b.n	80019aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <SysTick_Config+0x40>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001992:	210f      	movs	r1, #15
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f7ff ff8e 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <SysTick_Config+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <SysTick_Config+0x40>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff29 	bl	8001818 <__NVIC_SetPriorityGrouping>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e0:	f7ff ff3e 	bl	8001860 <__NVIC_GetPriorityGrouping>
 80019e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	6978      	ldr	r0, [r7, #20]
 80019ec:	f7ff ff8e 	bl	800190c <NVIC_EncodePriority>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff5d 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff31 	bl	800187c <__NVIC_EnableIRQ>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ffa2 	bl	8001974 <SysTick_Config>
 8001a30:	4603      	mov	r3, r0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff f9f0 	bl	8000e2c <HAL_GetTick>
 8001a4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d008      	beq.n	8001a6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2280      	movs	r2, #128	; 0x80
 8001a5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e052      	b.n	8001b12 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0216 	bic.w	r2, r2, #22
 8001a7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d103      	bne.n	8001a9c <HAL_DMA_Abort+0x62>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0208 	bic.w	r2, r2, #8
 8001aaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0201 	bic.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001abc:	e013      	b.n	8001ae6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001abe:	f7ff f9b5 	bl	8000e2c <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b05      	cmp	r3, #5
 8001aca:	d90c      	bls.n	8001ae6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e015      	b.n	8001b12 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1e4      	bne.n	8001abe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af8:	223f      	movs	r2, #63	; 0x3f
 8001afa:	409a      	lsls	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d004      	beq.n	8001b38 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e00c      	b.n	8001b52 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2205      	movs	r2, #5
 8001b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	e16b      	b.n	8001e54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	f040 815a 	bne.w	8001e4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d005      	beq.n	8001bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d130      	bne.n	8001c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be8:	2201      	movs	r2, #1
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 0201 	and.w	r2, r3, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d017      	beq.n	8001c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d123      	bne.n	8001ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	08da      	lsrs	r2, r3, #3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3208      	adds	r2, #8
 8001c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	220f      	movs	r2, #15
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	69b9      	ldr	r1, [r7, #24]
 8001ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0203 	and.w	r2, r3, #3
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 80b4 	beq.w	8001e4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b60      	ldr	r3, [pc, #384]	; (8001e6c <HAL_GPIO_Init+0x30c>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	4a5f      	ldr	r2, [pc, #380]	; (8001e6c <HAL_GPIO_Init+0x30c>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf6:	4b5d      	ldr	r3, [pc, #372]	; (8001e6c <HAL_GPIO_Init+0x30c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d02:	4a5b      	ldr	r2, [pc, #364]	; (8001e70 <HAL_GPIO_Init+0x310>)
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a52      	ldr	r2, [pc, #328]	; (8001e74 <HAL_GPIO_Init+0x314>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d02b      	beq.n	8001d86 <HAL_GPIO_Init+0x226>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a51      	ldr	r2, [pc, #324]	; (8001e78 <HAL_GPIO_Init+0x318>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d025      	beq.n	8001d82 <HAL_GPIO_Init+0x222>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a50      	ldr	r2, [pc, #320]	; (8001e7c <HAL_GPIO_Init+0x31c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01f      	beq.n	8001d7e <HAL_GPIO_Init+0x21e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4f      	ldr	r2, [pc, #316]	; (8001e80 <HAL_GPIO_Init+0x320>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d019      	beq.n	8001d7a <HAL_GPIO_Init+0x21a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4e      	ldr	r2, [pc, #312]	; (8001e84 <HAL_GPIO_Init+0x324>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d013      	beq.n	8001d76 <HAL_GPIO_Init+0x216>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4d      	ldr	r2, [pc, #308]	; (8001e88 <HAL_GPIO_Init+0x328>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00d      	beq.n	8001d72 <HAL_GPIO_Init+0x212>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4c      	ldr	r2, [pc, #304]	; (8001e8c <HAL_GPIO_Init+0x32c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d007      	beq.n	8001d6e <HAL_GPIO_Init+0x20e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4b      	ldr	r2, [pc, #300]	; (8001e90 <HAL_GPIO_Init+0x330>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_GPIO_Init+0x20a>
 8001d66:	2307      	movs	r3, #7
 8001d68:	e00e      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d6a:	2308      	movs	r3, #8
 8001d6c:	e00c      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d6e:	2306      	movs	r3, #6
 8001d70:	e00a      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d72:	2305      	movs	r3, #5
 8001d74:	e008      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d76:	2304      	movs	r3, #4
 8001d78:	e006      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e004      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e002      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_GPIO_Init+0x228>
 8001d86:	2300      	movs	r3, #0
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	f002 0203 	and.w	r2, r2, #3
 8001d8e:	0092      	lsls	r2, r2, #2
 8001d90:	4093      	lsls	r3, r2
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d98:	4935      	ldr	r1, [pc, #212]	; (8001e70 <HAL_GPIO_Init+0x310>)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	3302      	adds	r3, #2
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da6:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <HAL_GPIO_Init+0x334>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dca:	4a32      	ldr	r2, [pc, #200]	; (8001e94 <HAL_GPIO_Init+0x334>)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dd0:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <HAL_GPIO_Init+0x334>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df4:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <HAL_GPIO_Init+0x334>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dfa:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <HAL_GPIO_Init+0x334>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e1e:	4a1d      	ldr	r2, [pc, #116]	; (8001e94 <HAL_GPIO_Init+0x334>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_GPIO_Init+0x334>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e48:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <HAL_GPIO_Init+0x334>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3301      	adds	r3, #1
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	2b0f      	cmp	r3, #15
 8001e58:	f67f ae90 	bls.w	8001b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3724      	adds	r7, #36	; 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40013800 	.word	0x40013800
 8001e74:	40020000 	.word	0x40020000
 8001e78:	40020400 	.word	0x40020400
 8001e7c:	40020800 	.word	0x40020800
 8001e80:	40020c00 	.word	0x40020c00
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40021400 	.word	0x40021400
 8001e8c:	40021800 	.word	0x40021800
 8001e90:	40021c00 	.word	0x40021c00
 8001e94:	40013c00 	.word	0x40013c00

08001e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea8:	787b      	ldrb	r3, [r7, #1]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb4:	e003      	b.n	8001ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eb6:	887b      	ldrh	r3, [r7, #2]
 8001eb8:	041a      	lsls	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	619a      	str	r2, [r3, #24]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b085      	sub	sp, #20
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001edc:	887a      	ldrh	r2, [r7, #2]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	041a      	lsls	r2, r3, #16
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	43d9      	mvns	r1, r3
 8001ee8:	887b      	ldrh	r3, [r7, #2]
 8001eea:	400b      	ands	r3, r1
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	619a      	str	r2, [r3, #24]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e264      	b.n	80023dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d075      	beq.n	800200a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f1e:	4ba3      	ldr	r3, [pc, #652]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d00c      	beq.n	8001f44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f2a:	4ba0      	ldr	r3, [pc, #640]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d112      	bne.n	8001f5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f36:	4b9d      	ldr	r3, [pc, #628]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f42:	d10b      	bne.n	8001f5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	4b99      	ldr	r3, [pc, #612]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d05b      	beq.n	8002008 <HAL_RCC_OscConfig+0x108>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d157      	bne.n	8002008 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e23f      	b.n	80023dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f64:	d106      	bne.n	8001f74 <HAL_RCC_OscConfig+0x74>
 8001f66:	4b91      	ldr	r3, [pc, #580]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a90      	ldr	r2, [pc, #576]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e01d      	b.n	8001fb0 <HAL_RCC_OscConfig+0xb0>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x98>
 8001f7e:	4b8b      	ldr	r3, [pc, #556]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a8a      	ldr	r2, [pc, #552]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b88      	ldr	r3, [pc, #544]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a87      	ldr	r2, [pc, #540]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0xb0>
 8001f98:	4b84      	ldr	r3, [pc, #528]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a83      	ldr	r2, [pc, #524]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b81      	ldr	r3, [pc, #516]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a80      	ldr	r2, [pc, #512]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7fe ff38 	bl	8000e2c <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7fe ff34 	bl	8000e2c <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e204      	b.n	80023dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b76      	ldr	r3, [pc, #472]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xc0>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7fe ff24 	bl	8000e2c <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7fe ff20 	bl	8000e2c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1f0      	b.n	80023dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	4b6c      	ldr	r3, [pc, #432]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0xe8>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d063      	beq.n	80020de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002016:	4b65      	ldr	r3, [pc, #404]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002022:	4b62      	ldr	r3, [pc, #392]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800202a:	2b08      	cmp	r3, #8
 800202c:	d11c      	bne.n	8002068 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202e:	4b5f      	ldr	r3, [pc, #380]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	4b5c      	ldr	r3, [pc, #368]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_OscConfig+0x152>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e1c4      	b.n	80023dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b56      	ldr	r3, [pc, #344]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4952      	ldr	r1, [pc, #328]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e03a      	b.n	80020de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	4b4f      	ldr	r3, [pc, #316]	; (80021b0 <HAL_RCC_OscConfig+0x2b0>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7fe fed9 	bl	8000e2c <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207e:	f7fe fed5 	bl	8000e2c <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e1a5      	b.n	80023dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002090:	4b46      	ldr	r3, [pc, #280]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b43      	ldr	r3, [pc, #268]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4940      	ldr	r1, [pc, #256]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e015      	b.n	80020de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	4b3f      	ldr	r3, [pc, #252]	; (80021b0 <HAL_RCC_OscConfig+0x2b0>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7fe feb8 	bl	8000e2c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c0:	f7fe feb4 	bl	8000e2c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e184      	b.n	80023dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	4b36      	ldr	r3, [pc, #216]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d030      	beq.n	800214c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f2:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <HAL_RCC_OscConfig+0x2b4>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7fe fe98 	bl	8000e2c <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002100:	f7fe fe94 	bl	8000e2c <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e164      	b.n	80023dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002112:	4b26      	ldr	r3, [pc, #152]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8002114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x200>
 800211e:	e015      	b.n	800214c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002120:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_RCC_OscConfig+0x2b4>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002126:	f7fe fe81 	bl	8000e2c <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800212e:	f7fe fe7d 	bl	8000e2c <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e14d      	b.n	80023dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002140:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8002142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f0      	bne.n	800212e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80a0 	beq.w	800229a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215e:	4b13      	ldr	r3, [pc, #76]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10f      	bne.n	800218a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a0e      	ldr	r2, [pc, #56]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <HAL_RCC_OscConfig+0x2ac>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002186:	2301      	movs	r3, #1
 8002188:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_OscConfig+0x2b8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002192:	2b00      	cmp	r3, #0
 8002194:	d121      	bne.n	80021da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_RCC_OscConfig+0x2b8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <HAL_RCC_OscConfig+0x2b8>)
 800219c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a2:	f7fe fe43 	bl	8000e2c <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a8:	e011      	b.n	80021ce <HAL_RCC_OscConfig+0x2ce>
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800
 80021b0:	42470000 	.word	0x42470000
 80021b4:	42470e80 	.word	0x42470e80
 80021b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021bc:	f7fe fe36 	bl	8000e2c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e106      	b.n	80023dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ce:	4b85      	ldr	r3, [pc, #532]	; (80023e4 <HAL_RCC_OscConfig+0x4e4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d106      	bne.n	80021f0 <HAL_RCC_OscConfig+0x2f0>
 80021e2:	4b81      	ldr	r3, [pc, #516]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e6:	4a80      	ldr	r2, [pc, #512]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6713      	str	r3, [r2, #112]	; 0x70
 80021ee:	e01c      	b.n	800222a <HAL_RCC_OscConfig+0x32a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	d10c      	bne.n	8002212 <HAL_RCC_OscConfig+0x312>
 80021f8:	4b7b      	ldr	r3, [pc, #492]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	4a7a      	ldr	r2, [pc, #488]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 80021fe:	f043 0304 	orr.w	r3, r3, #4
 8002202:	6713      	str	r3, [r2, #112]	; 0x70
 8002204:	4b78      	ldr	r3, [pc, #480]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002208:	4a77      	ldr	r2, [pc, #476]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6713      	str	r3, [r2, #112]	; 0x70
 8002210:	e00b      	b.n	800222a <HAL_RCC_OscConfig+0x32a>
 8002212:	4b75      	ldr	r3, [pc, #468]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	4a74      	ldr	r2, [pc, #464]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	6713      	str	r3, [r2, #112]	; 0x70
 800221e:	4b72      	ldr	r3, [pc, #456]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	4a71      	ldr	r2, [pc, #452]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d015      	beq.n	800225e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002232:	f7fe fdfb 	bl	8000e2c <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	e00a      	b.n	8002250 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe fdf7 	bl	8000e2c <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	; 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e0c5      	b.n	80023dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002250:	4b65      	ldr	r3, [pc, #404]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0ee      	beq.n	800223a <HAL_RCC_OscConfig+0x33a>
 800225c:	e014      	b.n	8002288 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225e:	f7fe fde5 	bl	8000e2c <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002264:	e00a      	b.n	800227c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f7fe fde1 	bl	8000e2c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f241 3288 	movw	r2, #5000	; 0x1388
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e0af      	b.n	80023dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227c:	4b5a      	ldr	r3, [pc, #360]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1ee      	bne.n	8002266 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002288:	7dfb      	ldrb	r3, [r7, #23]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d105      	bne.n	800229a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228e:	4b56      	ldr	r3, [pc, #344]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a55      	ldr	r2, [pc, #340]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 8002294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 809b 	beq.w	80023da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022a4:	4b50      	ldr	r3, [pc, #320]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d05c      	beq.n	800236a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d141      	bne.n	800233c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b8:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <HAL_RCC_OscConfig+0x4ec>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7fe fdb5 	bl	8000e2c <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c6:	f7fe fdb1 	bl	8000e2c <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e081      	b.n	80023dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d8:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f0      	bne.n	80022c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69da      	ldr	r2, [r3, #28]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	019b      	lsls	r3, r3, #6
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	085b      	lsrs	r3, r3, #1
 80022fc:	3b01      	subs	r3, #1
 80022fe:	041b      	lsls	r3, r3, #16
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	061b      	lsls	r3, r3, #24
 8002308:	4937      	ldr	r1, [pc, #220]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800230e:	4b37      	ldr	r3, [pc, #220]	; (80023ec <HAL_RCC_OscConfig+0x4ec>)
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7fe fd8a 	bl	8000e2c <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231c:	f7fe fd86 	bl	8000e2c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e056      	b.n	80023dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232e:	4b2e      	ldr	r3, [pc, #184]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x41c>
 800233a:	e04e      	b.n	80023da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233c:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <HAL_RCC_OscConfig+0x4ec>)
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002342:	f7fe fd73 	bl	8000e2c <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234a:	f7fe fd6f 	bl	8000e2c <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e03f      	b.n	80023dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235c:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f0      	bne.n	800234a <HAL_RCC_OscConfig+0x44a>
 8002368:	e037      	b.n	80023da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e032      	b.n	80023dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002376:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <HAL_RCC_OscConfig+0x4e8>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d028      	beq.n	80023d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800238e:	429a      	cmp	r2, r3
 8002390:	d121      	bne.n	80023d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239c:	429a      	cmp	r2, r3
 800239e:	d11a      	bne.n	80023d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023a6:	4013      	ands	r3, r2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d111      	bne.n	80023d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	085b      	lsrs	r3, r3, #1
 80023be:	3b01      	subs	r3, #1
 80023c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d107      	bne.n	80023d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d001      	beq.n	80023da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40007000 	.word	0x40007000
 80023e8:	40023800 	.word	0x40023800
 80023ec:	42470060 	.word	0x42470060

080023f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0cc      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002404:	4b68      	ldr	r3, [pc, #416]	; (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d90c      	bls.n	800242c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4b65      	ldr	r3, [pc, #404]	; (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b63      	ldr	r3, [pc, #396]	; (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0b8      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002444:	4b59      	ldr	r3, [pc, #356]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a58      	ldr	r2, [pc, #352]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800244e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800245c:	4b53      	ldr	r3, [pc, #332]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a52      	ldr	r2, [pc, #328]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002468:	4b50      	ldr	r3, [pc, #320]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	494d      	ldr	r1, [pc, #308]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d044      	beq.n	8002510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	4b47      	ldr	r3, [pc, #284]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d119      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e07f      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d003      	beq.n	80024ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ae:	4b3f      	ldr	r3, [pc, #252]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e06f      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024be:	4b3b      	ldr	r3, [pc, #236]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e067      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ce:	4b37      	ldr	r3, [pc, #220]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f023 0203 	bic.w	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4934      	ldr	r1, [pc, #208]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e0:	f7fe fca4 	bl	8000e2c <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	e00a      	b.n	80024fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e8:	f7fe fca0 	bl	8000e2c <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e04f      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 020c 	and.w	r2, r3, #12
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	429a      	cmp	r2, r3
 800250e:	d1eb      	bne.n	80024e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d20c      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e032      	b.n	800259e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002544:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4916      	ldr	r1, [pc, #88]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	490e      	ldr	r1, [pc, #56]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002576:	f000 f821 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 800257a:	4602      	mov	r2, r0
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	490a      	ldr	r1, [pc, #40]	; (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	5ccb      	ldrb	r3, [r1, r3]
 800258a:	fa22 f303 	lsr.w	r3, r2, r3
 800258e:	4a09      	ldr	r2, [pc, #36]	; (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fc04 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40023c00 	.word	0x40023c00
 80025ac:	40023800 	.word	0x40023800
 80025b0:	08004450 	.word	0x08004450
 80025b4:	20000000 	.word	0x20000000
 80025b8:	20000004 	.word	0x20000004

080025bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	607b      	str	r3, [r7, #4]
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	2300      	movs	r3, #0
 80025ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025d4:	4b67      	ldr	r3, [pc, #412]	; (8002774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d00d      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x40>
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	f200 80bd 	bhi.w	8002760 <HAL_RCC_GetSysClockFreq+0x1a4>
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x34>
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ee:	e0b7      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025f0:	4b61      	ldr	r3, [pc, #388]	; (8002778 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80025f2:	60bb      	str	r3, [r7, #8]
       break;
 80025f4:	e0b7      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025f6:	4b61      	ldr	r3, [pc, #388]	; (800277c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80025f8:	60bb      	str	r3, [r7, #8]
      break;
 80025fa:	e0b4      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025fc:	4b5d      	ldr	r3, [pc, #372]	; (8002774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002604:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002606:	4b5b      	ldr	r3, [pc, #364]	; (8002774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d04d      	beq.n	80026ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002612:	4b58      	ldr	r3, [pc, #352]	; (8002774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	099b      	lsrs	r3, r3, #6
 8002618:	461a      	mov	r2, r3
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002622:	f04f 0100 	mov.w	r1, #0
 8002626:	ea02 0800 	and.w	r8, r2, r0
 800262a:	ea03 0901 	and.w	r9, r3, r1
 800262e:	4640      	mov	r0, r8
 8002630:	4649      	mov	r1, r9
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	014b      	lsls	r3, r1, #5
 800263c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002640:	0142      	lsls	r2, r0, #5
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	ebb0 0008 	subs.w	r0, r0, r8
 800264a:	eb61 0109 	sbc.w	r1, r1, r9
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	018b      	lsls	r3, r1, #6
 8002658:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800265c:	0182      	lsls	r2, r0, #6
 800265e:	1a12      	subs	r2, r2, r0
 8002660:	eb63 0301 	sbc.w	r3, r3, r1
 8002664:	f04f 0000 	mov.w	r0, #0
 8002668:	f04f 0100 	mov.w	r1, #0
 800266c:	00d9      	lsls	r1, r3, #3
 800266e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002672:	00d0      	lsls	r0, r2, #3
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	eb12 0208 	adds.w	r2, r2, r8
 800267c:	eb43 0309 	adc.w	r3, r3, r9
 8002680:	f04f 0000 	mov.w	r0, #0
 8002684:	f04f 0100 	mov.w	r1, #0
 8002688:	0259      	lsls	r1, r3, #9
 800268a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800268e:	0250      	lsls	r0, r2, #9
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4610      	mov	r0, r2
 8002696:	4619      	mov	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	461a      	mov	r2, r3
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	f7fd fde6 	bl	8000270 <__aeabi_uldivmod>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4613      	mov	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	e04a      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ae:	4b31      	ldr	r3, [pc, #196]	; (8002774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	099b      	lsrs	r3, r3, #6
 80026b4:	461a      	mov	r2, r3
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026be:	f04f 0100 	mov.w	r1, #0
 80026c2:	ea02 0400 	and.w	r4, r2, r0
 80026c6:	ea03 0501 	and.w	r5, r3, r1
 80026ca:	4620      	mov	r0, r4
 80026cc:	4629      	mov	r1, r5
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	014b      	lsls	r3, r1, #5
 80026d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026dc:	0142      	lsls	r2, r0, #5
 80026de:	4610      	mov	r0, r2
 80026e0:	4619      	mov	r1, r3
 80026e2:	1b00      	subs	r0, r0, r4
 80026e4:	eb61 0105 	sbc.w	r1, r1, r5
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	018b      	lsls	r3, r1, #6
 80026f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026f6:	0182      	lsls	r2, r0, #6
 80026f8:	1a12      	subs	r2, r2, r0
 80026fa:	eb63 0301 	sbc.w	r3, r3, r1
 80026fe:	f04f 0000 	mov.w	r0, #0
 8002702:	f04f 0100 	mov.w	r1, #0
 8002706:	00d9      	lsls	r1, r3, #3
 8002708:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800270c:	00d0      	lsls	r0, r2, #3
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	1912      	adds	r2, r2, r4
 8002714:	eb45 0303 	adc.w	r3, r5, r3
 8002718:	f04f 0000 	mov.w	r0, #0
 800271c:	f04f 0100 	mov.w	r1, #0
 8002720:	0299      	lsls	r1, r3, #10
 8002722:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002726:	0290      	lsls	r0, r2, #10
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	461a      	mov	r2, r3
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	f7fd fd9a 	bl	8000270 <__aeabi_uldivmod>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4613      	mov	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	3301      	adds	r3, #1
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	fbb2 f3f3 	udiv	r3, r2, r3
 800275c:	60bb      	str	r3, [r7, #8]
      break;
 800275e:	e002      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002762:	60bb      	str	r3, [r7, #8]
      break;
 8002764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002766:	68bb      	ldr	r3, [r7, #8]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800
 8002778:	00f42400 	.word	0x00f42400
 800277c:	007a1200 	.word	0x007a1200

08002780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <HAL_RCC_GetHCLKFreq+0x14>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	20000000 	.word	0x20000000

08002798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800279c:	f7ff fff0 	bl	8002780 <HAL_RCC_GetHCLKFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	0a9b      	lsrs	r3, r3, #10
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	4903      	ldr	r1, [pc, #12]	; (80027bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40023800 	.word	0x40023800
 80027bc:	08004460 	.word	0x08004460

080027c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027c4:	f7ff ffdc 	bl	8002780 <HAL_RCC_GetHCLKFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	0b5b      	lsrs	r3, r3, #13
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	4903      	ldr	r1, [pc, #12]	; (80027e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027dc:	4618      	mov	r0, r3
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40023800 	.word	0x40023800
 80027e4:	08004460 	.word	0x08004460

080027e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e041      	b.n	800287e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe f94c 	bl	8000aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3304      	adds	r3, #4
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	f000 f9ce 	bl	8002bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b01      	cmp	r3, #1
 800289a:	d001      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e04e      	b.n	800293e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a23      	ldr	r2, [pc, #140]	; (800294c <HAL_TIM_Base_Start_IT+0xc4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d022      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ca:	d01d      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1f      	ldr	r2, [pc, #124]	; (8002950 <HAL_TIM_Base_Start_IT+0xc8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d018      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1e      	ldr	r2, [pc, #120]	; (8002954 <HAL_TIM_Base_Start_IT+0xcc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d013      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <HAL_TIM_Base_Start_IT+0xd0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00e      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1b      	ldr	r2, [pc, #108]	; (800295c <HAL_TIM_Base_Start_IT+0xd4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d009      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a19      	ldr	r2, [pc, #100]	; (8002960 <HAL_TIM_Base_Start_IT+0xd8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d004      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a18      	ldr	r2, [pc, #96]	; (8002964 <HAL_TIM_Base_Start_IT+0xdc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d111      	bne.n	800292c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b06      	cmp	r3, #6
 8002918:	d010      	beq.n	800293c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0201 	orr.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292a:	e007      	b.n	800293c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40010000 	.word	0x40010000
 8002950:	40000400 	.word	0x40000400
 8002954:	40000800 	.word	0x40000800
 8002958:	40000c00 	.word	0x40000c00
 800295c:	40010400 	.word	0x40010400
 8002960:	40014000 	.word	0x40014000
 8002964:	40001800 	.word	0x40001800

08002968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b02      	cmp	r3, #2
 800297c:	d122      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b02      	cmp	r3, #2
 800298a:	d11b      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0202 	mvn.w	r2, #2
 8002994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f8ee 	bl	8002b8c <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8e0 	bl	8002b78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f8f1 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d122      	bne.n	8002a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d11b      	bne.n	8002a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0204 	mvn.w	r2, #4
 80029e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2202      	movs	r2, #2
 80029ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f8c4 	bl	8002b8c <HAL_TIM_IC_CaptureCallback>
 8002a04:	e005      	b.n	8002a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f8b6 	bl	8002b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f8c7 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d122      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d11b      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0208 	mvn.w	r2, #8
 8002a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2204      	movs	r2, #4
 8002a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f89a 	bl	8002b8c <HAL_TIM_IC_CaptureCallback>
 8002a58:	e005      	b.n	8002a66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f88c 	bl	8002b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f89d 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d122      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b10      	cmp	r3, #16
 8002a86:	d11b      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0210 	mvn.w	r2, #16
 8002a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2208      	movs	r2, #8
 8002a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f870 	bl	8002b8c <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f862 	bl	8002b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f873 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d10e      	bne.n	8002aec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d107      	bne.n	8002aec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0201 	mvn.w	r2, #1
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7fd fef0 	bl	80008cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af6:	2b80      	cmp	r3, #128	; 0x80
 8002af8:	d10e      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b04:	2b80      	cmp	r3, #128	; 0x80
 8002b06:	d107      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f97e 	bl	8002e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b22:	2b40      	cmp	r3, #64	; 0x40
 8002b24:	d10e      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d107      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f838 	bl	8002bb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d10e      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d107      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0220 	mvn.w	r2, #32
 8002b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f948 	bl	8002e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a40      	ldr	r2, [pc, #256]	; (8002cdc <TIM_Base_SetConfig+0x114>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d013      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be6:	d00f      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a3d      	ldr	r2, [pc, #244]	; (8002ce0 <TIM_Base_SetConfig+0x118>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00b      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a3c      	ldr	r2, [pc, #240]	; (8002ce4 <TIM_Base_SetConfig+0x11c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d007      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a3b      	ldr	r2, [pc, #236]	; (8002ce8 <TIM_Base_SetConfig+0x120>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d003      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3a      	ldr	r2, [pc, #232]	; (8002cec <TIM_Base_SetConfig+0x124>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d108      	bne.n	8002c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a2f      	ldr	r2, [pc, #188]	; (8002cdc <TIM_Base_SetConfig+0x114>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d02b      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c28:	d027      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ce0 <TIM_Base_SetConfig+0x118>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d023      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a2b      	ldr	r2, [pc, #172]	; (8002ce4 <TIM_Base_SetConfig+0x11c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01f      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ce8 <TIM_Base_SetConfig+0x120>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d01b      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a29      	ldr	r2, [pc, #164]	; (8002cec <TIM_Base_SetConfig+0x124>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d017      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a28      	ldr	r2, [pc, #160]	; (8002cf0 <TIM_Base_SetConfig+0x128>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a27      	ldr	r2, [pc, #156]	; (8002cf4 <TIM_Base_SetConfig+0x12c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00f      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a26      	ldr	r2, [pc, #152]	; (8002cf8 <TIM_Base_SetConfig+0x130>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00b      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a25      	ldr	r2, [pc, #148]	; (8002cfc <TIM_Base_SetConfig+0x134>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a24      	ldr	r2, [pc, #144]	; (8002d00 <TIM_Base_SetConfig+0x138>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d003      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a23      	ldr	r2, [pc, #140]	; (8002d04 <TIM_Base_SetConfig+0x13c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d108      	bne.n	8002c8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <TIM_Base_SetConfig+0x114>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d003      	beq.n	8002cc0 <TIM_Base_SetConfig+0xf8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a0c      	ldr	r2, [pc, #48]	; (8002cec <TIM_Base_SetConfig+0x124>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d103      	bne.n	8002cc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	615a      	str	r2, [r3, #20]
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40010000 	.word	0x40010000
 8002ce0:	40000400 	.word	0x40000400
 8002ce4:	40000800 	.word	0x40000800
 8002ce8:	40000c00 	.word	0x40000c00
 8002cec:	40010400 	.word	0x40010400
 8002cf0:	40014000 	.word	0x40014000
 8002cf4:	40014400 	.word	0x40014400
 8002cf8:	40014800 	.word	0x40014800
 8002cfc:	40001800 	.word	0x40001800
 8002d00:	40001c00 	.word	0x40001c00
 8002d04:	40002000 	.word	0x40002000

08002d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e05a      	b.n	8002dd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a21      	ldr	r2, [pc, #132]	; (8002de4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d022      	beq.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6c:	d01d      	beq.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d018      	beq.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d013      	beq.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1a      	ldr	r2, [pc, #104]	; (8002df0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00e      	beq.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a18      	ldr	r2, [pc, #96]	; (8002df4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d009      	beq.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a17      	ldr	r2, [pc, #92]	; (8002df8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d004      	beq.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a15      	ldr	r2, [pc, #84]	; (8002dfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d10c      	bne.n	8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40010000 	.word	0x40010000
 8002de8:	40000400 	.word	0x40000400
 8002dec:	40000800 	.word	0x40000800
 8002df0:	40000c00 	.word	0x40000c00
 8002df4:	40010400 	.word	0x40010400
 8002df8:	40014000 	.word	0x40014000
 8002dfc:	40001800 	.word	0x40001800

08002e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e03f      	b.n	8002eba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fd fe72 	bl	8000b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2224      	movs	r2, #36	; 0x24
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fcb5 	bl	80037dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695a      	ldr	r2, [r3, #20]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d130      	bne.n	8002f3e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_UART_Transmit_IT+0x26>
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e029      	b.n	8002f40 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_UART_Transmit_IT+0x38>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e022      	b.n	8002f40 <HAL_UART_Transmit_IT+0x7e>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	88fa      	ldrh	r2, [r7, #6]
 8002f0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	88fa      	ldrh	r2, [r7, #6]
 8002f12:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2221      	movs	r2, #33	; 0x21
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f38:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e000      	b.n	8002f40 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
  }
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b0ba      	sub	sp, #232	; 0xe8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10f      	bne.n	8002fb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x66>
 8002f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fb5b 	bl	8003666 <UART_Receive_IT>
      return;
 8002fb0:	e256      	b.n	8003460 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 80de 	beq.w	8003178 <HAL_UART_IRQHandler+0x22c>
 8002fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d106      	bne.n	8002fd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fcc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80d1 	beq.w	8003178 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00b      	beq.n	8002ffa <HAL_UART_IRQHandler+0xae>
 8002fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f043 0201 	orr.w	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_UART_IRQHandler+0xd2>
 8003006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f043 0202 	orr.w	r2, r3, #2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800301e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00b      	beq.n	8003042 <HAL_UART_IRQHandler+0xf6>
 800302a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f043 0204 	orr.w	r2, r3, #4
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d011      	beq.n	8003072 <HAL_UART_IRQHandler+0x126>
 800304e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	d105      	bne.n	8003066 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800305a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f043 0208 	orr.w	r2, r3, #8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 81ed 	beq.w	8003456 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800307c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_UART_IRQHandler+0x14e>
 8003088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fae6 	bl	8003666 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a4:	2b40      	cmp	r3, #64	; 0x40
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d103      	bne.n	80030c6 <HAL_UART_IRQHandler+0x17a>
 80030be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d04f      	beq.n	8003166 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f9ee 	bl	80034a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d6:	2b40      	cmp	r3, #64	; 0x40
 80030d8:	d141      	bne.n	800315e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3314      	adds	r3, #20
 80030e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3314      	adds	r3, #20
 8003102:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003106:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800310a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003112:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003116:	e841 2300 	strex	r3, r2, [r1]
 800311a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800311e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1d9      	bne.n	80030da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312a:	2b00      	cmp	r3, #0
 800312c:	d013      	beq.n	8003156 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	4a7d      	ldr	r2, [pc, #500]	; (8003328 <HAL_UART_IRQHandler+0x3dc>)
 8003134:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313a:	4618      	mov	r0, r3
 800313c:	f7fe fced 	bl	8001b1a <HAL_DMA_Abort_IT>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d016      	beq.n	8003174 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003150:	4610      	mov	r0, r2
 8003152:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003154:	e00e      	b.n	8003174 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f990 	bl	800347c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800315c:	e00a      	b.n	8003174 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f98c 	bl	800347c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003164:	e006      	b.n	8003174 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f988 	bl	800347c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003172:	e170      	b.n	8003456 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003174:	bf00      	nop
    return;
 8003176:	e16e      	b.n	8003456 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	2b01      	cmp	r3, #1
 800317e:	f040 814a 	bne.w	8003416 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 8143 	beq.w	8003416 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 813c 	beq.w	8003416 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b40      	cmp	r3, #64	; 0x40
 80031c0:	f040 80b4 	bne.w	800332c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8140 	beq.w	800345a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031e2:	429a      	cmp	r2, r3
 80031e4:	f080 8139 	bcs.w	800345a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fa:	f000 8088 	beq.w	800330e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	330c      	adds	r3, #12
 8003204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003208:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003214:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800321c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	330c      	adds	r3, #12
 8003226:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800322a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800322e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003232:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003236:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800323a:	e841 2300 	strex	r3, r2, [r1]
 800323e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003242:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1d9      	bne.n	80031fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3314      	adds	r3, #20
 8003250:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003254:	e853 3f00 	ldrex	r3, [r3]
 8003258:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800325a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3314      	adds	r3, #20
 800326a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800326e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003272:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003274:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003276:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800327a:	e841 2300 	strex	r3, r2, [r1]
 800327e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1e1      	bne.n	800324a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3314      	adds	r3, #20
 800328c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800329c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3314      	adds	r3, #20
 80032a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032b2:	e841 2300 	strex	r3, r2, [r1]
 80032b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1e3      	bne.n	8003286 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	330c      	adds	r3, #12
 80032d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d6:	e853 3f00 	ldrex	r3, [r3]
 80032da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032de:	f023 0310 	bic.w	r3, r3, #16
 80032e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	330c      	adds	r3, #12
 80032ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80032f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80032f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032f8:	e841 2300 	strex	r3, r2, [r1]
 80032fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1e3      	bne.n	80032cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe fb96 	bl	8001a3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003316:	b29b      	uxth	r3, r3
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	b29b      	uxth	r3, r3
 800331c:	4619      	mov	r1, r3
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f8b6 	bl	8003490 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003324:	e099      	b.n	800345a <HAL_UART_IRQHandler+0x50e>
 8003326:	bf00      	nop
 8003328:	0800356f 	.word	0x0800356f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003334:	b29b      	uxth	r3, r3
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 808b 	beq.w	800345e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003348:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8086 	beq.w	800345e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	330c      	adds	r3, #12
 8003358:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003364:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003368:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	330c      	adds	r3, #12
 8003372:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003376:	647a      	str	r2, [r7, #68]	; 0x44
 8003378:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800337c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800337e:	e841 2300 	strex	r3, r2, [r1]
 8003382:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1e3      	bne.n	8003352 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3314      	adds	r3, #20
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	e853 3f00 	ldrex	r3, [r3]
 8003398:	623b      	str	r3, [r7, #32]
   return(result);
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3314      	adds	r3, #20
 80033aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033ae:	633a      	str	r2, [r7, #48]	; 0x30
 80033b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b6:	e841 2300 	strex	r3, r2, [r1]
 80033ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e3      	bne.n	800338a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	330c      	adds	r3, #12
 80033d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	e853 3f00 	ldrex	r3, [r3]
 80033de:	60fb      	str	r3, [r7, #12]
   return(result);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0310 	bic.w	r3, r3, #16
 80033e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	330c      	adds	r3, #12
 80033f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80033f4:	61fa      	str	r2, [r7, #28]
 80033f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f8:	69b9      	ldr	r1, [r7, #24]
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	e841 2300 	strex	r3, r2, [r1]
 8003400:	617b      	str	r3, [r7, #20]
   return(result);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1e3      	bne.n	80033d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800340c:	4619      	mov	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f83e 	bl	8003490 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003414:	e023      	b.n	800345e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <HAL_UART_IRQHandler+0x4ea>
 8003422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f8b1 	bl	8003596 <UART_Transmit_IT>
    return;
 8003434:	e014      	b.n	8003460 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00e      	beq.n	8003460 <HAL_UART_IRQHandler+0x514>
 8003442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d008      	beq.n	8003460 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f8f1 	bl	8003636 <UART_EndTransmit_IT>
    return;
 8003454:	e004      	b.n	8003460 <HAL_UART_IRQHandler+0x514>
    return;
 8003456:	bf00      	nop
 8003458:	e002      	b.n	8003460 <HAL_UART_IRQHandler+0x514>
      return;
 800345a:	bf00      	nop
 800345c:	e000      	b.n	8003460 <HAL_UART_IRQHandler+0x514>
      return;
 800345e:	bf00      	nop
  }
}
 8003460:	37e8      	adds	r7, #232	; 0xe8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop

08003468 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b095      	sub	sp, #84	; 0x54
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ba:	e853 3f00 	ldrex	r3, [r3]
 80034be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	330c      	adds	r3, #12
 80034ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034d0:	643a      	str	r2, [r7, #64]	; 0x40
 80034d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034d8:	e841 2300 	strex	r3, r2, [r1]
 80034dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e5      	bne.n	80034b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3314      	adds	r3, #20
 80034ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	e853 3f00 	ldrex	r3, [r3]
 80034f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f023 0301 	bic.w	r3, r3, #1
 80034fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3314      	adds	r3, #20
 8003502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003504:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800350a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800350c:	e841 2300 	strex	r3, r2, [r1]
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1e5      	bne.n	80034e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	2b01      	cmp	r3, #1
 800351e:	d119      	bne.n	8003554 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	330c      	adds	r3, #12
 8003526:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	e853 3f00 	ldrex	r3, [r3]
 800352e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f023 0310 	bic.w	r3, r3, #16
 8003536:	647b      	str	r3, [r7, #68]	; 0x44
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	330c      	adds	r3, #12
 800353e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003540:	61ba      	str	r2, [r7, #24]
 8003542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003544:	6979      	ldr	r1, [r7, #20]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	e841 2300 	strex	r3, r2, [r1]
 800354c:	613b      	str	r3, [r7, #16]
   return(result);
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e5      	bne.n	8003520 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003562:	bf00      	nop
 8003564:	3754      	adds	r7, #84	; 0x54
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f7ff ff77 	bl	800347c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003596:	b480      	push	{r7}
 8003598:	b085      	sub	sp, #20
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b21      	cmp	r3, #33	; 0x21
 80035a8:	d13e      	bne.n	8003628 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b2:	d114      	bne.n	80035de <UART_Transmit_IT+0x48>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d110      	bne.n	80035de <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	1c9a      	adds	r2, r3, #2
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	621a      	str	r2, [r3, #32]
 80035dc:	e008      	b.n	80035f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	1c59      	adds	r1, r3, #1
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6211      	str	r1, [r2, #32]
 80035e8:	781a      	ldrb	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	4619      	mov	r1, r3
 80035fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10f      	bne.n	8003624 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003612:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003622:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	e000      	b.n	800362a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003628:	2302      	movs	r3, #2
  }
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800364c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fd f992 	bl	8000980 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b08c      	sub	sp, #48	; 0x30
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b22      	cmp	r3, #34	; 0x22
 8003678:	f040 80ab 	bne.w	80037d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003684:	d117      	bne.n	80036b6 <UART_Receive_IT+0x50>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d113      	bne.n	80036b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800368e:	2300      	movs	r3, #0
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	1c9a      	adds	r2, r3, #2
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28
 80036b4:	e026      	b.n	8003704 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c8:	d007      	beq.n	80036da <UART_Receive_IT+0x74>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <UART_Receive_IT+0x82>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	e008      	b.n	80036fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29b      	uxth	r3, r3
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4619      	mov	r1, r3
 8003712:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003714:	2b00      	cmp	r3, #0
 8003716:	d15a      	bne.n	80037ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0220 	bic.w	r2, r2, #32
 8003726:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003736:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	2b01      	cmp	r3, #1
 8003756:	d135      	bne.n	80037c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	330c      	adds	r3, #12
 8003764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	e853 3f00 	ldrex	r3, [r3]
 800376c:	613b      	str	r3, [r7, #16]
   return(result);
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f023 0310 	bic.w	r3, r3, #16
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	330c      	adds	r3, #12
 800377c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377e:	623a      	str	r2, [r7, #32]
 8003780:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003782:	69f9      	ldr	r1, [r7, #28]
 8003784:	6a3a      	ldr	r2, [r7, #32]
 8003786:	e841 2300 	strex	r3, r2, [r1]
 800378a:	61bb      	str	r3, [r7, #24]
   return(result);
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e5      	bne.n	800375e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b10      	cmp	r3, #16
 800379e:	d10a      	bne.n	80037b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037ba:	4619      	mov	r1, r3
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff fe67 	bl	8003490 <HAL_UARTEx_RxEventCallback>
 80037c2:	e002      	b.n	80037ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff fe4f 	bl	8003468 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	e002      	b.n	80037d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	e000      	b.n	80037d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80037d2:	2302      	movs	r3, #2
  }
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3730      	adds	r7, #48	; 0x30
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e0:	b09f      	sub	sp, #124	; 0x7c
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f2:	68d9      	ldr	r1, [r3, #12]
 80037f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	ea40 0301 	orr.w	r3, r0, r1
 80037fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	431a      	orrs	r2, r3
 8003808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	431a      	orrs	r2, r3
 800380e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	4313      	orrs	r3, r2
 8003814:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003820:	f021 010c 	bic.w	r1, r1, #12
 8003824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800382a:	430b      	orrs	r3, r1
 800382c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800382e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800383a:	6999      	ldr	r1, [r3, #24]
 800383c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	ea40 0301 	orr.w	r3, r0, r1
 8003844:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4bc5      	ldr	r3, [pc, #788]	; (8003b60 <UART_SetConfig+0x384>)
 800384c:	429a      	cmp	r2, r3
 800384e:	d004      	beq.n	800385a <UART_SetConfig+0x7e>
 8003850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4bc3      	ldr	r3, [pc, #780]	; (8003b64 <UART_SetConfig+0x388>)
 8003856:	429a      	cmp	r2, r3
 8003858:	d103      	bne.n	8003862 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800385a:	f7fe ffb1 	bl	80027c0 <HAL_RCC_GetPCLK2Freq>
 800385e:	6778      	str	r0, [r7, #116]	; 0x74
 8003860:	e002      	b.n	8003868 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003862:	f7fe ff99 	bl	8002798 <HAL_RCC_GetPCLK1Freq>
 8003866:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003870:	f040 80b6 	bne.w	80039e0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003876:	461c      	mov	r4, r3
 8003878:	f04f 0500 	mov.w	r5, #0
 800387c:	4622      	mov	r2, r4
 800387e:	462b      	mov	r3, r5
 8003880:	1891      	adds	r1, r2, r2
 8003882:	6439      	str	r1, [r7, #64]	; 0x40
 8003884:	415b      	adcs	r3, r3
 8003886:	647b      	str	r3, [r7, #68]	; 0x44
 8003888:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800388c:	1912      	adds	r2, r2, r4
 800388e:	eb45 0303 	adc.w	r3, r5, r3
 8003892:	f04f 0000 	mov.w	r0, #0
 8003896:	f04f 0100 	mov.w	r1, #0
 800389a:	00d9      	lsls	r1, r3, #3
 800389c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038a0:	00d0      	lsls	r0, r2, #3
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	1911      	adds	r1, r2, r4
 80038a8:	6639      	str	r1, [r7, #96]	; 0x60
 80038aa:	416b      	adcs	r3, r5
 80038ac:	667b      	str	r3, [r7, #100]	; 0x64
 80038ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	461a      	mov	r2, r3
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	1891      	adds	r1, r2, r2
 80038ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80038bc:	415b      	adcs	r3, r3
 80038be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80038c8:	f7fc fcd2 	bl	8000270 <__aeabi_uldivmod>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4ba5      	ldr	r3, [pc, #660]	; (8003b68 <UART_SetConfig+0x38c>)
 80038d2:	fba3 2302 	umull	r2, r3, r3, r2
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	011e      	lsls	r6, r3, #4
 80038da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038dc:	461c      	mov	r4, r3
 80038de:	f04f 0500 	mov.w	r5, #0
 80038e2:	4622      	mov	r2, r4
 80038e4:	462b      	mov	r3, r5
 80038e6:	1891      	adds	r1, r2, r2
 80038e8:	6339      	str	r1, [r7, #48]	; 0x30
 80038ea:	415b      	adcs	r3, r3
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
 80038ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80038f2:	1912      	adds	r2, r2, r4
 80038f4:	eb45 0303 	adc.w	r3, r5, r3
 80038f8:	f04f 0000 	mov.w	r0, #0
 80038fc:	f04f 0100 	mov.w	r1, #0
 8003900:	00d9      	lsls	r1, r3, #3
 8003902:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003906:	00d0      	lsls	r0, r2, #3
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	1911      	adds	r1, r2, r4
 800390e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003910:	416b      	adcs	r3, r5
 8003912:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	461a      	mov	r2, r3
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	1891      	adds	r1, r2, r2
 8003920:	62b9      	str	r1, [r7, #40]	; 0x28
 8003922:	415b      	adcs	r3, r3
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800392a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800392e:	f7fc fc9f 	bl	8000270 <__aeabi_uldivmod>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4b8c      	ldr	r3, [pc, #560]	; (8003b68 <UART_SetConfig+0x38c>)
 8003938:	fba3 1302 	umull	r1, r3, r3, r2
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	2164      	movs	r1, #100	; 0x64
 8003940:	fb01 f303 	mul.w	r3, r1, r3
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	3332      	adds	r3, #50	; 0x32
 800394a:	4a87      	ldr	r2, [pc, #540]	; (8003b68 <UART_SetConfig+0x38c>)
 800394c:	fba2 2303 	umull	r2, r3, r2, r3
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003958:	441e      	add	r6, r3
 800395a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800395c:	4618      	mov	r0, r3
 800395e:	f04f 0100 	mov.w	r1, #0
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	1894      	adds	r4, r2, r2
 8003968:	623c      	str	r4, [r7, #32]
 800396a:	415b      	adcs	r3, r3
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
 800396e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003972:	1812      	adds	r2, r2, r0
 8003974:	eb41 0303 	adc.w	r3, r1, r3
 8003978:	f04f 0400 	mov.w	r4, #0
 800397c:	f04f 0500 	mov.w	r5, #0
 8003980:	00dd      	lsls	r5, r3, #3
 8003982:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003986:	00d4      	lsls	r4, r2, #3
 8003988:	4622      	mov	r2, r4
 800398a:	462b      	mov	r3, r5
 800398c:	1814      	adds	r4, r2, r0
 800398e:	653c      	str	r4, [r7, #80]	; 0x50
 8003990:	414b      	adcs	r3, r1
 8003992:	657b      	str	r3, [r7, #84]	; 0x54
 8003994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	461a      	mov	r2, r3
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	1891      	adds	r1, r2, r2
 80039a0:	61b9      	str	r1, [r7, #24]
 80039a2:	415b      	adcs	r3, r3
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80039ae:	f7fc fc5f 	bl	8000270 <__aeabi_uldivmod>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4b6c      	ldr	r3, [pc, #432]	; (8003b68 <UART_SetConfig+0x38c>)
 80039b8:	fba3 1302 	umull	r1, r3, r3, r2
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	2164      	movs	r1, #100	; 0x64
 80039c0:	fb01 f303 	mul.w	r3, r1, r3
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	3332      	adds	r3, #50	; 0x32
 80039ca:	4a67      	ldr	r2, [pc, #412]	; (8003b68 <UART_SetConfig+0x38c>)
 80039cc:	fba2 2303 	umull	r2, r3, r2, r3
 80039d0:	095b      	lsrs	r3, r3, #5
 80039d2:	f003 0207 	and.w	r2, r3, #7
 80039d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4432      	add	r2, r6
 80039dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039de:	e0b9      	b.n	8003b54 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e2:	461c      	mov	r4, r3
 80039e4:	f04f 0500 	mov.w	r5, #0
 80039e8:	4622      	mov	r2, r4
 80039ea:	462b      	mov	r3, r5
 80039ec:	1891      	adds	r1, r2, r2
 80039ee:	6139      	str	r1, [r7, #16]
 80039f0:	415b      	adcs	r3, r3
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039f8:	1912      	adds	r2, r2, r4
 80039fa:	eb45 0303 	adc.w	r3, r5, r3
 80039fe:	f04f 0000 	mov.w	r0, #0
 8003a02:	f04f 0100 	mov.w	r1, #0
 8003a06:	00d9      	lsls	r1, r3, #3
 8003a08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a0c:	00d0      	lsls	r0, r2, #3
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	eb12 0804 	adds.w	r8, r2, r4
 8003a16:	eb43 0905 	adc.w	r9, r3, r5
 8003a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f04f 0100 	mov.w	r1, #0
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	008b      	lsls	r3, r1, #2
 8003a2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a32:	0082      	lsls	r2, r0, #2
 8003a34:	4640      	mov	r0, r8
 8003a36:	4649      	mov	r1, r9
 8003a38:	f7fc fc1a 	bl	8000270 <__aeabi_uldivmod>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4b49      	ldr	r3, [pc, #292]	; (8003b68 <UART_SetConfig+0x38c>)
 8003a42:	fba3 2302 	umull	r2, r3, r3, r2
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	011e      	lsls	r6, r3, #4
 8003a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f04f 0100 	mov.w	r1, #0
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	1894      	adds	r4, r2, r2
 8003a58:	60bc      	str	r4, [r7, #8]
 8003a5a:	415b      	adcs	r3, r3
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a62:	1812      	adds	r2, r2, r0
 8003a64:	eb41 0303 	adc.w	r3, r1, r3
 8003a68:	f04f 0400 	mov.w	r4, #0
 8003a6c:	f04f 0500 	mov.w	r5, #0
 8003a70:	00dd      	lsls	r5, r3, #3
 8003a72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a76:	00d4      	lsls	r4, r2, #3
 8003a78:	4622      	mov	r2, r4
 8003a7a:	462b      	mov	r3, r5
 8003a7c:	1814      	adds	r4, r2, r0
 8003a7e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003a80:	414b      	adcs	r3, r1
 8003a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f04f 0100 	mov.w	r1, #0
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	008b      	lsls	r3, r1, #2
 8003a98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a9c:	0082      	lsls	r2, r0, #2
 8003a9e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003aa2:	f7fc fbe5 	bl	8000270 <__aeabi_uldivmod>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <UART_SetConfig+0x38c>)
 8003aac:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	2164      	movs	r1, #100	; 0x64
 8003ab4:	fb01 f303 	mul.w	r3, r1, r3
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	3332      	adds	r3, #50	; 0x32
 8003abe:	4a2a      	ldr	r2, [pc, #168]	; (8003b68 <UART_SetConfig+0x38c>)
 8003ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac4:	095b      	lsrs	r3, r3, #5
 8003ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aca:	441e      	add	r6, r3
 8003acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f04f 0100 	mov.w	r1, #0
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	1894      	adds	r4, r2, r2
 8003ada:	603c      	str	r4, [r7, #0]
 8003adc:	415b      	adcs	r3, r3
 8003ade:	607b      	str	r3, [r7, #4]
 8003ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ae4:	1812      	adds	r2, r2, r0
 8003ae6:	eb41 0303 	adc.w	r3, r1, r3
 8003aea:	f04f 0400 	mov.w	r4, #0
 8003aee:	f04f 0500 	mov.w	r5, #0
 8003af2:	00dd      	lsls	r5, r3, #3
 8003af4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003af8:	00d4      	lsls	r4, r2, #3
 8003afa:	4622      	mov	r2, r4
 8003afc:	462b      	mov	r3, r5
 8003afe:	eb12 0a00 	adds.w	sl, r2, r0
 8003b02:	eb43 0b01 	adc.w	fp, r3, r1
 8003b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f04f 0100 	mov.w	r1, #0
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	008b      	lsls	r3, r1, #2
 8003b1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b1e:	0082      	lsls	r2, r0, #2
 8003b20:	4650      	mov	r0, sl
 8003b22:	4659      	mov	r1, fp
 8003b24:	f7fc fba4 	bl	8000270 <__aeabi_uldivmod>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <UART_SetConfig+0x38c>)
 8003b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	2164      	movs	r1, #100	; 0x64
 8003b36:	fb01 f303 	mul.w	r3, r1, r3
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	3332      	adds	r3, #50	; 0x32
 8003b40:	4a09      	ldr	r2, [pc, #36]	; (8003b68 <UART_SetConfig+0x38c>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	f003 020f 	and.w	r2, r3, #15
 8003b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4432      	add	r2, r6
 8003b52:	609a      	str	r2, [r3, #8]
}
 8003b54:	bf00      	nop
 8003b56:	377c      	adds	r7, #124	; 0x7c
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b5e:	bf00      	nop
 8003b60:	40011000 	.word	0x40011000
 8003b64:	40011400 	.word	0x40011400
 8003b68:	51eb851f 	.word	0x51eb851f

08003b6c <__errno>:
 8003b6c:	4b01      	ldr	r3, [pc, #4]	; (8003b74 <__errno+0x8>)
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	2000000c 	.word	0x2000000c

08003b78 <__libc_init_array>:
 8003b78:	b570      	push	{r4, r5, r6, lr}
 8003b7a:	4d0d      	ldr	r5, [pc, #52]	; (8003bb0 <__libc_init_array+0x38>)
 8003b7c:	4c0d      	ldr	r4, [pc, #52]	; (8003bb4 <__libc_init_array+0x3c>)
 8003b7e:	1b64      	subs	r4, r4, r5
 8003b80:	10a4      	asrs	r4, r4, #2
 8003b82:	2600      	movs	r6, #0
 8003b84:	42a6      	cmp	r6, r4
 8003b86:	d109      	bne.n	8003b9c <__libc_init_array+0x24>
 8003b88:	4d0b      	ldr	r5, [pc, #44]	; (8003bb8 <__libc_init_array+0x40>)
 8003b8a:	4c0c      	ldr	r4, [pc, #48]	; (8003bbc <__libc_init_array+0x44>)
 8003b8c:	f000 fc4e 	bl	800442c <_init>
 8003b90:	1b64      	subs	r4, r4, r5
 8003b92:	10a4      	asrs	r4, r4, #2
 8003b94:	2600      	movs	r6, #0
 8003b96:	42a6      	cmp	r6, r4
 8003b98:	d105      	bne.n	8003ba6 <__libc_init_array+0x2e>
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
 8003b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ba0:	4798      	blx	r3
 8003ba2:	3601      	adds	r6, #1
 8003ba4:	e7ee      	b.n	8003b84 <__libc_init_array+0xc>
 8003ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003baa:	4798      	blx	r3
 8003bac:	3601      	adds	r6, #1
 8003bae:	e7f2      	b.n	8003b96 <__libc_init_array+0x1e>
 8003bb0:	080044a4 	.word	0x080044a4
 8003bb4:	080044a4 	.word	0x080044a4
 8003bb8:	080044a4 	.word	0x080044a4
 8003bbc:	080044a8 	.word	0x080044a8

08003bc0 <memset>:
 8003bc0:	4402      	add	r2, r0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d100      	bne.n	8003bca <memset+0xa>
 8003bc8:	4770      	bx	lr
 8003bca:	f803 1b01 	strb.w	r1, [r3], #1
 8003bce:	e7f9      	b.n	8003bc4 <memset+0x4>

08003bd0 <siprintf>:
 8003bd0:	b40e      	push	{r1, r2, r3}
 8003bd2:	b500      	push	{lr}
 8003bd4:	b09c      	sub	sp, #112	; 0x70
 8003bd6:	ab1d      	add	r3, sp, #116	; 0x74
 8003bd8:	9002      	str	r0, [sp, #8]
 8003bda:	9006      	str	r0, [sp, #24]
 8003bdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003be0:	4809      	ldr	r0, [pc, #36]	; (8003c08 <siprintf+0x38>)
 8003be2:	9107      	str	r1, [sp, #28]
 8003be4:	9104      	str	r1, [sp, #16]
 8003be6:	4909      	ldr	r1, [pc, #36]	; (8003c0c <siprintf+0x3c>)
 8003be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bec:	9105      	str	r1, [sp, #20]
 8003bee:	6800      	ldr	r0, [r0, #0]
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	a902      	add	r1, sp, #8
 8003bf4:	f000 f868 	bl	8003cc8 <_svfiprintf_r>
 8003bf8:	9b02      	ldr	r3, [sp, #8]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	b01c      	add	sp, #112	; 0x70
 8003c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c04:	b003      	add	sp, #12
 8003c06:	4770      	bx	lr
 8003c08:	2000000c 	.word	0x2000000c
 8003c0c:	ffff0208 	.word	0xffff0208

08003c10 <__ssputs_r>:
 8003c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c14:	688e      	ldr	r6, [r1, #8]
 8003c16:	429e      	cmp	r6, r3
 8003c18:	4682      	mov	sl, r0
 8003c1a:	460c      	mov	r4, r1
 8003c1c:	4690      	mov	r8, r2
 8003c1e:	461f      	mov	r7, r3
 8003c20:	d838      	bhi.n	8003c94 <__ssputs_r+0x84>
 8003c22:	898a      	ldrh	r2, [r1, #12]
 8003c24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c28:	d032      	beq.n	8003c90 <__ssputs_r+0x80>
 8003c2a:	6825      	ldr	r5, [r4, #0]
 8003c2c:	6909      	ldr	r1, [r1, #16]
 8003c2e:	eba5 0901 	sub.w	r9, r5, r1
 8003c32:	6965      	ldr	r5, [r4, #20]
 8003c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	444b      	add	r3, r9
 8003c40:	106d      	asrs	r5, r5, #1
 8003c42:	429d      	cmp	r5, r3
 8003c44:	bf38      	it	cc
 8003c46:	461d      	movcc	r5, r3
 8003c48:	0553      	lsls	r3, r2, #21
 8003c4a:	d531      	bpl.n	8003cb0 <__ssputs_r+0xa0>
 8003c4c:	4629      	mov	r1, r5
 8003c4e:	f000 fb47 	bl	80042e0 <_malloc_r>
 8003c52:	4606      	mov	r6, r0
 8003c54:	b950      	cbnz	r0, 8003c6c <__ssputs_r+0x5c>
 8003c56:	230c      	movs	r3, #12
 8003c58:	f8ca 3000 	str.w	r3, [sl]
 8003c5c:	89a3      	ldrh	r3, [r4, #12]
 8003c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c62:	81a3      	strh	r3, [r4, #12]
 8003c64:	f04f 30ff 	mov.w	r0, #4294967295
 8003c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c6c:	6921      	ldr	r1, [r4, #16]
 8003c6e:	464a      	mov	r2, r9
 8003c70:	f000 fabe 	bl	80041f0 <memcpy>
 8003c74:	89a3      	ldrh	r3, [r4, #12]
 8003c76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7e:	81a3      	strh	r3, [r4, #12]
 8003c80:	6126      	str	r6, [r4, #16]
 8003c82:	6165      	str	r5, [r4, #20]
 8003c84:	444e      	add	r6, r9
 8003c86:	eba5 0509 	sub.w	r5, r5, r9
 8003c8a:	6026      	str	r6, [r4, #0]
 8003c8c:	60a5      	str	r5, [r4, #8]
 8003c8e:	463e      	mov	r6, r7
 8003c90:	42be      	cmp	r6, r7
 8003c92:	d900      	bls.n	8003c96 <__ssputs_r+0x86>
 8003c94:	463e      	mov	r6, r7
 8003c96:	4632      	mov	r2, r6
 8003c98:	6820      	ldr	r0, [r4, #0]
 8003c9a:	4641      	mov	r1, r8
 8003c9c:	f000 fab6 	bl	800420c <memmove>
 8003ca0:	68a3      	ldr	r3, [r4, #8]
 8003ca2:	6822      	ldr	r2, [r4, #0]
 8003ca4:	1b9b      	subs	r3, r3, r6
 8003ca6:	4432      	add	r2, r6
 8003ca8:	60a3      	str	r3, [r4, #8]
 8003caa:	6022      	str	r2, [r4, #0]
 8003cac:	2000      	movs	r0, #0
 8003cae:	e7db      	b.n	8003c68 <__ssputs_r+0x58>
 8003cb0:	462a      	mov	r2, r5
 8003cb2:	f000 fb6f 	bl	8004394 <_realloc_r>
 8003cb6:	4606      	mov	r6, r0
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	d1e1      	bne.n	8003c80 <__ssputs_r+0x70>
 8003cbc:	6921      	ldr	r1, [r4, #16]
 8003cbe:	4650      	mov	r0, sl
 8003cc0:	f000 fabe 	bl	8004240 <_free_r>
 8003cc4:	e7c7      	b.n	8003c56 <__ssputs_r+0x46>
	...

08003cc8 <_svfiprintf_r>:
 8003cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ccc:	4698      	mov	r8, r3
 8003cce:	898b      	ldrh	r3, [r1, #12]
 8003cd0:	061b      	lsls	r3, r3, #24
 8003cd2:	b09d      	sub	sp, #116	; 0x74
 8003cd4:	4607      	mov	r7, r0
 8003cd6:	460d      	mov	r5, r1
 8003cd8:	4614      	mov	r4, r2
 8003cda:	d50e      	bpl.n	8003cfa <_svfiprintf_r+0x32>
 8003cdc:	690b      	ldr	r3, [r1, #16]
 8003cde:	b963      	cbnz	r3, 8003cfa <_svfiprintf_r+0x32>
 8003ce0:	2140      	movs	r1, #64	; 0x40
 8003ce2:	f000 fafd 	bl	80042e0 <_malloc_r>
 8003ce6:	6028      	str	r0, [r5, #0]
 8003ce8:	6128      	str	r0, [r5, #16]
 8003cea:	b920      	cbnz	r0, 8003cf6 <_svfiprintf_r+0x2e>
 8003cec:	230c      	movs	r3, #12
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf4:	e0d1      	b.n	8003e9a <_svfiprintf_r+0x1d2>
 8003cf6:	2340      	movs	r3, #64	; 0x40
 8003cf8:	616b      	str	r3, [r5, #20]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8003cfe:	2320      	movs	r3, #32
 8003d00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d08:	2330      	movs	r3, #48	; 0x30
 8003d0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003eb4 <_svfiprintf_r+0x1ec>
 8003d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d12:	f04f 0901 	mov.w	r9, #1
 8003d16:	4623      	mov	r3, r4
 8003d18:	469a      	mov	sl, r3
 8003d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d1e:	b10a      	cbz	r2, 8003d24 <_svfiprintf_r+0x5c>
 8003d20:	2a25      	cmp	r2, #37	; 0x25
 8003d22:	d1f9      	bne.n	8003d18 <_svfiprintf_r+0x50>
 8003d24:	ebba 0b04 	subs.w	fp, sl, r4
 8003d28:	d00b      	beq.n	8003d42 <_svfiprintf_r+0x7a>
 8003d2a:	465b      	mov	r3, fp
 8003d2c:	4622      	mov	r2, r4
 8003d2e:	4629      	mov	r1, r5
 8003d30:	4638      	mov	r0, r7
 8003d32:	f7ff ff6d 	bl	8003c10 <__ssputs_r>
 8003d36:	3001      	adds	r0, #1
 8003d38:	f000 80aa 	beq.w	8003e90 <_svfiprintf_r+0x1c8>
 8003d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d3e:	445a      	add	r2, fp
 8003d40:	9209      	str	r2, [sp, #36]	; 0x24
 8003d42:	f89a 3000 	ldrb.w	r3, [sl]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80a2 	beq.w	8003e90 <_svfiprintf_r+0x1c8>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d56:	f10a 0a01 	add.w	sl, sl, #1
 8003d5a:	9304      	str	r3, [sp, #16]
 8003d5c:	9307      	str	r3, [sp, #28]
 8003d5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d62:	931a      	str	r3, [sp, #104]	; 0x68
 8003d64:	4654      	mov	r4, sl
 8003d66:	2205      	movs	r2, #5
 8003d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d6c:	4851      	ldr	r0, [pc, #324]	; (8003eb4 <_svfiprintf_r+0x1ec>)
 8003d6e:	f7fc fa2f 	bl	80001d0 <memchr>
 8003d72:	9a04      	ldr	r2, [sp, #16]
 8003d74:	b9d8      	cbnz	r0, 8003dae <_svfiprintf_r+0xe6>
 8003d76:	06d0      	lsls	r0, r2, #27
 8003d78:	bf44      	itt	mi
 8003d7a:	2320      	movmi	r3, #32
 8003d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d80:	0711      	lsls	r1, r2, #28
 8003d82:	bf44      	itt	mi
 8003d84:	232b      	movmi	r3, #43	; 0x2b
 8003d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d90:	d015      	beq.n	8003dbe <_svfiprintf_r+0xf6>
 8003d92:	9a07      	ldr	r2, [sp, #28]
 8003d94:	4654      	mov	r4, sl
 8003d96:	2000      	movs	r0, #0
 8003d98:	f04f 0c0a 	mov.w	ip, #10
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003da2:	3b30      	subs	r3, #48	; 0x30
 8003da4:	2b09      	cmp	r3, #9
 8003da6:	d94e      	bls.n	8003e46 <_svfiprintf_r+0x17e>
 8003da8:	b1b0      	cbz	r0, 8003dd8 <_svfiprintf_r+0x110>
 8003daa:	9207      	str	r2, [sp, #28]
 8003dac:	e014      	b.n	8003dd8 <_svfiprintf_r+0x110>
 8003dae:	eba0 0308 	sub.w	r3, r0, r8
 8003db2:	fa09 f303 	lsl.w	r3, r9, r3
 8003db6:	4313      	orrs	r3, r2
 8003db8:	9304      	str	r3, [sp, #16]
 8003dba:	46a2      	mov	sl, r4
 8003dbc:	e7d2      	b.n	8003d64 <_svfiprintf_r+0x9c>
 8003dbe:	9b03      	ldr	r3, [sp, #12]
 8003dc0:	1d19      	adds	r1, r3, #4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	9103      	str	r1, [sp, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	bfbb      	ittet	lt
 8003dca:	425b      	neglt	r3, r3
 8003dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8003dd0:	9307      	strge	r3, [sp, #28]
 8003dd2:	9307      	strlt	r3, [sp, #28]
 8003dd4:	bfb8      	it	lt
 8003dd6:	9204      	strlt	r2, [sp, #16]
 8003dd8:	7823      	ldrb	r3, [r4, #0]
 8003dda:	2b2e      	cmp	r3, #46	; 0x2e
 8003ddc:	d10c      	bne.n	8003df8 <_svfiprintf_r+0x130>
 8003dde:	7863      	ldrb	r3, [r4, #1]
 8003de0:	2b2a      	cmp	r3, #42	; 0x2a
 8003de2:	d135      	bne.n	8003e50 <_svfiprintf_r+0x188>
 8003de4:	9b03      	ldr	r3, [sp, #12]
 8003de6:	1d1a      	adds	r2, r3, #4
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	9203      	str	r2, [sp, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bfb8      	it	lt
 8003df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003df4:	3402      	adds	r4, #2
 8003df6:	9305      	str	r3, [sp, #20]
 8003df8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ec4 <_svfiprintf_r+0x1fc>
 8003dfc:	7821      	ldrb	r1, [r4, #0]
 8003dfe:	2203      	movs	r2, #3
 8003e00:	4650      	mov	r0, sl
 8003e02:	f7fc f9e5 	bl	80001d0 <memchr>
 8003e06:	b140      	cbz	r0, 8003e1a <_svfiprintf_r+0x152>
 8003e08:	2340      	movs	r3, #64	; 0x40
 8003e0a:	eba0 000a 	sub.w	r0, r0, sl
 8003e0e:	fa03 f000 	lsl.w	r0, r3, r0
 8003e12:	9b04      	ldr	r3, [sp, #16]
 8003e14:	4303      	orrs	r3, r0
 8003e16:	3401      	adds	r4, #1
 8003e18:	9304      	str	r3, [sp, #16]
 8003e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e1e:	4826      	ldr	r0, [pc, #152]	; (8003eb8 <_svfiprintf_r+0x1f0>)
 8003e20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e24:	2206      	movs	r2, #6
 8003e26:	f7fc f9d3 	bl	80001d0 <memchr>
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	d038      	beq.n	8003ea0 <_svfiprintf_r+0x1d8>
 8003e2e:	4b23      	ldr	r3, [pc, #140]	; (8003ebc <_svfiprintf_r+0x1f4>)
 8003e30:	bb1b      	cbnz	r3, 8003e7a <_svfiprintf_r+0x1b2>
 8003e32:	9b03      	ldr	r3, [sp, #12]
 8003e34:	3307      	adds	r3, #7
 8003e36:	f023 0307 	bic.w	r3, r3, #7
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	9303      	str	r3, [sp, #12]
 8003e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e40:	4433      	add	r3, r6
 8003e42:	9309      	str	r3, [sp, #36]	; 0x24
 8003e44:	e767      	b.n	8003d16 <_svfiprintf_r+0x4e>
 8003e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e4a:	460c      	mov	r4, r1
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	e7a5      	b.n	8003d9c <_svfiprintf_r+0xd4>
 8003e50:	2300      	movs	r3, #0
 8003e52:	3401      	adds	r4, #1
 8003e54:	9305      	str	r3, [sp, #20]
 8003e56:	4619      	mov	r1, r3
 8003e58:	f04f 0c0a 	mov.w	ip, #10
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e62:	3a30      	subs	r2, #48	; 0x30
 8003e64:	2a09      	cmp	r2, #9
 8003e66:	d903      	bls.n	8003e70 <_svfiprintf_r+0x1a8>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0c5      	beq.n	8003df8 <_svfiprintf_r+0x130>
 8003e6c:	9105      	str	r1, [sp, #20]
 8003e6e:	e7c3      	b.n	8003df8 <_svfiprintf_r+0x130>
 8003e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e74:	4604      	mov	r4, r0
 8003e76:	2301      	movs	r3, #1
 8003e78:	e7f0      	b.n	8003e5c <_svfiprintf_r+0x194>
 8003e7a:	ab03      	add	r3, sp, #12
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	462a      	mov	r2, r5
 8003e80:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <_svfiprintf_r+0x1f8>)
 8003e82:	a904      	add	r1, sp, #16
 8003e84:	4638      	mov	r0, r7
 8003e86:	f3af 8000 	nop.w
 8003e8a:	1c42      	adds	r2, r0, #1
 8003e8c:	4606      	mov	r6, r0
 8003e8e:	d1d6      	bne.n	8003e3e <_svfiprintf_r+0x176>
 8003e90:	89ab      	ldrh	r3, [r5, #12]
 8003e92:	065b      	lsls	r3, r3, #25
 8003e94:	f53f af2c 	bmi.w	8003cf0 <_svfiprintf_r+0x28>
 8003e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e9a:	b01d      	add	sp, #116	; 0x74
 8003e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ea0:	ab03      	add	r3, sp, #12
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	462a      	mov	r2, r5
 8003ea6:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <_svfiprintf_r+0x1f8>)
 8003ea8:	a904      	add	r1, sp, #16
 8003eaa:	4638      	mov	r0, r7
 8003eac:	f000 f87a 	bl	8003fa4 <_printf_i>
 8003eb0:	e7eb      	b.n	8003e8a <_svfiprintf_r+0x1c2>
 8003eb2:	bf00      	nop
 8003eb4:	08004468 	.word	0x08004468
 8003eb8:	08004472 	.word	0x08004472
 8003ebc:	00000000 	.word	0x00000000
 8003ec0:	08003c11 	.word	0x08003c11
 8003ec4:	0800446e 	.word	0x0800446e

08003ec8 <_printf_common>:
 8003ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ecc:	4616      	mov	r6, r2
 8003ece:	4699      	mov	r9, r3
 8003ed0:	688a      	ldr	r2, [r1, #8]
 8003ed2:	690b      	ldr	r3, [r1, #16]
 8003ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	bfb8      	it	lt
 8003edc:	4613      	movlt	r3, r2
 8003ede:	6033      	str	r3, [r6, #0]
 8003ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ee4:	4607      	mov	r7, r0
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	b10a      	cbz	r2, 8003eee <_printf_common+0x26>
 8003eea:	3301      	adds	r3, #1
 8003eec:	6033      	str	r3, [r6, #0]
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	0699      	lsls	r1, r3, #26
 8003ef2:	bf42      	ittt	mi
 8003ef4:	6833      	ldrmi	r3, [r6, #0]
 8003ef6:	3302      	addmi	r3, #2
 8003ef8:	6033      	strmi	r3, [r6, #0]
 8003efa:	6825      	ldr	r5, [r4, #0]
 8003efc:	f015 0506 	ands.w	r5, r5, #6
 8003f00:	d106      	bne.n	8003f10 <_printf_common+0x48>
 8003f02:	f104 0a19 	add.w	sl, r4, #25
 8003f06:	68e3      	ldr	r3, [r4, #12]
 8003f08:	6832      	ldr	r2, [r6, #0]
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	42ab      	cmp	r3, r5
 8003f0e:	dc26      	bgt.n	8003f5e <_printf_common+0x96>
 8003f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f14:	1e13      	subs	r3, r2, #0
 8003f16:	6822      	ldr	r2, [r4, #0]
 8003f18:	bf18      	it	ne
 8003f1a:	2301      	movne	r3, #1
 8003f1c:	0692      	lsls	r2, r2, #26
 8003f1e:	d42b      	bmi.n	8003f78 <_printf_common+0xb0>
 8003f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f24:	4649      	mov	r1, r9
 8003f26:	4638      	mov	r0, r7
 8003f28:	47c0      	blx	r8
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	d01e      	beq.n	8003f6c <_printf_common+0xa4>
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	68e5      	ldr	r5, [r4, #12]
 8003f32:	6832      	ldr	r2, [r6, #0]
 8003f34:	f003 0306 	and.w	r3, r3, #6
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	bf08      	it	eq
 8003f3c:	1aad      	subeq	r5, r5, r2
 8003f3e:	68a3      	ldr	r3, [r4, #8]
 8003f40:	6922      	ldr	r2, [r4, #16]
 8003f42:	bf0c      	ite	eq
 8003f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f48:	2500      	movne	r5, #0
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	bfc4      	itt	gt
 8003f4e:	1a9b      	subgt	r3, r3, r2
 8003f50:	18ed      	addgt	r5, r5, r3
 8003f52:	2600      	movs	r6, #0
 8003f54:	341a      	adds	r4, #26
 8003f56:	42b5      	cmp	r5, r6
 8003f58:	d11a      	bne.n	8003f90 <_printf_common+0xc8>
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	e008      	b.n	8003f70 <_printf_common+0xa8>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	4652      	mov	r2, sl
 8003f62:	4649      	mov	r1, r9
 8003f64:	4638      	mov	r0, r7
 8003f66:	47c0      	blx	r8
 8003f68:	3001      	adds	r0, #1
 8003f6a:	d103      	bne.n	8003f74 <_printf_common+0xac>
 8003f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f74:	3501      	adds	r5, #1
 8003f76:	e7c6      	b.n	8003f06 <_printf_common+0x3e>
 8003f78:	18e1      	adds	r1, r4, r3
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	2030      	movs	r0, #48	; 0x30
 8003f7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f82:	4422      	add	r2, r4
 8003f84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	e7c7      	b.n	8003f20 <_printf_common+0x58>
 8003f90:	2301      	movs	r3, #1
 8003f92:	4622      	mov	r2, r4
 8003f94:	4649      	mov	r1, r9
 8003f96:	4638      	mov	r0, r7
 8003f98:	47c0      	blx	r8
 8003f9a:	3001      	adds	r0, #1
 8003f9c:	d0e6      	beq.n	8003f6c <_printf_common+0xa4>
 8003f9e:	3601      	adds	r6, #1
 8003fa0:	e7d9      	b.n	8003f56 <_printf_common+0x8e>
	...

08003fa4 <_printf_i>:
 8003fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa8:	460c      	mov	r4, r1
 8003faa:	4691      	mov	r9, r2
 8003fac:	7e27      	ldrb	r7, [r4, #24]
 8003fae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fb0:	2f78      	cmp	r7, #120	; 0x78
 8003fb2:	4680      	mov	r8, r0
 8003fb4:	469a      	mov	sl, r3
 8003fb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fba:	d807      	bhi.n	8003fcc <_printf_i+0x28>
 8003fbc:	2f62      	cmp	r7, #98	; 0x62
 8003fbe:	d80a      	bhi.n	8003fd6 <_printf_i+0x32>
 8003fc0:	2f00      	cmp	r7, #0
 8003fc2:	f000 80d8 	beq.w	8004176 <_printf_i+0x1d2>
 8003fc6:	2f58      	cmp	r7, #88	; 0x58
 8003fc8:	f000 80a3 	beq.w	8004112 <_printf_i+0x16e>
 8003fcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fd4:	e03a      	b.n	800404c <_printf_i+0xa8>
 8003fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fda:	2b15      	cmp	r3, #21
 8003fdc:	d8f6      	bhi.n	8003fcc <_printf_i+0x28>
 8003fde:	a001      	add	r0, pc, #4	; (adr r0, 8003fe4 <_printf_i+0x40>)
 8003fe0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003fe4:	0800403d 	.word	0x0800403d
 8003fe8:	08004051 	.word	0x08004051
 8003fec:	08003fcd 	.word	0x08003fcd
 8003ff0:	08003fcd 	.word	0x08003fcd
 8003ff4:	08003fcd 	.word	0x08003fcd
 8003ff8:	08003fcd 	.word	0x08003fcd
 8003ffc:	08004051 	.word	0x08004051
 8004000:	08003fcd 	.word	0x08003fcd
 8004004:	08003fcd 	.word	0x08003fcd
 8004008:	08003fcd 	.word	0x08003fcd
 800400c:	08003fcd 	.word	0x08003fcd
 8004010:	0800415d 	.word	0x0800415d
 8004014:	08004081 	.word	0x08004081
 8004018:	0800413f 	.word	0x0800413f
 800401c:	08003fcd 	.word	0x08003fcd
 8004020:	08003fcd 	.word	0x08003fcd
 8004024:	0800417f 	.word	0x0800417f
 8004028:	08003fcd 	.word	0x08003fcd
 800402c:	08004081 	.word	0x08004081
 8004030:	08003fcd 	.word	0x08003fcd
 8004034:	08003fcd 	.word	0x08003fcd
 8004038:	08004147 	.word	0x08004147
 800403c:	680b      	ldr	r3, [r1, #0]
 800403e:	1d1a      	adds	r2, r3, #4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	600a      	str	r2, [r1, #0]
 8004044:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800404c:	2301      	movs	r3, #1
 800404e:	e0a3      	b.n	8004198 <_printf_i+0x1f4>
 8004050:	6825      	ldr	r5, [r4, #0]
 8004052:	6808      	ldr	r0, [r1, #0]
 8004054:	062e      	lsls	r6, r5, #24
 8004056:	f100 0304 	add.w	r3, r0, #4
 800405a:	d50a      	bpl.n	8004072 <_printf_i+0xce>
 800405c:	6805      	ldr	r5, [r0, #0]
 800405e:	600b      	str	r3, [r1, #0]
 8004060:	2d00      	cmp	r5, #0
 8004062:	da03      	bge.n	800406c <_printf_i+0xc8>
 8004064:	232d      	movs	r3, #45	; 0x2d
 8004066:	426d      	negs	r5, r5
 8004068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800406c:	485e      	ldr	r0, [pc, #376]	; (80041e8 <_printf_i+0x244>)
 800406e:	230a      	movs	r3, #10
 8004070:	e019      	b.n	80040a6 <_printf_i+0x102>
 8004072:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004076:	6805      	ldr	r5, [r0, #0]
 8004078:	600b      	str	r3, [r1, #0]
 800407a:	bf18      	it	ne
 800407c:	b22d      	sxthne	r5, r5
 800407e:	e7ef      	b.n	8004060 <_printf_i+0xbc>
 8004080:	680b      	ldr	r3, [r1, #0]
 8004082:	6825      	ldr	r5, [r4, #0]
 8004084:	1d18      	adds	r0, r3, #4
 8004086:	6008      	str	r0, [r1, #0]
 8004088:	0628      	lsls	r0, r5, #24
 800408a:	d501      	bpl.n	8004090 <_printf_i+0xec>
 800408c:	681d      	ldr	r5, [r3, #0]
 800408e:	e002      	b.n	8004096 <_printf_i+0xf2>
 8004090:	0669      	lsls	r1, r5, #25
 8004092:	d5fb      	bpl.n	800408c <_printf_i+0xe8>
 8004094:	881d      	ldrh	r5, [r3, #0]
 8004096:	4854      	ldr	r0, [pc, #336]	; (80041e8 <_printf_i+0x244>)
 8004098:	2f6f      	cmp	r7, #111	; 0x6f
 800409a:	bf0c      	ite	eq
 800409c:	2308      	moveq	r3, #8
 800409e:	230a      	movne	r3, #10
 80040a0:	2100      	movs	r1, #0
 80040a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040a6:	6866      	ldr	r6, [r4, #4]
 80040a8:	60a6      	str	r6, [r4, #8]
 80040aa:	2e00      	cmp	r6, #0
 80040ac:	bfa2      	ittt	ge
 80040ae:	6821      	ldrge	r1, [r4, #0]
 80040b0:	f021 0104 	bicge.w	r1, r1, #4
 80040b4:	6021      	strge	r1, [r4, #0]
 80040b6:	b90d      	cbnz	r5, 80040bc <_printf_i+0x118>
 80040b8:	2e00      	cmp	r6, #0
 80040ba:	d04d      	beq.n	8004158 <_printf_i+0x1b4>
 80040bc:	4616      	mov	r6, r2
 80040be:	fbb5 f1f3 	udiv	r1, r5, r3
 80040c2:	fb03 5711 	mls	r7, r3, r1, r5
 80040c6:	5dc7      	ldrb	r7, [r0, r7]
 80040c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040cc:	462f      	mov	r7, r5
 80040ce:	42bb      	cmp	r3, r7
 80040d0:	460d      	mov	r5, r1
 80040d2:	d9f4      	bls.n	80040be <_printf_i+0x11a>
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d10b      	bne.n	80040f0 <_printf_i+0x14c>
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	07df      	lsls	r7, r3, #31
 80040dc:	d508      	bpl.n	80040f0 <_printf_i+0x14c>
 80040de:	6923      	ldr	r3, [r4, #16]
 80040e0:	6861      	ldr	r1, [r4, #4]
 80040e2:	4299      	cmp	r1, r3
 80040e4:	bfde      	ittt	le
 80040e6:	2330      	movle	r3, #48	; 0x30
 80040e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040f0:	1b92      	subs	r2, r2, r6
 80040f2:	6122      	str	r2, [r4, #16]
 80040f4:	f8cd a000 	str.w	sl, [sp]
 80040f8:	464b      	mov	r3, r9
 80040fa:	aa03      	add	r2, sp, #12
 80040fc:	4621      	mov	r1, r4
 80040fe:	4640      	mov	r0, r8
 8004100:	f7ff fee2 	bl	8003ec8 <_printf_common>
 8004104:	3001      	adds	r0, #1
 8004106:	d14c      	bne.n	80041a2 <_printf_i+0x1fe>
 8004108:	f04f 30ff 	mov.w	r0, #4294967295
 800410c:	b004      	add	sp, #16
 800410e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004112:	4835      	ldr	r0, [pc, #212]	; (80041e8 <_printf_i+0x244>)
 8004114:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	680e      	ldr	r6, [r1, #0]
 800411c:	061f      	lsls	r7, r3, #24
 800411e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004122:	600e      	str	r6, [r1, #0]
 8004124:	d514      	bpl.n	8004150 <_printf_i+0x1ac>
 8004126:	07d9      	lsls	r1, r3, #31
 8004128:	bf44      	itt	mi
 800412a:	f043 0320 	orrmi.w	r3, r3, #32
 800412e:	6023      	strmi	r3, [r4, #0]
 8004130:	b91d      	cbnz	r5, 800413a <_printf_i+0x196>
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	f023 0320 	bic.w	r3, r3, #32
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	2310      	movs	r3, #16
 800413c:	e7b0      	b.n	80040a0 <_printf_i+0xfc>
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	f043 0320 	orr.w	r3, r3, #32
 8004144:	6023      	str	r3, [r4, #0]
 8004146:	2378      	movs	r3, #120	; 0x78
 8004148:	4828      	ldr	r0, [pc, #160]	; (80041ec <_printf_i+0x248>)
 800414a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800414e:	e7e3      	b.n	8004118 <_printf_i+0x174>
 8004150:	065e      	lsls	r6, r3, #25
 8004152:	bf48      	it	mi
 8004154:	b2ad      	uxthmi	r5, r5
 8004156:	e7e6      	b.n	8004126 <_printf_i+0x182>
 8004158:	4616      	mov	r6, r2
 800415a:	e7bb      	b.n	80040d4 <_printf_i+0x130>
 800415c:	680b      	ldr	r3, [r1, #0]
 800415e:	6826      	ldr	r6, [r4, #0]
 8004160:	6960      	ldr	r0, [r4, #20]
 8004162:	1d1d      	adds	r5, r3, #4
 8004164:	600d      	str	r5, [r1, #0]
 8004166:	0635      	lsls	r5, r6, #24
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	d501      	bpl.n	8004170 <_printf_i+0x1cc>
 800416c:	6018      	str	r0, [r3, #0]
 800416e:	e002      	b.n	8004176 <_printf_i+0x1d2>
 8004170:	0671      	lsls	r1, r6, #25
 8004172:	d5fb      	bpl.n	800416c <_printf_i+0x1c8>
 8004174:	8018      	strh	r0, [r3, #0]
 8004176:	2300      	movs	r3, #0
 8004178:	6123      	str	r3, [r4, #16]
 800417a:	4616      	mov	r6, r2
 800417c:	e7ba      	b.n	80040f4 <_printf_i+0x150>
 800417e:	680b      	ldr	r3, [r1, #0]
 8004180:	1d1a      	adds	r2, r3, #4
 8004182:	600a      	str	r2, [r1, #0]
 8004184:	681e      	ldr	r6, [r3, #0]
 8004186:	6862      	ldr	r2, [r4, #4]
 8004188:	2100      	movs	r1, #0
 800418a:	4630      	mov	r0, r6
 800418c:	f7fc f820 	bl	80001d0 <memchr>
 8004190:	b108      	cbz	r0, 8004196 <_printf_i+0x1f2>
 8004192:	1b80      	subs	r0, r0, r6
 8004194:	6060      	str	r0, [r4, #4]
 8004196:	6863      	ldr	r3, [r4, #4]
 8004198:	6123      	str	r3, [r4, #16]
 800419a:	2300      	movs	r3, #0
 800419c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041a0:	e7a8      	b.n	80040f4 <_printf_i+0x150>
 80041a2:	6923      	ldr	r3, [r4, #16]
 80041a4:	4632      	mov	r2, r6
 80041a6:	4649      	mov	r1, r9
 80041a8:	4640      	mov	r0, r8
 80041aa:	47d0      	blx	sl
 80041ac:	3001      	adds	r0, #1
 80041ae:	d0ab      	beq.n	8004108 <_printf_i+0x164>
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	079b      	lsls	r3, r3, #30
 80041b4:	d413      	bmi.n	80041de <_printf_i+0x23a>
 80041b6:	68e0      	ldr	r0, [r4, #12]
 80041b8:	9b03      	ldr	r3, [sp, #12]
 80041ba:	4298      	cmp	r0, r3
 80041bc:	bfb8      	it	lt
 80041be:	4618      	movlt	r0, r3
 80041c0:	e7a4      	b.n	800410c <_printf_i+0x168>
 80041c2:	2301      	movs	r3, #1
 80041c4:	4632      	mov	r2, r6
 80041c6:	4649      	mov	r1, r9
 80041c8:	4640      	mov	r0, r8
 80041ca:	47d0      	blx	sl
 80041cc:	3001      	adds	r0, #1
 80041ce:	d09b      	beq.n	8004108 <_printf_i+0x164>
 80041d0:	3501      	adds	r5, #1
 80041d2:	68e3      	ldr	r3, [r4, #12]
 80041d4:	9903      	ldr	r1, [sp, #12]
 80041d6:	1a5b      	subs	r3, r3, r1
 80041d8:	42ab      	cmp	r3, r5
 80041da:	dcf2      	bgt.n	80041c2 <_printf_i+0x21e>
 80041dc:	e7eb      	b.n	80041b6 <_printf_i+0x212>
 80041de:	2500      	movs	r5, #0
 80041e0:	f104 0619 	add.w	r6, r4, #25
 80041e4:	e7f5      	b.n	80041d2 <_printf_i+0x22e>
 80041e6:	bf00      	nop
 80041e8:	08004479 	.word	0x08004479
 80041ec:	0800448a 	.word	0x0800448a

080041f0 <memcpy>:
 80041f0:	440a      	add	r2, r1
 80041f2:	4291      	cmp	r1, r2
 80041f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80041f8:	d100      	bne.n	80041fc <memcpy+0xc>
 80041fa:	4770      	bx	lr
 80041fc:	b510      	push	{r4, lr}
 80041fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004202:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004206:	4291      	cmp	r1, r2
 8004208:	d1f9      	bne.n	80041fe <memcpy+0xe>
 800420a:	bd10      	pop	{r4, pc}

0800420c <memmove>:
 800420c:	4288      	cmp	r0, r1
 800420e:	b510      	push	{r4, lr}
 8004210:	eb01 0402 	add.w	r4, r1, r2
 8004214:	d902      	bls.n	800421c <memmove+0x10>
 8004216:	4284      	cmp	r4, r0
 8004218:	4623      	mov	r3, r4
 800421a:	d807      	bhi.n	800422c <memmove+0x20>
 800421c:	1e43      	subs	r3, r0, #1
 800421e:	42a1      	cmp	r1, r4
 8004220:	d008      	beq.n	8004234 <memmove+0x28>
 8004222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004226:	f803 2f01 	strb.w	r2, [r3, #1]!
 800422a:	e7f8      	b.n	800421e <memmove+0x12>
 800422c:	4402      	add	r2, r0
 800422e:	4601      	mov	r1, r0
 8004230:	428a      	cmp	r2, r1
 8004232:	d100      	bne.n	8004236 <memmove+0x2a>
 8004234:	bd10      	pop	{r4, pc}
 8004236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800423a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800423e:	e7f7      	b.n	8004230 <memmove+0x24>

08004240 <_free_r>:
 8004240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004242:	2900      	cmp	r1, #0
 8004244:	d048      	beq.n	80042d8 <_free_r+0x98>
 8004246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800424a:	9001      	str	r0, [sp, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	f1a1 0404 	sub.w	r4, r1, #4
 8004252:	bfb8      	it	lt
 8004254:	18e4      	addlt	r4, r4, r3
 8004256:	f000 f8d3 	bl	8004400 <__malloc_lock>
 800425a:	4a20      	ldr	r2, [pc, #128]	; (80042dc <_free_r+0x9c>)
 800425c:	9801      	ldr	r0, [sp, #4]
 800425e:	6813      	ldr	r3, [r2, #0]
 8004260:	4615      	mov	r5, r2
 8004262:	b933      	cbnz	r3, 8004272 <_free_r+0x32>
 8004264:	6063      	str	r3, [r4, #4]
 8004266:	6014      	str	r4, [r2, #0]
 8004268:	b003      	add	sp, #12
 800426a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800426e:	f000 b8cd 	b.w	800440c <__malloc_unlock>
 8004272:	42a3      	cmp	r3, r4
 8004274:	d90b      	bls.n	800428e <_free_r+0x4e>
 8004276:	6821      	ldr	r1, [r4, #0]
 8004278:	1862      	adds	r2, r4, r1
 800427a:	4293      	cmp	r3, r2
 800427c:	bf04      	itt	eq
 800427e:	681a      	ldreq	r2, [r3, #0]
 8004280:	685b      	ldreq	r3, [r3, #4]
 8004282:	6063      	str	r3, [r4, #4]
 8004284:	bf04      	itt	eq
 8004286:	1852      	addeq	r2, r2, r1
 8004288:	6022      	streq	r2, [r4, #0]
 800428a:	602c      	str	r4, [r5, #0]
 800428c:	e7ec      	b.n	8004268 <_free_r+0x28>
 800428e:	461a      	mov	r2, r3
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	b10b      	cbz	r3, 8004298 <_free_r+0x58>
 8004294:	42a3      	cmp	r3, r4
 8004296:	d9fa      	bls.n	800428e <_free_r+0x4e>
 8004298:	6811      	ldr	r1, [r2, #0]
 800429a:	1855      	adds	r5, r2, r1
 800429c:	42a5      	cmp	r5, r4
 800429e:	d10b      	bne.n	80042b8 <_free_r+0x78>
 80042a0:	6824      	ldr	r4, [r4, #0]
 80042a2:	4421      	add	r1, r4
 80042a4:	1854      	adds	r4, r2, r1
 80042a6:	42a3      	cmp	r3, r4
 80042a8:	6011      	str	r1, [r2, #0]
 80042aa:	d1dd      	bne.n	8004268 <_free_r+0x28>
 80042ac:	681c      	ldr	r4, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	6053      	str	r3, [r2, #4]
 80042b2:	4421      	add	r1, r4
 80042b4:	6011      	str	r1, [r2, #0]
 80042b6:	e7d7      	b.n	8004268 <_free_r+0x28>
 80042b8:	d902      	bls.n	80042c0 <_free_r+0x80>
 80042ba:	230c      	movs	r3, #12
 80042bc:	6003      	str	r3, [r0, #0]
 80042be:	e7d3      	b.n	8004268 <_free_r+0x28>
 80042c0:	6825      	ldr	r5, [r4, #0]
 80042c2:	1961      	adds	r1, r4, r5
 80042c4:	428b      	cmp	r3, r1
 80042c6:	bf04      	itt	eq
 80042c8:	6819      	ldreq	r1, [r3, #0]
 80042ca:	685b      	ldreq	r3, [r3, #4]
 80042cc:	6063      	str	r3, [r4, #4]
 80042ce:	bf04      	itt	eq
 80042d0:	1949      	addeq	r1, r1, r5
 80042d2:	6021      	streq	r1, [r4, #0]
 80042d4:	6054      	str	r4, [r2, #4]
 80042d6:	e7c7      	b.n	8004268 <_free_r+0x28>
 80042d8:	b003      	add	sp, #12
 80042da:	bd30      	pop	{r4, r5, pc}
 80042dc:	20000090 	.word	0x20000090

080042e0 <_malloc_r>:
 80042e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e2:	1ccd      	adds	r5, r1, #3
 80042e4:	f025 0503 	bic.w	r5, r5, #3
 80042e8:	3508      	adds	r5, #8
 80042ea:	2d0c      	cmp	r5, #12
 80042ec:	bf38      	it	cc
 80042ee:	250c      	movcc	r5, #12
 80042f0:	2d00      	cmp	r5, #0
 80042f2:	4606      	mov	r6, r0
 80042f4:	db01      	blt.n	80042fa <_malloc_r+0x1a>
 80042f6:	42a9      	cmp	r1, r5
 80042f8:	d903      	bls.n	8004302 <_malloc_r+0x22>
 80042fa:	230c      	movs	r3, #12
 80042fc:	6033      	str	r3, [r6, #0]
 80042fe:	2000      	movs	r0, #0
 8004300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004302:	f000 f87d 	bl	8004400 <__malloc_lock>
 8004306:	4921      	ldr	r1, [pc, #132]	; (800438c <_malloc_r+0xac>)
 8004308:	680a      	ldr	r2, [r1, #0]
 800430a:	4614      	mov	r4, r2
 800430c:	b99c      	cbnz	r4, 8004336 <_malloc_r+0x56>
 800430e:	4f20      	ldr	r7, [pc, #128]	; (8004390 <_malloc_r+0xb0>)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	b923      	cbnz	r3, 800431e <_malloc_r+0x3e>
 8004314:	4621      	mov	r1, r4
 8004316:	4630      	mov	r0, r6
 8004318:	f000 f862 	bl	80043e0 <_sbrk_r>
 800431c:	6038      	str	r0, [r7, #0]
 800431e:	4629      	mov	r1, r5
 8004320:	4630      	mov	r0, r6
 8004322:	f000 f85d 	bl	80043e0 <_sbrk_r>
 8004326:	1c43      	adds	r3, r0, #1
 8004328:	d123      	bne.n	8004372 <_malloc_r+0x92>
 800432a:	230c      	movs	r3, #12
 800432c:	6033      	str	r3, [r6, #0]
 800432e:	4630      	mov	r0, r6
 8004330:	f000 f86c 	bl	800440c <__malloc_unlock>
 8004334:	e7e3      	b.n	80042fe <_malloc_r+0x1e>
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	1b5b      	subs	r3, r3, r5
 800433a:	d417      	bmi.n	800436c <_malloc_r+0x8c>
 800433c:	2b0b      	cmp	r3, #11
 800433e:	d903      	bls.n	8004348 <_malloc_r+0x68>
 8004340:	6023      	str	r3, [r4, #0]
 8004342:	441c      	add	r4, r3
 8004344:	6025      	str	r5, [r4, #0]
 8004346:	e004      	b.n	8004352 <_malloc_r+0x72>
 8004348:	6863      	ldr	r3, [r4, #4]
 800434a:	42a2      	cmp	r2, r4
 800434c:	bf0c      	ite	eq
 800434e:	600b      	streq	r3, [r1, #0]
 8004350:	6053      	strne	r3, [r2, #4]
 8004352:	4630      	mov	r0, r6
 8004354:	f000 f85a 	bl	800440c <__malloc_unlock>
 8004358:	f104 000b 	add.w	r0, r4, #11
 800435c:	1d23      	adds	r3, r4, #4
 800435e:	f020 0007 	bic.w	r0, r0, #7
 8004362:	1ac2      	subs	r2, r0, r3
 8004364:	d0cc      	beq.n	8004300 <_malloc_r+0x20>
 8004366:	1a1b      	subs	r3, r3, r0
 8004368:	50a3      	str	r3, [r4, r2]
 800436a:	e7c9      	b.n	8004300 <_malloc_r+0x20>
 800436c:	4622      	mov	r2, r4
 800436e:	6864      	ldr	r4, [r4, #4]
 8004370:	e7cc      	b.n	800430c <_malloc_r+0x2c>
 8004372:	1cc4      	adds	r4, r0, #3
 8004374:	f024 0403 	bic.w	r4, r4, #3
 8004378:	42a0      	cmp	r0, r4
 800437a:	d0e3      	beq.n	8004344 <_malloc_r+0x64>
 800437c:	1a21      	subs	r1, r4, r0
 800437e:	4630      	mov	r0, r6
 8004380:	f000 f82e 	bl	80043e0 <_sbrk_r>
 8004384:	3001      	adds	r0, #1
 8004386:	d1dd      	bne.n	8004344 <_malloc_r+0x64>
 8004388:	e7cf      	b.n	800432a <_malloc_r+0x4a>
 800438a:	bf00      	nop
 800438c:	20000090 	.word	0x20000090
 8004390:	20000094 	.word	0x20000094

08004394 <_realloc_r>:
 8004394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004396:	4607      	mov	r7, r0
 8004398:	4614      	mov	r4, r2
 800439a:	460e      	mov	r6, r1
 800439c:	b921      	cbnz	r1, 80043a8 <_realloc_r+0x14>
 800439e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043a2:	4611      	mov	r1, r2
 80043a4:	f7ff bf9c 	b.w	80042e0 <_malloc_r>
 80043a8:	b922      	cbnz	r2, 80043b4 <_realloc_r+0x20>
 80043aa:	f7ff ff49 	bl	8004240 <_free_r>
 80043ae:	4625      	mov	r5, r4
 80043b0:	4628      	mov	r0, r5
 80043b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043b4:	f000 f830 	bl	8004418 <_malloc_usable_size_r>
 80043b8:	42a0      	cmp	r0, r4
 80043ba:	d20f      	bcs.n	80043dc <_realloc_r+0x48>
 80043bc:	4621      	mov	r1, r4
 80043be:	4638      	mov	r0, r7
 80043c0:	f7ff ff8e 	bl	80042e0 <_malloc_r>
 80043c4:	4605      	mov	r5, r0
 80043c6:	2800      	cmp	r0, #0
 80043c8:	d0f2      	beq.n	80043b0 <_realloc_r+0x1c>
 80043ca:	4631      	mov	r1, r6
 80043cc:	4622      	mov	r2, r4
 80043ce:	f7ff ff0f 	bl	80041f0 <memcpy>
 80043d2:	4631      	mov	r1, r6
 80043d4:	4638      	mov	r0, r7
 80043d6:	f7ff ff33 	bl	8004240 <_free_r>
 80043da:	e7e9      	b.n	80043b0 <_realloc_r+0x1c>
 80043dc:	4635      	mov	r5, r6
 80043de:	e7e7      	b.n	80043b0 <_realloc_r+0x1c>

080043e0 <_sbrk_r>:
 80043e0:	b538      	push	{r3, r4, r5, lr}
 80043e2:	4d06      	ldr	r5, [pc, #24]	; (80043fc <_sbrk_r+0x1c>)
 80043e4:	2300      	movs	r3, #0
 80043e6:	4604      	mov	r4, r0
 80043e8:	4608      	mov	r0, r1
 80043ea:	602b      	str	r3, [r5, #0]
 80043ec:	f7fc fc46 	bl	8000c7c <_sbrk>
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	d102      	bne.n	80043fa <_sbrk_r+0x1a>
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	b103      	cbz	r3, 80043fa <_sbrk_r+0x1a>
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	bd38      	pop	{r3, r4, r5, pc}
 80043fc:	200001b8 	.word	0x200001b8

08004400 <__malloc_lock>:
 8004400:	4801      	ldr	r0, [pc, #4]	; (8004408 <__malloc_lock+0x8>)
 8004402:	f000 b811 	b.w	8004428 <__retarget_lock_acquire_recursive>
 8004406:	bf00      	nop
 8004408:	200001c0 	.word	0x200001c0

0800440c <__malloc_unlock>:
 800440c:	4801      	ldr	r0, [pc, #4]	; (8004414 <__malloc_unlock+0x8>)
 800440e:	f000 b80c 	b.w	800442a <__retarget_lock_release_recursive>
 8004412:	bf00      	nop
 8004414:	200001c0 	.word	0x200001c0

08004418 <_malloc_usable_size_r>:
 8004418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800441c:	1f18      	subs	r0, r3, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	bfbc      	itt	lt
 8004422:	580b      	ldrlt	r3, [r1, r0]
 8004424:	18c0      	addlt	r0, r0, r3
 8004426:	4770      	bx	lr

08004428 <__retarget_lock_acquire_recursive>:
 8004428:	4770      	bx	lr

0800442a <__retarget_lock_release_recursive>:
 800442a:	4770      	bx	lr

0800442c <_init>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr

08004438 <_fini>:
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443a:	bf00      	nop
 800443c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443e:	bc08      	pop	{r3}
 8004440:	469e      	mov	lr, r3
 8004442:	4770      	bx	lr
