
demo01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08003010  08003010  00013010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003210  08003210  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003210  08003210  00013210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003218  08003218  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003218  08003218  00013218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800321c  0800321c  0001321c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  08003290  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08003290  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009012  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001503  00000000  00000000  000290b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  0002a5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e0  00000000  00000000  0002ac10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020161  00000000  00000000  0002b1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007d9c  00000000  00000000  0004b351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2ab1  00000000  00000000  000530ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00115b9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f84  00000000  00000000  00115bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002ff8 	.word	0x08002ff8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002ff8 	.word	0x08002ff8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <UartReceive>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UartReceive(char str[])
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	char ch;
	int i =0;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]

	do
	{
		HAL_UART_Receive(&huart2,(uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000584:	f107 010b 	add.w	r1, r7, #11
 8000588:	f04f 33ff 	mov.w	r3, #4294967295
 800058c:	2201      	movs	r2, #1
 800058e:	480f      	ldr	r0, [pc, #60]	; (80005cc <UartReceive+0x54>)
 8000590:	f001 fc5f 	bl	8001e52 <HAL_UART_Receive>
		str[i] = ch;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	7afa      	ldrb	r2, [r7, #11]
 800059c:	701a      	strb	r2, [r3, #0]
		i++;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3301      	adds	r3, #1
 80005a2:	60fb      	str	r3, [r7, #12]

	}while(ch != '\r');
 80005a4:	7afb      	ldrb	r3, [r7, #11]
 80005a6:	2b0d      	cmp	r3, #13
 80005a8:	d1ec      	bne.n	8000584 <UartReceive+0xc>
	str[i] = '\n';
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	4413      	add	r3, r2
 80005b0:	220a      	movs	r2, #10
 80005b2:	701a      	strb	r2, [r3, #0]
	i++;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	3301      	adds	r3, #1
 80005b8:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4413      	add	r3, r2
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]

}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000009c 	.word	0x2000009c

080005d0 <pattern1>:

void pattern1(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	do{
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d8:	4819      	ldr	r0, [pc, #100]	; (8000640 <pattern1+0x70>)
 80005da:	f000 feb4 	bl	8001346 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e2:	4817      	ldr	r0, [pc, #92]	; (8000640 <pattern1+0x70>)
 80005e4:	f000 feaf 	bl	8001346 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80005e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ec:	4814      	ldr	r0, [pc, #80]	; (8000640 <pattern1+0x70>)
 80005ee:	f000 feaa 	bl	8001346 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80005f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f6:	4812      	ldr	r0, [pc, #72]	; (8000640 <pattern1+0x70>)
 80005f8:	f000 fea5 	bl	8001346 <HAL_GPIO_TogglePin>

	HAL_Delay(1000);
 80005fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000600:	f000 fbb6 	bl	8000d70 <HAL_Delay>
	}while(switch_flag !=1);
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <pattern1+0x74>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d1e3      	bne.n	80005d4 <pattern1+0x4>

	//switch_flag =0;
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <pattern1+0x70>)
 8000614:	f000 fe7e 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061e:	4808      	ldr	r0, [pc, #32]	; (8000640 <pattern1+0x70>)
 8000620:	f000 fe78 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <pattern1+0x70>)
 800062c:	f000 fe72 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000636:	4802      	ldr	r0, [pc, #8]	; (8000640 <pattern1+0x70>)
 8000638:	f000 fe6c 	bl	8001314 <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40020c00 	.word	0x40020c00
 8000644:	2000008c 	.word	0x2000008c

08000648 <pattern2>:

void pattern2(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	do{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000652:	4822      	ldr	r0, [pc, #136]	; (80006dc <pattern2+0x94>)
 8000654:	f000 fe5e 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065c:	f000 fb88 	bl	8000d70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000666:	481d      	ldr	r0, [pc, #116]	; (80006dc <pattern2+0x94>)
 8000668:	f000 fe54 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000672:	481a      	ldr	r0, [pc, #104]	; (80006dc <pattern2+0x94>)
 8000674:	f000 fe4e 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067c:	f000 fb78 	bl	8000d70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000686:	4815      	ldr	r0, [pc, #84]	; (80006dc <pattern2+0x94>)
 8000688:	f000 fe44 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000692:	4812      	ldr	r0, [pc, #72]	; (80006dc <pattern2+0x94>)
 8000694:	f000 fe3e 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000698:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800069c:	f000 fb68 	bl	8000d70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a6:	480d      	ldr	r0, [pc, #52]	; (80006dc <pattern2+0x94>)
 80006a8:	f000 fe34 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b2:	480a      	ldr	r0, [pc, #40]	; (80006dc <pattern2+0x94>)
 80006b4:	f000 fe2e 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80006b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006bc:	f000 fb58 	bl	8000d70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <pattern2+0x94>)
 80006c8:	f000 fe24 	bl	8001314 <HAL_GPIO_WritePin>
	}while(switch_flag !=1);
 80006cc:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <pattern2+0x98>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d1bb      	bne.n	800064c <pattern2+0x4>
}
 80006d4:	bf00      	nop
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40020c00 	.word	0x40020c00
 80006e0:	2000008c 	.word	0x2000008c

080006e4 <pattern3>:


void pattern3(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

	do{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ee:	481e      	ldr	r0, [pc, #120]	; (8000768 <pattern3+0x84>)
 80006f0:	f000 fe10 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006fa:	481b      	ldr	r0, [pc, #108]	; (8000768 <pattern3+0x84>)
 80006fc:	f000 fe0a 	bl	8001314 <HAL_GPIO_WritePin>

		HAL_Delay(1000);
 8000700:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000704:	f000 fb34 	bl	8000d70 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070e:	4816      	ldr	r0, [pc, #88]	; (8000768 <pattern3+0x84>)
 8000710:	f000 fe00 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071a:	4813      	ldr	r0, [pc, #76]	; (8000768 <pattern3+0x84>)
 800071c:	f000 fdfa 	bl	8001314 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000726:	4810      	ldr	r0, [pc, #64]	; (8000768 <pattern3+0x84>)
 8000728:	f000 fdf4 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000732:	480d      	ldr	r0, [pc, #52]	; (8000768 <pattern3+0x84>)
 8000734:	f000 fdee 	bl	8001314 <HAL_GPIO_WritePin>

		HAL_Delay(1000);
 8000738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800073c:	f000 fb18 	bl	8000d70 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000746:	4808      	ldr	r0, [pc, #32]	; (8000768 <pattern3+0x84>)
 8000748:	f000 fde4 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <pattern3+0x84>)
 8000754:	f000 fdde 	bl	8001314 <HAL_GPIO_WritePin>

	}while(switch_flag !=1);
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <pattern3+0x88>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d1c3      	bne.n	80006e8 <pattern3+0x4>
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40020c00 	.word	0x40020c00
 800076c:	2000008c 	.word	0x2000008c

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b5b0      	push	{r4, r5, r7, lr}
 8000772:	b09a      	sub	sp, #104	; 0x68
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f000 fa89 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077a:	f000 f86d 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 f8ff 	bl	8000980 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000782:	f000 f8d3 	bl	800092c <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(switch_flag==1)
 8000786:	4b2f      	ldr	r3, [pc, #188]	; (8000844 <main+0xd4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d157      	bne.n	800083e <main+0xce>
	  {
		  strcpy(str,"Select One Option\r\na.Pattern 1\r\nb.Pattern 2\r\nc.Pattern3\r\n");
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4a2d      	ldr	r2, [pc, #180]	; (8000848 <main+0xd8>)
 8000792:	461c      	mov	r4, r3
 8000794:	4615      	mov	r5, r2
 8000796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007a6:	c403      	stmia	r4!, {r0, r1}
 80007a8:	8022      	strh	r2, [r4, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fd0f 	bl	80001d0 <strlen>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	1d39      	adds	r1, r7, #4
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
 80007bc:	4823      	ldr	r0, [pc, #140]	; (800084c <main+0xdc>)
 80007be:	f001 fab6 	bl	8001d2e <HAL_UART_Transmit>
		  switch_flag =0;
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <main+0xd4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
		  HAL_Delay(1000);
 80007c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007cc:	f000 fad0 	bl	8000d70 <HAL_Delay>

		  UartReceive(str);
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fed0 	bl	8000578 <UartReceive>
		  sscanf(str,"%c",&choice);
 80007d8:	1cfa      	adds	r2, r7, #3
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	491c      	ldr	r1, [pc, #112]	; (8000850 <main+0xe0>)
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 fe42 	bl	8002468 <siscanf>

		  switch(choice)
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b63      	cmp	r3, #99	; 0x63
 80007e8:	d00c      	beq.n	8000804 <main+0x94>
 80007ea:	2b63      	cmp	r3, #99	; 0x63
 80007ec:	dc0d      	bgt.n	800080a <main+0x9a>
 80007ee:	2b61      	cmp	r3, #97	; 0x61
 80007f0:	d002      	beq.n	80007f8 <main+0x88>
 80007f2:	2b62      	cmp	r3, #98	; 0x62
 80007f4:	d003      	beq.n	80007fe <main+0x8e>
 80007f6:	e008      	b.n	800080a <main+0x9a>
		  {
		  case 'a':
			  pattern1();
 80007f8:	f7ff feea 	bl	80005d0 <pattern1>
			  break;
 80007fc:	e020      	b.n	8000840 <main+0xd0>
		  case 'b':
			  pattern2();
 80007fe:	f7ff ff23 	bl	8000648 <pattern2>
			  break;
 8000802:	e01d      	b.n	8000840 <main+0xd0>
		  case 'c':
			  pattern3();
 8000804:	f7ff ff6e 	bl	80006e4 <pattern3>
			  break;
 8000808:	e01a      	b.n	8000840 <main+0xd0>

		  default:
			  strcpy(str,"Select approprite option\r\n");
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	4a11      	ldr	r2, [pc, #68]	; (8000854 <main+0xe4>)
 800080e:	461c      	mov	r4, r3
 8000810:	4615      	mov	r5, r2
 8000812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000816:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800081a:	c403      	stmia	r4!, {r0, r1}
 800081c:	8022      	strh	r2, [r4, #0]
 800081e:	3402      	adds	r4, #2
 8000820:	0c13      	lsrs	r3, r2, #16
 8000822:	7023      	strb	r3, [r4, #0]
			  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fcd2 	bl	80001d0 <strlen>
 800082c:	4603      	mov	r3, r0
 800082e:	b29a      	uxth	r2, r3
 8000830:	1d39      	adds	r1, r7, #4
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <main+0xdc>)
 8000838:	f001 fa79 	bl	8001d2e <HAL_UART_Transmit>
 800083c:	e7a3      	b.n	8000786 <main+0x16>
		  }

	  }
 800083e:	bf00      	nop
	  if(switch_flag==1)
 8000840:	e7a1      	b.n	8000786 <main+0x16>
 8000842:	bf00      	nop
 8000844:	2000008c 	.word	0x2000008c
 8000848:	08003010 	.word	0x08003010
 800084c:	2000009c 	.word	0x2000009c
 8000850:	0800304c 	.word	0x0800304c
 8000854:	08003050 	.word	0x08003050

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	; 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f001 fdf6 	bl	8002458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <SystemClock_Config+0xcc>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a27      	ldr	r2, [pc, #156]	; (8000924 <SystemClock_Config+0xcc>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <SystemClock_Config+0xcc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <SystemClock_Config+0xd0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a21      	ldr	r2, [pc, #132]	; (8000928 <SystemClock_Config+0xd0>)
 80008a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <SystemClock_Config+0xd0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b4:	2302      	movs	r3, #2
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008bc:	2310      	movs	r3, #16
 80008be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c0:	2302      	movs	r3, #2
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c8:	2308      	movs	r3, #8
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80008cc:	2332      	movs	r3, #50	; 0x32
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008d0:	2304      	movs	r3, #4
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008d4:	2307      	movs	r3, #7
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 fd65 	bl	80013ac <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e8:	f000 f8b6 	bl	8000a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	230f      	movs	r3, #15
 80008ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f0:	2302      	movs	r3, #2
 80008f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000902:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f000 ffc6 	bl	800189c <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000916:	f000 f89f 	bl	8000a58 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3750      	adds	r7, #80	; 0x50
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <MX_USART2_UART_Init+0x50>)
 8000934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000938:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800093c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_USART2_UART_Init+0x4c>)
 8000964:	f001 f996 	bl	8001c94 <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800096e:	f000 f873 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000009c 	.word	0x2000009c
 800097c:	40004400 	.word	0x40004400

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <MX_GPIO_Init+0xac>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a23      	ldr	r2, [pc, #140]	; (8000a2c <MX_GPIO_Init+0xac>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_GPIO_Init+0xac>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_GPIO_Init+0xac>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <MX_GPIO_Init+0xac>)
 80009bc:	f043 0308 	orr.w	r3, r3, #8
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_GPIO_Init+0xac>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009d4:	4816      	ldr	r0, [pc, #88]	; (8000a30 <MX_GPIO_Init+0xb0>)
 80009d6:	f000 fc9d 	bl	8001314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009da:	2301      	movs	r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	4619      	mov	r1, r3
 80009ee:	4811      	ldr	r0, [pc, #68]	; (8000a34 <MX_GPIO_Init+0xb4>)
 80009f0:	f000 faf4 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009f4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4808      	ldr	r0, [pc, #32]	; (8000a30 <MX_GPIO_Init+0xb0>)
 8000a0e:	f000 fae5 	bl	8000fdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2006      	movs	r0, #6
 8000a18:	f000 faa9 	bl	8000f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a1c:	2006      	movs	r0, #6
 8000a1e:	f000 fac2 	bl	8000fa6 <HAL_NVIC_EnableIRQ>

}
 8000a22:	bf00      	nop
 8000a24:	3720      	adds	r7, #32
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020c00 	.word	0x40020c00
 8000a34:	40020000 	.word	0x40020000

08000a38 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]
  switch_flag = 1;
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	601a      	str	r2, [r3, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	2000008c 	.word	0x2000008c

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aa2:	2007      	movs	r0, #7
 8000aa4:	f000 fa58 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <HAL_UART_MspInit+0x84>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d12b      	bne.n	8000b2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b0e:	230c      	movs	r3, #12
 8000b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b1e:	2307      	movs	r3, #7
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <HAL_UART_MspInit+0x8c>)
 8000b2a:	f000 fa57 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f8ce 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f000 fbed 	bl	800137c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <_sbrk+0x5c>)
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <_sbrk+0x60>)
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <_sbrk+0x64>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <_sbrk+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d207      	bcs.n	8000be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd8:	f001 fc14 	bl	8002404 <__errno>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	e009      	b.n	8000bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <_sbrk+0x64>)
 8000bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20020000 	.word	0x20020000
 8000c08:	00000400 	.word	0x00000400
 8000c0c:	20000090 	.word	0x20000090
 8000c10:	200000f8 	.word	0x200000f8

08000c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3e:	490e      	ldr	r1, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c54:	4c0b      	ldr	r4, [pc, #44]	; (8000c84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c62:	f7ff ffd7 	bl	8000c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f001 fbd3 	bl	8002410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fd81 	bl	8000770 <main>
  bx  lr    
 8000c6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c7c:	08003220 	.word	0x08003220
  ldr r2, =_sbss
 8000c80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c84:	200000f4 	.word	0x200000f4

08000c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <HAL_Init+0x40>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <HAL_Init+0x40>)
 8000ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_Init+0x40>)
 8000cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f94f 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f808 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fed0 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023c00 	.word	0x40023c00

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f967 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 f92f 	bl	8000f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000004 	.word	0x20000004

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	200000e0 	.word	0x200000e0

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	200000e0 	.word	0x200000e0

08000d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d78:	f7ff ffee 	bl	8000d58 <HAL_GetTick>
 8000d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d88:	d005      	beq.n	8000d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_Delay+0x44>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4413      	add	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d96:	bf00      	nop
 8000d98:	f7ff ffde 	bl	8000d58 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d8f7      	bhi.n	8000d98 <HAL_Delay+0x28>
  {
  }
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4907      	ldr	r1, [pc, #28]	; (8000e54 <__NVIC_EnableIRQ+0x38>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
         );
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	; 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f7ff ff8e 	bl	8000e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff29 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff3e 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff8e 	bl	8000eac <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5d 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff31 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa2 	bl	8000f14 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
 8000ff6:	e16b      	b.n	80012d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	429a      	cmp	r2, r3
 8001012:	f040 815a 	bne.w	80012ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b01      	cmp	r3, #1
 8001020:	d005      	beq.n	800102e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102a:	2b02      	cmp	r3, #2
 800102c:	d130      	bne.n	8001090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	091b      	lsrs	r3, r3, #4
 800107a:	f003 0201 	and.w	r2, r3, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b03      	cmp	r3, #3
 800109a:	d017      	beq.n	80010cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d123      	bne.n	8001120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	220f      	movs	r2, #15
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	69b9      	ldr	r1, [r7, #24]
 800111c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0203 	and.w	r2, r3, #3
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80b4 	beq.w	80012ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b60      	ldr	r3, [pc, #384]	; (80012e8 <HAL_GPIO_Init+0x30c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a5f      	ldr	r2, [pc, #380]	; (80012e8 <HAL_GPIO_Init+0x30c>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b5d      	ldr	r3, [pc, #372]	; (80012e8 <HAL_GPIO_Init+0x30c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117e:	4a5b      	ldr	r2, [pc, #364]	; (80012ec <HAL_GPIO_Init+0x310>)
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a52      	ldr	r2, [pc, #328]	; (80012f0 <HAL_GPIO_Init+0x314>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d02b      	beq.n	8001202 <HAL_GPIO_Init+0x226>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a51      	ldr	r2, [pc, #324]	; (80012f4 <HAL_GPIO_Init+0x318>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d025      	beq.n	80011fe <HAL_GPIO_Init+0x222>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a50      	ldr	r2, [pc, #320]	; (80012f8 <HAL_GPIO_Init+0x31c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d01f      	beq.n	80011fa <HAL_GPIO_Init+0x21e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4f      	ldr	r2, [pc, #316]	; (80012fc <HAL_GPIO_Init+0x320>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d019      	beq.n	80011f6 <HAL_GPIO_Init+0x21a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4e      	ldr	r2, [pc, #312]	; (8001300 <HAL_GPIO_Init+0x324>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0x216>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4d      	ldr	r2, [pc, #308]	; (8001304 <HAL_GPIO_Init+0x328>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00d      	beq.n	80011ee <HAL_GPIO_Init+0x212>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4c      	ldr	r2, [pc, #304]	; (8001308 <HAL_GPIO_Init+0x32c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d007      	beq.n	80011ea <HAL_GPIO_Init+0x20e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4b      	ldr	r2, [pc, #300]	; (800130c <HAL_GPIO_Init+0x330>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_GPIO_Init+0x20a>
 80011e2:	2307      	movs	r3, #7
 80011e4:	e00e      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011e6:	2308      	movs	r3, #8
 80011e8:	e00c      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011ea:	2306      	movs	r3, #6
 80011ec:	e00a      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011ee:	2305      	movs	r3, #5
 80011f0:	e008      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011f2:	2304      	movs	r3, #4
 80011f4:	e006      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011f6:	2303      	movs	r3, #3
 80011f8:	e004      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e002      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <HAL_GPIO_Init+0x228>
 8001202:	2300      	movs	r3, #0
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	f002 0203 	and.w	r2, r2, #3
 800120a:	0092      	lsls	r2, r2, #2
 800120c:	4093      	lsls	r3, r2
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001214:	4935      	ldr	r1, [pc, #212]	; (80012ec <HAL_GPIO_Init+0x310>)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001222:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <HAL_GPIO_Init+0x334>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001246:	4a32      	ldr	r2, [pc, #200]	; (8001310 <HAL_GPIO_Init+0x334>)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800124c:	4b30      	ldr	r3, [pc, #192]	; (8001310 <HAL_GPIO_Init+0x334>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001270:	4a27      	ldr	r2, [pc, #156]	; (8001310 <HAL_GPIO_Init+0x334>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001276:	4b26      	ldr	r3, [pc, #152]	; (8001310 <HAL_GPIO_Init+0x334>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800129a:	4a1d      	ldr	r2, [pc, #116]	; (8001310 <HAL_GPIO_Init+0x334>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <HAL_GPIO_Init+0x334>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012c4:	4a12      	ldr	r2, [pc, #72]	; (8001310 <HAL_GPIO_Init+0x334>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3301      	adds	r3, #1
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	2b0f      	cmp	r3, #15
 80012d4:	f67f ae90 	bls.w	8000ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40013800 	.word	0x40013800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40020400 	.word	0x40020400
 80012f8:	40020800 	.word	0x40020800
 80012fc:	40020c00 	.word	0x40020c00
 8001300:	40021000 	.word	0x40021000
 8001304:	40021400 	.word	0x40021400
 8001308:	40021800 	.word	0x40021800
 800130c:	40021c00 	.word	0x40021c00
 8001310:	40013c00 	.word	0x40013c00

08001314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
 8001320:	4613      	mov	r3, r2
 8001322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001324:	787b      	ldrb	r3, [r7, #1]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001330:	e003      	b.n	800133a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	041a      	lsls	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	619a      	str	r2, [r3, #24]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001346:	b480      	push	{r7}
 8001348:	b085      	sub	sp, #20
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	460b      	mov	r3, r1
 8001350:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001358:	887a      	ldrh	r2, [r7, #2]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4013      	ands	r3, r2
 800135e:	041a      	lsls	r2, r3, #16
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	43d9      	mvns	r1, r3
 8001364:	887b      	ldrh	r3, [r7, #2]
 8001366:	400b      	ands	r3, r1
 8001368:	431a      	orrs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	619a      	str	r2, [r3, #24]
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001388:	695a      	ldr	r2, [r3, #20]
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	4013      	ands	r3, r2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fb4c 	bl	8000a38 <HAL_GPIO_EXTI_Callback>
  }
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40013c00 	.word	0x40013c00

080013ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e264      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d075      	beq.n	80014b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ca:	4ba3      	ldr	r3, [pc, #652]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d00c      	beq.n	80013f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d6:	4ba0      	ldr	r3, [pc, #640]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d112      	bne.n	8001408 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e2:	4b9d      	ldr	r3, [pc, #628]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ee:	d10b      	bne.n	8001408 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	4b99      	ldr	r3, [pc, #612]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d05b      	beq.n	80014b4 <HAL_RCC_OscConfig+0x108>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d157      	bne.n	80014b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e23f      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001410:	d106      	bne.n	8001420 <HAL_RCC_OscConfig+0x74>
 8001412:	4b91      	ldr	r3, [pc, #580]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a90      	ldr	r2, [pc, #576]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e01d      	b.n	800145c <HAL_RCC_OscConfig+0xb0>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001428:	d10c      	bne.n	8001444 <HAL_RCC_OscConfig+0x98>
 800142a:	4b8b      	ldr	r3, [pc, #556]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a8a      	ldr	r2, [pc, #552]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b88      	ldr	r3, [pc, #544]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a87      	ldr	r2, [pc, #540]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e00b      	b.n	800145c <HAL_RCC_OscConfig+0xb0>
 8001444:	4b84      	ldr	r3, [pc, #528]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a83      	ldr	r2, [pc, #524]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 800144a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b81      	ldr	r3, [pc, #516]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a80      	ldr	r2, [pc, #512]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d013      	beq.n	800148c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fc78 	bl	8000d58 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fc74 	bl	8000d58 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	; 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e204      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147e:	4b76      	ldr	r3, [pc, #472]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0xc0>
 800148a:	e014      	b.n	80014b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fc64 	bl	8000d58 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001494:	f7ff fc60 	bl	8000d58 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	; 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e1f0      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a6:	4b6c      	ldr	r3, [pc, #432]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0xe8>
 80014b2:	e000      	b.n	80014b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d063      	beq.n	800158a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c2:	4b65      	ldr	r3, [pc, #404]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00b      	beq.n	80014e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ce:	4b62      	ldr	r3, [pc, #392]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d11c      	bne.n	8001514 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014da:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d116      	bne.n	8001514 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d005      	beq.n	80014fe <HAL_RCC_OscConfig+0x152>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e1c4      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fe:	4b56      	ldr	r3, [pc, #344]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4952      	ldr	r1, [pc, #328]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001512:	e03a      	b.n	800158a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d020      	beq.n	800155e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800151c:	4b4f      	ldr	r3, [pc, #316]	; (800165c <HAL_RCC_OscConfig+0x2b0>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001522:	f7ff fc19 	bl	8000d58 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800152a:	f7ff fc15 	bl	8000d58 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e1a5      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153c:	4b46      	ldr	r3, [pc, #280]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	4b43      	ldr	r3, [pc, #268]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4940      	ldr	r1, [pc, #256]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]
 800155c:	e015      	b.n	800158a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155e:	4b3f      	ldr	r3, [pc, #252]	; (800165c <HAL_RCC_OscConfig+0x2b0>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fbf8 	bl	8000d58 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156c:	f7ff fbf4 	bl	8000d58 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e184      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157e:	4b36      	ldr	r3, [pc, #216]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d030      	beq.n	80015f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d016      	beq.n	80015cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159e:	4b30      	ldr	r3, [pc, #192]	; (8001660 <HAL_RCC_OscConfig+0x2b4>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a4:	f7ff fbd8 	bl	8000d58 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ac:	f7ff fbd4 	bl	8000d58 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e164      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015be:	4b26      	ldr	r3, [pc, #152]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0x200>
 80015ca:	e015      	b.n	80015f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_RCC_OscConfig+0x2b4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fbc1 	bl	8000d58 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015da:	f7ff fbbd 	bl	8000d58 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e14d      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 80015ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f0      	bne.n	80015da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 80a0 	beq.w	8001746 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10f      	bne.n	8001636 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001632:	2301      	movs	r3, #1
 8001634:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_RCC_OscConfig+0x2b8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163e:	2b00      	cmp	r3, #0
 8001640:	d121      	bne.n	8001686 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <HAL_RCC_OscConfig+0x2b8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a07      	ldr	r2, [pc, #28]	; (8001664 <HAL_RCC_OscConfig+0x2b8>)
 8001648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164e:	f7ff fb83 	bl	8000d58 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	e011      	b.n	800167a <HAL_RCC_OscConfig+0x2ce>
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800
 800165c:	42470000 	.word	0x42470000
 8001660:	42470e80 	.word	0x42470e80
 8001664:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001668:	f7ff fb76 	bl	8000d58 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e106      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167a:	4b85      	ldr	r3, [pc, #532]	; (8001890 <HAL_RCC_OscConfig+0x4e4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d106      	bne.n	800169c <HAL_RCC_OscConfig+0x2f0>
 800168e:	4b81      	ldr	r3, [pc, #516]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	4a80      	ldr	r2, [pc, #512]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6713      	str	r3, [r2, #112]	; 0x70
 800169a:	e01c      	b.n	80016d6 <HAL_RCC_OscConfig+0x32a>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b05      	cmp	r3, #5
 80016a2:	d10c      	bne.n	80016be <HAL_RCC_OscConfig+0x312>
 80016a4:	4b7b      	ldr	r3, [pc, #492]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a8:	4a7a      	ldr	r2, [pc, #488]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	6713      	str	r3, [r2, #112]	; 0x70
 80016b0:	4b78      	ldr	r3, [pc, #480]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80016b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b4:	4a77      	ldr	r2, [pc, #476]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6713      	str	r3, [r2, #112]	; 0x70
 80016bc:	e00b      	b.n	80016d6 <HAL_RCC_OscConfig+0x32a>
 80016be:	4b75      	ldr	r3, [pc, #468]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c2:	4a74      	ldr	r2, [pc, #464]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ca:	4b72      	ldr	r3, [pc, #456]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ce:	4a71      	ldr	r2, [pc, #452]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80016d0:	f023 0304 	bic.w	r3, r3, #4
 80016d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d015      	beq.n	800170a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7ff fb3b 	bl	8000d58 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e6:	f7ff fb37 	bl	8000d58 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e0c5      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fc:	4b65      	ldr	r3, [pc, #404]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0ee      	beq.n	80016e6 <HAL_RCC_OscConfig+0x33a>
 8001708:	e014      	b.n	8001734 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170a:	f7ff fb25 	bl	8000d58 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001710:	e00a      	b.n	8001728 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001712:	f7ff fb21 	bl	8000d58 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001720:	4293      	cmp	r3, r2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e0af      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001728:	4b5a      	ldr	r3, [pc, #360]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1ee      	bne.n	8001712 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d105      	bne.n	8001746 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800173a:	4b56      	ldr	r3, [pc, #344]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a55      	ldr	r2, [pc, #340]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 8001740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 809b 	beq.w	8001886 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001750:	4b50      	ldr	r3, [pc, #320]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b08      	cmp	r3, #8
 800175a:	d05c      	beq.n	8001816 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d141      	bne.n	80017e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001764:	4b4c      	ldr	r3, [pc, #304]	; (8001898 <HAL_RCC_OscConfig+0x4ec>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176a:	f7ff faf5 	bl	8000d58 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001772:	f7ff faf1 	bl	8000d58 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e081      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001784:	4b43      	ldr	r3, [pc, #268]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69da      	ldr	r2, [r3, #28]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	019b      	lsls	r3, r3, #6
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	085b      	lsrs	r3, r3, #1
 80017a8:	3b01      	subs	r3, #1
 80017aa:	041b      	lsls	r3, r3, #16
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	061b      	lsls	r3, r3, #24
 80017b4:	4937      	ldr	r1, [pc, #220]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ba:	4b37      	ldr	r3, [pc, #220]	; (8001898 <HAL_RCC_OscConfig+0x4ec>)
 80017bc:	2201      	movs	r2, #1
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff faca 	bl	8000d58 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff fac6 	bl	8000d58 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e056      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017da:	4b2e      	ldr	r3, [pc, #184]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x41c>
 80017e6:	e04e      	b.n	8001886 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e8:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <HAL_RCC_OscConfig+0x4ec>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ee:	f7ff fab3 	bl	8000d58 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f6:	f7ff faaf 	bl	8000d58 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e03f      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001808:	4b22      	ldr	r3, [pc, #136]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f0      	bne.n	80017f6 <HAL_RCC_OscConfig+0x44a>
 8001814:	e037      	b.n	8001886 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e032      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <HAL_RCC_OscConfig+0x4e8>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d028      	beq.n	8001882 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d121      	bne.n	8001882 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d11a      	bne.n	8001882 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001852:	4013      	ands	r3, r2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001858:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800185a:	4293      	cmp	r3, r2
 800185c:	d111      	bne.n	8001882 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	3b01      	subs	r3, #1
 800186c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d107      	bne.n	8001882 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d001      	beq.n	8001886 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40007000 	.word	0x40007000
 8001894:	40023800 	.word	0x40023800
 8001898:	42470060 	.word	0x42470060

0800189c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0cc      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b0:	4b68      	ldr	r3, [pc, #416]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d90c      	bls.n	80018d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b65      	ldr	r3, [pc, #404]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b63      	ldr	r3, [pc, #396]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0b8      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d020      	beq.n	8001926 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f0:	4b59      	ldr	r3, [pc, #356]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	4a58      	ldr	r2, [pc, #352]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001908:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4a52      	ldr	r2, [pc, #328]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001912:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001914:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	494d      	ldr	r1, [pc, #308]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d044      	beq.n	80019bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d107      	bne.n	800194a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d119      	bne.n	800197a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e07f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d003      	beq.n	800195a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001956:	2b03      	cmp	r3, #3
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195a:	4b3f      	ldr	r3, [pc, #252]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e06f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196a:	4b3b      	ldr	r3, [pc, #236]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e067      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800197a:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f023 0203 	bic.w	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4934      	ldr	r1, [pc, #208]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	4313      	orrs	r3, r2
 800198a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800198c:	f7ff f9e4 	bl	8000d58 <HAL_GetTick>
 8001990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001992:	e00a      	b.n	80019aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001994:	f7ff f9e0 	bl	8000d58 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e04f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 020c 	and.w	r2, r3, #12
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d1eb      	bne.n	8001994 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019bc:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d20c      	bcs.n	80019e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e032      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d008      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4916      	ldr	r1, [pc, #88]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d009      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	490e      	ldr	r1, [pc, #56]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a22:	f000 f821 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8001a26:	4602      	mov	r2, r0
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	490a      	ldr	r1, [pc, #40]	; (8001a5c <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	5ccb      	ldrb	r3, [r1, r3]
 8001a36:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3a:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f944 	bl	8000cd0 <HAL_InitTick>

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023c00 	.word	0x40023c00
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	08003078 	.word	0x08003078
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000004 	.word	0x20000004

08001a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a6c:	b084      	sub	sp, #16
 8001a6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a80:	4b67      	ldr	r3, [pc, #412]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d00d      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	f200 80bd 	bhi.w	8001c0c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0x34>
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d003      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a9a:	e0b7      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a9c:	4b61      	ldr	r3, [pc, #388]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a9e:	60bb      	str	r3, [r7, #8]
       break;
 8001aa0:	e0b7      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aa2:	4b61      	ldr	r3, [pc, #388]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001aa4:	60bb      	str	r3, [r7, #8]
      break;
 8001aa6:	e0b4      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa8:	4b5d      	ldr	r3, [pc, #372]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ab0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab2:	4b5b      	ldr	r3, [pc, #364]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d04d      	beq.n	8001b5a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001abe:	4b58      	ldr	r3, [pc, #352]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	099b      	lsrs	r3, r3, #6
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ace:	f04f 0100 	mov.w	r1, #0
 8001ad2:	ea02 0800 	and.w	r8, r2, r0
 8001ad6:	ea03 0901 	and.w	r9, r3, r1
 8001ada:	4640      	mov	r0, r8
 8001adc:	4649      	mov	r1, r9
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	014b      	lsls	r3, r1, #5
 8001ae8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001aec:	0142      	lsls	r2, r0, #5
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	ebb0 0008 	subs.w	r0, r0, r8
 8001af6:	eb61 0109 	sbc.w	r1, r1, r9
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	018b      	lsls	r3, r1, #6
 8001b04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b08:	0182      	lsls	r2, r0, #6
 8001b0a:	1a12      	subs	r2, r2, r0
 8001b0c:	eb63 0301 	sbc.w	r3, r3, r1
 8001b10:	f04f 0000 	mov.w	r0, #0
 8001b14:	f04f 0100 	mov.w	r1, #0
 8001b18:	00d9      	lsls	r1, r3, #3
 8001b1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b1e:	00d0      	lsls	r0, r2, #3
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	eb12 0208 	adds.w	r2, r2, r8
 8001b28:	eb43 0309 	adc.w	r3, r3, r9
 8001b2c:	f04f 0000 	mov.w	r0, #0
 8001b30:	f04f 0100 	mov.w	r1, #0
 8001b34:	0259      	lsls	r1, r3, #9
 8001b36:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b3a:	0250      	lsls	r0, r2, #9
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	461a      	mov	r2, r3
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	f7fe fb98 	bl	8000280 <__aeabi_uldivmod>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4613      	mov	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	e04a      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5a:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	099b      	lsrs	r3, r3, #6
 8001b60:	461a      	mov	r2, r3
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b6a:	f04f 0100 	mov.w	r1, #0
 8001b6e:	ea02 0400 	and.w	r4, r2, r0
 8001b72:	ea03 0501 	and.w	r5, r3, r1
 8001b76:	4620      	mov	r0, r4
 8001b78:	4629      	mov	r1, r5
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	014b      	lsls	r3, r1, #5
 8001b84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b88:	0142      	lsls	r2, r0, #5
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	1b00      	subs	r0, r0, r4
 8001b90:	eb61 0105 	sbc.w	r1, r1, r5
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	018b      	lsls	r3, r1, #6
 8001b9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ba2:	0182      	lsls	r2, r0, #6
 8001ba4:	1a12      	subs	r2, r2, r0
 8001ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8001baa:	f04f 0000 	mov.w	r0, #0
 8001bae:	f04f 0100 	mov.w	r1, #0
 8001bb2:	00d9      	lsls	r1, r3, #3
 8001bb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bb8:	00d0      	lsls	r0, r2, #3
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	1912      	adds	r2, r2, r4
 8001bc0:	eb45 0303 	adc.w	r3, r5, r3
 8001bc4:	f04f 0000 	mov.w	r0, #0
 8001bc8:	f04f 0100 	mov.w	r1, #0
 8001bcc:	0299      	lsls	r1, r3, #10
 8001bce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001bd2:	0290      	lsls	r0, r2, #10
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	461a      	mov	r2, r3
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	f7fe fb4c 	bl	8000280 <__aeabi_uldivmod>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4613      	mov	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	0c1b      	lsrs	r3, r3, #16
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	60bb      	str	r3, [r7, #8]
      break;
 8001c0a:	e002      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c0e:	60bb      	str	r3, [r7, #8]
      break;
 8001c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c12:	68bb      	ldr	r3, [r7, #8]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	00f42400 	.word	0x00f42400
 8001c28:	007a1200 	.word	0x007a1200

08001c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000000 	.word	0x20000000

08001c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c48:	f7ff fff0 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	0a9b      	lsrs	r3, r3, #10
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4903      	ldr	r1, [pc, #12]	; (8001c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	08003088 	.word	0x08003088

08001c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c70:	f7ff ffdc 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c74:	4602      	mov	r2, r0
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	0b5b      	lsrs	r3, r3, #13
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	4903      	ldr	r1, [pc, #12]	; (8001c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c82:	5ccb      	ldrb	r3, [r1, r3]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	08003088 	.word	0x08003088

08001c94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e03f      	b.n	8001d26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7fe fefa 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2224      	movs	r2, #36	; 0x24
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f9cb 	bl	8002074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	695a      	ldr	r2, [r3, #20]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b08a      	sub	sp, #40	; 0x28
 8001d32:	af02      	add	r7, sp, #8
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	d17c      	bne.n	8001e48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_UART_Transmit+0x2c>
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e075      	b.n	8001e4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_UART_Transmit+0x3e>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e06e      	b.n	8001e4a <HAL_UART_Transmit+0x11c>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2221      	movs	r2, #33	; 0x21
 8001d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d82:	f7fe ffe9 	bl	8000d58 <HAL_GetTick>
 8001d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	88fa      	ldrh	r2, [r7, #6]
 8001d8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	88fa      	ldrh	r2, [r7, #6]
 8001d92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d9c:	d108      	bne.n	8001db0 <HAL_UART_Transmit+0x82>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d104      	bne.n	8001db0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	e003      	b.n	8001db8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001dc0:	e02a      	b.n	8001e18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2180      	movs	r1, #128	; 0x80
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 f8e2 	bl	8001f96 <UART_WaitOnFlagUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e036      	b.n	8001e4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10b      	bne.n	8001dfa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001df0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	3302      	adds	r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	e007      	b.n	8001e0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	781a      	ldrb	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	3301      	adds	r3, #1
 8001e08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1cf      	bne.n	8001dc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2140      	movs	r1, #64	; 0x40
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 f8b2 	bl	8001f96 <UART_WaitOnFlagUntilTimeout>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e006      	b.n	8001e4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e000      	b.n	8001e4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e48:	2302      	movs	r3, #2
  }
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b08a      	sub	sp, #40	; 0x28
 8001e56:	af02      	add	r7, sp, #8
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	f040 808c 	bne.w	8001f8c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <HAL_UART_Receive+0x2e>
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e084      	b.n	8001f8e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_UART_Receive+0x40>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e07d      	b.n	8001f8e <HAL_UART_Receive+0x13c>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2222      	movs	r2, #34	; 0x22
 8001ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001eae:	f7fe ff53 	bl	8000d58 <HAL_GetTick>
 8001eb2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	88fa      	ldrh	r2, [r7, #6]
 8001eb8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	88fa      	ldrh	r2, [r7, #6]
 8001ebe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec8:	d108      	bne.n	8001edc <HAL_UART_Receive+0x8a>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d104      	bne.n	8001edc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	e003      	b.n	8001ee4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001eec:	e043      	b.n	8001f76 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2120      	movs	r1, #32
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 f84c 	bl	8001f96 <UART_WaitOnFlagUntilTimeout>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e042      	b.n	8001f8e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10c      	bne.n	8001f28 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	3302      	adds	r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	e01f      	b.n	8001f68 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f30:	d007      	beq.n	8001f42 <HAL_UART_Receive+0xf0>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10a      	bne.n	8001f50 <HAL_UART_Receive+0xfe>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	e008      	b.n	8001f62 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3301      	adds	r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1b6      	bne.n	8001eee <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e000      	b.n	8001f8e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001f8c:	2302      	movs	r3, #2
  }
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3720      	adds	r7, #32
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b090      	sub	sp, #64	; 0x40
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fa6:	e050      	b.n	800204a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fae:	d04c      	beq.n	800204a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fb6:	f7fe fecf 	bl	8000d58 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d241      	bcs.n	800204a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	330c      	adds	r3, #12
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd0:	e853 3f00 	ldrex	r3, [r3]
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	330c      	adds	r3, #12
 8001fe4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fe6:	637a      	str	r2, [r7, #52]	; 0x34
 8001fe8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fee:	e841 2300 	strex	r3, r2, [r1]
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1e5      	bne.n	8001fc6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	3314      	adds	r3, #20
 8002000:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	e853 3f00 	ldrex	r3, [r3]
 8002008:	613b      	str	r3, [r7, #16]
   return(result);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	63bb      	str	r3, [r7, #56]	; 0x38
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3314      	adds	r3, #20
 8002018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800201a:	623a      	str	r2, [r7, #32]
 800201c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800201e:	69f9      	ldr	r1, [r7, #28]
 8002020:	6a3a      	ldr	r2, [r7, #32]
 8002022:	e841 2300 	strex	r3, r2, [r1]
 8002026:	61bb      	str	r3, [r7, #24]
   return(result);
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1e5      	bne.n	8001ffa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2220      	movs	r2, #32
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2220      	movs	r2, #32
 800203a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e00f      	b.n	800206a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4013      	ands	r3, r2
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	429a      	cmp	r2, r3
 8002058:	bf0c      	ite	eq
 800205a:	2301      	moveq	r3, #1
 800205c:	2300      	movne	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	429a      	cmp	r2, r3
 8002066:	d09f      	beq.n	8001fa8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3740      	adds	r7, #64	; 0x40
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002078:	b09f      	sub	sp, #124	; 0x7c
 800207a:	af00      	add	r7, sp, #0
 800207c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800207e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800208a:	68d9      	ldr	r1, [r3, #12]
 800208c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	ea40 0301 	orr.w	r3, r0, r1
 8002094:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	431a      	orrs	r2, r3
 80020a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	431a      	orrs	r2, r3
 80020a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80020ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020b8:	f021 010c 	bic.w	r1, r1, #12
 80020bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c2:	430b      	orrs	r3, r1
 80020c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d2:	6999      	ldr	r1, [r3, #24]
 80020d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	ea40 0301 	orr.w	r3, r0, r1
 80020dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4bc5      	ldr	r3, [pc, #788]	; (80023f8 <UART_SetConfig+0x384>)
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d004      	beq.n	80020f2 <UART_SetConfig+0x7e>
 80020e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4bc3      	ldr	r3, [pc, #780]	; (80023fc <UART_SetConfig+0x388>)
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d103      	bne.n	80020fa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020f2:	f7ff fdbb 	bl	8001c6c <HAL_RCC_GetPCLK2Freq>
 80020f6:	6778      	str	r0, [r7, #116]	; 0x74
 80020f8:	e002      	b.n	8002100 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020fa:	f7ff fda3 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 80020fe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002108:	f040 80b6 	bne.w	8002278 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800210c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800210e:	461c      	mov	r4, r3
 8002110:	f04f 0500 	mov.w	r5, #0
 8002114:	4622      	mov	r2, r4
 8002116:	462b      	mov	r3, r5
 8002118:	1891      	adds	r1, r2, r2
 800211a:	6439      	str	r1, [r7, #64]	; 0x40
 800211c:	415b      	adcs	r3, r3
 800211e:	647b      	str	r3, [r7, #68]	; 0x44
 8002120:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002124:	1912      	adds	r2, r2, r4
 8002126:	eb45 0303 	adc.w	r3, r5, r3
 800212a:	f04f 0000 	mov.w	r0, #0
 800212e:	f04f 0100 	mov.w	r1, #0
 8002132:	00d9      	lsls	r1, r3, #3
 8002134:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002138:	00d0      	lsls	r0, r2, #3
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	1911      	adds	r1, r2, r4
 8002140:	6639      	str	r1, [r7, #96]	; 0x60
 8002142:	416b      	adcs	r3, r5
 8002144:	667b      	str	r3, [r7, #100]	; 0x64
 8002146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	461a      	mov	r2, r3
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	1891      	adds	r1, r2, r2
 8002152:	63b9      	str	r1, [r7, #56]	; 0x38
 8002154:	415b      	adcs	r3, r3
 8002156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002158:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800215c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002160:	f7fe f88e 	bl	8000280 <__aeabi_uldivmod>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4ba5      	ldr	r3, [pc, #660]	; (8002400 <UART_SetConfig+0x38c>)
 800216a:	fba3 2302 	umull	r2, r3, r3, r2
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	011e      	lsls	r6, r3, #4
 8002172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002174:	461c      	mov	r4, r3
 8002176:	f04f 0500 	mov.w	r5, #0
 800217a:	4622      	mov	r2, r4
 800217c:	462b      	mov	r3, r5
 800217e:	1891      	adds	r1, r2, r2
 8002180:	6339      	str	r1, [r7, #48]	; 0x30
 8002182:	415b      	adcs	r3, r3
 8002184:	637b      	str	r3, [r7, #52]	; 0x34
 8002186:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800218a:	1912      	adds	r2, r2, r4
 800218c:	eb45 0303 	adc.w	r3, r5, r3
 8002190:	f04f 0000 	mov.w	r0, #0
 8002194:	f04f 0100 	mov.w	r1, #0
 8002198:	00d9      	lsls	r1, r3, #3
 800219a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800219e:	00d0      	lsls	r0, r2, #3
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	1911      	adds	r1, r2, r4
 80021a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80021a8:	416b      	adcs	r3, r5
 80021aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	461a      	mov	r2, r3
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	1891      	adds	r1, r2, r2
 80021b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80021ba:	415b      	adcs	r3, r3
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80021c6:	f7fe f85b 	bl	8000280 <__aeabi_uldivmod>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4b8c      	ldr	r3, [pc, #560]	; (8002400 <UART_SetConfig+0x38c>)
 80021d0:	fba3 1302 	umull	r1, r3, r3, r2
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	2164      	movs	r1, #100	; 0x64
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	3332      	adds	r3, #50	; 0x32
 80021e2:	4a87      	ldr	r2, [pc, #540]	; (8002400 <UART_SetConfig+0x38c>)
 80021e4:	fba2 2303 	umull	r2, r3, r2, r3
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021f0:	441e      	add	r6, r3
 80021f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021f4:	4618      	mov	r0, r3
 80021f6:	f04f 0100 	mov.w	r1, #0
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	1894      	adds	r4, r2, r2
 8002200:	623c      	str	r4, [r7, #32]
 8002202:	415b      	adcs	r3, r3
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
 8002206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800220a:	1812      	adds	r2, r2, r0
 800220c:	eb41 0303 	adc.w	r3, r1, r3
 8002210:	f04f 0400 	mov.w	r4, #0
 8002214:	f04f 0500 	mov.w	r5, #0
 8002218:	00dd      	lsls	r5, r3, #3
 800221a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800221e:	00d4      	lsls	r4, r2, #3
 8002220:	4622      	mov	r2, r4
 8002222:	462b      	mov	r3, r5
 8002224:	1814      	adds	r4, r2, r0
 8002226:	653c      	str	r4, [r7, #80]	; 0x50
 8002228:	414b      	adcs	r3, r1
 800222a:	657b      	str	r3, [r7, #84]	; 0x54
 800222c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	461a      	mov	r2, r3
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	1891      	adds	r1, r2, r2
 8002238:	61b9      	str	r1, [r7, #24]
 800223a:	415b      	adcs	r3, r3
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002242:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002246:	f7fe f81b 	bl	8000280 <__aeabi_uldivmod>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4b6c      	ldr	r3, [pc, #432]	; (8002400 <UART_SetConfig+0x38c>)
 8002250:	fba3 1302 	umull	r1, r3, r3, r2
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	2164      	movs	r1, #100	; 0x64
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	3332      	adds	r3, #50	; 0x32
 8002262:	4a67      	ldr	r2, [pc, #412]	; (8002400 <UART_SetConfig+0x38c>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	f003 0207 	and.w	r2, r3, #7
 800226e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4432      	add	r2, r6
 8002274:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002276:	e0b9      	b.n	80023ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800227a:	461c      	mov	r4, r3
 800227c:	f04f 0500 	mov.w	r5, #0
 8002280:	4622      	mov	r2, r4
 8002282:	462b      	mov	r3, r5
 8002284:	1891      	adds	r1, r2, r2
 8002286:	6139      	str	r1, [r7, #16]
 8002288:	415b      	adcs	r3, r3
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002290:	1912      	adds	r2, r2, r4
 8002292:	eb45 0303 	adc.w	r3, r5, r3
 8002296:	f04f 0000 	mov.w	r0, #0
 800229a:	f04f 0100 	mov.w	r1, #0
 800229e:	00d9      	lsls	r1, r3, #3
 80022a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022a4:	00d0      	lsls	r0, r2, #3
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	eb12 0804 	adds.w	r8, r2, r4
 80022ae:	eb43 0905 	adc.w	r9, r3, r5
 80022b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f04f 0100 	mov.w	r1, #0
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	008b      	lsls	r3, r1, #2
 80022c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80022ca:	0082      	lsls	r2, r0, #2
 80022cc:	4640      	mov	r0, r8
 80022ce:	4649      	mov	r1, r9
 80022d0:	f7fd ffd6 	bl	8000280 <__aeabi_uldivmod>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4b49      	ldr	r3, [pc, #292]	; (8002400 <UART_SetConfig+0x38c>)
 80022da:	fba3 2302 	umull	r2, r3, r3, r2
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	011e      	lsls	r6, r3, #4
 80022e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022e4:	4618      	mov	r0, r3
 80022e6:	f04f 0100 	mov.w	r1, #0
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	1894      	adds	r4, r2, r2
 80022f0:	60bc      	str	r4, [r7, #8]
 80022f2:	415b      	adcs	r3, r3
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022fa:	1812      	adds	r2, r2, r0
 80022fc:	eb41 0303 	adc.w	r3, r1, r3
 8002300:	f04f 0400 	mov.w	r4, #0
 8002304:	f04f 0500 	mov.w	r5, #0
 8002308:	00dd      	lsls	r5, r3, #3
 800230a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800230e:	00d4      	lsls	r4, r2, #3
 8002310:	4622      	mov	r2, r4
 8002312:	462b      	mov	r3, r5
 8002314:	1814      	adds	r4, r2, r0
 8002316:	64bc      	str	r4, [r7, #72]	; 0x48
 8002318:	414b      	adcs	r3, r1
 800231a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800231c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4618      	mov	r0, r3
 8002322:	f04f 0100 	mov.w	r1, #0
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	008b      	lsls	r3, r1, #2
 8002330:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002334:	0082      	lsls	r2, r0, #2
 8002336:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800233a:	f7fd ffa1 	bl	8000280 <__aeabi_uldivmod>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4b2f      	ldr	r3, [pc, #188]	; (8002400 <UART_SetConfig+0x38c>)
 8002344:	fba3 1302 	umull	r1, r3, r3, r2
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	2164      	movs	r1, #100	; 0x64
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	3332      	adds	r3, #50	; 0x32
 8002356:	4a2a      	ldr	r2, [pc, #168]	; (8002400 <UART_SetConfig+0x38c>)
 8002358:	fba2 2303 	umull	r2, r3, r2, r3
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002362:	441e      	add	r6, r3
 8002364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002366:	4618      	mov	r0, r3
 8002368:	f04f 0100 	mov.w	r1, #0
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	1894      	adds	r4, r2, r2
 8002372:	603c      	str	r4, [r7, #0]
 8002374:	415b      	adcs	r3, r3
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800237c:	1812      	adds	r2, r2, r0
 800237e:	eb41 0303 	adc.w	r3, r1, r3
 8002382:	f04f 0400 	mov.w	r4, #0
 8002386:	f04f 0500 	mov.w	r5, #0
 800238a:	00dd      	lsls	r5, r3, #3
 800238c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002390:	00d4      	lsls	r4, r2, #3
 8002392:	4622      	mov	r2, r4
 8002394:	462b      	mov	r3, r5
 8002396:	eb12 0a00 	adds.w	sl, r2, r0
 800239a:	eb43 0b01 	adc.w	fp, r3, r1
 800239e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f04f 0100 	mov.w	r1, #0
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	008b      	lsls	r3, r1, #2
 80023b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80023b6:	0082      	lsls	r2, r0, #2
 80023b8:	4650      	mov	r0, sl
 80023ba:	4659      	mov	r1, fp
 80023bc:	f7fd ff60 	bl	8000280 <__aeabi_uldivmod>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <UART_SetConfig+0x38c>)
 80023c6:	fba3 1302 	umull	r1, r3, r3, r2
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	2164      	movs	r1, #100	; 0x64
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	3332      	adds	r3, #50	; 0x32
 80023d8:	4a09      	ldr	r2, [pc, #36]	; (8002400 <UART_SetConfig+0x38c>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	f003 020f 	and.w	r2, r3, #15
 80023e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4432      	add	r2, r6
 80023ea:	609a      	str	r2, [r3, #8]
}
 80023ec:	bf00      	nop
 80023ee:	377c      	adds	r7, #124	; 0x7c
 80023f0:	46bd      	mov	sp, r7
 80023f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023f6:	bf00      	nop
 80023f8:	40011000 	.word	0x40011000
 80023fc:	40011400 	.word	0x40011400
 8002400:	51eb851f 	.word	0x51eb851f

08002404 <__errno>:
 8002404:	4b01      	ldr	r3, [pc, #4]	; (800240c <__errno+0x8>)
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	2000000c 	.word	0x2000000c

08002410 <__libc_init_array>:
 8002410:	b570      	push	{r4, r5, r6, lr}
 8002412:	4d0d      	ldr	r5, [pc, #52]	; (8002448 <__libc_init_array+0x38>)
 8002414:	4c0d      	ldr	r4, [pc, #52]	; (800244c <__libc_init_array+0x3c>)
 8002416:	1b64      	subs	r4, r4, r5
 8002418:	10a4      	asrs	r4, r4, #2
 800241a:	2600      	movs	r6, #0
 800241c:	42a6      	cmp	r6, r4
 800241e:	d109      	bne.n	8002434 <__libc_init_array+0x24>
 8002420:	4d0b      	ldr	r5, [pc, #44]	; (8002450 <__libc_init_array+0x40>)
 8002422:	4c0c      	ldr	r4, [pc, #48]	; (8002454 <__libc_init_array+0x44>)
 8002424:	f000 fde8 	bl	8002ff8 <_init>
 8002428:	1b64      	subs	r4, r4, r5
 800242a:	10a4      	asrs	r4, r4, #2
 800242c:	2600      	movs	r6, #0
 800242e:	42a6      	cmp	r6, r4
 8002430:	d105      	bne.n	800243e <__libc_init_array+0x2e>
 8002432:	bd70      	pop	{r4, r5, r6, pc}
 8002434:	f855 3b04 	ldr.w	r3, [r5], #4
 8002438:	4798      	blx	r3
 800243a:	3601      	adds	r6, #1
 800243c:	e7ee      	b.n	800241c <__libc_init_array+0xc>
 800243e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002442:	4798      	blx	r3
 8002444:	3601      	adds	r6, #1
 8002446:	e7f2      	b.n	800242e <__libc_init_array+0x1e>
 8002448:	08003218 	.word	0x08003218
 800244c:	08003218 	.word	0x08003218
 8002450:	08003218 	.word	0x08003218
 8002454:	0800321c 	.word	0x0800321c

08002458 <memset>:
 8002458:	4402      	add	r2, r0
 800245a:	4603      	mov	r3, r0
 800245c:	4293      	cmp	r3, r2
 800245e:	d100      	bne.n	8002462 <memset+0xa>
 8002460:	4770      	bx	lr
 8002462:	f803 1b01 	strb.w	r1, [r3], #1
 8002466:	e7f9      	b.n	800245c <memset+0x4>

08002468 <siscanf>:
 8002468:	b40e      	push	{r1, r2, r3}
 800246a:	b510      	push	{r4, lr}
 800246c:	b09f      	sub	sp, #124	; 0x7c
 800246e:	ac21      	add	r4, sp, #132	; 0x84
 8002470:	f44f 7101 	mov.w	r1, #516	; 0x204
 8002474:	f854 2b04 	ldr.w	r2, [r4], #4
 8002478:	9201      	str	r2, [sp, #4]
 800247a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800247e:	9004      	str	r0, [sp, #16]
 8002480:	9008      	str	r0, [sp, #32]
 8002482:	f7fd fea5 	bl	80001d0 <strlen>
 8002486:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <siscanf+0x50>)
 8002488:	9005      	str	r0, [sp, #20]
 800248a:	9009      	str	r0, [sp, #36]	; 0x24
 800248c:	930d      	str	r3, [sp, #52]	; 0x34
 800248e:	480b      	ldr	r0, [pc, #44]	; (80024bc <siscanf+0x54>)
 8002490:	9a01      	ldr	r2, [sp, #4]
 8002492:	6800      	ldr	r0, [r0, #0]
 8002494:	9403      	str	r4, [sp, #12]
 8002496:	2300      	movs	r3, #0
 8002498:	9311      	str	r3, [sp, #68]	; 0x44
 800249a:	9316      	str	r3, [sp, #88]	; 0x58
 800249c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80024a4:	a904      	add	r1, sp, #16
 80024a6:	4623      	mov	r3, r4
 80024a8:	f000 f866 	bl	8002578 <__ssvfiscanf_r>
 80024ac:	b01f      	add	sp, #124	; 0x7c
 80024ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024b2:	b003      	add	sp, #12
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	080024c1 	.word	0x080024c1
 80024bc:	2000000c 	.word	0x2000000c

080024c0 <__seofread>:
 80024c0:	2000      	movs	r0, #0
 80024c2:	4770      	bx	lr

080024c4 <_sungetc_r>:
 80024c4:	b538      	push	{r3, r4, r5, lr}
 80024c6:	1c4b      	adds	r3, r1, #1
 80024c8:	4614      	mov	r4, r2
 80024ca:	d103      	bne.n	80024d4 <_sungetc_r+0x10>
 80024cc:	f04f 35ff 	mov.w	r5, #4294967295
 80024d0:	4628      	mov	r0, r5
 80024d2:	bd38      	pop	{r3, r4, r5, pc}
 80024d4:	8993      	ldrh	r3, [r2, #12]
 80024d6:	f023 0320 	bic.w	r3, r3, #32
 80024da:	8193      	strh	r3, [r2, #12]
 80024dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024de:	6852      	ldr	r2, [r2, #4]
 80024e0:	b2cd      	uxtb	r5, r1
 80024e2:	b18b      	cbz	r3, 8002508 <_sungetc_r+0x44>
 80024e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024e6:	4293      	cmp	r3, r2
 80024e8:	dd08      	ble.n	80024fc <_sungetc_r+0x38>
 80024ea:	6823      	ldr	r3, [r4, #0]
 80024ec:	1e5a      	subs	r2, r3, #1
 80024ee:	6022      	str	r2, [r4, #0]
 80024f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80024f4:	6863      	ldr	r3, [r4, #4]
 80024f6:	3301      	adds	r3, #1
 80024f8:	6063      	str	r3, [r4, #4]
 80024fa:	e7e9      	b.n	80024d0 <_sungetc_r+0xc>
 80024fc:	4621      	mov	r1, r4
 80024fe:	f000 fc3d 	bl	8002d7c <__submore>
 8002502:	2800      	cmp	r0, #0
 8002504:	d0f1      	beq.n	80024ea <_sungetc_r+0x26>
 8002506:	e7e1      	b.n	80024cc <_sungetc_r+0x8>
 8002508:	6921      	ldr	r1, [r4, #16]
 800250a:	6823      	ldr	r3, [r4, #0]
 800250c:	b151      	cbz	r1, 8002524 <_sungetc_r+0x60>
 800250e:	4299      	cmp	r1, r3
 8002510:	d208      	bcs.n	8002524 <_sungetc_r+0x60>
 8002512:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002516:	42a9      	cmp	r1, r5
 8002518:	d104      	bne.n	8002524 <_sungetc_r+0x60>
 800251a:	3b01      	subs	r3, #1
 800251c:	3201      	adds	r2, #1
 800251e:	6023      	str	r3, [r4, #0]
 8002520:	6062      	str	r2, [r4, #4]
 8002522:	e7d5      	b.n	80024d0 <_sungetc_r+0xc>
 8002524:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8002528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800252c:	6363      	str	r3, [r4, #52]	; 0x34
 800252e:	2303      	movs	r3, #3
 8002530:	63a3      	str	r3, [r4, #56]	; 0x38
 8002532:	4623      	mov	r3, r4
 8002534:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002538:	6023      	str	r3, [r4, #0]
 800253a:	2301      	movs	r3, #1
 800253c:	e7dc      	b.n	80024f8 <_sungetc_r+0x34>

0800253e <__ssrefill_r>:
 800253e:	b510      	push	{r4, lr}
 8002540:	460c      	mov	r4, r1
 8002542:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002544:	b169      	cbz	r1, 8002562 <__ssrefill_r+0x24>
 8002546:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800254a:	4299      	cmp	r1, r3
 800254c:	d001      	beq.n	8002552 <__ssrefill_r+0x14>
 800254e:	f000 fc5f 	bl	8002e10 <_free_r>
 8002552:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002554:	6063      	str	r3, [r4, #4]
 8002556:	2000      	movs	r0, #0
 8002558:	6360      	str	r0, [r4, #52]	; 0x34
 800255a:	b113      	cbz	r3, 8002562 <__ssrefill_r+0x24>
 800255c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800255e:	6023      	str	r3, [r4, #0]
 8002560:	bd10      	pop	{r4, pc}
 8002562:	6923      	ldr	r3, [r4, #16]
 8002564:	6023      	str	r3, [r4, #0]
 8002566:	2300      	movs	r3, #0
 8002568:	6063      	str	r3, [r4, #4]
 800256a:	89a3      	ldrh	r3, [r4, #12]
 800256c:	f043 0320 	orr.w	r3, r3, #32
 8002570:	81a3      	strh	r3, [r4, #12]
 8002572:	f04f 30ff 	mov.w	r0, #4294967295
 8002576:	e7f3      	b.n	8002560 <__ssrefill_r+0x22>

08002578 <__ssvfiscanf_r>:
 8002578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800257c:	460c      	mov	r4, r1
 800257e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8002582:	2100      	movs	r1, #0
 8002584:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8002588:	49b2      	ldr	r1, [pc, #712]	; (8002854 <__ssvfiscanf_r+0x2dc>)
 800258a:	91a0      	str	r1, [sp, #640]	; 0x280
 800258c:	f10d 0804 	add.w	r8, sp, #4
 8002590:	49b1      	ldr	r1, [pc, #708]	; (8002858 <__ssvfiscanf_r+0x2e0>)
 8002592:	4fb2      	ldr	r7, [pc, #712]	; (800285c <__ssvfiscanf_r+0x2e4>)
 8002594:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8002860 <__ssvfiscanf_r+0x2e8>
 8002598:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800259c:	4606      	mov	r6, r0
 800259e:	91a1      	str	r1, [sp, #644]	; 0x284
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	f892 a000 	ldrb.w	sl, [r2]
 80025a6:	f1ba 0f00 	cmp.w	sl, #0
 80025aa:	f000 8151 	beq.w	8002850 <__ssvfiscanf_r+0x2d8>
 80025ae:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80025b2:	f013 0308 	ands.w	r3, r3, #8
 80025b6:	f102 0501 	add.w	r5, r2, #1
 80025ba:	d019      	beq.n	80025f0 <__ssvfiscanf_r+0x78>
 80025bc:	6863      	ldr	r3, [r4, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	dd0f      	ble.n	80025e2 <__ssvfiscanf_r+0x6a>
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	781a      	ldrb	r2, [r3, #0]
 80025c6:	5cba      	ldrb	r2, [r7, r2]
 80025c8:	0712      	lsls	r2, r2, #28
 80025ca:	d401      	bmi.n	80025d0 <__ssvfiscanf_r+0x58>
 80025cc:	462a      	mov	r2, r5
 80025ce:	e7e8      	b.n	80025a2 <__ssvfiscanf_r+0x2a>
 80025d0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80025d2:	3201      	adds	r2, #1
 80025d4:	9245      	str	r2, [sp, #276]	; 0x114
 80025d6:	6862      	ldr	r2, [r4, #4]
 80025d8:	3301      	adds	r3, #1
 80025da:	3a01      	subs	r2, #1
 80025dc:	6062      	str	r2, [r4, #4]
 80025de:	6023      	str	r3, [r4, #0]
 80025e0:	e7ec      	b.n	80025bc <__ssvfiscanf_r+0x44>
 80025e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80025e4:	4621      	mov	r1, r4
 80025e6:	4630      	mov	r0, r6
 80025e8:	4798      	blx	r3
 80025ea:	2800      	cmp	r0, #0
 80025ec:	d0e9      	beq.n	80025c2 <__ssvfiscanf_r+0x4a>
 80025ee:	e7ed      	b.n	80025cc <__ssvfiscanf_r+0x54>
 80025f0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80025f4:	f040 8083 	bne.w	80026fe <__ssvfiscanf_r+0x186>
 80025f8:	9341      	str	r3, [sp, #260]	; 0x104
 80025fa:	9343      	str	r3, [sp, #268]	; 0x10c
 80025fc:	7853      	ldrb	r3, [r2, #1]
 80025fe:	2b2a      	cmp	r3, #42	; 0x2a
 8002600:	bf02      	ittt	eq
 8002602:	2310      	moveq	r3, #16
 8002604:	1c95      	addeq	r5, r2, #2
 8002606:	9341      	streq	r3, [sp, #260]	; 0x104
 8002608:	220a      	movs	r2, #10
 800260a:	46ab      	mov	fp, r5
 800260c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8002610:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8002614:	2b09      	cmp	r3, #9
 8002616:	d91d      	bls.n	8002654 <__ssvfiscanf_r+0xdc>
 8002618:	4891      	ldr	r0, [pc, #580]	; (8002860 <__ssvfiscanf_r+0x2e8>)
 800261a:	2203      	movs	r2, #3
 800261c:	f7fd fde0 	bl	80001e0 <memchr>
 8002620:	b140      	cbz	r0, 8002634 <__ssvfiscanf_r+0xbc>
 8002622:	2301      	movs	r3, #1
 8002624:	eba0 0009 	sub.w	r0, r0, r9
 8002628:	fa03 f000 	lsl.w	r0, r3, r0
 800262c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800262e:	4318      	orrs	r0, r3
 8002630:	9041      	str	r0, [sp, #260]	; 0x104
 8002632:	465d      	mov	r5, fp
 8002634:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002638:	2b78      	cmp	r3, #120	; 0x78
 800263a:	d806      	bhi.n	800264a <__ssvfiscanf_r+0xd2>
 800263c:	2b57      	cmp	r3, #87	; 0x57
 800263e:	d810      	bhi.n	8002662 <__ssvfiscanf_r+0xea>
 8002640:	2b25      	cmp	r3, #37	; 0x25
 8002642:	d05c      	beq.n	80026fe <__ssvfiscanf_r+0x186>
 8002644:	d856      	bhi.n	80026f4 <__ssvfiscanf_r+0x17c>
 8002646:	2b00      	cmp	r3, #0
 8002648:	d074      	beq.n	8002734 <__ssvfiscanf_r+0x1bc>
 800264a:	2303      	movs	r3, #3
 800264c:	9347      	str	r3, [sp, #284]	; 0x11c
 800264e:	230a      	movs	r3, #10
 8002650:	9342      	str	r3, [sp, #264]	; 0x108
 8002652:	e081      	b.n	8002758 <__ssvfiscanf_r+0x1e0>
 8002654:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002656:	fb02 1303 	mla	r3, r2, r3, r1
 800265a:	3b30      	subs	r3, #48	; 0x30
 800265c:	9343      	str	r3, [sp, #268]	; 0x10c
 800265e:	465d      	mov	r5, fp
 8002660:	e7d3      	b.n	800260a <__ssvfiscanf_r+0x92>
 8002662:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8002666:	2a20      	cmp	r2, #32
 8002668:	d8ef      	bhi.n	800264a <__ssvfiscanf_r+0xd2>
 800266a:	a101      	add	r1, pc, #4	; (adr r1, 8002670 <__ssvfiscanf_r+0xf8>)
 800266c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002670:	08002743 	.word	0x08002743
 8002674:	0800264b 	.word	0x0800264b
 8002678:	0800264b 	.word	0x0800264b
 800267c:	080027a1 	.word	0x080027a1
 8002680:	0800264b 	.word	0x0800264b
 8002684:	0800264b 	.word	0x0800264b
 8002688:	0800264b 	.word	0x0800264b
 800268c:	0800264b 	.word	0x0800264b
 8002690:	0800264b 	.word	0x0800264b
 8002694:	0800264b 	.word	0x0800264b
 8002698:	0800264b 	.word	0x0800264b
 800269c:	080027b7 	.word	0x080027b7
 80026a0:	0800278d 	.word	0x0800278d
 80026a4:	080026fb 	.word	0x080026fb
 80026a8:	080026fb 	.word	0x080026fb
 80026ac:	080026fb 	.word	0x080026fb
 80026b0:	0800264b 	.word	0x0800264b
 80026b4:	08002791 	.word	0x08002791
 80026b8:	0800264b 	.word	0x0800264b
 80026bc:	0800264b 	.word	0x0800264b
 80026c0:	0800264b 	.word	0x0800264b
 80026c4:	0800264b 	.word	0x0800264b
 80026c8:	080027c7 	.word	0x080027c7
 80026cc:	08002799 	.word	0x08002799
 80026d0:	0800273b 	.word	0x0800273b
 80026d4:	0800264b 	.word	0x0800264b
 80026d8:	0800264b 	.word	0x0800264b
 80026dc:	080027c3 	.word	0x080027c3
 80026e0:	0800264b 	.word	0x0800264b
 80026e4:	0800278d 	.word	0x0800278d
 80026e8:	0800264b 	.word	0x0800264b
 80026ec:	0800264b 	.word	0x0800264b
 80026f0:	08002743 	.word	0x08002743
 80026f4:	3b45      	subs	r3, #69	; 0x45
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d8a7      	bhi.n	800264a <__ssvfiscanf_r+0xd2>
 80026fa:	2305      	movs	r3, #5
 80026fc:	e02b      	b.n	8002756 <__ssvfiscanf_r+0x1de>
 80026fe:	6863      	ldr	r3, [r4, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	dd0d      	ble.n	8002720 <__ssvfiscanf_r+0x1a8>
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	781a      	ldrb	r2, [r3, #0]
 8002708:	4552      	cmp	r2, sl
 800270a:	f040 80a1 	bne.w	8002850 <__ssvfiscanf_r+0x2d8>
 800270e:	3301      	adds	r3, #1
 8002710:	6862      	ldr	r2, [r4, #4]
 8002712:	6023      	str	r3, [r4, #0]
 8002714:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8002716:	3a01      	subs	r2, #1
 8002718:	3301      	adds	r3, #1
 800271a:	6062      	str	r2, [r4, #4]
 800271c:	9345      	str	r3, [sp, #276]	; 0x114
 800271e:	e755      	b.n	80025cc <__ssvfiscanf_r+0x54>
 8002720:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002722:	4621      	mov	r1, r4
 8002724:	4630      	mov	r0, r6
 8002726:	4798      	blx	r3
 8002728:	2800      	cmp	r0, #0
 800272a:	d0eb      	beq.n	8002704 <__ssvfiscanf_r+0x18c>
 800272c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800272e:	2800      	cmp	r0, #0
 8002730:	f040 8084 	bne.w	800283c <__ssvfiscanf_r+0x2c4>
 8002734:	f04f 30ff 	mov.w	r0, #4294967295
 8002738:	e086      	b.n	8002848 <__ssvfiscanf_r+0x2d0>
 800273a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800273c:	f042 0220 	orr.w	r2, r2, #32
 8002740:	9241      	str	r2, [sp, #260]	; 0x104
 8002742:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002748:	9241      	str	r2, [sp, #260]	; 0x104
 800274a:	2210      	movs	r2, #16
 800274c:	2b6f      	cmp	r3, #111	; 0x6f
 800274e:	9242      	str	r2, [sp, #264]	; 0x108
 8002750:	bf34      	ite	cc
 8002752:	2303      	movcc	r3, #3
 8002754:	2304      	movcs	r3, #4
 8002756:	9347      	str	r3, [sp, #284]	; 0x11c
 8002758:	6863      	ldr	r3, [r4, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	dd41      	ble.n	80027e2 <__ssvfiscanf_r+0x26a>
 800275e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002760:	0659      	lsls	r1, r3, #25
 8002762:	d404      	bmi.n	800276e <__ssvfiscanf_r+0x1f6>
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	781a      	ldrb	r2, [r3, #0]
 8002768:	5cba      	ldrb	r2, [r7, r2]
 800276a:	0712      	lsls	r2, r2, #28
 800276c:	d440      	bmi.n	80027f0 <__ssvfiscanf_r+0x278>
 800276e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002770:	2b02      	cmp	r3, #2
 8002772:	dc4f      	bgt.n	8002814 <__ssvfiscanf_r+0x29c>
 8002774:	466b      	mov	r3, sp
 8002776:	4622      	mov	r2, r4
 8002778:	a941      	add	r1, sp, #260	; 0x104
 800277a:	4630      	mov	r0, r6
 800277c:	f000 f874 	bl	8002868 <_scanf_chars>
 8002780:	2801      	cmp	r0, #1
 8002782:	d065      	beq.n	8002850 <__ssvfiscanf_r+0x2d8>
 8002784:	2802      	cmp	r0, #2
 8002786:	f47f af21 	bne.w	80025cc <__ssvfiscanf_r+0x54>
 800278a:	e7cf      	b.n	800272c <__ssvfiscanf_r+0x1b4>
 800278c:	220a      	movs	r2, #10
 800278e:	e7dd      	b.n	800274c <__ssvfiscanf_r+0x1d4>
 8002790:	2300      	movs	r3, #0
 8002792:	9342      	str	r3, [sp, #264]	; 0x108
 8002794:	2303      	movs	r3, #3
 8002796:	e7de      	b.n	8002756 <__ssvfiscanf_r+0x1de>
 8002798:	2308      	movs	r3, #8
 800279a:	9342      	str	r3, [sp, #264]	; 0x108
 800279c:	2304      	movs	r3, #4
 800279e:	e7da      	b.n	8002756 <__ssvfiscanf_r+0x1de>
 80027a0:	4629      	mov	r1, r5
 80027a2:	4640      	mov	r0, r8
 80027a4:	f000 f9ac 	bl	8002b00 <__sccl>
 80027a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80027aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ae:	9341      	str	r3, [sp, #260]	; 0x104
 80027b0:	4605      	mov	r5, r0
 80027b2:	2301      	movs	r3, #1
 80027b4:	e7cf      	b.n	8002756 <__ssvfiscanf_r+0x1de>
 80027b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80027b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027bc:	9341      	str	r3, [sp, #260]	; 0x104
 80027be:	2300      	movs	r3, #0
 80027c0:	e7c9      	b.n	8002756 <__ssvfiscanf_r+0x1de>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e7c7      	b.n	8002756 <__ssvfiscanf_r+0x1de>
 80027c6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80027c8:	06c3      	lsls	r3, r0, #27
 80027ca:	f53f aeff 	bmi.w	80025cc <__ssvfiscanf_r+0x54>
 80027ce:	9b00      	ldr	r3, [sp, #0]
 80027d0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80027d2:	1d19      	adds	r1, r3, #4
 80027d4:	9100      	str	r1, [sp, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	07c0      	lsls	r0, r0, #31
 80027da:	bf4c      	ite	mi
 80027dc:	801a      	strhmi	r2, [r3, #0]
 80027de:	601a      	strpl	r2, [r3, #0]
 80027e0:	e6f4      	b.n	80025cc <__ssvfiscanf_r+0x54>
 80027e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80027e4:	4621      	mov	r1, r4
 80027e6:	4630      	mov	r0, r6
 80027e8:	4798      	blx	r3
 80027ea:	2800      	cmp	r0, #0
 80027ec:	d0b7      	beq.n	800275e <__ssvfiscanf_r+0x1e6>
 80027ee:	e79d      	b.n	800272c <__ssvfiscanf_r+0x1b4>
 80027f0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80027f2:	3201      	adds	r2, #1
 80027f4:	9245      	str	r2, [sp, #276]	; 0x114
 80027f6:	6862      	ldr	r2, [r4, #4]
 80027f8:	3a01      	subs	r2, #1
 80027fa:	2a00      	cmp	r2, #0
 80027fc:	6062      	str	r2, [r4, #4]
 80027fe:	dd02      	ble.n	8002806 <__ssvfiscanf_r+0x28e>
 8002800:	3301      	adds	r3, #1
 8002802:	6023      	str	r3, [r4, #0]
 8002804:	e7ae      	b.n	8002764 <__ssvfiscanf_r+0x1ec>
 8002806:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002808:	4621      	mov	r1, r4
 800280a:	4630      	mov	r0, r6
 800280c:	4798      	blx	r3
 800280e:	2800      	cmp	r0, #0
 8002810:	d0a8      	beq.n	8002764 <__ssvfiscanf_r+0x1ec>
 8002812:	e78b      	b.n	800272c <__ssvfiscanf_r+0x1b4>
 8002814:	2b04      	cmp	r3, #4
 8002816:	dc06      	bgt.n	8002826 <__ssvfiscanf_r+0x2ae>
 8002818:	466b      	mov	r3, sp
 800281a:	4622      	mov	r2, r4
 800281c:	a941      	add	r1, sp, #260	; 0x104
 800281e:	4630      	mov	r0, r6
 8002820:	f000 f87a 	bl	8002918 <_scanf_i>
 8002824:	e7ac      	b.n	8002780 <__ssvfiscanf_r+0x208>
 8002826:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <__ssvfiscanf_r+0x2ec>)
 8002828:	2b00      	cmp	r3, #0
 800282a:	f43f aecf 	beq.w	80025cc <__ssvfiscanf_r+0x54>
 800282e:	466b      	mov	r3, sp
 8002830:	4622      	mov	r2, r4
 8002832:	a941      	add	r1, sp, #260	; 0x104
 8002834:	4630      	mov	r0, r6
 8002836:	f3af 8000 	nop.w
 800283a:	e7a1      	b.n	8002780 <__ssvfiscanf_r+0x208>
 800283c:	89a3      	ldrh	r3, [r4, #12]
 800283e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002842:	bf18      	it	ne
 8002844:	f04f 30ff 	movne.w	r0, #4294967295
 8002848:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800284c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002850:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002852:	e7f9      	b.n	8002848 <__ssvfiscanf_r+0x2d0>
 8002854:	080024c5 	.word	0x080024c5
 8002858:	0800253f 	.word	0x0800253f
 800285c:	080030b0 	.word	0x080030b0
 8002860:	08003090 	.word	0x08003090
 8002864:	00000000 	.word	0x00000000

08002868 <_scanf_chars>:
 8002868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800286c:	4615      	mov	r5, r2
 800286e:	688a      	ldr	r2, [r1, #8]
 8002870:	4680      	mov	r8, r0
 8002872:	460c      	mov	r4, r1
 8002874:	b932      	cbnz	r2, 8002884 <_scanf_chars+0x1c>
 8002876:	698a      	ldr	r2, [r1, #24]
 8002878:	2a00      	cmp	r2, #0
 800287a:	bf0c      	ite	eq
 800287c:	2201      	moveq	r2, #1
 800287e:	f04f 32ff 	movne.w	r2, #4294967295
 8002882:	608a      	str	r2, [r1, #8]
 8002884:	6822      	ldr	r2, [r4, #0]
 8002886:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002914 <_scanf_chars+0xac>
 800288a:	06d1      	lsls	r1, r2, #27
 800288c:	bf5f      	itttt	pl
 800288e:	681a      	ldrpl	r2, [r3, #0]
 8002890:	1d11      	addpl	r1, r2, #4
 8002892:	6019      	strpl	r1, [r3, #0]
 8002894:	6816      	ldrpl	r6, [r2, #0]
 8002896:	2700      	movs	r7, #0
 8002898:	69a0      	ldr	r0, [r4, #24]
 800289a:	b188      	cbz	r0, 80028c0 <_scanf_chars+0x58>
 800289c:	2801      	cmp	r0, #1
 800289e:	d107      	bne.n	80028b0 <_scanf_chars+0x48>
 80028a0:	682b      	ldr	r3, [r5, #0]
 80028a2:	781a      	ldrb	r2, [r3, #0]
 80028a4:	6963      	ldr	r3, [r4, #20]
 80028a6:	5c9b      	ldrb	r3, [r3, r2]
 80028a8:	b953      	cbnz	r3, 80028c0 <_scanf_chars+0x58>
 80028aa:	bb27      	cbnz	r7, 80028f6 <_scanf_chars+0x8e>
 80028ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028b0:	2802      	cmp	r0, #2
 80028b2:	d120      	bne.n	80028f6 <_scanf_chars+0x8e>
 80028b4:	682b      	ldr	r3, [r5, #0]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80028bc:	071b      	lsls	r3, r3, #28
 80028be:	d41a      	bmi.n	80028f6 <_scanf_chars+0x8e>
 80028c0:	6823      	ldr	r3, [r4, #0]
 80028c2:	06da      	lsls	r2, r3, #27
 80028c4:	bf5e      	ittt	pl
 80028c6:	682b      	ldrpl	r3, [r5, #0]
 80028c8:	781b      	ldrbpl	r3, [r3, #0]
 80028ca:	f806 3b01 	strbpl.w	r3, [r6], #1
 80028ce:	682a      	ldr	r2, [r5, #0]
 80028d0:	686b      	ldr	r3, [r5, #4]
 80028d2:	3201      	adds	r2, #1
 80028d4:	602a      	str	r2, [r5, #0]
 80028d6:	68a2      	ldr	r2, [r4, #8]
 80028d8:	3b01      	subs	r3, #1
 80028da:	3a01      	subs	r2, #1
 80028dc:	606b      	str	r3, [r5, #4]
 80028de:	3701      	adds	r7, #1
 80028e0:	60a2      	str	r2, [r4, #8]
 80028e2:	b142      	cbz	r2, 80028f6 <_scanf_chars+0x8e>
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	dcd7      	bgt.n	8002898 <_scanf_chars+0x30>
 80028e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80028ec:	4629      	mov	r1, r5
 80028ee:	4640      	mov	r0, r8
 80028f0:	4798      	blx	r3
 80028f2:	2800      	cmp	r0, #0
 80028f4:	d0d0      	beq.n	8002898 <_scanf_chars+0x30>
 80028f6:	6823      	ldr	r3, [r4, #0]
 80028f8:	f013 0310 	ands.w	r3, r3, #16
 80028fc:	d105      	bne.n	800290a <_scanf_chars+0xa2>
 80028fe:	68e2      	ldr	r2, [r4, #12]
 8002900:	3201      	adds	r2, #1
 8002902:	60e2      	str	r2, [r4, #12]
 8002904:	69a2      	ldr	r2, [r4, #24]
 8002906:	b102      	cbz	r2, 800290a <_scanf_chars+0xa2>
 8002908:	7033      	strb	r3, [r6, #0]
 800290a:	6923      	ldr	r3, [r4, #16]
 800290c:	441f      	add	r7, r3
 800290e:	6127      	str	r7, [r4, #16]
 8002910:	2000      	movs	r0, #0
 8002912:	e7cb      	b.n	80028ac <_scanf_chars+0x44>
 8002914:	080030b0 	.word	0x080030b0

08002918 <_scanf_i>:
 8002918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800291c:	4698      	mov	r8, r3
 800291e:	4b74      	ldr	r3, [pc, #464]	; (8002af0 <_scanf_i+0x1d8>)
 8002920:	460c      	mov	r4, r1
 8002922:	4682      	mov	sl, r0
 8002924:	4616      	mov	r6, r2
 8002926:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800292a:	b087      	sub	sp, #28
 800292c:	ab03      	add	r3, sp, #12
 800292e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002932:	4b70      	ldr	r3, [pc, #448]	; (8002af4 <_scanf_i+0x1dc>)
 8002934:	69a1      	ldr	r1, [r4, #24]
 8002936:	4a70      	ldr	r2, [pc, #448]	; (8002af8 <_scanf_i+0x1e0>)
 8002938:	2903      	cmp	r1, #3
 800293a:	bf18      	it	ne
 800293c:	461a      	movne	r2, r3
 800293e:	68a3      	ldr	r3, [r4, #8]
 8002940:	9201      	str	r2, [sp, #4]
 8002942:	1e5a      	subs	r2, r3, #1
 8002944:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002948:	bf88      	it	hi
 800294a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800294e:	4627      	mov	r7, r4
 8002950:	bf82      	ittt	hi
 8002952:	eb03 0905 	addhi.w	r9, r3, r5
 8002956:	f240 135d 	movwhi	r3, #349	; 0x15d
 800295a:	60a3      	strhi	r3, [r4, #8]
 800295c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8002960:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8002964:	bf98      	it	ls
 8002966:	f04f 0900 	movls.w	r9, #0
 800296a:	6023      	str	r3, [r4, #0]
 800296c:	463d      	mov	r5, r7
 800296e:	f04f 0b00 	mov.w	fp, #0
 8002972:	6831      	ldr	r1, [r6, #0]
 8002974:	ab03      	add	r3, sp, #12
 8002976:	7809      	ldrb	r1, [r1, #0]
 8002978:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800297c:	2202      	movs	r2, #2
 800297e:	f7fd fc2f 	bl	80001e0 <memchr>
 8002982:	b328      	cbz	r0, 80029d0 <_scanf_i+0xb8>
 8002984:	f1bb 0f01 	cmp.w	fp, #1
 8002988:	d159      	bne.n	8002a3e <_scanf_i+0x126>
 800298a:	6862      	ldr	r2, [r4, #4]
 800298c:	b92a      	cbnz	r2, 800299a <_scanf_i+0x82>
 800298e:	6822      	ldr	r2, [r4, #0]
 8002990:	2308      	movs	r3, #8
 8002992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002996:	6063      	str	r3, [r4, #4]
 8002998:	6022      	str	r2, [r4, #0]
 800299a:	6822      	ldr	r2, [r4, #0]
 800299c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80029a0:	6022      	str	r2, [r4, #0]
 80029a2:	68a2      	ldr	r2, [r4, #8]
 80029a4:	1e51      	subs	r1, r2, #1
 80029a6:	60a1      	str	r1, [r4, #8]
 80029a8:	b192      	cbz	r2, 80029d0 <_scanf_i+0xb8>
 80029aa:	6832      	ldr	r2, [r6, #0]
 80029ac:	1c51      	adds	r1, r2, #1
 80029ae:	6031      	str	r1, [r6, #0]
 80029b0:	7812      	ldrb	r2, [r2, #0]
 80029b2:	f805 2b01 	strb.w	r2, [r5], #1
 80029b6:	6872      	ldr	r2, [r6, #4]
 80029b8:	3a01      	subs	r2, #1
 80029ba:	2a00      	cmp	r2, #0
 80029bc:	6072      	str	r2, [r6, #4]
 80029be:	dc07      	bgt.n	80029d0 <_scanf_i+0xb8>
 80029c0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80029c4:	4631      	mov	r1, r6
 80029c6:	4650      	mov	r0, sl
 80029c8:	4790      	blx	r2
 80029ca:	2800      	cmp	r0, #0
 80029cc:	f040 8085 	bne.w	8002ada <_scanf_i+0x1c2>
 80029d0:	f10b 0b01 	add.w	fp, fp, #1
 80029d4:	f1bb 0f03 	cmp.w	fp, #3
 80029d8:	d1cb      	bne.n	8002972 <_scanf_i+0x5a>
 80029da:	6863      	ldr	r3, [r4, #4]
 80029dc:	b90b      	cbnz	r3, 80029e2 <_scanf_i+0xca>
 80029de:	230a      	movs	r3, #10
 80029e0:	6063      	str	r3, [r4, #4]
 80029e2:	6863      	ldr	r3, [r4, #4]
 80029e4:	4945      	ldr	r1, [pc, #276]	; (8002afc <_scanf_i+0x1e4>)
 80029e6:	6960      	ldr	r0, [r4, #20]
 80029e8:	1ac9      	subs	r1, r1, r3
 80029ea:	f000 f889 	bl	8002b00 <__sccl>
 80029ee:	f04f 0b00 	mov.w	fp, #0
 80029f2:	68a3      	ldr	r3, [r4, #8]
 80029f4:	6822      	ldr	r2, [r4, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d03d      	beq.n	8002a76 <_scanf_i+0x15e>
 80029fa:	6831      	ldr	r1, [r6, #0]
 80029fc:	6960      	ldr	r0, [r4, #20]
 80029fe:	f891 c000 	ldrb.w	ip, [r1]
 8002a02:	f810 000c 	ldrb.w	r0, [r0, ip]
 8002a06:	2800      	cmp	r0, #0
 8002a08:	d035      	beq.n	8002a76 <_scanf_i+0x15e>
 8002a0a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8002a0e:	d124      	bne.n	8002a5a <_scanf_i+0x142>
 8002a10:	0510      	lsls	r0, r2, #20
 8002a12:	d522      	bpl.n	8002a5a <_scanf_i+0x142>
 8002a14:	f10b 0b01 	add.w	fp, fp, #1
 8002a18:	f1b9 0f00 	cmp.w	r9, #0
 8002a1c:	d003      	beq.n	8002a26 <_scanf_i+0x10e>
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f109 39ff 	add.w	r9, r9, #4294967295
 8002a24:	60a3      	str	r3, [r4, #8]
 8002a26:	6873      	ldr	r3, [r6, #4]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	6073      	str	r3, [r6, #4]
 8002a2e:	dd1b      	ble.n	8002a68 <_scanf_i+0x150>
 8002a30:	6833      	ldr	r3, [r6, #0]
 8002a32:	3301      	adds	r3, #1
 8002a34:	6033      	str	r3, [r6, #0]
 8002a36:	68a3      	ldr	r3, [r4, #8]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	60a3      	str	r3, [r4, #8]
 8002a3c:	e7d9      	b.n	80029f2 <_scanf_i+0xda>
 8002a3e:	f1bb 0f02 	cmp.w	fp, #2
 8002a42:	d1ae      	bne.n	80029a2 <_scanf_i+0x8a>
 8002a44:	6822      	ldr	r2, [r4, #0]
 8002a46:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8002a4a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002a4e:	d1bf      	bne.n	80029d0 <_scanf_i+0xb8>
 8002a50:	2310      	movs	r3, #16
 8002a52:	6063      	str	r3, [r4, #4]
 8002a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a58:	e7a2      	b.n	80029a0 <_scanf_i+0x88>
 8002a5a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8002a5e:	6022      	str	r2, [r4, #0]
 8002a60:	780b      	ldrb	r3, [r1, #0]
 8002a62:	f805 3b01 	strb.w	r3, [r5], #1
 8002a66:	e7de      	b.n	8002a26 <_scanf_i+0x10e>
 8002a68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002a6c:	4631      	mov	r1, r6
 8002a6e:	4650      	mov	r0, sl
 8002a70:	4798      	blx	r3
 8002a72:	2800      	cmp	r0, #0
 8002a74:	d0df      	beq.n	8002a36 <_scanf_i+0x11e>
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	05d9      	lsls	r1, r3, #23
 8002a7a:	d50d      	bpl.n	8002a98 <_scanf_i+0x180>
 8002a7c:	42bd      	cmp	r5, r7
 8002a7e:	d909      	bls.n	8002a94 <_scanf_i+0x17c>
 8002a80:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002a84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002a88:	4632      	mov	r2, r6
 8002a8a:	4650      	mov	r0, sl
 8002a8c:	4798      	blx	r3
 8002a8e:	f105 39ff 	add.w	r9, r5, #4294967295
 8002a92:	464d      	mov	r5, r9
 8002a94:	42bd      	cmp	r5, r7
 8002a96:	d028      	beq.n	8002aea <_scanf_i+0x1d2>
 8002a98:	6822      	ldr	r2, [r4, #0]
 8002a9a:	f012 0210 	ands.w	r2, r2, #16
 8002a9e:	d113      	bne.n	8002ac8 <_scanf_i+0x1b0>
 8002aa0:	702a      	strb	r2, [r5, #0]
 8002aa2:	6863      	ldr	r3, [r4, #4]
 8002aa4:	9e01      	ldr	r6, [sp, #4]
 8002aa6:	4639      	mov	r1, r7
 8002aa8:	4650      	mov	r0, sl
 8002aaa:	47b0      	blx	r6
 8002aac:	f8d8 3000 	ldr.w	r3, [r8]
 8002ab0:	6821      	ldr	r1, [r4, #0]
 8002ab2:	1d1a      	adds	r2, r3, #4
 8002ab4:	f8c8 2000 	str.w	r2, [r8]
 8002ab8:	f011 0f20 	tst.w	r1, #32
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	d00f      	beq.n	8002ae0 <_scanf_i+0x1c8>
 8002ac0:	6018      	str	r0, [r3, #0]
 8002ac2:	68e3      	ldr	r3, [r4, #12]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	60e3      	str	r3, [r4, #12]
 8002ac8:	1bed      	subs	r5, r5, r7
 8002aca:	44ab      	add	fp, r5
 8002acc:	6925      	ldr	r5, [r4, #16]
 8002ace:	445d      	add	r5, fp
 8002ad0:	6125      	str	r5, [r4, #16]
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	b007      	add	sp, #28
 8002ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ada:	f04f 0b00 	mov.w	fp, #0
 8002ade:	e7ca      	b.n	8002a76 <_scanf_i+0x15e>
 8002ae0:	07ca      	lsls	r2, r1, #31
 8002ae2:	bf4c      	ite	mi
 8002ae4:	8018      	strhmi	r0, [r3, #0]
 8002ae6:	6018      	strpl	r0, [r3, #0]
 8002ae8:	e7eb      	b.n	8002ac2 <_scanf_i+0x1aa>
 8002aea:	2001      	movs	r0, #1
 8002aec:	e7f2      	b.n	8002ad4 <_scanf_i+0x1bc>
 8002aee:	bf00      	nop
 8002af0:	0800306c 	.word	0x0800306c
 8002af4:	08002d79 	.word	0x08002d79
 8002af8:	08002c7d 	.word	0x08002c7d
 8002afc:	080030ad 	.word	0x080030ad

08002b00 <__sccl>:
 8002b00:	b570      	push	{r4, r5, r6, lr}
 8002b02:	780b      	ldrb	r3, [r1, #0]
 8002b04:	4604      	mov	r4, r0
 8002b06:	2b5e      	cmp	r3, #94	; 0x5e
 8002b08:	bf0b      	itete	eq
 8002b0a:	784b      	ldrbeq	r3, [r1, #1]
 8002b0c:	1c48      	addne	r0, r1, #1
 8002b0e:	1c88      	addeq	r0, r1, #2
 8002b10:	2200      	movne	r2, #0
 8002b12:	bf08      	it	eq
 8002b14:	2201      	moveq	r2, #1
 8002b16:	1e61      	subs	r1, r4, #1
 8002b18:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8002b1c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8002b20:	42a9      	cmp	r1, r5
 8002b22:	d1fb      	bne.n	8002b1c <__sccl+0x1c>
 8002b24:	b90b      	cbnz	r3, 8002b2a <__sccl+0x2a>
 8002b26:	3801      	subs	r0, #1
 8002b28:	bd70      	pop	{r4, r5, r6, pc}
 8002b2a:	f082 0101 	eor.w	r1, r2, #1
 8002b2e:	54e1      	strb	r1, [r4, r3]
 8002b30:	1c42      	adds	r2, r0, #1
 8002b32:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8002b36:	2d2d      	cmp	r5, #45	; 0x2d
 8002b38:	f102 36ff 	add.w	r6, r2, #4294967295
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	d006      	beq.n	8002b4e <__sccl+0x4e>
 8002b40:	2d5d      	cmp	r5, #93	; 0x5d
 8002b42:	d0f1      	beq.n	8002b28 <__sccl+0x28>
 8002b44:	b90d      	cbnz	r5, 8002b4a <__sccl+0x4a>
 8002b46:	4630      	mov	r0, r6
 8002b48:	e7ee      	b.n	8002b28 <__sccl+0x28>
 8002b4a:	462b      	mov	r3, r5
 8002b4c:	e7ef      	b.n	8002b2e <__sccl+0x2e>
 8002b4e:	7816      	ldrb	r6, [r2, #0]
 8002b50:	2e5d      	cmp	r6, #93	; 0x5d
 8002b52:	d0fa      	beq.n	8002b4a <__sccl+0x4a>
 8002b54:	42b3      	cmp	r3, r6
 8002b56:	dcf8      	bgt.n	8002b4a <__sccl+0x4a>
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3001      	adds	r0, #1
 8002b5c:	4286      	cmp	r6, r0
 8002b5e:	5421      	strb	r1, [r4, r0]
 8002b60:	dcfb      	bgt.n	8002b5a <__sccl+0x5a>
 8002b62:	43d8      	mvns	r0, r3
 8002b64:	4430      	add	r0, r6
 8002b66:	1c5d      	adds	r5, r3, #1
 8002b68:	42b3      	cmp	r3, r6
 8002b6a:	bfa8      	it	ge
 8002b6c:	2000      	movge	r0, #0
 8002b6e:	182b      	adds	r3, r5, r0
 8002b70:	3202      	adds	r2, #2
 8002b72:	e7de      	b.n	8002b32 <__sccl+0x32>

08002b74 <_strtol_l.isra.0>:
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b7a:	d001      	beq.n	8002b80 <_strtol_l.isra.0+0xc>
 8002b7c:	2b24      	cmp	r3, #36	; 0x24
 8002b7e:	d906      	bls.n	8002b8e <_strtol_l.isra.0+0x1a>
 8002b80:	f7ff fc40 	bl	8002404 <__errno>
 8002b84:	2316      	movs	r3, #22
 8002b86:	6003      	str	r3, [r0, #0]
 8002b88:	2000      	movs	r0, #0
 8002b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b8e:	4f3a      	ldr	r7, [pc, #232]	; (8002c78 <_strtol_l.isra.0+0x104>)
 8002b90:	468e      	mov	lr, r1
 8002b92:	4676      	mov	r6, lr
 8002b94:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002b98:	5de5      	ldrb	r5, [r4, r7]
 8002b9a:	f015 0508 	ands.w	r5, r5, #8
 8002b9e:	d1f8      	bne.n	8002b92 <_strtol_l.isra.0+0x1e>
 8002ba0:	2c2d      	cmp	r4, #45	; 0x2d
 8002ba2:	d134      	bne.n	8002c0e <_strtol_l.isra.0+0x9a>
 8002ba4:	f89e 4000 	ldrb.w	r4, [lr]
 8002ba8:	f04f 0801 	mov.w	r8, #1
 8002bac:	f106 0e02 	add.w	lr, r6, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d05c      	beq.n	8002c6e <_strtol_l.isra.0+0xfa>
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d10c      	bne.n	8002bd2 <_strtol_l.isra.0+0x5e>
 8002bb8:	2c30      	cmp	r4, #48	; 0x30
 8002bba:	d10a      	bne.n	8002bd2 <_strtol_l.isra.0+0x5e>
 8002bbc:	f89e 4000 	ldrb.w	r4, [lr]
 8002bc0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002bc4:	2c58      	cmp	r4, #88	; 0x58
 8002bc6:	d14d      	bne.n	8002c64 <_strtol_l.isra.0+0xf0>
 8002bc8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8002bcc:	2310      	movs	r3, #16
 8002bce:	f10e 0e02 	add.w	lr, lr, #2
 8002bd2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8002bd6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002bda:	2600      	movs	r6, #0
 8002bdc:	fbbc f9f3 	udiv	r9, ip, r3
 8002be0:	4635      	mov	r5, r6
 8002be2:	fb03 ca19 	mls	sl, r3, r9, ip
 8002be6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8002bea:	2f09      	cmp	r7, #9
 8002bec:	d818      	bhi.n	8002c20 <_strtol_l.isra.0+0xac>
 8002bee:	463c      	mov	r4, r7
 8002bf0:	42a3      	cmp	r3, r4
 8002bf2:	dd24      	ble.n	8002c3e <_strtol_l.isra.0+0xca>
 8002bf4:	2e00      	cmp	r6, #0
 8002bf6:	db1f      	blt.n	8002c38 <_strtol_l.isra.0+0xc4>
 8002bf8:	45a9      	cmp	r9, r5
 8002bfa:	d31d      	bcc.n	8002c38 <_strtol_l.isra.0+0xc4>
 8002bfc:	d101      	bne.n	8002c02 <_strtol_l.isra.0+0x8e>
 8002bfe:	45a2      	cmp	sl, r4
 8002c00:	db1a      	blt.n	8002c38 <_strtol_l.isra.0+0xc4>
 8002c02:	fb05 4503 	mla	r5, r5, r3, r4
 8002c06:	2601      	movs	r6, #1
 8002c08:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002c0c:	e7eb      	b.n	8002be6 <_strtol_l.isra.0+0x72>
 8002c0e:	2c2b      	cmp	r4, #43	; 0x2b
 8002c10:	bf08      	it	eq
 8002c12:	f89e 4000 	ldrbeq.w	r4, [lr]
 8002c16:	46a8      	mov	r8, r5
 8002c18:	bf08      	it	eq
 8002c1a:	f106 0e02 	addeq.w	lr, r6, #2
 8002c1e:	e7c7      	b.n	8002bb0 <_strtol_l.isra.0+0x3c>
 8002c20:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8002c24:	2f19      	cmp	r7, #25
 8002c26:	d801      	bhi.n	8002c2c <_strtol_l.isra.0+0xb8>
 8002c28:	3c37      	subs	r4, #55	; 0x37
 8002c2a:	e7e1      	b.n	8002bf0 <_strtol_l.isra.0+0x7c>
 8002c2c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8002c30:	2f19      	cmp	r7, #25
 8002c32:	d804      	bhi.n	8002c3e <_strtol_l.isra.0+0xca>
 8002c34:	3c57      	subs	r4, #87	; 0x57
 8002c36:	e7db      	b.n	8002bf0 <_strtol_l.isra.0+0x7c>
 8002c38:	f04f 36ff 	mov.w	r6, #4294967295
 8002c3c:	e7e4      	b.n	8002c08 <_strtol_l.isra.0+0x94>
 8002c3e:	2e00      	cmp	r6, #0
 8002c40:	da05      	bge.n	8002c4e <_strtol_l.isra.0+0xda>
 8002c42:	2322      	movs	r3, #34	; 0x22
 8002c44:	6003      	str	r3, [r0, #0]
 8002c46:	4665      	mov	r5, ip
 8002c48:	b942      	cbnz	r2, 8002c5c <_strtol_l.isra.0+0xe8>
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	e79d      	b.n	8002b8a <_strtol_l.isra.0+0x16>
 8002c4e:	f1b8 0f00 	cmp.w	r8, #0
 8002c52:	d000      	beq.n	8002c56 <_strtol_l.isra.0+0xe2>
 8002c54:	426d      	negs	r5, r5
 8002c56:	2a00      	cmp	r2, #0
 8002c58:	d0f7      	beq.n	8002c4a <_strtol_l.isra.0+0xd6>
 8002c5a:	b10e      	cbz	r6, 8002c60 <_strtol_l.isra.0+0xec>
 8002c5c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8002c60:	6011      	str	r1, [r2, #0]
 8002c62:	e7f2      	b.n	8002c4a <_strtol_l.isra.0+0xd6>
 8002c64:	2430      	movs	r4, #48	; 0x30
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1b3      	bne.n	8002bd2 <_strtol_l.isra.0+0x5e>
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	e7b1      	b.n	8002bd2 <_strtol_l.isra.0+0x5e>
 8002c6e:	2c30      	cmp	r4, #48	; 0x30
 8002c70:	d0a4      	beq.n	8002bbc <_strtol_l.isra.0+0x48>
 8002c72:	230a      	movs	r3, #10
 8002c74:	e7ad      	b.n	8002bd2 <_strtol_l.isra.0+0x5e>
 8002c76:	bf00      	nop
 8002c78:	080030b0 	.word	0x080030b0

08002c7c <_strtol_r>:
 8002c7c:	f7ff bf7a 	b.w	8002b74 <_strtol_l.isra.0>

08002c80 <_strtoul_l.isra.0>:
 8002c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c84:	4e3b      	ldr	r6, [pc, #236]	; (8002d74 <_strtoul_l.isra.0+0xf4>)
 8002c86:	4686      	mov	lr, r0
 8002c88:	468c      	mov	ip, r1
 8002c8a:	4660      	mov	r0, ip
 8002c8c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8002c90:	5da5      	ldrb	r5, [r4, r6]
 8002c92:	f015 0508 	ands.w	r5, r5, #8
 8002c96:	d1f8      	bne.n	8002c8a <_strtoul_l.isra.0+0xa>
 8002c98:	2c2d      	cmp	r4, #45	; 0x2d
 8002c9a:	d134      	bne.n	8002d06 <_strtoul_l.isra.0+0x86>
 8002c9c:	f89c 4000 	ldrb.w	r4, [ip]
 8002ca0:	f04f 0801 	mov.w	r8, #1
 8002ca4:	f100 0c02 	add.w	ip, r0, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d05e      	beq.n	8002d6a <_strtoul_l.isra.0+0xea>
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d10c      	bne.n	8002cca <_strtoul_l.isra.0+0x4a>
 8002cb0:	2c30      	cmp	r4, #48	; 0x30
 8002cb2:	d10a      	bne.n	8002cca <_strtoul_l.isra.0+0x4a>
 8002cb4:	f89c 0000 	ldrb.w	r0, [ip]
 8002cb8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8002cbc:	2858      	cmp	r0, #88	; 0x58
 8002cbe:	d14f      	bne.n	8002d60 <_strtoul_l.isra.0+0xe0>
 8002cc0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8002cc4:	2310      	movs	r3, #16
 8002cc6:	f10c 0c02 	add.w	ip, ip, #2
 8002cca:	f04f 37ff 	mov.w	r7, #4294967295
 8002cce:	2500      	movs	r5, #0
 8002cd0:	fbb7 f7f3 	udiv	r7, r7, r3
 8002cd4:	fb03 f907 	mul.w	r9, r3, r7
 8002cd8:	ea6f 0909 	mvn.w	r9, r9
 8002cdc:	4628      	mov	r0, r5
 8002cde:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8002ce2:	2e09      	cmp	r6, #9
 8002ce4:	d818      	bhi.n	8002d18 <_strtoul_l.isra.0+0x98>
 8002ce6:	4634      	mov	r4, r6
 8002ce8:	42a3      	cmp	r3, r4
 8002cea:	dd24      	ble.n	8002d36 <_strtoul_l.isra.0+0xb6>
 8002cec:	2d00      	cmp	r5, #0
 8002cee:	db1f      	blt.n	8002d30 <_strtoul_l.isra.0+0xb0>
 8002cf0:	4287      	cmp	r7, r0
 8002cf2:	d31d      	bcc.n	8002d30 <_strtoul_l.isra.0+0xb0>
 8002cf4:	d101      	bne.n	8002cfa <_strtoul_l.isra.0+0x7a>
 8002cf6:	45a1      	cmp	r9, r4
 8002cf8:	db1a      	blt.n	8002d30 <_strtoul_l.isra.0+0xb0>
 8002cfa:	fb00 4003 	mla	r0, r0, r3, r4
 8002cfe:	2501      	movs	r5, #1
 8002d00:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8002d04:	e7eb      	b.n	8002cde <_strtoul_l.isra.0+0x5e>
 8002d06:	2c2b      	cmp	r4, #43	; 0x2b
 8002d08:	bf08      	it	eq
 8002d0a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8002d0e:	46a8      	mov	r8, r5
 8002d10:	bf08      	it	eq
 8002d12:	f100 0c02 	addeq.w	ip, r0, #2
 8002d16:	e7c7      	b.n	8002ca8 <_strtoul_l.isra.0+0x28>
 8002d18:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8002d1c:	2e19      	cmp	r6, #25
 8002d1e:	d801      	bhi.n	8002d24 <_strtoul_l.isra.0+0xa4>
 8002d20:	3c37      	subs	r4, #55	; 0x37
 8002d22:	e7e1      	b.n	8002ce8 <_strtoul_l.isra.0+0x68>
 8002d24:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8002d28:	2e19      	cmp	r6, #25
 8002d2a:	d804      	bhi.n	8002d36 <_strtoul_l.isra.0+0xb6>
 8002d2c:	3c57      	subs	r4, #87	; 0x57
 8002d2e:	e7db      	b.n	8002ce8 <_strtoul_l.isra.0+0x68>
 8002d30:	f04f 35ff 	mov.w	r5, #4294967295
 8002d34:	e7e4      	b.n	8002d00 <_strtoul_l.isra.0+0x80>
 8002d36:	2d00      	cmp	r5, #0
 8002d38:	da07      	bge.n	8002d4a <_strtoul_l.isra.0+0xca>
 8002d3a:	2322      	movs	r3, #34	; 0x22
 8002d3c:	f8ce 3000 	str.w	r3, [lr]
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	b942      	cbnz	r2, 8002d58 <_strtoul_l.isra.0+0xd8>
 8002d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d4a:	f1b8 0f00 	cmp.w	r8, #0
 8002d4e:	d000      	beq.n	8002d52 <_strtoul_l.isra.0+0xd2>
 8002d50:	4240      	negs	r0, r0
 8002d52:	2a00      	cmp	r2, #0
 8002d54:	d0f7      	beq.n	8002d46 <_strtoul_l.isra.0+0xc6>
 8002d56:	b10d      	cbz	r5, 8002d5c <_strtoul_l.isra.0+0xdc>
 8002d58:	f10c 31ff 	add.w	r1, ip, #4294967295
 8002d5c:	6011      	str	r1, [r2, #0]
 8002d5e:	e7f2      	b.n	8002d46 <_strtoul_l.isra.0+0xc6>
 8002d60:	2430      	movs	r4, #48	; 0x30
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1b1      	bne.n	8002cca <_strtoul_l.isra.0+0x4a>
 8002d66:	2308      	movs	r3, #8
 8002d68:	e7af      	b.n	8002cca <_strtoul_l.isra.0+0x4a>
 8002d6a:	2c30      	cmp	r4, #48	; 0x30
 8002d6c:	d0a2      	beq.n	8002cb4 <_strtoul_l.isra.0+0x34>
 8002d6e:	230a      	movs	r3, #10
 8002d70:	e7ab      	b.n	8002cca <_strtoul_l.isra.0+0x4a>
 8002d72:	bf00      	nop
 8002d74:	080030b0 	.word	0x080030b0

08002d78 <_strtoul_r>:
 8002d78:	f7ff bf82 	b.w	8002c80 <_strtoul_l.isra.0>

08002d7c <__submore>:
 8002d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d80:	460c      	mov	r4, r1
 8002d82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d88:	4299      	cmp	r1, r3
 8002d8a:	d11d      	bne.n	8002dc8 <__submore+0x4c>
 8002d8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d90:	f000 f88e 	bl	8002eb0 <_malloc_r>
 8002d94:	b918      	cbnz	r0, 8002d9e <__submore+0x22>
 8002d96:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002da2:	63a3      	str	r3, [r4, #56]	; 0x38
 8002da4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002da8:	6360      	str	r0, [r4, #52]	; 0x34
 8002daa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8002dae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002db2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8002db6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002dba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8002dbe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8002dc2:	6020      	str	r0, [r4, #0]
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	e7e8      	b.n	8002d9a <__submore+0x1e>
 8002dc8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002dca:	0077      	lsls	r7, r6, #1
 8002dcc:	463a      	mov	r2, r7
 8002dce:	f000 f8c9 	bl	8002f64 <_realloc_r>
 8002dd2:	4605      	mov	r5, r0
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	d0de      	beq.n	8002d96 <__submore+0x1a>
 8002dd8:	eb00 0806 	add.w	r8, r0, r6
 8002ddc:	4601      	mov	r1, r0
 8002dde:	4632      	mov	r2, r6
 8002de0:	4640      	mov	r0, r8
 8002de2:	f000 f807 	bl	8002df4 <memcpy>
 8002de6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8002dea:	f8c4 8000 	str.w	r8, [r4]
 8002dee:	e7e9      	b.n	8002dc4 <__submore+0x48>

08002df0 <__retarget_lock_acquire_recursive>:
 8002df0:	4770      	bx	lr

08002df2 <__retarget_lock_release_recursive>:
 8002df2:	4770      	bx	lr

08002df4 <memcpy>:
 8002df4:	440a      	add	r2, r1
 8002df6:	4291      	cmp	r1, r2
 8002df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002dfc:	d100      	bne.n	8002e00 <memcpy+0xc>
 8002dfe:	4770      	bx	lr
 8002e00:	b510      	push	{r4, lr}
 8002e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e0a:	4291      	cmp	r1, r2
 8002e0c:	d1f9      	bne.n	8002e02 <memcpy+0xe>
 8002e0e:	bd10      	pop	{r4, pc}

08002e10 <_free_r>:
 8002e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e12:	2900      	cmp	r1, #0
 8002e14:	d048      	beq.n	8002ea8 <_free_r+0x98>
 8002e16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e1a:	9001      	str	r0, [sp, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f1a1 0404 	sub.w	r4, r1, #4
 8002e22:	bfb8      	it	lt
 8002e24:	18e4      	addlt	r4, r4, r3
 8002e26:	f000 f8d3 	bl	8002fd0 <__malloc_lock>
 8002e2a:	4a20      	ldr	r2, [pc, #128]	; (8002eac <_free_r+0x9c>)
 8002e2c:	9801      	ldr	r0, [sp, #4]
 8002e2e:	6813      	ldr	r3, [r2, #0]
 8002e30:	4615      	mov	r5, r2
 8002e32:	b933      	cbnz	r3, 8002e42 <_free_r+0x32>
 8002e34:	6063      	str	r3, [r4, #4]
 8002e36:	6014      	str	r4, [r2, #0]
 8002e38:	b003      	add	sp, #12
 8002e3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e3e:	f000 b8cd 	b.w	8002fdc <__malloc_unlock>
 8002e42:	42a3      	cmp	r3, r4
 8002e44:	d90b      	bls.n	8002e5e <_free_r+0x4e>
 8002e46:	6821      	ldr	r1, [r4, #0]
 8002e48:	1862      	adds	r2, r4, r1
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	bf04      	itt	eq
 8002e4e:	681a      	ldreq	r2, [r3, #0]
 8002e50:	685b      	ldreq	r3, [r3, #4]
 8002e52:	6063      	str	r3, [r4, #4]
 8002e54:	bf04      	itt	eq
 8002e56:	1852      	addeq	r2, r2, r1
 8002e58:	6022      	streq	r2, [r4, #0]
 8002e5a:	602c      	str	r4, [r5, #0]
 8002e5c:	e7ec      	b.n	8002e38 <_free_r+0x28>
 8002e5e:	461a      	mov	r2, r3
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	b10b      	cbz	r3, 8002e68 <_free_r+0x58>
 8002e64:	42a3      	cmp	r3, r4
 8002e66:	d9fa      	bls.n	8002e5e <_free_r+0x4e>
 8002e68:	6811      	ldr	r1, [r2, #0]
 8002e6a:	1855      	adds	r5, r2, r1
 8002e6c:	42a5      	cmp	r5, r4
 8002e6e:	d10b      	bne.n	8002e88 <_free_r+0x78>
 8002e70:	6824      	ldr	r4, [r4, #0]
 8002e72:	4421      	add	r1, r4
 8002e74:	1854      	adds	r4, r2, r1
 8002e76:	42a3      	cmp	r3, r4
 8002e78:	6011      	str	r1, [r2, #0]
 8002e7a:	d1dd      	bne.n	8002e38 <_free_r+0x28>
 8002e7c:	681c      	ldr	r4, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	6053      	str	r3, [r2, #4]
 8002e82:	4421      	add	r1, r4
 8002e84:	6011      	str	r1, [r2, #0]
 8002e86:	e7d7      	b.n	8002e38 <_free_r+0x28>
 8002e88:	d902      	bls.n	8002e90 <_free_r+0x80>
 8002e8a:	230c      	movs	r3, #12
 8002e8c:	6003      	str	r3, [r0, #0]
 8002e8e:	e7d3      	b.n	8002e38 <_free_r+0x28>
 8002e90:	6825      	ldr	r5, [r4, #0]
 8002e92:	1961      	adds	r1, r4, r5
 8002e94:	428b      	cmp	r3, r1
 8002e96:	bf04      	itt	eq
 8002e98:	6819      	ldreq	r1, [r3, #0]
 8002e9a:	685b      	ldreq	r3, [r3, #4]
 8002e9c:	6063      	str	r3, [r4, #4]
 8002e9e:	bf04      	itt	eq
 8002ea0:	1949      	addeq	r1, r1, r5
 8002ea2:	6021      	streq	r1, [r4, #0]
 8002ea4:	6054      	str	r4, [r2, #4]
 8002ea6:	e7c7      	b.n	8002e38 <_free_r+0x28>
 8002ea8:	b003      	add	sp, #12
 8002eaa:	bd30      	pop	{r4, r5, pc}
 8002eac:	20000094 	.word	0x20000094

08002eb0 <_malloc_r>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	1ccd      	adds	r5, r1, #3
 8002eb4:	f025 0503 	bic.w	r5, r5, #3
 8002eb8:	3508      	adds	r5, #8
 8002eba:	2d0c      	cmp	r5, #12
 8002ebc:	bf38      	it	cc
 8002ebe:	250c      	movcc	r5, #12
 8002ec0:	2d00      	cmp	r5, #0
 8002ec2:	4606      	mov	r6, r0
 8002ec4:	db01      	blt.n	8002eca <_malloc_r+0x1a>
 8002ec6:	42a9      	cmp	r1, r5
 8002ec8:	d903      	bls.n	8002ed2 <_malloc_r+0x22>
 8002eca:	230c      	movs	r3, #12
 8002ecc:	6033      	str	r3, [r6, #0]
 8002ece:	2000      	movs	r0, #0
 8002ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ed2:	f000 f87d 	bl	8002fd0 <__malloc_lock>
 8002ed6:	4921      	ldr	r1, [pc, #132]	; (8002f5c <_malloc_r+0xac>)
 8002ed8:	680a      	ldr	r2, [r1, #0]
 8002eda:	4614      	mov	r4, r2
 8002edc:	b99c      	cbnz	r4, 8002f06 <_malloc_r+0x56>
 8002ede:	4f20      	ldr	r7, [pc, #128]	; (8002f60 <_malloc_r+0xb0>)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	b923      	cbnz	r3, 8002eee <_malloc_r+0x3e>
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	4630      	mov	r0, r6
 8002ee8:	f000 f862 	bl	8002fb0 <_sbrk_r>
 8002eec:	6038      	str	r0, [r7, #0]
 8002eee:	4629      	mov	r1, r5
 8002ef0:	4630      	mov	r0, r6
 8002ef2:	f000 f85d 	bl	8002fb0 <_sbrk_r>
 8002ef6:	1c43      	adds	r3, r0, #1
 8002ef8:	d123      	bne.n	8002f42 <_malloc_r+0x92>
 8002efa:	230c      	movs	r3, #12
 8002efc:	6033      	str	r3, [r6, #0]
 8002efe:	4630      	mov	r0, r6
 8002f00:	f000 f86c 	bl	8002fdc <__malloc_unlock>
 8002f04:	e7e3      	b.n	8002ece <_malloc_r+0x1e>
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	1b5b      	subs	r3, r3, r5
 8002f0a:	d417      	bmi.n	8002f3c <_malloc_r+0x8c>
 8002f0c:	2b0b      	cmp	r3, #11
 8002f0e:	d903      	bls.n	8002f18 <_malloc_r+0x68>
 8002f10:	6023      	str	r3, [r4, #0]
 8002f12:	441c      	add	r4, r3
 8002f14:	6025      	str	r5, [r4, #0]
 8002f16:	e004      	b.n	8002f22 <_malloc_r+0x72>
 8002f18:	6863      	ldr	r3, [r4, #4]
 8002f1a:	42a2      	cmp	r2, r4
 8002f1c:	bf0c      	ite	eq
 8002f1e:	600b      	streq	r3, [r1, #0]
 8002f20:	6053      	strne	r3, [r2, #4]
 8002f22:	4630      	mov	r0, r6
 8002f24:	f000 f85a 	bl	8002fdc <__malloc_unlock>
 8002f28:	f104 000b 	add.w	r0, r4, #11
 8002f2c:	1d23      	adds	r3, r4, #4
 8002f2e:	f020 0007 	bic.w	r0, r0, #7
 8002f32:	1ac2      	subs	r2, r0, r3
 8002f34:	d0cc      	beq.n	8002ed0 <_malloc_r+0x20>
 8002f36:	1a1b      	subs	r3, r3, r0
 8002f38:	50a3      	str	r3, [r4, r2]
 8002f3a:	e7c9      	b.n	8002ed0 <_malloc_r+0x20>
 8002f3c:	4622      	mov	r2, r4
 8002f3e:	6864      	ldr	r4, [r4, #4]
 8002f40:	e7cc      	b.n	8002edc <_malloc_r+0x2c>
 8002f42:	1cc4      	adds	r4, r0, #3
 8002f44:	f024 0403 	bic.w	r4, r4, #3
 8002f48:	42a0      	cmp	r0, r4
 8002f4a:	d0e3      	beq.n	8002f14 <_malloc_r+0x64>
 8002f4c:	1a21      	subs	r1, r4, r0
 8002f4e:	4630      	mov	r0, r6
 8002f50:	f000 f82e 	bl	8002fb0 <_sbrk_r>
 8002f54:	3001      	adds	r0, #1
 8002f56:	d1dd      	bne.n	8002f14 <_malloc_r+0x64>
 8002f58:	e7cf      	b.n	8002efa <_malloc_r+0x4a>
 8002f5a:	bf00      	nop
 8002f5c:	20000094 	.word	0x20000094
 8002f60:	20000098 	.word	0x20000098

08002f64 <_realloc_r>:
 8002f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f66:	4607      	mov	r7, r0
 8002f68:	4614      	mov	r4, r2
 8002f6a:	460e      	mov	r6, r1
 8002f6c:	b921      	cbnz	r1, 8002f78 <_realloc_r+0x14>
 8002f6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f72:	4611      	mov	r1, r2
 8002f74:	f7ff bf9c 	b.w	8002eb0 <_malloc_r>
 8002f78:	b922      	cbnz	r2, 8002f84 <_realloc_r+0x20>
 8002f7a:	f7ff ff49 	bl	8002e10 <_free_r>
 8002f7e:	4625      	mov	r5, r4
 8002f80:	4628      	mov	r0, r5
 8002f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f84:	f000 f830 	bl	8002fe8 <_malloc_usable_size_r>
 8002f88:	42a0      	cmp	r0, r4
 8002f8a:	d20f      	bcs.n	8002fac <_realloc_r+0x48>
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	4638      	mov	r0, r7
 8002f90:	f7ff ff8e 	bl	8002eb0 <_malloc_r>
 8002f94:	4605      	mov	r5, r0
 8002f96:	2800      	cmp	r0, #0
 8002f98:	d0f2      	beq.n	8002f80 <_realloc_r+0x1c>
 8002f9a:	4631      	mov	r1, r6
 8002f9c:	4622      	mov	r2, r4
 8002f9e:	f7ff ff29 	bl	8002df4 <memcpy>
 8002fa2:	4631      	mov	r1, r6
 8002fa4:	4638      	mov	r0, r7
 8002fa6:	f7ff ff33 	bl	8002e10 <_free_r>
 8002faa:	e7e9      	b.n	8002f80 <_realloc_r+0x1c>
 8002fac:	4635      	mov	r5, r6
 8002fae:	e7e7      	b.n	8002f80 <_realloc_r+0x1c>

08002fb0 <_sbrk_r>:
 8002fb0:	b538      	push	{r3, r4, r5, lr}
 8002fb2:	4d06      	ldr	r5, [pc, #24]	; (8002fcc <_sbrk_r+0x1c>)
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	4608      	mov	r0, r1
 8002fba:	602b      	str	r3, [r5, #0]
 8002fbc:	f7fd fdf4 	bl	8000ba8 <_sbrk>
 8002fc0:	1c43      	adds	r3, r0, #1
 8002fc2:	d102      	bne.n	8002fca <_sbrk_r+0x1a>
 8002fc4:	682b      	ldr	r3, [r5, #0]
 8002fc6:	b103      	cbz	r3, 8002fca <_sbrk_r+0x1a>
 8002fc8:	6023      	str	r3, [r4, #0]
 8002fca:	bd38      	pop	{r3, r4, r5, pc}
 8002fcc:	200000e4 	.word	0x200000e4

08002fd0 <__malloc_lock>:
 8002fd0:	4801      	ldr	r0, [pc, #4]	; (8002fd8 <__malloc_lock+0x8>)
 8002fd2:	f7ff bf0d 	b.w	8002df0 <__retarget_lock_acquire_recursive>
 8002fd6:	bf00      	nop
 8002fd8:	200000ec 	.word	0x200000ec

08002fdc <__malloc_unlock>:
 8002fdc:	4801      	ldr	r0, [pc, #4]	; (8002fe4 <__malloc_unlock+0x8>)
 8002fde:	f7ff bf08 	b.w	8002df2 <__retarget_lock_release_recursive>
 8002fe2:	bf00      	nop
 8002fe4:	200000ec 	.word	0x200000ec

08002fe8 <_malloc_usable_size_r>:
 8002fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fec:	1f18      	subs	r0, r3, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	bfbc      	itt	lt
 8002ff2:	580b      	ldrlt	r3, [r1, r0]
 8002ff4:	18c0      	addlt	r0, r0, r3
 8002ff6:	4770      	bx	lr

08002ff8 <_init>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	bf00      	nop
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr

08003004 <_fini>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr
