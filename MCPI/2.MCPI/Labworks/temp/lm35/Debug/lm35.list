
lm35.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004330  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080044c0  080044c0  000144c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004524  08004524  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004524  08004524  00014524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800452c  0800452c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800452c  0800452c  0001452c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004530  08004530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  080045a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  080045a4  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c077  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c55  00000000  00000000  0002c117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0002dd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002196b  00000000  00000000  0002ed78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af2a  00000000  00000000  000506e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf92f  00000000  00000000  0005b60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012af3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002610  00000000  00000000  0012af90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044a8 	.word	0x080044a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080044a8 	.word	0x080044a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b96e 	b.w	8000b70 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	4604      	mov	r4, r0
 80008b4:	468c      	mov	ip, r1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f040 8083 	bne.w	80009c2 <__udivmoddi4+0x116>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4617      	mov	r7, r2
 80008c0:	d947      	bls.n	8000952 <__udivmoddi4+0xa6>
 80008c2:	fab2 f282 	clz	r2, r2
 80008c6:	b142      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c8:	f1c2 0020 	rsb	r0, r2, #32
 80008cc:	fa24 f000 	lsr.w	r0, r4, r0
 80008d0:	4091      	lsls	r1, r2
 80008d2:	4097      	lsls	r7, r2
 80008d4:	ea40 0c01 	orr.w	ip, r0, r1
 80008d8:	4094      	lsls	r4, r2
 80008da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008de:	0c23      	lsrs	r3, r4, #16
 80008e0:	fbbc f6f8 	udiv	r6, ip, r8
 80008e4:	fa1f fe87 	uxth.w	lr, r7
 80008e8:	fb08 c116 	mls	r1, r8, r6, ip
 80008ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f0:	fb06 f10e 	mul.w	r1, r6, lr
 80008f4:	4299      	cmp	r1, r3
 80008f6:	d909      	bls.n	800090c <__udivmoddi4+0x60>
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80008fe:	f080 8119 	bcs.w	8000b34 <__udivmoddi4+0x288>
 8000902:	4299      	cmp	r1, r3
 8000904:	f240 8116 	bls.w	8000b34 <__udivmoddi4+0x288>
 8000908:	3e02      	subs	r6, #2
 800090a:	443b      	add	r3, r7
 800090c:	1a5b      	subs	r3, r3, r1
 800090e:	b2a4      	uxth	r4, r4
 8000910:	fbb3 f0f8 	udiv	r0, r3, r8
 8000914:	fb08 3310 	mls	r3, r8, r0, r3
 8000918:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800091c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000920:	45a6      	cmp	lr, r4
 8000922:	d909      	bls.n	8000938 <__udivmoddi4+0x8c>
 8000924:	193c      	adds	r4, r7, r4
 8000926:	f100 33ff 	add.w	r3, r0, #4294967295
 800092a:	f080 8105 	bcs.w	8000b38 <__udivmoddi4+0x28c>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f240 8102 	bls.w	8000b38 <__udivmoddi4+0x28c>
 8000934:	3802      	subs	r0, #2
 8000936:	443c      	add	r4, r7
 8000938:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800093c:	eba4 040e 	sub.w	r4, r4, lr
 8000940:	2600      	movs	r6, #0
 8000942:	b11d      	cbz	r5, 800094c <__udivmoddi4+0xa0>
 8000944:	40d4      	lsrs	r4, r2
 8000946:	2300      	movs	r3, #0
 8000948:	e9c5 4300 	strd	r4, r3, [r5]
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	b902      	cbnz	r2, 8000956 <__udivmoddi4+0xaa>
 8000954:	deff      	udf	#255	; 0xff
 8000956:	fab2 f282 	clz	r2, r2
 800095a:	2a00      	cmp	r2, #0
 800095c:	d150      	bne.n	8000a00 <__udivmoddi4+0x154>
 800095e:	1bcb      	subs	r3, r1, r7
 8000960:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000964:	fa1f f887 	uxth.w	r8, r7
 8000968:	2601      	movs	r6, #1
 800096a:	fbb3 fcfe 	udiv	ip, r3, lr
 800096e:	0c21      	lsrs	r1, r4, #16
 8000970:	fb0e 331c 	mls	r3, lr, ip, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb08 f30c 	mul.w	r3, r8, ip
 800097c:	428b      	cmp	r3, r1
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0xe4>
 8000980:	1879      	adds	r1, r7, r1
 8000982:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0xe2>
 8000988:	428b      	cmp	r3, r1
 800098a:	f200 80e9 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 800098e:	4684      	mov	ip, r0
 8000990:	1ac9      	subs	r1, r1, r3
 8000992:	b2a3      	uxth	r3, r4
 8000994:	fbb1 f0fe 	udiv	r0, r1, lr
 8000998:	fb0e 1110 	mls	r1, lr, r0, r1
 800099c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009a0:	fb08 f800 	mul.w	r8, r8, r0
 80009a4:	45a0      	cmp	r8, r4
 80009a6:	d907      	bls.n	80009b8 <__udivmoddi4+0x10c>
 80009a8:	193c      	adds	r4, r7, r4
 80009aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x10a>
 80009b0:	45a0      	cmp	r8, r4
 80009b2:	f200 80d9 	bhi.w	8000b68 <__udivmoddi4+0x2bc>
 80009b6:	4618      	mov	r0, r3
 80009b8:	eba4 0408 	sub.w	r4, r4, r8
 80009bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009c0:	e7bf      	b.n	8000942 <__udivmoddi4+0x96>
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d909      	bls.n	80009da <__udivmoddi4+0x12e>
 80009c6:	2d00      	cmp	r5, #0
 80009c8:	f000 80b1 	beq.w	8000b2e <__udivmoddi4+0x282>
 80009cc:	2600      	movs	r6, #0
 80009ce:	e9c5 0100 	strd	r0, r1, [r5]
 80009d2:	4630      	mov	r0, r6
 80009d4:	4631      	mov	r1, r6
 80009d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009da:	fab3 f683 	clz	r6, r3
 80009de:	2e00      	cmp	r6, #0
 80009e0:	d14a      	bne.n	8000a78 <__udivmoddi4+0x1cc>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d302      	bcc.n	80009ec <__udivmoddi4+0x140>
 80009e6:	4282      	cmp	r2, r0
 80009e8:	f200 80b8 	bhi.w	8000b5c <__udivmoddi4+0x2b0>
 80009ec:	1a84      	subs	r4, r0, r2
 80009ee:	eb61 0103 	sbc.w	r1, r1, r3
 80009f2:	2001      	movs	r0, #1
 80009f4:	468c      	mov	ip, r1
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d0a8      	beq.n	800094c <__udivmoddi4+0xa0>
 80009fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80009fe:	e7a5      	b.n	800094c <__udivmoddi4+0xa0>
 8000a00:	f1c2 0320 	rsb	r3, r2, #32
 8000a04:	fa20 f603 	lsr.w	r6, r0, r3
 8000a08:	4097      	lsls	r7, r2
 8000a0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a12:	40d9      	lsrs	r1, r3
 8000a14:	4330      	orrs	r0, r6
 8000a16:	0c03      	lsrs	r3, r0, #16
 8000a18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a1c:	fa1f f887 	uxth.w	r8, r7
 8000a20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f108 	mul.w	r1, r6, r8
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a32:	d909      	bls.n	8000a48 <__udivmoddi4+0x19c>
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a3a:	f080 808d 	bcs.w	8000b58 <__udivmoddi4+0x2ac>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 808a 	bls.w	8000b58 <__udivmoddi4+0x2ac>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	443b      	add	r3, r7
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b281      	uxth	r1, r0
 8000a4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a58:	fb00 f308 	mul.w	r3, r0, r8
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d907      	bls.n	8000a70 <__udivmoddi4+0x1c4>
 8000a60:	1879      	adds	r1, r7, r1
 8000a62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a66:	d273      	bcs.n	8000b50 <__udivmoddi4+0x2a4>
 8000a68:	428b      	cmp	r3, r1
 8000a6a:	d971      	bls.n	8000b50 <__udivmoddi4+0x2a4>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	4439      	add	r1, r7
 8000a70:	1acb      	subs	r3, r1, r3
 8000a72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a76:	e778      	b.n	800096a <__udivmoddi4+0xbe>
 8000a78:	f1c6 0c20 	rsb	ip, r6, #32
 8000a7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a84:	431c      	orrs	r4, r3
 8000a86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a96:	431f      	orrs	r7, r3
 8000a98:	0c3b      	lsrs	r3, r7, #16
 8000a9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9e:	fa1f f884 	uxth.w	r8, r4
 8000aa2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aa6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aaa:	fb09 fa08 	mul.w	sl, r9, r8
 8000aae:	458a      	cmp	sl, r1
 8000ab0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ab4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ab8:	d908      	bls.n	8000acc <__udivmoddi4+0x220>
 8000aba:	1861      	adds	r1, r4, r1
 8000abc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ac0:	d248      	bcs.n	8000b54 <__udivmoddi4+0x2a8>
 8000ac2:	458a      	cmp	sl, r1
 8000ac4:	d946      	bls.n	8000b54 <__udivmoddi4+0x2a8>
 8000ac6:	f1a9 0902 	sub.w	r9, r9, #2
 8000aca:	4421      	add	r1, r4
 8000acc:	eba1 010a 	sub.w	r1, r1, sl
 8000ad0:	b2bf      	uxth	r7, r7
 8000ad2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ada:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ade:	fb00 f808 	mul.w	r8, r0, r8
 8000ae2:	45b8      	cmp	r8, r7
 8000ae4:	d907      	bls.n	8000af6 <__udivmoddi4+0x24a>
 8000ae6:	19e7      	adds	r7, r4, r7
 8000ae8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aec:	d22e      	bcs.n	8000b4c <__udivmoddi4+0x2a0>
 8000aee:	45b8      	cmp	r8, r7
 8000af0:	d92c      	bls.n	8000b4c <__udivmoddi4+0x2a0>
 8000af2:	3802      	subs	r0, #2
 8000af4:	4427      	add	r7, r4
 8000af6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000afa:	eba7 0708 	sub.w	r7, r7, r8
 8000afe:	fba0 8902 	umull	r8, r9, r0, r2
 8000b02:	454f      	cmp	r7, r9
 8000b04:	46c6      	mov	lr, r8
 8000b06:	4649      	mov	r1, r9
 8000b08:	d31a      	bcc.n	8000b40 <__udivmoddi4+0x294>
 8000b0a:	d017      	beq.n	8000b3c <__udivmoddi4+0x290>
 8000b0c:	b15d      	cbz	r5, 8000b26 <__udivmoddi4+0x27a>
 8000b0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b12:	eb67 0701 	sbc.w	r7, r7, r1
 8000b16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b1a:	40f2      	lsrs	r2, r6
 8000b1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b20:	40f7      	lsrs	r7, r6
 8000b22:	e9c5 2700 	strd	r2, r7, [r5]
 8000b26:	2600      	movs	r6, #0
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	462e      	mov	r6, r5
 8000b30:	4628      	mov	r0, r5
 8000b32:	e70b      	b.n	800094c <__udivmoddi4+0xa0>
 8000b34:	4606      	mov	r6, r0
 8000b36:	e6e9      	b.n	800090c <__udivmoddi4+0x60>
 8000b38:	4618      	mov	r0, r3
 8000b3a:	e6fd      	b.n	8000938 <__udivmoddi4+0x8c>
 8000b3c:	4543      	cmp	r3, r8
 8000b3e:	d2e5      	bcs.n	8000b0c <__udivmoddi4+0x260>
 8000b40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b44:	eb69 0104 	sbc.w	r1, r9, r4
 8000b48:	3801      	subs	r0, #1
 8000b4a:	e7df      	b.n	8000b0c <__udivmoddi4+0x260>
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	e7d2      	b.n	8000af6 <__udivmoddi4+0x24a>
 8000b50:	4660      	mov	r0, ip
 8000b52:	e78d      	b.n	8000a70 <__udivmoddi4+0x1c4>
 8000b54:	4681      	mov	r9, r0
 8000b56:	e7b9      	b.n	8000acc <__udivmoddi4+0x220>
 8000b58:	4666      	mov	r6, ip
 8000b5a:	e775      	b.n	8000a48 <__udivmoddi4+0x19c>
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	e74a      	b.n	80009f6 <__udivmoddi4+0x14a>
 8000b60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b64:	4439      	add	r1, r7
 8000b66:	e713      	b.n	8000990 <__udivmoddi4+0xe4>
 8000b68:	3802      	subs	r0, #2
 8000b6a:	443c      	add	r4, r7
 8000b6c:	e724      	b.n	80009b8 <__udivmoddi4+0x10c>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_idiv0>:
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	0000      	movs	r0, r0
	...

08000b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b094      	sub	sp, #80	; 0x50
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t result;
	uint32_t temp =0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b82:	f000 fafd 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b86:	f000 f857 	bl	8000c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8a:	f000 f93b 	bl	8000e04 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b8e:	f000 f8bd 	bl	8000d0c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000b92:	f000 f90d 	bl	8000db0 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 8000b96:	4824      	ldr	r0, [pc, #144]	; (8000c28 <main+0xb0>)
 8000b98:	f000 fbcc 	bl	8001334 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	4821      	ldr	r0, [pc, #132]	; (8000c28 <main+0xb0>)
 8000ba2:	f000 fccc 	bl	800153e <HAL_ADC_PollForConversion>
	  result = HAL_ADC_GetValue(&hadc1);
 8000ba6:	4820      	ldr	r0, [pc, #128]	; (8000c28 <main+0xb0>)
 8000ba8:	f000 fe95 	bl	80018d6 <HAL_ADC_GetValue>
 8000bac:	64b8      	str	r0, [r7, #72]	; 0x48
	  HAL_ADC_Stop(&hadc1);
 8000bae:	481e      	ldr	r0, [pc, #120]	; (8000c28 <main+0xb0>)
 8000bb0:	f000 fc92 	bl	80014d8 <HAL_ADC_Stop>

	  temp = (result * 0.0805664);
 8000bb4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bb6:	f7ff fdc7 	bl	8000748 <__aeabi_ui2d>
 8000bba:	a319      	add	r3, pc, #100	; (adr r3, 8000c20 <main+0xa8>)
 8000bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc0:	f7ff fb56 	bl	8000270 <__aeabi_dmul>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	4610      	mov	r0, r2
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f7ff fe36 	bl	800083c <__aeabi_d2uiz>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	64fb      	str	r3, [r7, #76]	; 0x4c

	  len = sprintf(str, "ADC = %lu, TEMP = %lu\r\n", result,temp);
 8000bd4:	1d38      	adds	r0, r7, #4
 8000bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000bda:	4914      	ldr	r1, [pc, #80]	; (8000c2c <main+0xb4>)
 8000bdc:	f003 f836 	bl	8003c4c <siprintf>
 8000be0:	6478      	str	r0, [r7, #68]	; 0x44
	  HAL_UART_Transmit(&huart2, (uint8_t*)str, len, HAL_MAX_DELAY);
 8000be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	1d39      	adds	r1, r7, #4
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bec:	4810      	ldr	r0, [pc, #64]	; (8000c30 <main+0xb8>)
 8000bee:	f002 f8e0 	bl	8002db2 <HAL_UART_Transmit>

	  if(temp > 36)
 8000bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bf4:	2b24      	cmp	r3, #36	; 0x24
 8000bf6:	d905      	bls.n	8000c04 <main+0x8c>
	  	  {
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <main+0xbc>)
 8000c00:	f001 fbfc 	bl	80023fc <HAL_GPIO_WritePin>
	  	  }
	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c0a:	480a      	ldr	r0, [pc, #40]	; (8000c34 <main+0xbc>)
 8000c0c:	f001 fbf6 	bl	80023fc <HAL_GPIO_WritePin>

	  HAL_Delay(1000);
 8000c10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c14:	f000 fb26 	bl	8001264 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000c18:	e7bd      	b.n	8000b96 <main+0x1e>
 8000c1a:	bf00      	nop
 8000c1c:	f3af 8000 	nop.w
 8000c20:	e5280d65 	.word	0xe5280d65
 8000c24:	3fb49fff 	.word	0x3fb49fff
 8000c28:	20000098 	.word	0x20000098
 8000c2c:	080044c0 	.word	0x080044c0
 8000c30:	200000e0 	.word	0x200000e0
 8000c34:	40020c00 	.word	0x40020c00

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b094      	sub	sp, #80	; 0x50
 8000c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	2230      	movs	r2, #48	; 0x30
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 fff8 	bl	8003c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <SystemClock_Config+0xcc>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	4a27      	ldr	r2, [pc, #156]	; (8000d04 <SystemClock_Config+0xcc>)
 8000c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6c:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <SystemClock_Config+0xcc>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <SystemClock_Config+0xd0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a21      	ldr	r2, [pc, #132]	; (8000d08 <SystemClock_Config+0xd0>)
 8000c82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <SystemClock_Config+0xd0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c94:	2302      	movs	r3, #2
 8000c96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c9c:	2310      	movs	r3, #16
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000cac:	2332      	movs	r3, #50	; 0x32
 8000cae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb8:	f107 0320 	add.w	r3, r7, #32
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fbb7 	bl	8002430 <HAL_RCC_OscConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cc8:	f000 f8e0 	bl	8000e8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ccc:	230f      	movs	r3, #15
 8000cce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cd8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 fe18 	bl	8002920 <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cf6:	f000 f8c9 	bl	8000e8c <Error_Handler>
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3750      	adds	r7, #80	; 0x50
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40007000 	.word	0x40007000

08000d0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d12:	463b      	mov	r3, r7
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d1e:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <MX_ADC1_Init+0x98>)
 8000d20:	4a21      	ldr	r2, [pc, #132]	; (8000da8 <MX_ADC1_Init+0x9c>)
 8000d22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <MX_ADC1_Init+0x98>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <MX_ADC1_Init+0x98>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <MX_ADC1_Init+0x98>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d36:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <MX_ADC1_Init+0x98>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_ADC1_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_ADC1_Init+0x98>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <MX_ADC1_Init+0x98>)
 8000d4c:	4a17      	ldr	r2, [pc, #92]	; (8000dac <MX_ADC1_Init+0xa0>)
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_ADC1_Init+0x98>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <MX_ADC1_Init+0x98>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_ADC1_Init+0x98>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_ADC1_Init+0x98>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d6a:	480e      	ldr	r0, [pc, #56]	; (8000da4 <MX_ADC1_Init+0x98>)
 8000d6c:	f000 fa9e 	bl	80012ac <HAL_ADC_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d76:	f000 f889 	bl	8000e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d86:	463b      	mov	r3, r7
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4806      	ldr	r0, [pc, #24]	; (8000da4 <MX_ADC1_Init+0x98>)
 8000d8c:	f000 fdce 	bl	800192c <HAL_ADC_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d96:	f000 f879 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000098 	.word	0x20000098
 8000da8:	40012000 	.word	0x40012000
 8000dac:	0f000001 	.word	0x0f000001

08000db0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <MX_USART2_UART_Init+0x50>)
 8000db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dbc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_USART2_UART_Init+0x4c>)
 8000de8:	f001 ff96 	bl	8002d18 <HAL_UART_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000df2:	f000 f84b 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200000e0 	.word	0x200000e0
 8000e00:	40004400 	.word	0x40004400

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <MX_GPIO_Init+0x80>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <MX_GPIO_Init+0x80>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_GPIO_Init+0x80>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_GPIO_Init+0x80>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <MX_GPIO_Init+0x80>)
 8000e40:	f043 0308 	orr.w	r3, r3, #8
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_GPIO_Init+0x80>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e58:	480b      	ldr	r0, [pc, #44]	; (8000e88 <MX_GPIO_Init+0x84>)
 8000e5a:	f001 facf 	bl	80023fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	4619      	mov	r1, r3
 8000e76:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_GPIO_Init+0x84>)
 8000e78:	f001 f924 	bl	80020c4 <HAL_GPIO_Init>

}
 8000e7c:	bf00      	nop
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020c00 	.word	0x40020c00

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
}
 8000e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <Error_Handler+0x8>
	...

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eac:	6453      	str	r3, [r2, #68]	; 0x44
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_MspInit+0x4c>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ed6:	2007      	movs	r0, #7
 8000ed8:	f001 f820 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <HAL_ADC_MspInit+0x8c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d12f      	bne.n	8000f6a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <HAL_ADC_MspInit+0x90>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	4a19      	ldr	r2, [pc, #100]	; (8000f78 <HAL_ADC_MspInit+0x90>)
 8000f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f18:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <HAL_ADC_MspInit+0x90>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <HAL_ADC_MspInit+0x90>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <HAL_ADC_MspInit+0x90>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <HAL_ADC_MspInit+0x90>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f42:	2301      	movs	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f46:	2303      	movs	r3, #3
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4809      	ldr	r0, [pc, #36]	; (8000f7c <HAL_ADC_MspInit+0x94>)
 8000f56:	f001 f8b5 	bl	80020c4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2012      	movs	r0, #18
 8000f60:	f000 ffe7 	bl	8001f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f64:	2012      	movs	r0, #18
 8000f66:	f001 f800 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40012000 	.word	0x40012000
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000

08000f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a1d      	ldr	r2, [pc, #116]	; (8001014 <HAL_UART_MspInit+0x94>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d133      	bne.n	800100a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <HAL_UART_MspInit+0x98>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <HAL_UART_MspInit+0x98>)
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_UART_MspInit+0x98>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_UART_MspInit+0x98>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <HAL_UART_MspInit+0x98>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_UART_MspInit+0x98>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fda:	230c      	movs	r3, #12
 8000fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fea:	2307      	movs	r3, #7
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4809      	ldr	r0, [pc, #36]	; (800101c <HAL_UART_MspInit+0x9c>)
 8000ff6:	f001 f865 	bl	80020c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2026      	movs	r0, #38	; 0x26
 8001000:	f000 ff97 	bl	8001f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001004:	2026      	movs	r0, #38	; 0x26
 8001006:	f000 ffb0 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40004400 	.word	0x40004400
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <NMI_Handler+0x4>

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler+0x4>

08001032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler+0x4>

0800103e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106c:	f000 f8da 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <ADC_IRQHandler+0x10>)
 800107a:	f000 faeb 	bl	8001654 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000098 	.word	0x20000098

08001088 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <USART2_IRQHandler+0x10>)
 800108e:	f001 ff23 	bl	8002ed8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200000e0 	.word	0x200000e0

0800109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a4:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <_sbrk+0x5c>)
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <_sbrk+0x60>)
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <_sbrk+0x64>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <_sbrk+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d207      	bcs.n	80010dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010cc:	f002 fd8c 	bl	8003be8 <__errno>
 80010d0:	4603      	mov	r3, r0
 80010d2:	220c      	movs	r2, #12
 80010d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e009      	b.n	80010f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <_sbrk+0x64>)
 80010ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20020000 	.word	0x20020000
 80010fc:	00000400 	.word	0x00000400
 8001100:	2000008c 	.word	0x2000008c
 8001104:	20000138 	.word	0x20000138

08001108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001164 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001132:	490e      	ldr	r1, [pc, #56]	; (800116c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001134:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001148:	4c0b      	ldr	r4, [pc, #44]	; (8001178 <LoopFillZerobss+0x26>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001156:	f7ff ffd7 	bl	8001108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115a:	f002 fd4b 	bl	8003bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115e:	f7ff fd0b 	bl	8000b78 <main>
  bx  lr    
 8001162:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001164:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001170:	08004534 	.word	0x08004534
  ldr r2, =_sbss
 8001174:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001178:	20000138 	.word	0x20000138

0800117c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800117c:	e7fe      	b.n	800117c <CAN1_RX0_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <HAL_Init+0x40>)
 800118a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_Init+0x40>)
 8001196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800119a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_Init+0x40>)
 80011a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 feb7 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ae:	2000      	movs	r0, #0
 80011b0:	f000 f808 	bl	80011c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b4:	f7ff fe70 	bl	8000e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023c00 	.word	0x40023c00

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_InitTick+0x54>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x58>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011da:	fbb3 f3f1 	udiv	r3, r3, r1
 80011de:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 fecf 	bl	8001f86 <HAL_SYSTICK_Config>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00e      	b.n	8001210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b0f      	cmp	r3, #15
 80011f6:	d80a      	bhi.n	800120e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f8:	2200      	movs	r2, #0
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f000 fe97 	bl	8001f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001204:	4a06      	ldr	r2, [pc, #24]	; (8001220 <HAL_InitTick+0x5c>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e000      	b.n	8001210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000000 	.word	0x20000000
 800121c:	20000008 	.word	0x20000008
 8001220:	20000004 	.word	0x20000004

08001224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_IncTick+0x20>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_IncTick+0x24>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a04      	ldr	r2, [pc, #16]	; (8001248 <HAL_IncTick+0x24>)
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000008 	.word	0x20000008
 8001248:	20000124 	.word	0x20000124

0800124c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <HAL_GetTick+0x14>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000124 	.word	0x20000124

08001264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800126c:	f7ff ffee 	bl	800124c <HAL_GetTick>
 8001270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127c:	d005      	beq.n	800128a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_Delay+0x44>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800128a:	bf00      	nop
 800128c:	f7ff ffde 	bl	800124c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	429a      	cmp	r2, r3
 800129a:	d8f7      	bhi.n	800128c <HAL_Delay+0x28>
  {
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000008 	.word	0x20000008

080012ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e033      	b.n	800132a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d109      	bne.n	80012de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fe0c 	bl	8000ee8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d118      	bne.n	800131c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012f2:	f023 0302 	bic.w	r3, r3, #2
 80012f6:	f043 0202 	orr.w	r2, r3, #2
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 fc36 	bl	8001b70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f023 0303 	bic.w	r3, r3, #3
 8001312:	f043 0201 	orr.w	r2, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	641a      	str	r2, [r3, #64]	; 0x40
 800131a:	e001      	b.n	8001320 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_ADC_Start+0x1a>
 800134a:	2302      	movs	r3, #2
 800134c:	e0b2      	b.n	80014b4 <HAL_ADC_Start+0x180>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b01      	cmp	r3, #1
 8001362:	d018      	beq.n	8001396 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0201 	orr.w	r2, r2, #1
 8001372:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001374:	4b52      	ldr	r3, [pc, #328]	; (80014c0 <HAL_ADC_Start+0x18c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a52      	ldr	r2, [pc, #328]	; (80014c4 <HAL_ADC_Start+0x190>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0c9a      	lsrs	r2, r3, #18
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001388:	e002      	b.n	8001390 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	3b01      	subs	r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f9      	bne.n	800138a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d17a      	bne.n	800149a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013ac:	f023 0301 	bic.w	r3, r3, #1
 80013b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d007      	beq.n	80013d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013e2:	d106      	bne.n	80013f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	f023 0206 	bic.w	r2, r3, #6
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	645a      	str	r2, [r3, #68]	; 0x44
 80013f0:	e002      	b.n	80013f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001400:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <HAL_ADC_Start+0x194>)
 8001402:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800140c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 031f 	and.w	r3, r3, #31
 8001416:	2b00      	cmp	r3, #0
 8001418:	d12a      	bne.n	8001470 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a2b      	ldr	r2, [pc, #172]	; (80014cc <HAL_ADC_Start+0x198>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d015      	beq.n	8001450 <HAL_ADC_Start+0x11c>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a29      	ldr	r2, [pc, #164]	; (80014d0 <HAL_ADC_Start+0x19c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d105      	bne.n	800143a <HAL_ADC_Start+0x106>
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <HAL_ADC_Start+0x194>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00a      	beq.n	8001450 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a25      	ldr	r2, [pc, #148]	; (80014d4 <HAL_ADC_Start+0x1a0>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d136      	bne.n	80014b2 <HAL_ADC_Start+0x17e>
 8001444:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <HAL_ADC_Start+0x194>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	2b00      	cmp	r3, #0
 800144e:	d130      	bne.n	80014b2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d129      	bne.n	80014b2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	e020      	b.n	80014b2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a15      	ldr	r2, [pc, #84]	; (80014cc <HAL_ADC_Start+0x198>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d11b      	bne.n	80014b2 <HAL_ADC_Start+0x17e>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d114      	bne.n	80014b2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	e00b      	b.n	80014b2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f043 0210 	orr.w	r2, r3, #16
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f043 0201 	orr.w	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	20000000 	.word	0x20000000
 80014c4:	431bde83 	.word	0x431bde83
 80014c8:	40012300 	.word	0x40012300
 80014cc:	40012000 	.word	0x40012000
 80014d0:	40012100 	.word	0x40012100
 80014d4:	40012200 	.word	0x40012200

080014d8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <HAL_ADC_Stop+0x16>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e021      	b.n	8001532 <HAL_ADC_Stop+0x5a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b00      	cmp	r3, #0
 8001512:	d109      	bne.n	8001528 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	f043 0201 	orr.w	r2, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b084      	sub	sp, #16
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800155a:	d113      	bne.n	8001584 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800156a:	d10b      	bne.n	8001584 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f043 0220 	orr.w	r2, r3, #32
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e063      	b.n	800164c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001584:	f7ff fe62 	bl	800124c <HAL_GetTick>
 8001588:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800158a:	e021      	b.n	80015d0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001592:	d01d      	beq.n	80015d0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d007      	beq.n	80015aa <HAL_ADC_PollForConversion+0x6c>
 800159a:	f7ff fe57 	bl	800124c <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d212      	bcs.n	80015d0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d00b      	beq.n	80015d0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f043 0204 	orr.w	r2, r3, #4
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e03d      	b.n	800164c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d1d6      	bne.n	800158c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f06f 0212 	mvn.w	r2, #18
 80015e6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d123      	bne.n	800164a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001606:	2b00      	cmp	r3, #0
 8001608:	d11f      	bne.n	800164a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001610:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001622:	2b00      	cmp	r3, #0
 8001624:	d111      	bne.n	800164a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d105      	bne.n	800164a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f043 0201 	orr.w	r2, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b02      	cmp	r3, #2
 8001670:	bf0c      	ite	eq
 8001672:	2301      	moveq	r3, #1
 8001674:	2300      	movne	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0320 	and.w	r3, r3, #32
 8001684:	2b20      	cmp	r3, #32
 8001686:	bf0c      	ite	eq
 8001688:	2301      	moveq	r3, #1
 800168a:	2300      	movne	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d049      	beq.n	800172a <HAL_ADC_IRQHandler+0xd6>
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d046      	beq.n	800172a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d105      	bne.n	80016b4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d12b      	bne.n	800171a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d127      	bne.n	800171a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d119      	bne.n	800171a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0220 	bic.w	r2, r2, #32
 80016f4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d105      	bne.n	800171a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f043 0201 	orr.w	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f8e8 	bl	80018f0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f06f 0212 	mvn.w	r2, #18
 8001728:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b04      	cmp	r3, #4
 8001736:	bf0c      	ite	eq
 8001738:	2301      	moveq	r3, #1
 800173a:	2300      	movne	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800174a:	2b80      	cmp	r3, #128	; 0x80
 800174c:	bf0c      	ite	eq
 800174e:	2301      	moveq	r3, #1
 8001750:	2300      	movne	r3, #0
 8001752:	b2db      	uxtb	r3, r3
 8001754:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d057      	beq.n	800180c <HAL_ADC_IRQHandler+0x1b8>
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d054      	beq.n	800180c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	d105      	bne.n	800177a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d139      	bne.n	80017fc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001792:	2b00      	cmp	r3, #0
 8001794:	d006      	beq.n	80017a4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d12b      	bne.n	80017fc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d124      	bne.n	80017fc <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d11d      	bne.n	80017fc <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d119      	bne.n	80017fc <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d105      	bne.n	80017fc <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	f043 0201 	orr.w	r2, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fab3 	bl	8001d68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f06f 020c 	mvn.w	r2, #12
 800180a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b01      	cmp	r3, #1
 8001818:	bf0c      	ite	eq
 800181a:	2301      	moveq	r3, #1
 800181c:	2300      	movne	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182c:	2b40      	cmp	r3, #64	; 0x40
 800182e:	bf0c      	ite	eq
 8001830:	2301      	moveq	r3, #1
 8001832:	2300      	movne	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d017      	beq.n	800186e <HAL_ADC_IRQHandler+0x21a>
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d014      	beq.n	800186e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b01      	cmp	r3, #1
 8001850:	d10d      	bne.n	800186e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f850 	bl	8001904 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f06f 0201 	mvn.w	r2, #1
 800186c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	2b20      	cmp	r3, #32
 800187a:	bf0c      	ite	eq
 800187c:	2301      	moveq	r3, #1
 800187e:	2300      	movne	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800188e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001892:	bf0c      	ite	eq
 8001894:	2301      	moveq	r3, #1
 8001896:	2300      	movne	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d015      	beq.n	80018ce <HAL_ADC_IRQHandler+0x27a>
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d012      	beq.n	80018ce <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ac:	f043 0202 	orr.w	r2, r3, #2
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f06f 0220 	mvn.w	r2, #32
 80018bc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f82a 	bl	8001918 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f06f 0220 	mvn.w	r2, #32
 80018cc:	601a      	str	r2, [r3, #0]
  }
}
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x1c>
 8001944:	2302      	movs	r3, #2
 8001946:	e105      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x228>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b09      	cmp	r3, #9
 8001956:	d925      	bls.n	80019a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68d9      	ldr	r1, [r3, #12]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	b29b      	uxth	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	3b1e      	subs	r3, #30
 800196e:	2207      	movs	r2, #7
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43da      	mvns	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	400a      	ands	r2, r1
 800197c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68d9      	ldr	r1, [r3, #12]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	b29b      	uxth	r3, r3
 800198e:	4618      	mov	r0, r3
 8001990:	4603      	mov	r3, r0
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4403      	add	r3, r0
 8001996:	3b1e      	subs	r3, #30
 8001998:	409a      	lsls	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	e022      	b.n	80019ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6919      	ldr	r1, [r3, #16]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	2207      	movs	r2, #7
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	400a      	ands	r2, r1
 80019c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6919      	ldr	r1, [r3, #16]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	4618      	mov	r0, r3
 80019da:	4603      	mov	r3, r0
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4403      	add	r3, r0
 80019e0:	409a      	lsls	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d824      	bhi.n	8001a3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	3b05      	subs	r3, #5
 8001a04:	221f      	movs	r2, #31
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	400a      	ands	r2, r1
 8001a12:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3b05      	subs	r3, #5
 8001a2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	635a      	str	r2, [r3, #52]	; 0x34
 8001a3a:	e04c      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b0c      	cmp	r3, #12
 8001a42:	d824      	bhi.n	8001a8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	3b23      	subs	r3, #35	; 0x23
 8001a56:	221f      	movs	r2, #31
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43da      	mvns	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	400a      	ands	r2, r1
 8001a64:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3b23      	subs	r3, #35	; 0x23
 8001a80:	fa00 f203 	lsl.w	r2, r0, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a8c:	e023      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3b41      	subs	r3, #65	; 0x41
 8001aa0:	221f      	movs	r2, #31
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	400a      	ands	r2, r1
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	4618      	mov	r0, r3
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3b41      	subs	r3, #65	; 0x41
 8001aca:	fa00 f203 	lsl.w	r2, r0, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <HAL_ADC_ConfigChannel+0x234>)
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a21      	ldr	r2, [pc, #132]	; (8001b64 <HAL_ADC_ConfigChannel+0x238>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d109      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b12      	cmp	r3, #18
 8001aea:	d105      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a19      	ldr	r2, [pc, #100]	; (8001b64 <HAL_ADC_ConfigChannel+0x238>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d123      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x21e>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b10      	cmp	r3, #16
 8001b08:	d003      	beq.n	8001b12 <HAL_ADC_ConfigChannel+0x1e6>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b11      	cmp	r3, #17
 8001b10:	d11b      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b10      	cmp	r3, #16
 8001b24:	d111      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <HAL_ADC_ConfigChannel+0x23c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a10      	ldr	r2, [pc, #64]	; (8001b6c <HAL_ADC_ConfigChannel+0x240>)
 8001b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b30:	0c9a      	lsrs	r2, r3, #18
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b3c:	e002      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f9      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	40012300 	.word	0x40012300
 8001b64:	40012000 	.word	0x40012000
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	431bde83 	.word	0x431bde83

08001b70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b78:	4b79      	ldr	r3, [pc, #484]	; (8001d60 <ADC_Init+0x1f0>)
 8001b7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	431a      	orrs	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ba4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6859      	ldr	r1, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	021a      	lsls	r2, r3, #8
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6899      	ldr	r1, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c02:	4a58      	ldr	r2, [pc, #352]	; (8001d64 <ADC_Init+0x1f4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d022      	beq.n	8001c4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6899      	ldr	r1, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6899      	ldr	r1, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	e00f      	b.n	8001c6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0202 	bic.w	r2, r2, #2
 8001c7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6899      	ldr	r1, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7e1b      	ldrb	r3, [r3, #24]
 8001c88:	005a      	lsls	r2, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01b      	beq.n	8001cd4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001caa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6859      	ldr	r1, [r3, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	035a      	lsls	r2, r3, #13
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	e007      	b.n	8001ce4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	051a      	lsls	r2, r3, #20
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6899      	ldr	r1, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d26:	025a      	lsls	r2, r3, #9
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6899      	ldr	r1, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	029a      	lsls	r2, r3, #10
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	609a      	str	r2, [r3, #8]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	40012300 	.word	0x40012300
 8001d64:	0f000001 	.word	0x0f000001

08001d68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dae:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	60d3      	str	r3, [r2, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <__NVIC_GetPriorityGrouping+0x18>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	f003 0307 	and.w	r3, r3, #7
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	db0b      	blt.n	8001e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	f003 021f 	and.w	r2, r3, #31
 8001df8:	4907      	ldr	r1, [pc, #28]	; (8001e18 <__NVIC_EnableIRQ+0x38>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	2001      	movs	r0, #1
 8001e02:	fa00 f202 	lsl.w	r2, r0, r2
 8001e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000e100 	.word	0xe000e100

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
         );
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee8:	d301      	bcc.n	8001eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00f      	b.n	8001f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <SysTick_Config+0x40>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f7ff ff8e 	bl	8001e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <SysTick_Config+0x40>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <SysTick_Config+0x40>)
 8001f08:	2207      	movs	r2, #7
 8001f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010

08001f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff29 	bl	8001d7c <__NVIC_SetPriorityGrouping>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f44:	f7ff ff3e 	bl	8001dc4 <__NVIC_GetPriorityGrouping>
 8001f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f7ff ff8e 	bl	8001e70 <NVIC_EncodePriority>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff5d 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff31 	bl	8001de0 <__NVIC_EnableIRQ>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ffa2 	bl	8001ed8 <SysTick_Config>
 8001f94:	4603      	mov	r3, r0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fac:	f7ff f94e 	bl	800124c <HAL_GetTick>
 8001fb0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d008      	beq.n	8001fd0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2280      	movs	r2, #128	; 0x80
 8001fc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e052      	b.n	8002076 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0216 	bic.w	r2, r2, #22
 8001fde:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d103      	bne.n	8002000 <HAL_DMA_Abort+0x62>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0208 	bic.w	r2, r2, #8
 800200e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002020:	e013      	b.n	800204a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002022:	f7ff f913 	bl	800124c <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b05      	cmp	r3, #5
 800202e:	d90c      	bls.n	800204a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2203      	movs	r2, #3
 800203a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e015      	b.n	8002076 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1e4      	bne.n	8002022 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205c:	223f      	movs	r2, #63	; 0x3f
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d004      	beq.n	800209c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2280      	movs	r2, #128	; 0x80
 8002096:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e00c      	b.n	80020b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2205      	movs	r2, #5
 80020a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0201 	bic.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	e16b      	b.n	80023b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e0:	2201      	movs	r2, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	f040 815a 	bne.w	80023b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d005      	beq.n	8002116 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002112:	2b02      	cmp	r3, #2
 8002114:	d130      	bne.n	8002178 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2203      	movs	r2, #3
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800214c:	2201      	movs	r2, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 0201 	and.w	r2, r3, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b03      	cmp	r3, #3
 8002182:	d017      	beq.n	80021b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d123      	bne.n	8002208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	08da      	lsrs	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3208      	adds	r2, #8
 80021c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	220f      	movs	r2, #15
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	08da      	lsrs	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	69b9      	ldr	r1, [r7, #24]
 8002204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0203 	and.w	r2, r3, #3
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80b4 	beq.w	80023b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b60      	ldr	r3, [pc, #384]	; (80023d0 <HAL_GPIO_Init+0x30c>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a5f      	ldr	r2, [pc, #380]	; (80023d0 <HAL_GPIO_Init+0x30c>)
 8002254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b5d      	ldr	r3, [pc, #372]	; (80023d0 <HAL_GPIO_Init+0x30c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002266:	4a5b      	ldr	r2, [pc, #364]	; (80023d4 <HAL_GPIO_Init+0x310>)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	220f      	movs	r2, #15
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a52      	ldr	r2, [pc, #328]	; (80023d8 <HAL_GPIO_Init+0x314>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d02b      	beq.n	80022ea <HAL_GPIO_Init+0x226>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a51      	ldr	r2, [pc, #324]	; (80023dc <HAL_GPIO_Init+0x318>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d025      	beq.n	80022e6 <HAL_GPIO_Init+0x222>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a50      	ldr	r2, [pc, #320]	; (80023e0 <HAL_GPIO_Init+0x31c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d01f      	beq.n	80022e2 <HAL_GPIO_Init+0x21e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a4f      	ldr	r2, [pc, #316]	; (80023e4 <HAL_GPIO_Init+0x320>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d019      	beq.n	80022de <HAL_GPIO_Init+0x21a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4e      	ldr	r2, [pc, #312]	; (80023e8 <HAL_GPIO_Init+0x324>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d013      	beq.n	80022da <HAL_GPIO_Init+0x216>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4d      	ldr	r2, [pc, #308]	; (80023ec <HAL_GPIO_Init+0x328>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00d      	beq.n	80022d6 <HAL_GPIO_Init+0x212>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4c      	ldr	r2, [pc, #304]	; (80023f0 <HAL_GPIO_Init+0x32c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d007      	beq.n	80022d2 <HAL_GPIO_Init+0x20e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4b      	ldr	r2, [pc, #300]	; (80023f4 <HAL_GPIO_Init+0x330>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d101      	bne.n	80022ce <HAL_GPIO_Init+0x20a>
 80022ca:	2307      	movs	r3, #7
 80022cc:	e00e      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022ce:	2308      	movs	r3, #8
 80022d0:	e00c      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022d2:	2306      	movs	r3, #6
 80022d4:	e00a      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022d6:	2305      	movs	r3, #5
 80022d8:	e008      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022da:	2304      	movs	r3, #4
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022de:	2303      	movs	r3, #3
 80022e0:	e004      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e002      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022ea:	2300      	movs	r3, #0
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	f002 0203 	and.w	r2, r2, #3
 80022f2:	0092      	lsls	r2, r2, #2
 80022f4:	4093      	lsls	r3, r2
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022fc:	4935      	ldr	r1, [pc, #212]	; (80023d4 <HAL_GPIO_Init+0x310>)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	3302      	adds	r3, #2
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800230a:	4b3b      	ldr	r3, [pc, #236]	; (80023f8 <HAL_GPIO_Init+0x334>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800232e:	4a32      	ldr	r2, [pc, #200]	; (80023f8 <HAL_GPIO_Init+0x334>)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002334:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <HAL_GPIO_Init+0x334>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002358:	4a27      	ldr	r2, [pc, #156]	; (80023f8 <HAL_GPIO_Init+0x334>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <HAL_GPIO_Init+0x334>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002382:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <HAL_GPIO_Init+0x334>)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_GPIO_Init+0x334>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023ac:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <HAL_GPIO_Init+0x334>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3301      	adds	r3, #1
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b0f      	cmp	r3, #15
 80023bc:	f67f ae90 	bls.w	80020e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40013800 	.word	0x40013800
 80023d8:	40020000 	.word	0x40020000
 80023dc:	40020400 	.word	0x40020400
 80023e0:	40020800 	.word	0x40020800
 80023e4:	40020c00 	.word	0x40020c00
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40021400 	.word	0x40021400
 80023f0:	40021800 	.word	0x40021800
 80023f4:	40021c00 	.word	0x40021c00
 80023f8:	40013c00 	.word	0x40013c00

080023fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
 8002408:	4613      	mov	r3, r2
 800240a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800240c:	787b      	ldrb	r3, [r7, #1]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002418:	e003      	b.n	8002422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800241a:	887b      	ldrh	r3, [r7, #2]
 800241c:	041a      	lsls	r2, r3, #16
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	619a      	str	r2, [r3, #24]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e264      	b.n	800290c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d075      	beq.n	800253a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800244e:	4ba3      	ldr	r3, [pc, #652]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b04      	cmp	r3, #4
 8002458:	d00c      	beq.n	8002474 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245a:	4ba0      	ldr	r3, [pc, #640]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d112      	bne.n	800248c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002466:	4b9d      	ldr	r3, [pc, #628]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002472:	d10b      	bne.n	800248c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	4b99      	ldr	r3, [pc, #612]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d05b      	beq.n	8002538 <HAL_RCC_OscConfig+0x108>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d157      	bne.n	8002538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e23f      	b.n	800290c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002494:	d106      	bne.n	80024a4 <HAL_RCC_OscConfig+0x74>
 8002496:	4b91      	ldr	r3, [pc, #580]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a90      	ldr	r2, [pc, #576]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e01d      	b.n	80024e0 <HAL_RCC_OscConfig+0xb0>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x98>
 80024ae:	4b8b      	ldr	r3, [pc, #556]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a8a      	ldr	r2, [pc, #552]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b88      	ldr	r3, [pc, #544]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a87      	ldr	r2, [pc, #540]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e00b      	b.n	80024e0 <HAL_RCC_OscConfig+0xb0>
 80024c8:	4b84      	ldr	r3, [pc, #528]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a83      	ldr	r2, [pc, #524]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b81      	ldr	r3, [pc, #516]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a80      	ldr	r2, [pc, #512]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 80024da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fe feb0 	bl	800124c <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe feac 	bl	800124c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e204      	b.n	800290c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	4b76      	ldr	r3, [pc, #472]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0xc0>
 800250e:	e014      	b.n	800253a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe fe9c 	bl	800124c <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002518:	f7fe fe98 	bl	800124c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	; 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e1f0      	b.n	800290c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252a:	4b6c      	ldr	r3, [pc, #432]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0xe8>
 8002536:	e000      	b.n	800253a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d063      	beq.n	800260e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002546:	4b65      	ldr	r3, [pc, #404]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002552:	4b62      	ldr	r3, [pc, #392]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800255a:	2b08      	cmp	r3, #8
 800255c:	d11c      	bne.n	8002598 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800255e:	4b5f      	ldr	r3, [pc, #380]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d116      	bne.n	8002598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256a:	4b5c      	ldr	r3, [pc, #368]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <HAL_RCC_OscConfig+0x152>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d001      	beq.n	8002582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e1c4      	b.n	800290c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002582:	4b56      	ldr	r3, [pc, #344]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4952      	ldr	r1, [pc, #328]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002596:	e03a      	b.n	800260e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a0:	4b4f      	ldr	r3, [pc, #316]	; (80026e0 <HAL_RCC_OscConfig+0x2b0>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7fe fe51 	bl	800124c <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ae:	f7fe fe4d 	bl	800124c <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e1a5      	b.n	800290c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c0:	4b46      	ldr	r3, [pc, #280]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025cc:	4b43      	ldr	r3, [pc, #268]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4940      	ldr	r1, [pc, #256]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]
 80025e0:	e015      	b.n	800260e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e2:	4b3f      	ldr	r3, [pc, #252]	; (80026e0 <HAL_RCC_OscConfig+0x2b0>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe fe30 	bl	800124c <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f0:	f7fe fe2c 	bl	800124c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e184      	b.n	800290c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002602:	4b36      	ldr	r3, [pc, #216]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d030      	beq.n	800267c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d016      	beq.n	8002650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002622:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <HAL_RCC_OscConfig+0x2b4>)
 8002624:	2201      	movs	r2, #1
 8002626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7fe fe10 	bl	800124c <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002630:	f7fe fe0c 	bl	800124c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e164      	b.n	800290c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002642:	4b26      	ldr	r3, [pc, #152]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 8002644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x200>
 800264e:	e015      	b.n	800267c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002650:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <HAL_RCC_OscConfig+0x2b4>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002656:	f7fe fdf9 	bl	800124c <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800265e:	f7fe fdf5 	bl	800124c <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e14d      	b.n	800290c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002670:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 8002672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f0      	bne.n	800265e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 80a0 	beq.w	80027ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268e:	4b13      	ldr	r3, [pc, #76]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10f      	bne.n	80026ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	4a0e      	ldr	r2, [pc, #56]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a8:	6413      	str	r3, [r2, #64]	; 0x40
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b6:	2301      	movs	r3, #1
 80026b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_RCC_OscConfig+0x2b8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d121      	bne.n	800270a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HAL_RCC_OscConfig+0x2b8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <HAL_RCC_OscConfig+0x2b8>)
 80026cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d2:	f7fe fdbb 	bl	800124c <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d8:	e011      	b.n	80026fe <HAL_RCC_OscConfig+0x2ce>
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800
 80026e0:	42470000 	.word	0x42470000
 80026e4:	42470e80 	.word	0x42470e80
 80026e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ec:	f7fe fdae 	bl	800124c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e106      	b.n	800290c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fe:	4b85      	ldr	r3, [pc, #532]	; (8002914 <HAL_RCC_OscConfig+0x4e4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d106      	bne.n	8002720 <HAL_RCC_OscConfig+0x2f0>
 8002712:	4b81      	ldr	r3, [pc, #516]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002716:	4a80      	ldr	r2, [pc, #512]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6713      	str	r3, [r2, #112]	; 0x70
 800271e:	e01c      	b.n	800275a <HAL_RCC_OscConfig+0x32a>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b05      	cmp	r3, #5
 8002726:	d10c      	bne.n	8002742 <HAL_RCC_OscConfig+0x312>
 8002728:	4b7b      	ldr	r3, [pc, #492]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	4a7a      	ldr	r2, [pc, #488]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 800272e:	f043 0304 	orr.w	r3, r3, #4
 8002732:	6713      	str	r3, [r2, #112]	; 0x70
 8002734:	4b78      	ldr	r3, [pc, #480]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	4a77      	ldr	r2, [pc, #476]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6713      	str	r3, [r2, #112]	; 0x70
 8002740:	e00b      	b.n	800275a <HAL_RCC_OscConfig+0x32a>
 8002742:	4b75      	ldr	r3, [pc, #468]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002746:	4a74      	ldr	r2, [pc, #464]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	6713      	str	r3, [r2, #112]	; 0x70
 800274e:	4b72      	ldr	r3, [pc, #456]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	4a71      	ldr	r2, [pc, #452]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 8002754:	f023 0304 	bic.w	r3, r3, #4
 8002758:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d015      	beq.n	800278e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002762:	f7fe fd73 	bl	800124c <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002768:	e00a      	b.n	8002780 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7fe fd6f 	bl	800124c <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	; 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e0c5      	b.n	800290c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002780:	4b65      	ldr	r3, [pc, #404]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0ee      	beq.n	800276a <HAL_RCC_OscConfig+0x33a>
 800278c:	e014      	b.n	80027b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278e:	f7fe fd5d 	bl	800124c <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002794:	e00a      	b.n	80027ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002796:	f7fe fd59 	bl	800124c <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e0af      	b.n	800290c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ac:	4b5a      	ldr	r3, [pc, #360]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1ee      	bne.n	8002796 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d105      	bne.n	80027ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027be:	4b56      	ldr	r3, [pc, #344]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	4a55      	ldr	r2, [pc, #340]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 80027c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 809b 	beq.w	800290a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027d4:	4b50      	ldr	r3, [pc, #320]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d05c      	beq.n	800289a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d141      	bne.n	800286c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e8:	4b4c      	ldr	r3, [pc, #304]	; (800291c <HAL_RCC_OscConfig+0x4ec>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7fe fd2d 	bl	800124c <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f6:	f7fe fd29 	bl	800124c <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e081      	b.n	800290c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002808:	4b43      	ldr	r3, [pc, #268]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f0      	bne.n	80027f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69da      	ldr	r2, [r3, #28]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	019b      	lsls	r3, r3, #6
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	085b      	lsrs	r3, r3, #1
 800282c:	3b01      	subs	r3, #1
 800282e:	041b      	lsls	r3, r3, #16
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	061b      	lsls	r3, r3, #24
 8002838:	4937      	ldr	r1, [pc, #220]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800283e:	4b37      	ldr	r3, [pc, #220]	; (800291c <HAL_RCC_OscConfig+0x4ec>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7fe fd02 	bl	800124c <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284c:	f7fe fcfe 	bl	800124c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e056      	b.n	800290c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285e:	4b2e      	ldr	r3, [pc, #184]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x41c>
 800286a:	e04e      	b.n	800290a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286c:	4b2b      	ldr	r3, [pc, #172]	; (800291c <HAL_RCC_OscConfig+0x4ec>)
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7fe fceb 	bl	800124c <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287a:	f7fe fce7 	bl	800124c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e03f      	b.n	800290c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288c:	4b22      	ldr	r3, [pc, #136]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f0      	bne.n	800287a <HAL_RCC_OscConfig+0x44a>
 8002898:	e037      	b.n	800290a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e032      	b.n	800290c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <HAL_RCC_OscConfig+0x4e8>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d028      	beq.n	8002906 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d121      	bne.n	8002906 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d11a      	bne.n	8002906 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028d6:	4013      	ands	r3, r2
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028de:	4293      	cmp	r3, r2
 80028e0:	d111      	bne.n	8002906 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	085b      	lsrs	r3, r3, #1
 80028ee:	3b01      	subs	r3, #1
 80028f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d107      	bne.n	8002906 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002902:	429a      	cmp	r2, r3
 8002904:	d001      	beq.n	800290a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40007000 	.word	0x40007000
 8002918:	40023800 	.word	0x40023800
 800291c:	42470060 	.word	0x42470060

08002920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0cc      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002934:	4b68      	ldr	r3, [pc, #416]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d90c      	bls.n	800295c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b65      	ldr	r3, [pc, #404]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b63      	ldr	r3, [pc, #396]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0b8      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d020      	beq.n	80029aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002974:	4b59      	ldr	r3, [pc, #356]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	4a58      	ldr	r2, [pc, #352]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800297e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800298c:	4b53      	ldr	r3, [pc, #332]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a52      	ldr	r2, [pc, #328]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002998:	4b50      	ldr	r3, [pc, #320]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	494d      	ldr	r1, [pc, #308]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d044      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029be:	4b47      	ldr	r3, [pc, #284]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d119      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e07f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d003      	beq.n	80029de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	4b3f      	ldr	r3, [pc, #252]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e06f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ee:	4b3b      	ldr	r3, [pc, #236]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e067      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029fe:	4b37      	ldr	r3, [pc, #220]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f023 0203 	bic.w	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4934      	ldr	r1, [pc, #208]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a10:	f7fe fc1c 	bl	800124c <HAL_GetTick>
 8002a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a18:	f7fe fc18 	bl	800124c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e04f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	4b2b      	ldr	r3, [pc, #172]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 020c 	and.w	r2, r3, #12
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d1eb      	bne.n	8002a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a40:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d20c      	bcs.n	8002a68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e032      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a74:	4b19      	ldr	r3, [pc, #100]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4916      	ldr	r1, [pc, #88]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a92:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	490e      	ldr	r1, [pc, #56]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aa6:	f000 f821 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	490a      	ldr	r1, [pc, #40]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	5ccb      	ldrb	r3, [r1, r3]
 8002aba:	fa22 f303 	lsr.w	r3, r2, r3
 8002abe:	4a09      	ldr	r2, [pc, #36]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ac2:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe fb7c 	bl	80011c4 <HAL_InitTick>

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023c00 	.word	0x40023c00
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	080044d8 	.word	0x080044d8
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	20000004 	.word	0x20000004

08002aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	2300      	movs	r3, #0
 8002afe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b04:	4b67      	ldr	r3, [pc, #412]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 030c 	and.w	r3, r3, #12
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d00d      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x40>
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	f200 80bd 	bhi.w	8002c90 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x34>
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d003      	beq.n	8002b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b1e:	e0b7      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b20:	4b61      	ldr	r3, [pc, #388]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b22:	60bb      	str	r3, [r7, #8]
       break;
 8002b24:	e0b7      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b26:	4b61      	ldr	r3, [pc, #388]	; (8002cac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b28:	60bb      	str	r3, [r7, #8]
      break;
 8002b2a:	e0b4      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b2c:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b36:	4b5b      	ldr	r3, [pc, #364]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d04d      	beq.n	8002bde <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b42:	4b58      	ldr	r3, [pc, #352]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	099b      	lsrs	r3, r3, #6
 8002b48:	461a      	mov	r2, r3
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b52:	f04f 0100 	mov.w	r1, #0
 8002b56:	ea02 0800 	and.w	r8, r2, r0
 8002b5a:	ea03 0901 	and.w	r9, r3, r1
 8002b5e:	4640      	mov	r0, r8
 8002b60:	4649      	mov	r1, r9
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	014b      	lsls	r3, r1, #5
 8002b6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b70:	0142      	lsls	r2, r0, #5
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	ebb0 0008 	subs.w	r0, r0, r8
 8002b7a:	eb61 0109 	sbc.w	r1, r1, r9
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	018b      	lsls	r3, r1, #6
 8002b88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b8c:	0182      	lsls	r2, r0, #6
 8002b8e:	1a12      	subs	r2, r2, r0
 8002b90:	eb63 0301 	sbc.w	r3, r3, r1
 8002b94:	f04f 0000 	mov.w	r0, #0
 8002b98:	f04f 0100 	mov.w	r1, #0
 8002b9c:	00d9      	lsls	r1, r3, #3
 8002b9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ba2:	00d0      	lsls	r0, r2, #3
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	eb12 0208 	adds.w	r2, r2, r8
 8002bac:	eb43 0309 	adc.w	r3, r3, r9
 8002bb0:	f04f 0000 	mov.w	r0, #0
 8002bb4:	f04f 0100 	mov.w	r1, #0
 8002bb8:	0259      	lsls	r1, r3, #9
 8002bba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002bbe:	0250      	lsls	r0, r2, #9
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	f7fd fe54 	bl	800087c <__aeabi_uldivmod>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4613      	mov	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	e04a      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bde:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	099b      	lsrs	r3, r3, #6
 8002be4:	461a      	mov	r2, r3
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bee:	f04f 0100 	mov.w	r1, #0
 8002bf2:	ea02 0400 	and.w	r4, r2, r0
 8002bf6:	ea03 0501 	and.w	r5, r3, r1
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	4629      	mov	r1, r5
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	014b      	lsls	r3, r1, #5
 8002c08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c0c:	0142      	lsls	r2, r0, #5
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	1b00      	subs	r0, r0, r4
 8002c14:	eb61 0105 	sbc.w	r1, r1, r5
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	018b      	lsls	r3, r1, #6
 8002c22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c26:	0182      	lsls	r2, r0, #6
 8002c28:	1a12      	subs	r2, r2, r0
 8002c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c2e:	f04f 0000 	mov.w	r0, #0
 8002c32:	f04f 0100 	mov.w	r1, #0
 8002c36:	00d9      	lsls	r1, r3, #3
 8002c38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c3c:	00d0      	lsls	r0, r2, #3
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	1912      	adds	r2, r2, r4
 8002c44:	eb45 0303 	adc.w	r3, r5, r3
 8002c48:	f04f 0000 	mov.w	r0, #0
 8002c4c:	f04f 0100 	mov.w	r1, #0
 8002c50:	0299      	lsls	r1, r3, #10
 8002c52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c56:	0290      	lsls	r0, r2, #10
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	461a      	mov	r2, r3
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	f7fd fe08 	bl	800087c <__aeabi_uldivmod>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4613      	mov	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	0c1b      	lsrs	r3, r3, #16
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	60bb      	str	r3, [r7, #8]
      break;
 8002c8e:	e002      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c92:	60bb      	str	r3, [r7, #8]
      break;
 8002c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c96:	68bb      	ldr	r3, [r7, #8]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	00f42400 	.word	0x00f42400
 8002cac:	007a1200 	.word	0x007a1200

08002cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	20000000 	.word	0x20000000

08002cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ccc:	f7ff fff0 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	0a9b      	lsrs	r3, r3, #10
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	4903      	ldr	r1, [pc, #12]	; (8002cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cde:	5ccb      	ldrb	r3, [r1, r3]
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	080044e8 	.word	0x080044e8

08002cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cf4:	f7ff ffdc 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	0b5b      	lsrs	r3, r3, #13
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	4903      	ldr	r1, [pc, #12]	; (8002d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d06:	5ccb      	ldrb	r3, [r1, r3]
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40023800 	.word	0x40023800
 8002d14:	080044e8 	.word	0x080044e8

08002d18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e03f      	b.n	8002daa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fe f91e 	bl	8000f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2224      	movs	r2, #36	; 0x24
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fd7b 	bl	8003858 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b08a      	sub	sp, #40	; 0x28
 8002db6:	af02      	add	r7, sp, #8
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	603b      	str	r3, [r7, #0]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d17c      	bne.n	8002ecc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_UART_Transmit+0x2c>
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e075      	b.n	8002ece <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_UART_Transmit+0x3e>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e06e      	b.n	8002ece <HAL_UART_Transmit+0x11c>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2221      	movs	r2, #33	; 0x21
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e06:	f7fe fa21 	bl	800124c <HAL_GetTick>
 8002e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	88fa      	ldrh	r2, [r7, #6]
 8002e10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	88fa      	ldrh	r2, [r7, #6]
 8002e16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e20:	d108      	bne.n	8002e34 <HAL_UART_Transmit+0x82>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d104      	bne.n	8002e34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	e003      	b.n	8002e3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e44:	e02a      	b.n	8002e9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2180      	movs	r1, #128	; 0x80
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 faf9 	bl	8003448 <UART_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e036      	b.n	8002ece <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10b      	bne.n	8002e7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	3302      	adds	r3, #2
 8002e7a:	61bb      	str	r3, [r7, #24]
 8002e7c:	e007      	b.n	8002e8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1cf      	bne.n	8002e46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2200      	movs	r2, #0
 8002eae:	2140      	movs	r1, #64	; 0x40
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 fac9 	bl	8003448 <UART_WaitOnFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e006      	b.n	8002ece <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	e000      	b.n	8002ece <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ecc:	2302      	movs	r3, #2
  }
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3720      	adds	r7, #32
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b0ba      	sub	sp, #232	; 0xe8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10f      	bne.n	8002f3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <HAL_UART_IRQHandler+0x66>
 8002f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fbd3 	bl	80036e2 <UART_Receive_IT>
      return;
 8002f3c:	e256      	b.n	80033ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002f3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80de 	beq.w	8003104 <HAL_UART_IRQHandler+0x22c>
 8002f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d106      	bne.n	8002f62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80d1 	beq.w	8003104 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <HAL_UART_IRQHandler+0xae>
 8002f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f043 0201 	orr.w	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <HAL_UART_IRQHandler+0xd2>
 8002f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f043 0202 	orr.w	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00b      	beq.n	8002fce <HAL_UART_IRQHandler+0xf6>
 8002fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f043 0204 	orr.w	r2, r3, #4
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d011      	beq.n	8002ffe <HAL_UART_IRQHandler+0x126>
 8002fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d105      	bne.n	8002ff2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f043 0208 	orr.w	r2, r3, #8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 81ed 	beq.w	80033e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_UART_IRQHandler+0x14e>
 8003014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fb5e 	bl	80036e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003030:	2b40      	cmp	r3, #64	; 0x40
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <HAL_UART_IRQHandler+0x17a>
 800304a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d04f      	beq.n	80030f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fa66 	bl	8003524 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	2b40      	cmp	r3, #64	; 0x40
 8003064:	d141      	bne.n	80030ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3314      	adds	r3, #20
 800306c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003074:	e853 3f00 	ldrex	r3, [r3]
 8003078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800307c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3314      	adds	r3, #20
 800308e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003092:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800309e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030a2:	e841 2300 	strex	r3, r2, [r1]
 80030a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1d9      	bne.n	8003066 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d013      	beq.n	80030e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030be:	4a7d      	ldr	r2, [pc, #500]	; (80032b4 <HAL_UART_IRQHandler+0x3dc>)
 80030c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe ffd9 	bl	800207e <HAL_DMA_Abort_IT>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030dc:	4610      	mov	r0, r2
 80030de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e0:	e00e      	b.n	8003100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f99a 	bl	800341c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e8:	e00a      	b.n	8003100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f996 	bl	800341c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f0:	e006      	b.n	8003100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f992 	bl	800341c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80030fe:	e170      	b.n	80033e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003100:	bf00      	nop
    return;
 8003102:	e16e      	b.n	80033e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	2b01      	cmp	r3, #1
 800310a:	f040 814a 	bne.w	80033a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800310e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8143 	beq.w	80033a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800311c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 813c 	beq.w	80033a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314a:	2b40      	cmp	r3, #64	; 0x40
 800314c:	f040 80b4 	bne.w	80032b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800315c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 8140 	beq.w	80033e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800316a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800316e:	429a      	cmp	r2, r3
 8003170:	f080 8139 	bcs.w	80033e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800317a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003186:	f000 8088 	beq.w	800329a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	330c      	adds	r3, #12
 8003190:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003194:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	330c      	adds	r3, #12
 80031b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80031b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031c6:	e841 2300 	strex	r3, r2, [r1]
 80031ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80031ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1d9      	bne.n	800318a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3314      	adds	r3, #20
 80031dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e0:	e853 3f00 	ldrex	r3, [r3]
 80031e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80031e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3314      	adds	r3, #20
 80031f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003200:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003202:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003206:	e841 2300 	strex	r3, r2, [r1]
 800320a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800320c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e1      	bne.n	80031d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3314      	adds	r3, #20
 8003218:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003228:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3314      	adds	r3, #20
 8003232:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003236:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003238:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800323c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800323e:	e841 2300 	strex	r3, r2, [r1]
 8003242:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1e3      	bne.n	8003212 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	330c      	adds	r3, #12
 800325e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003262:	e853 3f00 	ldrex	r3, [r3]
 8003266:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800326a:	f023 0310 	bic.w	r3, r3, #16
 800326e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	330c      	adds	r3, #12
 8003278:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800327c:	65ba      	str	r2, [r7, #88]	; 0x58
 800327e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003282:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800328a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e3      	bne.n	8003258 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	4618      	mov	r0, r3
 8003296:	f7fe fe82 	bl	8001f9e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	4619      	mov	r1, r3
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8c0 	bl	8003430 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032b0:	e099      	b.n	80033e6 <HAL_UART_IRQHandler+0x50e>
 80032b2:	bf00      	nop
 80032b4:	080035eb 	.word	0x080035eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 808b 	beq.w	80033ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80032d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8086 	beq.w	80033ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	330c      	adds	r3, #12
 80032e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e8:	e853 3f00 	ldrex	r3, [r3]
 80032ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	330c      	adds	r3, #12
 80032fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003302:	647a      	str	r2, [r7, #68]	; 0x44
 8003304:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003308:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800330a:	e841 2300 	strex	r3, r2, [r1]
 800330e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1e3      	bne.n	80032de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3314      	adds	r3, #20
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	623b      	str	r3, [r7, #32]
   return(result);
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3314      	adds	r3, #20
 8003336:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800333a:	633a      	str	r2, [r7, #48]	; 0x30
 800333c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e3      	bne.n	8003316 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	330c      	adds	r3, #12
 8003362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	e853 3f00 	ldrex	r3, [r3]
 800336a:	60fb      	str	r3, [r7, #12]
   return(result);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0310 	bic.w	r3, r3, #16
 8003372:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	330c      	adds	r3, #12
 800337c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003380:	61fa      	str	r2, [r7, #28]
 8003382:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003384:	69b9      	ldr	r1, [r7, #24]
 8003386:	69fa      	ldr	r2, [r7, #28]
 8003388:	e841 2300 	strex	r3, r2, [r1]
 800338c:	617b      	str	r3, [r7, #20]
   return(result);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e3      	bne.n	800335c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003394:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f848 	bl	8003430 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033a0:	e023      	b.n	80033ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d009      	beq.n	80033c2 <HAL_UART_IRQHandler+0x4ea>
 80033ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f929 	bl	8003612 <UART_Transmit_IT>
    return;
 80033c0:	e014      	b.n	80033ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00e      	beq.n	80033ec <HAL_UART_IRQHandler+0x514>
 80033ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f969 	bl	80036b2 <UART_EndTransmit_IT>
    return;
 80033e0:	e004      	b.n	80033ec <HAL_UART_IRQHandler+0x514>
    return;
 80033e2:	bf00      	nop
 80033e4:	e002      	b.n	80033ec <HAL_UART_IRQHandler+0x514>
      return;
 80033e6:	bf00      	nop
 80033e8:	e000      	b.n	80033ec <HAL_UART_IRQHandler+0x514>
      return;
 80033ea:	bf00      	nop
  }
}
 80033ec:	37e8      	adds	r7, #232	; 0xe8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop

080033f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b090      	sub	sp, #64	; 0x40
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003458:	e050      	b.n	80034fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d04c      	beq.n	80034fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <UART_WaitOnFlagUntilTimeout+0x30>
 8003468:	f7fd fef0 	bl	800124c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003474:	429a      	cmp	r2, r3
 8003476:	d241      	bcs.n	80034fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	330c      	adds	r3, #12
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003482:	e853 3f00 	ldrex	r3, [r3]
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800348e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	330c      	adds	r3, #12
 8003496:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003498:	637a      	str	r2, [r7, #52]	; 0x34
 800349a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800349e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034a0:	e841 2300 	strex	r3, r2, [r1]
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1e5      	bne.n	8003478 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3314      	adds	r3, #20
 80034b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	e853 3f00 	ldrex	r3, [r3]
 80034ba:	613b      	str	r3, [r7, #16]
   return(result);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f023 0301 	bic.w	r3, r3, #1
 80034c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3314      	adds	r3, #20
 80034ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034cc:	623a      	str	r2, [r7, #32]
 80034ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d0:	69f9      	ldr	r1, [r7, #28]
 80034d2:	6a3a      	ldr	r2, [r7, #32]
 80034d4:	e841 2300 	strex	r3, r2, [r1]
 80034d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e5      	bne.n	80034ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e00f      	b.n	800351c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	4013      	ands	r3, r2
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	429a      	cmp	r2, r3
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	429a      	cmp	r2, r3
 8003518:	d09f      	beq.n	800345a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3740      	adds	r7, #64	; 0x40
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003524:	b480      	push	{r7}
 8003526:	b095      	sub	sp, #84	; 0x54
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	330c      	adds	r3, #12
 8003532:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003536:	e853 3f00 	ldrex	r3, [r3]
 800353a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	330c      	adds	r3, #12
 800354a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800354c:	643a      	str	r2, [r7, #64]	; 0x40
 800354e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003550:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003554:	e841 2300 	strex	r3, r2, [r1]
 8003558:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800355a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e5      	bne.n	800352c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3314      	adds	r3, #20
 8003566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	e853 3f00 	ldrex	r3, [r3]
 800356e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	64bb      	str	r3, [r7, #72]	; 0x48
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	3314      	adds	r3, #20
 800357e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003580:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003588:	e841 2300 	strex	r3, r2, [r1]
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1e5      	bne.n	8003560 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	2b01      	cmp	r3, #1
 800359a:	d119      	bne.n	80035d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	330c      	adds	r3, #12
 80035a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	e853 3f00 	ldrex	r3, [r3]
 80035aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f023 0310 	bic.w	r3, r3, #16
 80035b2:	647b      	str	r3, [r7, #68]	; 0x44
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	330c      	adds	r3, #12
 80035ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035bc:	61ba      	str	r2, [r7, #24]
 80035be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c0:	6979      	ldr	r1, [r7, #20]
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	e841 2300 	strex	r3, r2, [r1]
 80035c8:	613b      	str	r3, [r7, #16]
   return(result);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1e5      	bne.n	800359c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035de:	bf00      	nop
 80035e0:	3754      	adds	r7, #84	; 0x54
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f7ff ff09 	bl	800341c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003612:	b480      	push	{r7}
 8003614:	b085      	sub	sp, #20
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b21      	cmp	r3, #33	; 0x21
 8003624:	d13e      	bne.n	80036a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362e:	d114      	bne.n	800365a <UART_Transmit_IT+0x48>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d110      	bne.n	800365a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800364c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	1c9a      	adds	r2, r3, #2
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	621a      	str	r2, [r3, #32]
 8003658:	e008      	b.n	800366c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	1c59      	adds	r1, r3, #1
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6211      	str	r1, [r2, #32]
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29b      	uxth	r3, r3
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	4619      	mov	r1, r3
 800367a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10f      	bne.n	80036a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800368e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800369e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e000      	b.n	80036a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
  }
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff fe8e 	bl	80033f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b08c      	sub	sp, #48	; 0x30
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b22      	cmp	r3, #34	; 0x22
 80036f4:	f040 80ab 	bne.w	800384e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003700:	d117      	bne.n	8003732 <UART_Receive_IT+0x50>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d113      	bne.n	8003732 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800370a:	2300      	movs	r3, #0
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	b29b      	uxth	r3, r3
 800371c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003720:	b29a      	uxth	r2, r3
 8003722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003724:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372a:	1c9a      	adds	r2, r3, #2
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	629a      	str	r2, [r3, #40]	; 0x28
 8003730:	e026      	b.n	8003780 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003738:	2300      	movs	r3, #0
 800373a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003744:	d007      	beq.n	8003756 <UART_Receive_IT+0x74>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10a      	bne.n	8003764 <UART_Receive_IT+0x82>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	e008      	b.n	8003776 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003770:	b2da      	uxtb	r2, r3
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29b      	uxth	r3, r3
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	4619      	mov	r1, r3
 800378e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003790:	2b00      	cmp	r3, #0
 8003792:	d15a      	bne.n	800384a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0220 	bic.w	r2, r2, #32
 80037a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0201 	bic.w	r2, r2, #1
 80037c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d135      	bne.n	8003840 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	330c      	adds	r3, #12
 80037e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	613b      	str	r3, [r7, #16]
   return(result);
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f023 0310 	bic.w	r3, r3, #16
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	330c      	adds	r3, #12
 80037f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fa:	623a      	str	r2, [r7, #32]
 80037fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fe:	69f9      	ldr	r1, [r7, #28]
 8003800:	6a3a      	ldr	r2, [r7, #32]
 8003802:	e841 2300 	strex	r3, r2, [r1]
 8003806:	61bb      	str	r3, [r7, #24]
   return(result);
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1e5      	bne.n	80037da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b10      	cmp	r3, #16
 800381a:	d10a      	bne.n	8003832 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003836:	4619      	mov	r1, r3
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff fdf9 	bl	8003430 <HAL_UARTEx_RxEventCallback>
 800383e:	e002      	b.n	8003846 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff fde1 	bl	8003408 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	e002      	b.n	8003850 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	e000      	b.n	8003850 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800384e:	2302      	movs	r3, #2
  }
}
 8003850:	4618      	mov	r0, r3
 8003852:	3730      	adds	r7, #48	; 0x30
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800385c:	b09f      	sub	sp, #124	; 0x7c
 800385e:	af00      	add	r7, sp, #0
 8003860:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800386c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800386e:	68d9      	ldr	r1, [r3, #12]
 8003870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	ea40 0301 	orr.w	r3, r0, r1
 8003878:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800387a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	431a      	orrs	r2, r3
 8003884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	431a      	orrs	r2, r3
 800388a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	4313      	orrs	r3, r2
 8003890:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800389c:	f021 010c 	bic.w	r1, r1, #12
 80038a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038a6:	430b      	orrs	r3, r1
 80038a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b6:	6999      	ldr	r1, [r3, #24]
 80038b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	ea40 0301 	orr.w	r3, r0, r1
 80038c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4bc5      	ldr	r3, [pc, #788]	; (8003bdc <UART_SetConfig+0x384>)
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d004      	beq.n	80038d6 <UART_SetConfig+0x7e>
 80038cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	4bc3      	ldr	r3, [pc, #780]	; (8003be0 <UART_SetConfig+0x388>)
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d103      	bne.n	80038de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038d6:	f7ff fa0b 	bl	8002cf0 <HAL_RCC_GetPCLK2Freq>
 80038da:	6778      	str	r0, [r7, #116]	; 0x74
 80038dc:	e002      	b.n	80038e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038de:	f7ff f9f3 	bl	8002cc8 <HAL_RCC_GetPCLK1Freq>
 80038e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ec:	f040 80b6 	bne.w	8003a5c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038f2:	461c      	mov	r4, r3
 80038f4:	f04f 0500 	mov.w	r5, #0
 80038f8:	4622      	mov	r2, r4
 80038fa:	462b      	mov	r3, r5
 80038fc:	1891      	adds	r1, r2, r2
 80038fe:	6439      	str	r1, [r7, #64]	; 0x40
 8003900:	415b      	adcs	r3, r3
 8003902:	647b      	str	r3, [r7, #68]	; 0x44
 8003904:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003908:	1912      	adds	r2, r2, r4
 800390a:	eb45 0303 	adc.w	r3, r5, r3
 800390e:	f04f 0000 	mov.w	r0, #0
 8003912:	f04f 0100 	mov.w	r1, #0
 8003916:	00d9      	lsls	r1, r3, #3
 8003918:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800391c:	00d0      	lsls	r0, r2, #3
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	1911      	adds	r1, r2, r4
 8003924:	6639      	str	r1, [r7, #96]	; 0x60
 8003926:	416b      	adcs	r3, r5
 8003928:	667b      	str	r3, [r7, #100]	; 0x64
 800392a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	461a      	mov	r2, r3
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	1891      	adds	r1, r2, r2
 8003936:	63b9      	str	r1, [r7, #56]	; 0x38
 8003938:	415b      	adcs	r3, r3
 800393a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800393c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003940:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003944:	f7fc ff9a 	bl	800087c <__aeabi_uldivmod>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4ba5      	ldr	r3, [pc, #660]	; (8003be4 <UART_SetConfig+0x38c>)
 800394e:	fba3 2302 	umull	r2, r3, r3, r2
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	011e      	lsls	r6, r3, #4
 8003956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003958:	461c      	mov	r4, r3
 800395a:	f04f 0500 	mov.w	r5, #0
 800395e:	4622      	mov	r2, r4
 8003960:	462b      	mov	r3, r5
 8003962:	1891      	adds	r1, r2, r2
 8003964:	6339      	str	r1, [r7, #48]	; 0x30
 8003966:	415b      	adcs	r3, r3
 8003968:	637b      	str	r3, [r7, #52]	; 0x34
 800396a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800396e:	1912      	adds	r2, r2, r4
 8003970:	eb45 0303 	adc.w	r3, r5, r3
 8003974:	f04f 0000 	mov.w	r0, #0
 8003978:	f04f 0100 	mov.w	r1, #0
 800397c:	00d9      	lsls	r1, r3, #3
 800397e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003982:	00d0      	lsls	r0, r2, #3
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	1911      	adds	r1, r2, r4
 800398a:	65b9      	str	r1, [r7, #88]	; 0x58
 800398c:	416b      	adcs	r3, r5
 800398e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	461a      	mov	r2, r3
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	1891      	adds	r1, r2, r2
 800399c:	62b9      	str	r1, [r7, #40]	; 0x28
 800399e:	415b      	adcs	r3, r3
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80039aa:	f7fc ff67 	bl	800087c <__aeabi_uldivmod>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4b8c      	ldr	r3, [pc, #560]	; (8003be4 <UART_SetConfig+0x38c>)
 80039b4:	fba3 1302 	umull	r1, r3, r3, r2
 80039b8:	095b      	lsrs	r3, r3, #5
 80039ba:	2164      	movs	r1, #100	; 0x64
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	3332      	adds	r3, #50	; 0x32
 80039c6:	4a87      	ldr	r2, [pc, #540]	; (8003be4 <UART_SetConfig+0x38c>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	095b      	lsrs	r3, r3, #5
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039d4:	441e      	add	r6, r3
 80039d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d8:	4618      	mov	r0, r3
 80039da:	f04f 0100 	mov.w	r1, #0
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	1894      	adds	r4, r2, r2
 80039e4:	623c      	str	r4, [r7, #32]
 80039e6:	415b      	adcs	r3, r3
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039ee:	1812      	adds	r2, r2, r0
 80039f0:	eb41 0303 	adc.w	r3, r1, r3
 80039f4:	f04f 0400 	mov.w	r4, #0
 80039f8:	f04f 0500 	mov.w	r5, #0
 80039fc:	00dd      	lsls	r5, r3, #3
 80039fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a02:	00d4      	lsls	r4, r2, #3
 8003a04:	4622      	mov	r2, r4
 8003a06:	462b      	mov	r3, r5
 8003a08:	1814      	adds	r4, r2, r0
 8003a0a:	653c      	str	r4, [r7, #80]	; 0x50
 8003a0c:	414b      	adcs	r3, r1
 8003a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	461a      	mov	r2, r3
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	1891      	adds	r1, r2, r2
 8003a1c:	61b9      	str	r1, [r7, #24]
 8003a1e:	415b      	adcs	r3, r3
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a26:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003a2a:	f7fc ff27 	bl	800087c <__aeabi_uldivmod>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4b6c      	ldr	r3, [pc, #432]	; (8003be4 <UART_SetConfig+0x38c>)
 8003a34:	fba3 1302 	umull	r1, r3, r3, r2
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	2164      	movs	r1, #100	; 0x64
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	3332      	adds	r3, #50	; 0x32
 8003a46:	4a67      	ldr	r2, [pc, #412]	; (8003be4 <UART_SetConfig+0x38c>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	f003 0207 	and.w	r2, r3, #7
 8003a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4432      	add	r2, r6
 8003a58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a5a:	e0b9      	b.n	8003bd0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a5e:	461c      	mov	r4, r3
 8003a60:	f04f 0500 	mov.w	r5, #0
 8003a64:	4622      	mov	r2, r4
 8003a66:	462b      	mov	r3, r5
 8003a68:	1891      	adds	r1, r2, r2
 8003a6a:	6139      	str	r1, [r7, #16]
 8003a6c:	415b      	adcs	r3, r3
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a74:	1912      	adds	r2, r2, r4
 8003a76:	eb45 0303 	adc.w	r3, r5, r3
 8003a7a:	f04f 0000 	mov.w	r0, #0
 8003a7e:	f04f 0100 	mov.w	r1, #0
 8003a82:	00d9      	lsls	r1, r3, #3
 8003a84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a88:	00d0      	lsls	r0, r2, #3
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	eb12 0804 	adds.w	r8, r2, r4
 8003a92:	eb43 0905 	adc.w	r9, r3, r5
 8003a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f04f 0100 	mov.w	r1, #0
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	008b      	lsls	r3, r1, #2
 8003aaa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003aae:	0082      	lsls	r2, r0, #2
 8003ab0:	4640      	mov	r0, r8
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	f7fc fee2 	bl	800087c <__aeabi_uldivmod>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	4b49      	ldr	r3, [pc, #292]	; (8003be4 <UART_SetConfig+0x38c>)
 8003abe:	fba3 2302 	umull	r2, r3, r3, r2
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	011e      	lsls	r6, r3, #4
 8003ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f04f 0100 	mov.w	r1, #0
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	1894      	adds	r4, r2, r2
 8003ad4:	60bc      	str	r4, [r7, #8]
 8003ad6:	415b      	adcs	r3, r3
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ade:	1812      	adds	r2, r2, r0
 8003ae0:	eb41 0303 	adc.w	r3, r1, r3
 8003ae4:	f04f 0400 	mov.w	r4, #0
 8003ae8:	f04f 0500 	mov.w	r5, #0
 8003aec:	00dd      	lsls	r5, r3, #3
 8003aee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003af2:	00d4      	lsls	r4, r2, #3
 8003af4:	4622      	mov	r2, r4
 8003af6:	462b      	mov	r3, r5
 8003af8:	1814      	adds	r4, r2, r0
 8003afa:	64bc      	str	r4, [r7, #72]	; 0x48
 8003afc:	414b      	adcs	r3, r1
 8003afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f04f 0100 	mov.w	r1, #0
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	008b      	lsls	r3, r1, #2
 8003b14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b18:	0082      	lsls	r2, r0, #2
 8003b1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003b1e:	f7fc fead 	bl	800087c <__aeabi_uldivmod>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4b2f      	ldr	r3, [pc, #188]	; (8003be4 <UART_SetConfig+0x38c>)
 8003b28:	fba3 1302 	umull	r1, r3, r3, r2
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	2164      	movs	r1, #100	; 0x64
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	3332      	adds	r3, #50	; 0x32
 8003b3a:	4a2a      	ldr	r2, [pc, #168]	; (8003be4 <UART_SetConfig+0x38c>)
 8003b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b46:	441e      	add	r6, r3
 8003b48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f04f 0100 	mov.w	r1, #0
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	1894      	adds	r4, r2, r2
 8003b56:	603c      	str	r4, [r7, #0]
 8003b58:	415b      	adcs	r3, r3
 8003b5a:	607b      	str	r3, [r7, #4]
 8003b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b60:	1812      	adds	r2, r2, r0
 8003b62:	eb41 0303 	adc.w	r3, r1, r3
 8003b66:	f04f 0400 	mov.w	r4, #0
 8003b6a:	f04f 0500 	mov.w	r5, #0
 8003b6e:	00dd      	lsls	r5, r3, #3
 8003b70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b74:	00d4      	lsls	r4, r2, #3
 8003b76:	4622      	mov	r2, r4
 8003b78:	462b      	mov	r3, r5
 8003b7a:	eb12 0a00 	adds.w	sl, r2, r0
 8003b7e:	eb43 0b01 	adc.w	fp, r3, r1
 8003b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	008b      	lsls	r3, r1, #2
 8003b96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b9a:	0082      	lsls	r2, r0, #2
 8003b9c:	4650      	mov	r0, sl
 8003b9e:	4659      	mov	r1, fp
 8003ba0:	f7fc fe6c 	bl	800087c <__aeabi_uldivmod>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <UART_SetConfig+0x38c>)
 8003baa:	fba3 1302 	umull	r1, r3, r3, r2
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	2164      	movs	r1, #100	; 0x64
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	3332      	adds	r3, #50	; 0x32
 8003bbc:	4a09      	ldr	r2, [pc, #36]	; (8003be4 <UART_SetConfig+0x38c>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	f003 020f 	and.w	r2, r3, #15
 8003bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4432      	add	r2, r6
 8003bce:	609a      	str	r2, [r3, #8]
}
 8003bd0:	bf00      	nop
 8003bd2:	377c      	adds	r7, #124	; 0x7c
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bda:	bf00      	nop
 8003bdc:	40011000 	.word	0x40011000
 8003be0:	40011400 	.word	0x40011400
 8003be4:	51eb851f 	.word	0x51eb851f

08003be8 <__errno>:
 8003be8:	4b01      	ldr	r3, [pc, #4]	; (8003bf0 <__errno+0x8>)
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	2000000c 	.word	0x2000000c

08003bf4 <__libc_init_array>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	4d0d      	ldr	r5, [pc, #52]	; (8003c2c <__libc_init_array+0x38>)
 8003bf8:	4c0d      	ldr	r4, [pc, #52]	; (8003c30 <__libc_init_array+0x3c>)
 8003bfa:	1b64      	subs	r4, r4, r5
 8003bfc:	10a4      	asrs	r4, r4, #2
 8003bfe:	2600      	movs	r6, #0
 8003c00:	42a6      	cmp	r6, r4
 8003c02:	d109      	bne.n	8003c18 <__libc_init_array+0x24>
 8003c04:	4d0b      	ldr	r5, [pc, #44]	; (8003c34 <__libc_init_array+0x40>)
 8003c06:	4c0c      	ldr	r4, [pc, #48]	; (8003c38 <__libc_init_array+0x44>)
 8003c08:	f000 fc4e 	bl	80044a8 <_init>
 8003c0c:	1b64      	subs	r4, r4, r5
 8003c0e:	10a4      	asrs	r4, r4, #2
 8003c10:	2600      	movs	r6, #0
 8003c12:	42a6      	cmp	r6, r4
 8003c14:	d105      	bne.n	8003c22 <__libc_init_array+0x2e>
 8003c16:	bd70      	pop	{r4, r5, r6, pc}
 8003c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c1c:	4798      	blx	r3
 8003c1e:	3601      	adds	r6, #1
 8003c20:	e7ee      	b.n	8003c00 <__libc_init_array+0xc>
 8003c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c26:	4798      	blx	r3
 8003c28:	3601      	adds	r6, #1
 8003c2a:	e7f2      	b.n	8003c12 <__libc_init_array+0x1e>
 8003c2c:	0800452c 	.word	0x0800452c
 8003c30:	0800452c 	.word	0x0800452c
 8003c34:	0800452c 	.word	0x0800452c
 8003c38:	08004530 	.word	0x08004530

08003c3c <memset>:
 8003c3c:	4402      	add	r2, r0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d100      	bne.n	8003c46 <memset+0xa>
 8003c44:	4770      	bx	lr
 8003c46:	f803 1b01 	strb.w	r1, [r3], #1
 8003c4a:	e7f9      	b.n	8003c40 <memset+0x4>

08003c4c <siprintf>:
 8003c4c:	b40e      	push	{r1, r2, r3}
 8003c4e:	b500      	push	{lr}
 8003c50:	b09c      	sub	sp, #112	; 0x70
 8003c52:	ab1d      	add	r3, sp, #116	; 0x74
 8003c54:	9002      	str	r0, [sp, #8]
 8003c56:	9006      	str	r0, [sp, #24]
 8003c58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c5c:	4809      	ldr	r0, [pc, #36]	; (8003c84 <siprintf+0x38>)
 8003c5e:	9107      	str	r1, [sp, #28]
 8003c60:	9104      	str	r1, [sp, #16]
 8003c62:	4909      	ldr	r1, [pc, #36]	; (8003c88 <siprintf+0x3c>)
 8003c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c68:	9105      	str	r1, [sp, #20]
 8003c6a:	6800      	ldr	r0, [r0, #0]
 8003c6c:	9301      	str	r3, [sp, #4]
 8003c6e:	a902      	add	r1, sp, #8
 8003c70:	f000 f868 	bl	8003d44 <_svfiprintf_r>
 8003c74:	9b02      	ldr	r3, [sp, #8]
 8003c76:	2200      	movs	r2, #0
 8003c78:	701a      	strb	r2, [r3, #0]
 8003c7a:	b01c      	add	sp, #112	; 0x70
 8003c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c80:	b003      	add	sp, #12
 8003c82:	4770      	bx	lr
 8003c84:	2000000c 	.word	0x2000000c
 8003c88:	ffff0208 	.word	0xffff0208

08003c8c <__ssputs_r>:
 8003c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c90:	688e      	ldr	r6, [r1, #8]
 8003c92:	429e      	cmp	r6, r3
 8003c94:	4682      	mov	sl, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	4690      	mov	r8, r2
 8003c9a:	461f      	mov	r7, r3
 8003c9c:	d838      	bhi.n	8003d10 <__ssputs_r+0x84>
 8003c9e:	898a      	ldrh	r2, [r1, #12]
 8003ca0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ca4:	d032      	beq.n	8003d0c <__ssputs_r+0x80>
 8003ca6:	6825      	ldr	r5, [r4, #0]
 8003ca8:	6909      	ldr	r1, [r1, #16]
 8003caa:	eba5 0901 	sub.w	r9, r5, r1
 8003cae:	6965      	ldr	r5, [r4, #20]
 8003cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cb8:	3301      	adds	r3, #1
 8003cba:	444b      	add	r3, r9
 8003cbc:	106d      	asrs	r5, r5, #1
 8003cbe:	429d      	cmp	r5, r3
 8003cc0:	bf38      	it	cc
 8003cc2:	461d      	movcc	r5, r3
 8003cc4:	0553      	lsls	r3, r2, #21
 8003cc6:	d531      	bpl.n	8003d2c <__ssputs_r+0xa0>
 8003cc8:	4629      	mov	r1, r5
 8003cca:	f000 fb47 	bl	800435c <_malloc_r>
 8003cce:	4606      	mov	r6, r0
 8003cd0:	b950      	cbnz	r0, 8003ce8 <__ssputs_r+0x5c>
 8003cd2:	230c      	movs	r3, #12
 8003cd4:	f8ca 3000 	str.w	r3, [sl]
 8003cd8:	89a3      	ldrh	r3, [r4, #12]
 8003cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cde:	81a3      	strh	r3, [r4, #12]
 8003ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce8:	6921      	ldr	r1, [r4, #16]
 8003cea:	464a      	mov	r2, r9
 8003cec:	f000 fabe 	bl	800426c <memcpy>
 8003cf0:	89a3      	ldrh	r3, [r4, #12]
 8003cf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cfa:	81a3      	strh	r3, [r4, #12]
 8003cfc:	6126      	str	r6, [r4, #16]
 8003cfe:	6165      	str	r5, [r4, #20]
 8003d00:	444e      	add	r6, r9
 8003d02:	eba5 0509 	sub.w	r5, r5, r9
 8003d06:	6026      	str	r6, [r4, #0]
 8003d08:	60a5      	str	r5, [r4, #8]
 8003d0a:	463e      	mov	r6, r7
 8003d0c:	42be      	cmp	r6, r7
 8003d0e:	d900      	bls.n	8003d12 <__ssputs_r+0x86>
 8003d10:	463e      	mov	r6, r7
 8003d12:	4632      	mov	r2, r6
 8003d14:	6820      	ldr	r0, [r4, #0]
 8003d16:	4641      	mov	r1, r8
 8003d18:	f000 fab6 	bl	8004288 <memmove>
 8003d1c:	68a3      	ldr	r3, [r4, #8]
 8003d1e:	6822      	ldr	r2, [r4, #0]
 8003d20:	1b9b      	subs	r3, r3, r6
 8003d22:	4432      	add	r2, r6
 8003d24:	60a3      	str	r3, [r4, #8]
 8003d26:	6022      	str	r2, [r4, #0]
 8003d28:	2000      	movs	r0, #0
 8003d2a:	e7db      	b.n	8003ce4 <__ssputs_r+0x58>
 8003d2c:	462a      	mov	r2, r5
 8003d2e:	f000 fb6f 	bl	8004410 <_realloc_r>
 8003d32:	4606      	mov	r6, r0
 8003d34:	2800      	cmp	r0, #0
 8003d36:	d1e1      	bne.n	8003cfc <__ssputs_r+0x70>
 8003d38:	6921      	ldr	r1, [r4, #16]
 8003d3a:	4650      	mov	r0, sl
 8003d3c:	f000 fabe 	bl	80042bc <_free_r>
 8003d40:	e7c7      	b.n	8003cd2 <__ssputs_r+0x46>
	...

08003d44 <_svfiprintf_r>:
 8003d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d48:	4698      	mov	r8, r3
 8003d4a:	898b      	ldrh	r3, [r1, #12]
 8003d4c:	061b      	lsls	r3, r3, #24
 8003d4e:	b09d      	sub	sp, #116	; 0x74
 8003d50:	4607      	mov	r7, r0
 8003d52:	460d      	mov	r5, r1
 8003d54:	4614      	mov	r4, r2
 8003d56:	d50e      	bpl.n	8003d76 <_svfiprintf_r+0x32>
 8003d58:	690b      	ldr	r3, [r1, #16]
 8003d5a:	b963      	cbnz	r3, 8003d76 <_svfiprintf_r+0x32>
 8003d5c:	2140      	movs	r1, #64	; 0x40
 8003d5e:	f000 fafd 	bl	800435c <_malloc_r>
 8003d62:	6028      	str	r0, [r5, #0]
 8003d64:	6128      	str	r0, [r5, #16]
 8003d66:	b920      	cbnz	r0, 8003d72 <_svfiprintf_r+0x2e>
 8003d68:	230c      	movs	r3, #12
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d70:	e0d1      	b.n	8003f16 <_svfiprintf_r+0x1d2>
 8003d72:	2340      	movs	r3, #64	; 0x40
 8003d74:	616b      	str	r3, [r5, #20]
 8003d76:	2300      	movs	r3, #0
 8003d78:	9309      	str	r3, [sp, #36]	; 0x24
 8003d7a:	2320      	movs	r3, #32
 8003d7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d80:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d84:	2330      	movs	r3, #48	; 0x30
 8003d86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003f30 <_svfiprintf_r+0x1ec>
 8003d8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d8e:	f04f 0901 	mov.w	r9, #1
 8003d92:	4623      	mov	r3, r4
 8003d94:	469a      	mov	sl, r3
 8003d96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d9a:	b10a      	cbz	r2, 8003da0 <_svfiprintf_r+0x5c>
 8003d9c:	2a25      	cmp	r2, #37	; 0x25
 8003d9e:	d1f9      	bne.n	8003d94 <_svfiprintf_r+0x50>
 8003da0:	ebba 0b04 	subs.w	fp, sl, r4
 8003da4:	d00b      	beq.n	8003dbe <_svfiprintf_r+0x7a>
 8003da6:	465b      	mov	r3, fp
 8003da8:	4622      	mov	r2, r4
 8003daa:	4629      	mov	r1, r5
 8003dac:	4638      	mov	r0, r7
 8003dae:	f7ff ff6d 	bl	8003c8c <__ssputs_r>
 8003db2:	3001      	adds	r0, #1
 8003db4:	f000 80aa 	beq.w	8003f0c <_svfiprintf_r+0x1c8>
 8003db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dba:	445a      	add	r2, fp
 8003dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8003dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80a2 	beq.w	8003f0c <_svfiprintf_r+0x1c8>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f04f 32ff 	mov.w	r2, #4294967295
 8003dce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dd2:	f10a 0a01 	add.w	sl, sl, #1
 8003dd6:	9304      	str	r3, [sp, #16]
 8003dd8:	9307      	str	r3, [sp, #28]
 8003dda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dde:	931a      	str	r3, [sp, #104]	; 0x68
 8003de0:	4654      	mov	r4, sl
 8003de2:	2205      	movs	r2, #5
 8003de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003de8:	4851      	ldr	r0, [pc, #324]	; (8003f30 <_svfiprintf_r+0x1ec>)
 8003dea:	f7fc f9f1 	bl	80001d0 <memchr>
 8003dee:	9a04      	ldr	r2, [sp, #16]
 8003df0:	b9d8      	cbnz	r0, 8003e2a <_svfiprintf_r+0xe6>
 8003df2:	06d0      	lsls	r0, r2, #27
 8003df4:	bf44      	itt	mi
 8003df6:	2320      	movmi	r3, #32
 8003df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dfc:	0711      	lsls	r1, r2, #28
 8003dfe:	bf44      	itt	mi
 8003e00:	232b      	movmi	r3, #43	; 0x2b
 8003e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e06:	f89a 3000 	ldrb.w	r3, [sl]
 8003e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e0c:	d015      	beq.n	8003e3a <_svfiprintf_r+0xf6>
 8003e0e:	9a07      	ldr	r2, [sp, #28]
 8003e10:	4654      	mov	r4, sl
 8003e12:	2000      	movs	r0, #0
 8003e14:	f04f 0c0a 	mov.w	ip, #10
 8003e18:	4621      	mov	r1, r4
 8003e1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e1e:	3b30      	subs	r3, #48	; 0x30
 8003e20:	2b09      	cmp	r3, #9
 8003e22:	d94e      	bls.n	8003ec2 <_svfiprintf_r+0x17e>
 8003e24:	b1b0      	cbz	r0, 8003e54 <_svfiprintf_r+0x110>
 8003e26:	9207      	str	r2, [sp, #28]
 8003e28:	e014      	b.n	8003e54 <_svfiprintf_r+0x110>
 8003e2a:	eba0 0308 	sub.w	r3, r0, r8
 8003e2e:	fa09 f303 	lsl.w	r3, r9, r3
 8003e32:	4313      	orrs	r3, r2
 8003e34:	9304      	str	r3, [sp, #16]
 8003e36:	46a2      	mov	sl, r4
 8003e38:	e7d2      	b.n	8003de0 <_svfiprintf_r+0x9c>
 8003e3a:	9b03      	ldr	r3, [sp, #12]
 8003e3c:	1d19      	adds	r1, r3, #4
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	9103      	str	r1, [sp, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	bfbb      	ittet	lt
 8003e46:	425b      	neglt	r3, r3
 8003e48:	f042 0202 	orrlt.w	r2, r2, #2
 8003e4c:	9307      	strge	r3, [sp, #28]
 8003e4e:	9307      	strlt	r3, [sp, #28]
 8003e50:	bfb8      	it	lt
 8003e52:	9204      	strlt	r2, [sp, #16]
 8003e54:	7823      	ldrb	r3, [r4, #0]
 8003e56:	2b2e      	cmp	r3, #46	; 0x2e
 8003e58:	d10c      	bne.n	8003e74 <_svfiprintf_r+0x130>
 8003e5a:	7863      	ldrb	r3, [r4, #1]
 8003e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e5e:	d135      	bne.n	8003ecc <_svfiprintf_r+0x188>
 8003e60:	9b03      	ldr	r3, [sp, #12]
 8003e62:	1d1a      	adds	r2, r3, #4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	9203      	str	r2, [sp, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bfb8      	it	lt
 8003e6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e70:	3402      	adds	r4, #2
 8003e72:	9305      	str	r3, [sp, #20]
 8003e74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f40 <_svfiprintf_r+0x1fc>
 8003e78:	7821      	ldrb	r1, [r4, #0]
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	4650      	mov	r0, sl
 8003e7e:	f7fc f9a7 	bl	80001d0 <memchr>
 8003e82:	b140      	cbz	r0, 8003e96 <_svfiprintf_r+0x152>
 8003e84:	2340      	movs	r3, #64	; 0x40
 8003e86:	eba0 000a 	sub.w	r0, r0, sl
 8003e8a:	fa03 f000 	lsl.w	r0, r3, r0
 8003e8e:	9b04      	ldr	r3, [sp, #16]
 8003e90:	4303      	orrs	r3, r0
 8003e92:	3401      	adds	r4, #1
 8003e94:	9304      	str	r3, [sp, #16]
 8003e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e9a:	4826      	ldr	r0, [pc, #152]	; (8003f34 <_svfiprintf_r+0x1f0>)
 8003e9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ea0:	2206      	movs	r2, #6
 8003ea2:	f7fc f995 	bl	80001d0 <memchr>
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	d038      	beq.n	8003f1c <_svfiprintf_r+0x1d8>
 8003eaa:	4b23      	ldr	r3, [pc, #140]	; (8003f38 <_svfiprintf_r+0x1f4>)
 8003eac:	bb1b      	cbnz	r3, 8003ef6 <_svfiprintf_r+0x1b2>
 8003eae:	9b03      	ldr	r3, [sp, #12]
 8003eb0:	3307      	adds	r3, #7
 8003eb2:	f023 0307 	bic.w	r3, r3, #7
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	9303      	str	r3, [sp, #12]
 8003eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ebc:	4433      	add	r3, r6
 8003ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8003ec0:	e767      	b.n	8003d92 <_svfiprintf_r+0x4e>
 8003ec2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	2001      	movs	r0, #1
 8003eca:	e7a5      	b.n	8003e18 <_svfiprintf_r+0xd4>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	3401      	adds	r4, #1
 8003ed0:	9305      	str	r3, [sp, #20]
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	f04f 0c0a 	mov.w	ip, #10
 8003ed8:	4620      	mov	r0, r4
 8003eda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ede:	3a30      	subs	r2, #48	; 0x30
 8003ee0:	2a09      	cmp	r2, #9
 8003ee2:	d903      	bls.n	8003eec <_svfiprintf_r+0x1a8>
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0c5      	beq.n	8003e74 <_svfiprintf_r+0x130>
 8003ee8:	9105      	str	r1, [sp, #20]
 8003eea:	e7c3      	b.n	8003e74 <_svfiprintf_r+0x130>
 8003eec:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ef0:	4604      	mov	r4, r0
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e7f0      	b.n	8003ed8 <_svfiprintf_r+0x194>
 8003ef6:	ab03      	add	r3, sp, #12
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	462a      	mov	r2, r5
 8003efc:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <_svfiprintf_r+0x1f8>)
 8003efe:	a904      	add	r1, sp, #16
 8003f00:	4638      	mov	r0, r7
 8003f02:	f3af 8000 	nop.w
 8003f06:	1c42      	adds	r2, r0, #1
 8003f08:	4606      	mov	r6, r0
 8003f0a:	d1d6      	bne.n	8003eba <_svfiprintf_r+0x176>
 8003f0c:	89ab      	ldrh	r3, [r5, #12]
 8003f0e:	065b      	lsls	r3, r3, #25
 8003f10:	f53f af2c 	bmi.w	8003d6c <_svfiprintf_r+0x28>
 8003f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f16:	b01d      	add	sp, #116	; 0x74
 8003f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f1c:	ab03      	add	r3, sp, #12
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	462a      	mov	r2, r5
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <_svfiprintf_r+0x1f8>)
 8003f24:	a904      	add	r1, sp, #16
 8003f26:	4638      	mov	r0, r7
 8003f28:	f000 f87a 	bl	8004020 <_printf_i>
 8003f2c:	e7eb      	b.n	8003f06 <_svfiprintf_r+0x1c2>
 8003f2e:	bf00      	nop
 8003f30:	080044f0 	.word	0x080044f0
 8003f34:	080044fa 	.word	0x080044fa
 8003f38:	00000000 	.word	0x00000000
 8003f3c:	08003c8d 	.word	0x08003c8d
 8003f40:	080044f6 	.word	0x080044f6

08003f44 <_printf_common>:
 8003f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f48:	4616      	mov	r6, r2
 8003f4a:	4699      	mov	r9, r3
 8003f4c:	688a      	ldr	r2, [r1, #8]
 8003f4e:	690b      	ldr	r3, [r1, #16]
 8003f50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f54:	4293      	cmp	r3, r2
 8003f56:	bfb8      	it	lt
 8003f58:	4613      	movlt	r3, r2
 8003f5a:	6033      	str	r3, [r6, #0]
 8003f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f60:	4607      	mov	r7, r0
 8003f62:	460c      	mov	r4, r1
 8003f64:	b10a      	cbz	r2, 8003f6a <_printf_common+0x26>
 8003f66:	3301      	adds	r3, #1
 8003f68:	6033      	str	r3, [r6, #0]
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	0699      	lsls	r1, r3, #26
 8003f6e:	bf42      	ittt	mi
 8003f70:	6833      	ldrmi	r3, [r6, #0]
 8003f72:	3302      	addmi	r3, #2
 8003f74:	6033      	strmi	r3, [r6, #0]
 8003f76:	6825      	ldr	r5, [r4, #0]
 8003f78:	f015 0506 	ands.w	r5, r5, #6
 8003f7c:	d106      	bne.n	8003f8c <_printf_common+0x48>
 8003f7e:	f104 0a19 	add.w	sl, r4, #25
 8003f82:	68e3      	ldr	r3, [r4, #12]
 8003f84:	6832      	ldr	r2, [r6, #0]
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	42ab      	cmp	r3, r5
 8003f8a:	dc26      	bgt.n	8003fda <_printf_common+0x96>
 8003f8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f90:	1e13      	subs	r3, r2, #0
 8003f92:	6822      	ldr	r2, [r4, #0]
 8003f94:	bf18      	it	ne
 8003f96:	2301      	movne	r3, #1
 8003f98:	0692      	lsls	r2, r2, #26
 8003f9a:	d42b      	bmi.n	8003ff4 <_printf_common+0xb0>
 8003f9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fa0:	4649      	mov	r1, r9
 8003fa2:	4638      	mov	r0, r7
 8003fa4:	47c0      	blx	r8
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	d01e      	beq.n	8003fe8 <_printf_common+0xa4>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	68e5      	ldr	r5, [r4, #12]
 8003fae:	6832      	ldr	r2, [r6, #0]
 8003fb0:	f003 0306 	and.w	r3, r3, #6
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	bf08      	it	eq
 8003fb8:	1aad      	subeq	r5, r5, r2
 8003fba:	68a3      	ldr	r3, [r4, #8]
 8003fbc:	6922      	ldr	r2, [r4, #16]
 8003fbe:	bf0c      	ite	eq
 8003fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fc4:	2500      	movne	r5, #0
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	bfc4      	itt	gt
 8003fca:	1a9b      	subgt	r3, r3, r2
 8003fcc:	18ed      	addgt	r5, r5, r3
 8003fce:	2600      	movs	r6, #0
 8003fd0:	341a      	adds	r4, #26
 8003fd2:	42b5      	cmp	r5, r6
 8003fd4:	d11a      	bne.n	800400c <_printf_common+0xc8>
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	e008      	b.n	8003fec <_printf_common+0xa8>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	4652      	mov	r2, sl
 8003fde:	4649      	mov	r1, r9
 8003fe0:	4638      	mov	r0, r7
 8003fe2:	47c0      	blx	r8
 8003fe4:	3001      	adds	r0, #1
 8003fe6:	d103      	bne.n	8003ff0 <_printf_common+0xac>
 8003fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff0:	3501      	adds	r5, #1
 8003ff2:	e7c6      	b.n	8003f82 <_printf_common+0x3e>
 8003ff4:	18e1      	adds	r1, r4, r3
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	2030      	movs	r0, #48	; 0x30
 8003ffa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ffe:	4422      	add	r2, r4
 8004000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004008:	3302      	adds	r3, #2
 800400a:	e7c7      	b.n	8003f9c <_printf_common+0x58>
 800400c:	2301      	movs	r3, #1
 800400e:	4622      	mov	r2, r4
 8004010:	4649      	mov	r1, r9
 8004012:	4638      	mov	r0, r7
 8004014:	47c0      	blx	r8
 8004016:	3001      	adds	r0, #1
 8004018:	d0e6      	beq.n	8003fe8 <_printf_common+0xa4>
 800401a:	3601      	adds	r6, #1
 800401c:	e7d9      	b.n	8003fd2 <_printf_common+0x8e>
	...

08004020 <_printf_i>:
 8004020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004024:	460c      	mov	r4, r1
 8004026:	4691      	mov	r9, r2
 8004028:	7e27      	ldrb	r7, [r4, #24]
 800402a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800402c:	2f78      	cmp	r7, #120	; 0x78
 800402e:	4680      	mov	r8, r0
 8004030:	469a      	mov	sl, r3
 8004032:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004036:	d807      	bhi.n	8004048 <_printf_i+0x28>
 8004038:	2f62      	cmp	r7, #98	; 0x62
 800403a:	d80a      	bhi.n	8004052 <_printf_i+0x32>
 800403c:	2f00      	cmp	r7, #0
 800403e:	f000 80d8 	beq.w	80041f2 <_printf_i+0x1d2>
 8004042:	2f58      	cmp	r7, #88	; 0x58
 8004044:	f000 80a3 	beq.w	800418e <_printf_i+0x16e>
 8004048:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800404c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004050:	e03a      	b.n	80040c8 <_printf_i+0xa8>
 8004052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004056:	2b15      	cmp	r3, #21
 8004058:	d8f6      	bhi.n	8004048 <_printf_i+0x28>
 800405a:	a001      	add	r0, pc, #4	; (adr r0, 8004060 <_printf_i+0x40>)
 800405c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004060:	080040b9 	.word	0x080040b9
 8004064:	080040cd 	.word	0x080040cd
 8004068:	08004049 	.word	0x08004049
 800406c:	08004049 	.word	0x08004049
 8004070:	08004049 	.word	0x08004049
 8004074:	08004049 	.word	0x08004049
 8004078:	080040cd 	.word	0x080040cd
 800407c:	08004049 	.word	0x08004049
 8004080:	08004049 	.word	0x08004049
 8004084:	08004049 	.word	0x08004049
 8004088:	08004049 	.word	0x08004049
 800408c:	080041d9 	.word	0x080041d9
 8004090:	080040fd 	.word	0x080040fd
 8004094:	080041bb 	.word	0x080041bb
 8004098:	08004049 	.word	0x08004049
 800409c:	08004049 	.word	0x08004049
 80040a0:	080041fb 	.word	0x080041fb
 80040a4:	08004049 	.word	0x08004049
 80040a8:	080040fd 	.word	0x080040fd
 80040ac:	08004049 	.word	0x08004049
 80040b0:	08004049 	.word	0x08004049
 80040b4:	080041c3 	.word	0x080041c3
 80040b8:	680b      	ldr	r3, [r1, #0]
 80040ba:	1d1a      	adds	r2, r3, #4
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	600a      	str	r2, [r1, #0]
 80040c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0a3      	b.n	8004214 <_printf_i+0x1f4>
 80040cc:	6825      	ldr	r5, [r4, #0]
 80040ce:	6808      	ldr	r0, [r1, #0]
 80040d0:	062e      	lsls	r6, r5, #24
 80040d2:	f100 0304 	add.w	r3, r0, #4
 80040d6:	d50a      	bpl.n	80040ee <_printf_i+0xce>
 80040d8:	6805      	ldr	r5, [r0, #0]
 80040da:	600b      	str	r3, [r1, #0]
 80040dc:	2d00      	cmp	r5, #0
 80040de:	da03      	bge.n	80040e8 <_printf_i+0xc8>
 80040e0:	232d      	movs	r3, #45	; 0x2d
 80040e2:	426d      	negs	r5, r5
 80040e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e8:	485e      	ldr	r0, [pc, #376]	; (8004264 <_printf_i+0x244>)
 80040ea:	230a      	movs	r3, #10
 80040ec:	e019      	b.n	8004122 <_printf_i+0x102>
 80040ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80040f2:	6805      	ldr	r5, [r0, #0]
 80040f4:	600b      	str	r3, [r1, #0]
 80040f6:	bf18      	it	ne
 80040f8:	b22d      	sxthne	r5, r5
 80040fa:	e7ef      	b.n	80040dc <_printf_i+0xbc>
 80040fc:	680b      	ldr	r3, [r1, #0]
 80040fe:	6825      	ldr	r5, [r4, #0]
 8004100:	1d18      	adds	r0, r3, #4
 8004102:	6008      	str	r0, [r1, #0]
 8004104:	0628      	lsls	r0, r5, #24
 8004106:	d501      	bpl.n	800410c <_printf_i+0xec>
 8004108:	681d      	ldr	r5, [r3, #0]
 800410a:	e002      	b.n	8004112 <_printf_i+0xf2>
 800410c:	0669      	lsls	r1, r5, #25
 800410e:	d5fb      	bpl.n	8004108 <_printf_i+0xe8>
 8004110:	881d      	ldrh	r5, [r3, #0]
 8004112:	4854      	ldr	r0, [pc, #336]	; (8004264 <_printf_i+0x244>)
 8004114:	2f6f      	cmp	r7, #111	; 0x6f
 8004116:	bf0c      	ite	eq
 8004118:	2308      	moveq	r3, #8
 800411a:	230a      	movne	r3, #10
 800411c:	2100      	movs	r1, #0
 800411e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004122:	6866      	ldr	r6, [r4, #4]
 8004124:	60a6      	str	r6, [r4, #8]
 8004126:	2e00      	cmp	r6, #0
 8004128:	bfa2      	ittt	ge
 800412a:	6821      	ldrge	r1, [r4, #0]
 800412c:	f021 0104 	bicge.w	r1, r1, #4
 8004130:	6021      	strge	r1, [r4, #0]
 8004132:	b90d      	cbnz	r5, 8004138 <_printf_i+0x118>
 8004134:	2e00      	cmp	r6, #0
 8004136:	d04d      	beq.n	80041d4 <_printf_i+0x1b4>
 8004138:	4616      	mov	r6, r2
 800413a:	fbb5 f1f3 	udiv	r1, r5, r3
 800413e:	fb03 5711 	mls	r7, r3, r1, r5
 8004142:	5dc7      	ldrb	r7, [r0, r7]
 8004144:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004148:	462f      	mov	r7, r5
 800414a:	42bb      	cmp	r3, r7
 800414c:	460d      	mov	r5, r1
 800414e:	d9f4      	bls.n	800413a <_printf_i+0x11a>
 8004150:	2b08      	cmp	r3, #8
 8004152:	d10b      	bne.n	800416c <_printf_i+0x14c>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	07df      	lsls	r7, r3, #31
 8004158:	d508      	bpl.n	800416c <_printf_i+0x14c>
 800415a:	6923      	ldr	r3, [r4, #16]
 800415c:	6861      	ldr	r1, [r4, #4]
 800415e:	4299      	cmp	r1, r3
 8004160:	bfde      	ittt	le
 8004162:	2330      	movle	r3, #48	; 0x30
 8004164:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004168:	f106 36ff 	addle.w	r6, r6, #4294967295
 800416c:	1b92      	subs	r2, r2, r6
 800416e:	6122      	str	r2, [r4, #16]
 8004170:	f8cd a000 	str.w	sl, [sp]
 8004174:	464b      	mov	r3, r9
 8004176:	aa03      	add	r2, sp, #12
 8004178:	4621      	mov	r1, r4
 800417a:	4640      	mov	r0, r8
 800417c:	f7ff fee2 	bl	8003f44 <_printf_common>
 8004180:	3001      	adds	r0, #1
 8004182:	d14c      	bne.n	800421e <_printf_i+0x1fe>
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	b004      	add	sp, #16
 800418a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800418e:	4835      	ldr	r0, [pc, #212]	; (8004264 <_printf_i+0x244>)
 8004190:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	680e      	ldr	r6, [r1, #0]
 8004198:	061f      	lsls	r7, r3, #24
 800419a:	f856 5b04 	ldr.w	r5, [r6], #4
 800419e:	600e      	str	r6, [r1, #0]
 80041a0:	d514      	bpl.n	80041cc <_printf_i+0x1ac>
 80041a2:	07d9      	lsls	r1, r3, #31
 80041a4:	bf44      	itt	mi
 80041a6:	f043 0320 	orrmi.w	r3, r3, #32
 80041aa:	6023      	strmi	r3, [r4, #0]
 80041ac:	b91d      	cbnz	r5, 80041b6 <_printf_i+0x196>
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	f023 0320 	bic.w	r3, r3, #32
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	2310      	movs	r3, #16
 80041b8:	e7b0      	b.n	800411c <_printf_i+0xfc>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	f043 0320 	orr.w	r3, r3, #32
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	2378      	movs	r3, #120	; 0x78
 80041c4:	4828      	ldr	r0, [pc, #160]	; (8004268 <_printf_i+0x248>)
 80041c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041ca:	e7e3      	b.n	8004194 <_printf_i+0x174>
 80041cc:	065e      	lsls	r6, r3, #25
 80041ce:	bf48      	it	mi
 80041d0:	b2ad      	uxthmi	r5, r5
 80041d2:	e7e6      	b.n	80041a2 <_printf_i+0x182>
 80041d4:	4616      	mov	r6, r2
 80041d6:	e7bb      	b.n	8004150 <_printf_i+0x130>
 80041d8:	680b      	ldr	r3, [r1, #0]
 80041da:	6826      	ldr	r6, [r4, #0]
 80041dc:	6960      	ldr	r0, [r4, #20]
 80041de:	1d1d      	adds	r5, r3, #4
 80041e0:	600d      	str	r5, [r1, #0]
 80041e2:	0635      	lsls	r5, r6, #24
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	d501      	bpl.n	80041ec <_printf_i+0x1cc>
 80041e8:	6018      	str	r0, [r3, #0]
 80041ea:	e002      	b.n	80041f2 <_printf_i+0x1d2>
 80041ec:	0671      	lsls	r1, r6, #25
 80041ee:	d5fb      	bpl.n	80041e8 <_printf_i+0x1c8>
 80041f0:	8018      	strh	r0, [r3, #0]
 80041f2:	2300      	movs	r3, #0
 80041f4:	6123      	str	r3, [r4, #16]
 80041f6:	4616      	mov	r6, r2
 80041f8:	e7ba      	b.n	8004170 <_printf_i+0x150>
 80041fa:	680b      	ldr	r3, [r1, #0]
 80041fc:	1d1a      	adds	r2, r3, #4
 80041fe:	600a      	str	r2, [r1, #0]
 8004200:	681e      	ldr	r6, [r3, #0]
 8004202:	6862      	ldr	r2, [r4, #4]
 8004204:	2100      	movs	r1, #0
 8004206:	4630      	mov	r0, r6
 8004208:	f7fb ffe2 	bl	80001d0 <memchr>
 800420c:	b108      	cbz	r0, 8004212 <_printf_i+0x1f2>
 800420e:	1b80      	subs	r0, r0, r6
 8004210:	6060      	str	r0, [r4, #4]
 8004212:	6863      	ldr	r3, [r4, #4]
 8004214:	6123      	str	r3, [r4, #16]
 8004216:	2300      	movs	r3, #0
 8004218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800421c:	e7a8      	b.n	8004170 <_printf_i+0x150>
 800421e:	6923      	ldr	r3, [r4, #16]
 8004220:	4632      	mov	r2, r6
 8004222:	4649      	mov	r1, r9
 8004224:	4640      	mov	r0, r8
 8004226:	47d0      	blx	sl
 8004228:	3001      	adds	r0, #1
 800422a:	d0ab      	beq.n	8004184 <_printf_i+0x164>
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	079b      	lsls	r3, r3, #30
 8004230:	d413      	bmi.n	800425a <_printf_i+0x23a>
 8004232:	68e0      	ldr	r0, [r4, #12]
 8004234:	9b03      	ldr	r3, [sp, #12]
 8004236:	4298      	cmp	r0, r3
 8004238:	bfb8      	it	lt
 800423a:	4618      	movlt	r0, r3
 800423c:	e7a4      	b.n	8004188 <_printf_i+0x168>
 800423e:	2301      	movs	r3, #1
 8004240:	4632      	mov	r2, r6
 8004242:	4649      	mov	r1, r9
 8004244:	4640      	mov	r0, r8
 8004246:	47d0      	blx	sl
 8004248:	3001      	adds	r0, #1
 800424a:	d09b      	beq.n	8004184 <_printf_i+0x164>
 800424c:	3501      	adds	r5, #1
 800424e:	68e3      	ldr	r3, [r4, #12]
 8004250:	9903      	ldr	r1, [sp, #12]
 8004252:	1a5b      	subs	r3, r3, r1
 8004254:	42ab      	cmp	r3, r5
 8004256:	dcf2      	bgt.n	800423e <_printf_i+0x21e>
 8004258:	e7eb      	b.n	8004232 <_printf_i+0x212>
 800425a:	2500      	movs	r5, #0
 800425c:	f104 0619 	add.w	r6, r4, #25
 8004260:	e7f5      	b.n	800424e <_printf_i+0x22e>
 8004262:	bf00      	nop
 8004264:	08004501 	.word	0x08004501
 8004268:	08004512 	.word	0x08004512

0800426c <memcpy>:
 800426c:	440a      	add	r2, r1
 800426e:	4291      	cmp	r1, r2
 8004270:	f100 33ff 	add.w	r3, r0, #4294967295
 8004274:	d100      	bne.n	8004278 <memcpy+0xc>
 8004276:	4770      	bx	lr
 8004278:	b510      	push	{r4, lr}
 800427a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800427e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004282:	4291      	cmp	r1, r2
 8004284:	d1f9      	bne.n	800427a <memcpy+0xe>
 8004286:	bd10      	pop	{r4, pc}

08004288 <memmove>:
 8004288:	4288      	cmp	r0, r1
 800428a:	b510      	push	{r4, lr}
 800428c:	eb01 0402 	add.w	r4, r1, r2
 8004290:	d902      	bls.n	8004298 <memmove+0x10>
 8004292:	4284      	cmp	r4, r0
 8004294:	4623      	mov	r3, r4
 8004296:	d807      	bhi.n	80042a8 <memmove+0x20>
 8004298:	1e43      	subs	r3, r0, #1
 800429a:	42a1      	cmp	r1, r4
 800429c:	d008      	beq.n	80042b0 <memmove+0x28>
 800429e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042a6:	e7f8      	b.n	800429a <memmove+0x12>
 80042a8:	4402      	add	r2, r0
 80042aa:	4601      	mov	r1, r0
 80042ac:	428a      	cmp	r2, r1
 80042ae:	d100      	bne.n	80042b2 <memmove+0x2a>
 80042b0:	bd10      	pop	{r4, pc}
 80042b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042ba:	e7f7      	b.n	80042ac <memmove+0x24>

080042bc <_free_r>:
 80042bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042be:	2900      	cmp	r1, #0
 80042c0:	d048      	beq.n	8004354 <_free_r+0x98>
 80042c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042c6:	9001      	str	r0, [sp, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f1a1 0404 	sub.w	r4, r1, #4
 80042ce:	bfb8      	it	lt
 80042d0:	18e4      	addlt	r4, r4, r3
 80042d2:	f000 f8d3 	bl	800447c <__malloc_lock>
 80042d6:	4a20      	ldr	r2, [pc, #128]	; (8004358 <_free_r+0x9c>)
 80042d8:	9801      	ldr	r0, [sp, #4]
 80042da:	6813      	ldr	r3, [r2, #0]
 80042dc:	4615      	mov	r5, r2
 80042de:	b933      	cbnz	r3, 80042ee <_free_r+0x32>
 80042e0:	6063      	str	r3, [r4, #4]
 80042e2:	6014      	str	r4, [r2, #0]
 80042e4:	b003      	add	sp, #12
 80042e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042ea:	f000 b8cd 	b.w	8004488 <__malloc_unlock>
 80042ee:	42a3      	cmp	r3, r4
 80042f0:	d90b      	bls.n	800430a <_free_r+0x4e>
 80042f2:	6821      	ldr	r1, [r4, #0]
 80042f4:	1862      	adds	r2, r4, r1
 80042f6:	4293      	cmp	r3, r2
 80042f8:	bf04      	itt	eq
 80042fa:	681a      	ldreq	r2, [r3, #0]
 80042fc:	685b      	ldreq	r3, [r3, #4]
 80042fe:	6063      	str	r3, [r4, #4]
 8004300:	bf04      	itt	eq
 8004302:	1852      	addeq	r2, r2, r1
 8004304:	6022      	streq	r2, [r4, #0]
 8004306:	602c      	str	r4, [r5, #0]
 8004308:	e7ec      	b.n	80042e4 <_free_r+0x28>
 800430a:	461a      	mov	r2, r3
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	b10b      	cbz	r3, 8004314 <_free_r+0x58>
 8004310:	42a3      	cmp	r3, r4
 8004312:	d9fa      	bls.n	800430a <_free_r+0x4e>
 8004314:	6811      	ldr	r1, [r2, #0]
 8004316:	1855      	adds	r5, r2, r1
 8004318:	42a5      	cmp	r5, r4
 800431a:	d10b      	bne.n	8004334 <_free_r+0x78>
 800431c:	6824      	ldr	r4, [r4, #0]
 800431e:	4421      	add	r1, r4
 8004320:	1854      	adds	r4, r2, r1
 8004322:	42a3      	cmp	r3, r4
 8004324:	6011      	str	r1, [r2, #0]
 8004326:	d1dd      	bne.n	80042e4 <_free_r+0x28>
 8004328:	681c      	ldr	r4, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	6053      	str	r3, [r2, #4]
 800432e:	4421      	add	r1, r4
 8004330:	6011      	str	r1, [r2, #0]
 8004332:	e7d7      	b.n	80042e4 <_free_r+0x28>
 8004334:	d902      	bls.n	800433c <_free_r+0x80>
 8004336:	230c      	movs	r3, #12
 8004338:	6003      	str	r3, [r0, #0]
 800433a:	e7d3      	b.n	80042e4 <_free_r+0x28>
 800433c:	6825      	ldr	r5, [r4, #0]
 800433e:	1961      	adds	r1, r4, r5
 8004340:	428b      	cmp	r3, r1
 8004342:	bf04      	itt	eq
 8004344:	6819      	ldreq	r1, [r3, #0]
 8004346:	685b      	ldreq	r3, [r3, #4]
 8004348:	6063      	str	r3, [r4, #4]
 800434a:	bf04      	itt	eq
 800434c:	1949      	addeq	r1, r1, r5
 800434e:	6021      	streq	r1, [r4, #0]
 8004350:	6054      	str	r4, [r2, #4]
 8004352:	e7c7      	b.n	80042e4 <_free_r+0x28>
 8004354:	b003      	add	sp, #12
 8004356:	bd30      	pop	{r4, r5, pc}
 8004358:	20000090 	.word	0x20000090

0800435c <_malloc_r>:
 800435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435e:	1ccd      	adds	r5, r1, #3
 8004360:	f025 0503 	bic.w	r5, r5, #3
 8004364:	3508      	adds	r5, #8
 8004366:	2d0c      	cmp	r5, #12
 8004368:	bf38      	it	cc
 800436a:	250c      	movcc	r5, #12
 800436c:	2d00      	cmp	r5, #0
 800436e:	4606      	mov	r6, r0
 8004370:	db01      	blt.n	8004376 <_malloc_r+0x1a>
 8004372:	42a9      	cmp	r1, r5
 8004374:	d903      	bls.n	800437e <_malloc_r+0x22>
 8004376:	230c      	movs	r3, #12
 8004378:	6033      	str	r3, [r6, #0]
 800437a:	2000      	movs	r0, #0
 800437c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800437e:	f000 f87d 	bl	800447c <__malloc_lock>
 8004382:	4921      	ldr	r1, [pc, #132]	; (8004408 <_malloc_r+0xac>)
 8004384:	680a      	ldr	r2, [r1, #0]
 8004386:	4614      	mov	r4, r2
 8004388:	b99c      	cbnz	r4, 80043b2 <_malloc_r+0x56>
 800438a:	4f20      	ldr	r7, [pc, #128]	; (800440c <_malloc_r+0xb0>)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	b923      	cbnz	r3, 800439a <_malloc_r+0x3e>
 8004390:	4621      	mov	r1, r4
 8004392:	4630      	mov	r0, r6
 8004394:	f000 f862 	bl	800445c <_sbrk_r>
 8004398:	6038      	str	r0, [r7, #0]
 800439a:	4629      	mov	r1, r5
 800439c:	4630      	mov	r0, r6
 800439e:	f000 f85d 	bl	800445c <_sbrk_r>
 80043a2:	1c43      	adds	r3, r0, #1
 80043a4:	d123      	bne.n	80043ee <_malloc_r+0x92>
 80043a6:	230c      	movs	r3, #12
 80043a8:	6033      	str	r3, [r6, #0]
 80043aa:	4630      	mov	r0, r6
 80043ac:	f000 f86c 	bl	8004488 <__malloc_unlock>
 80043b0:	e7e3      	b.n	800437a <_malloc_r+0x1e>
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	1b5b      	subs	r3, r3, r5
 80043b6:	d417      	bmi.n	80043e8 <_malloc_r+0x8c>
 80043b8:	2b0b      	cmp	r3, #11
 80043ba:	d903      	bls.n	80043c4 <_malloc_r+0x68>
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	441c      	add	r4, r3
 80043c0:	6025      	str	r5, [r4, #0]
 80043c2:	e004      	b.n	80043ce <_malloc_r+0x72>
 80043c4:	6863      	ldr	r3, [r4, #4]
 80043c6:	42a2      	cmp	r2, r4
 80043c8:	bf0c      	ite	eq
 80043ca:	600b      	streq	r3, [r1, #0]
 80043cc:	6053      	strne	r3, [r2, #4]
 80043ce:	4630      	mov	r0, r6
 80043d0:	f000 f85a 	bl	8004488 <__malloc_unlock>
 80043d4:	f104 000b 	add.w	r0, r4, #11
 80043d8:	1d23      	adds	r3, r4, #4
 80043da:	f020 0007 	bic.w	r0, r0, #7
 80043de:	1ac2      	subs	r2, r0, r3
 80043e0:	d0cc      	beq.n	800437c <_malloc_r+0x20>
 80043e2:	1a1b      	subs	r3, r3, r0
 80043e4:	50a3      	str	r3, [r4, r2]
 80043e6:	e7c9      	b.n	800437c <_malloc_r+0x20>
 80043e8:	4622      	mov	r2, r4
 80043ea:	6864      	ldr	r4, [r4, #4]
 80043ec:	e7cc      	b.n	8004388 <_malloc_r+0x2c>
 80043ee:	1cc4      	adds	r4, r0, #3
 80043f0:	f024 0403 	bic.w	r4, r4, #3
 80043f4:	42a0      	cmp	r0, r4
 80043f6:	d0e3      	beq.n	80043c0 <_malloc_r+0x64>
 80043f8:	1a21      	subs	r1, r4, r0
 80043fa:	4630      	mov	r0, r6
 80043fc:	f000 f82e 	bl	800445c <_sbrk_r>
 8004400:	3001      	adds	r0, #1
 8004402:	d1dd      	bne.n	80043c0 <_malloc_r+0x64>
 8004404:	e7cf      	b.n	80043a6 <_malloc_r+0x4a>
 8004406:	bf00      	nop
 8004408:	20000090 	.word	0x20000090
 800440c:	20000094 	.word	0x20000094

08004410 <_realloc_r>:
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004412:	4607      	mov	r7, r0
 8004414:	4614      	mov	r4, r2
 8004416:	460e      	mov	r6, r1
 8004418:	b921      	cbnz	r1, 8004424 <_realloc_r+0x14>
 800441a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800441e:	4611      	mov	r1, r2
 8004420:	f7ff bf9c 	b.w	800435c <_malloc_r>
 8004424:	b922      	cbnz	r2, 8004430 <_realloc_r+0x20>
 8004426:	f7ff ff49 	bl	80042bc <_free_r>
 800442a:	4625      	mov	r5, r4
 800442c:	4628      	mov	r0, r5
 800442e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004430:	f000 f830 	bl	8004494 <_malloc_usable_size_r>
 8004434:	42a0      	cmp	r0, r4
 8004436:	d20f      	bcs.n	8004458 <_realloc_r+0x48>
 8004438:	4621      	mov	r1, r4
 800443a:	4638      	mov	r0, r7
 800443c:	f7ff ff8e 	bl	800435c <_malloc_r>
 8004440:	4605      	mov	r5, r0
 8004442:	2800      	cmp	r0, #0
 8004444:	d0f2      	beq.n	800442c <_realloc_r+0x1c>
 8004446:	4631      	mov	r1, r6
 8004448:	4622      	mov	r2, r4
 800444a:	f7ff ff0f 	bl	800426c <memcpy>
 800444e:	4631      	mov	r1, r6
 8004450:	4638      	mov	r0, r7
 8004452:	f7ff ff33 	bl	80042bc <_free_r>
 8004456:	e7e9      	b.n	800442c <_realloc_r+0x1c>
 8004458:	4635      	mov	r5, r6
 800445a:	e7e7      	b.n	800442c <_realloc_r+0x1c>

0800445c <_sbrk_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	4d06      	ldr	r5, [pc, #24]	; (8004478 <_sbrk_r+0x1c>)
 8004460:	2300      	movs	r3, #0
 8004462:	4604      	mov	r4, r0
 8004464:	4608      	mov	r0, r1
 8004466:	602b      	str	r3, [r5, #0]
 8004468:	f7fc fe18 	bl	800109c <_sbrk>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	d102      	bne.n	8004476 <_sbrk_r+0x1a>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	b103      	cbz	r3, 8004476 <_sbrk_r+0x1a>
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	bd38      	pop	{r3, r4, r5, pc}
 8004478:	20000128 	.word	0x20000128

0800447c <__malloc_lock>:
 800447c:	4801      	ldr	r0, [pc, #4]	; (8004484 <__malloc_lock+0x8>)
 800447e:	f000 b811 	b.w	80044a4 <__retarget_lock_acquire_recursive>
 8004482:	bf00      	nop
 8004484:	20000130 	.word	0x20000130

08004488 <__malloc_unlock>:
 8004488:	4801      	ldr	r0, [pc, #4]	; (8004490 <__malloc_unlock+0x8>)
 800448a:	f000 b80c 	b.w	80044a6 <__retarget_lock_release_recursive>
 800448e:	bf00      	nop
 8004490:	20000130 	.word	0x20000130

08004494 <_malloc_usable_size_r>:
 8004494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004498:	1f18      	subs	r0, r3, #4
 800449a:	2b00      	cmp	r3, #0
 800449c:	bfbc      	itt	lt
 800449e:	580b      	ldrlt	r3, [r1, r0]
 80044a0:	18c0      	addlt	r0, r0, r3
 80044a2:	4770      	bx	lr

080044a4 <__retarget_lock_acquire_recursive>:
 80044a4:	4770      	bx	lr

080044a6 <__retarget_lock_release_recursive>:
 80044a6:	4770      	bx	lr

080044a8 <_init>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	bf00      	nop
 80044ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ae:	bc08      	pop	{r3}
 80044b0:	469e      	mov	lr, r3
 80044b2:	4770      	bx	lr

080044b4 <_fini>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	bf00      	nop
 80044b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ba:	bc08      	pop	{r3}
 80044bc:	469e      	mov	lr, r3
 80044be:	4770      	bx	lr
