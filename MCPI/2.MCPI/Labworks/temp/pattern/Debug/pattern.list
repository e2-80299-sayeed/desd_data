
pattern.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003924  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08003ab4  08003ab4  00013ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ca8  08003ca8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ca8  08003ca8  00013ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cb0  08003cb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb0  08003cb0  00013cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cb4  08003cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000070  08003d28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08003d28  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089c6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001671  00000000  00000000  00028a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0002a0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  0002a7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020311  00000000  00000000  0002ae20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b93  00000000  00000000  0004b131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c29fe  00000000  00000000  00053cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001166c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021ec  00000000  00000000  00116714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003a9c 	.word	0x08003a9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003a9c 	.word	0x08003a9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <UartReceive>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UartReceive(char str[])
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	char ch;
	int i =0;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]

	do{
		HAL_UART_Receive(&huart2,(uint8_t*)	&ch, 1, HAL_MAX_DELAY);
 8000590:	f107 010b 	add.w	r1, r7, #11
 8000594:	f04f 33ff 	mov.w	r3, #4294967295
 8000598:	2201      	movs	r2, #1
 800059a:	480f      	ldr	r0, [pc, #60]	; (80005d8 <UartReceive+0x54>)
 800059c:	f001 fc75 	bl	8001e8a <HAL_UART_Receive>

		str[i]= ch;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	7afa      	ldrb	r2, [r7, #11]
 80005a8:	701a      	strb	r2, [r3, #0]
		i++;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	3301      	adds	r3, #1
 80005ae:	60fb      	str	r3, [r7, #12]
	}while(ch != '\r');
 80005b0:	7afb      	ldrb	r3, [r7, #11]
 80005b2:	2b0d      	cmp	r3, #13
 80005b4:	d1ec      	bne.n	8000590 <UartReceive+0xc>
	str[i]= '\n';
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	4413      	add	r3, r2
 80005bc:	220a      	movs	r2, #10
 80005be:	701a      	strb	r2, [r3, #0]
	i++;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	3301      	adds	r3, #1
 80005c4:	60fb      	str	r3, [r7, #12]
	str[i]= '\0';
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000008c 	.word	0x2000008c

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b09a      	sub	sp, #104	; 0x68
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char str[100],choice;


	if(switch_flag == 1)
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <main+0x9c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d113      	bne.n	8000612 <main+0x36>
	{
		strcpy(str,"Choose One Option....\r\na.LED Pattern 1\r\nb.LED Pattern 2\r\nc.LED Pattern 3\r\n");
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	4a23      	ldr	r2, [pc, #140]	; (800067c <main+0xa0>)
 80005ee:	4618      	mov	r0, r3
 80005f0:	4611      	mov	r1, r2
 80005f2:	234b      	movs	r3, #75	; 0x4b
 80005f4:	461a      	mov	r2, r3
 80005f6:	f002 fc49 	bl	8002e8c <memcpy>
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fde7 	bl	80001d0 <strlen>
 8000602:	4603      	mov	r3, r0
 8000604:	b29a      	uxth	r2, r3
 8000606:	1d39      	adds	r1, r7, #4
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	481c      	ldr	r0, [pc, #112]	; (8000680 <main+0xa4>)
 800060e:	f001 fbaa 	bl	8001d66 <HAL_UART_Transmit>
	}

	UartReceive(str);
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ffb5 	bl	8000584 <UartReceive>

	sscanf(str,"%c",&choice);
 800061a:	1cfa      	adds	r2, r7, #3
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4919      	ldr	r1, [pc, #100]	; (8000684 <main+0xa8>)
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fc49 	bl	8002eb8 <siscanf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fdd1 	bl	80001d0 <strlen>
 800062e:	4603      	mov	r3, r0
 8000630:	b29a      	uxth	r2, r3
 8000632:	1d39      	adds	r1, r7, #4
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	4811      	ldr	r0, [pc, #68]	; (8000680 <main+0xa4>)
 800063a:	f001 fb94 	bl	8001d66 <HAL_UART_Transmit>

	switch(choice)
 800063e:	78fb      	ldrb	r3, [r7, #3]
 8000640:	2b63      	cmp	r3, #99	; 0x63
 8000642:	d00c      	beq.n	800065e <main+0x82>
 8000644:	2b63      	cmp	r3, #99	; 0x63
 8000646:	dc0d      	bgt.n	8000664 <main+0x88>
 8000648:	2b61      	cmp	r3, #97	; 0x61
 800064a:	d002      	beq.n	8000652 <main+0x76>
 800064c:	2b62      	cmp	r3, #98	; 0x62
 800064e:	d003      	beq.n	8000658 <main+0x7c>
 8000650:	e008      	b.n	8000664 <main+0x88>
	{
	case 'a':
		pattern1();
 8000652:	f000 f901 	bl	8000858 <pattern1>
		break;
 8000656:	e005      	b.n	8000664 <main+0x88>
	case 'b':
		pattern2();
 8000658:	f000 f938 	bl	80008cc <pattern2>
		break;
 800065c:	e002      	b.n	8000664 <main+0x88>
	case 'c':
		pattern3();
 800065e:	f000 f963 	bl	8000928 <pattern3>
		break;
 8000662:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000664:	f000 faaa 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000668:	f000 f80e 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066c:	f000 f8a0 	bl	80007b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000670:	f000 f874 	bl	800075c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000674:	e7fe      	b.n	8000674 <main+0x98>
 8000676:	bf00      	nop
 8000678:	200000d0 	.word	0x200000d0
 800067c:	08003ab4 	.word	0x08003ab4
 8000680:	2000008c 	.word	0x2000008c
 8000684:	08003b00 	.word	0x08003b00

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f002 fc06 	bl	8002ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b28      	ldr	r3, [pc, #160]	; (8000754 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a27      	ldr	r2, [pc, #156]	; (8000754 <SystemClock_Config+0xcc>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b25      	ldr	r3, [pc, #148]	; (8000754 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <SystemClock_Config+0xd0>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f8:	2308      	movs	r3, #8
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006fc:	2332      	movs	r3, #50	; 0x32
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000704:	2307      	movs	r3, #7
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fe45 	bl	800139c <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000718:	f000 f92c 	bl	8000974 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2101      	movs	r1, #1
 800073a:	4618      	mov	r0, r3
 800073c:	f001 f8a6 	bl	800188c <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000746:	f000 f915 	bl	8000974 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3750      	adds	r7, #80	; 0x50
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <MX_USART2_UART_Init+0x50>)
 8000764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000768:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800076c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000794:	f001 fa9a 	bl	8001ccc <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800079e:	f000 f8e9 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000008c 	.word	0x2000008c
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b20      	ldr	r3, [pc, #128]	; (800084c <MX_GPIO_Init+0x9c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a1f      	ldr	r2, [pc, #124]	; (800084c <MX_GPIO_Init+0x9c>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b1d      	ldr	r3, [pc, #116]	; (800084c <MX_GPIO_Init+0x9c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_GPIO_Init+0x9c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a18      	ldr	r2, [pc, #96]	; (800084c <MX_GPIO_Init+0x9c>)
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_GPIO_Init+0x9c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000804:	4812      	ldr	r0, [pc, #72]	; (8000850 <MX_GPIO_Init+0xa0>)
 8000806:	f000 fdaf 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800080a:	2301      	movs	r3, #1
 800080c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	4619      	mov	r1, r3
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_GPIO_Init+0xa4>)
 8000820:	f000 fc06 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000824:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000828:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4619      	mov	r1, r3
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_GPIO_Init+0xa0>)
 800083e:	f000 fbf7 	bl	8001030 <HAL_GPIO_Init>

}
 8000842:	bf00      	nop
 8000844:	3720      	adds	r7, #32
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40020c00 	.word	0x40020c00
 8000854:	40020000 	.word	0x40020000

08000858 <pattern1>:

/* USER CODE BEGIN 4 */
void pattern1()
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000862:	4819      	ldr	r0, [pc, #100]	; (80008c8 <pattern1+0x70>)
 8000864:	f000 fd80 	bl	8001368 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086e:	4816      	ldr	r0, [pc, #88]	; (80008c8 <pattern1+0x70>)
 8000870:	f000 fd7a 	bl	8001368 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800087a:	4813      	ldr	r0, [pc, #76]	; (80008c8 <pattern1+0x70>)
 800087c:	f000 fd74 	bl	8001368 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000886:	4810      	ldr	r0, [pc, #64]	; (80008c8 <pattern1+0x70>)
 8000888:	f000 fd6e 	bl	8001368 <HAL_GPIO_WritePin>

		HAL_Delay(1000);
 800088c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000890:	f000 fa06 	bl	8000ca0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089a:	480b      	ldr	r0, [pc, #44]	; (80008c8 <pattern1+0x70>)
 800089c:	f000 fd64 	bl	8001368 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a6:	4808      	ldr	r0, [pc, #32]	; (80008c8 <pattern1+0x70>)
 80008a8:	f000 fd5e 	bl	8001368 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <pattern1+0x70>)
 80008b4:	f000 fd58 	bl	8001368 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008be:	4802      	ldr	r0, [pc, #8]	; (80008c8 <pattern1+0x70>)
 80008c0:	f000 fd52 	bl	8001368 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80008c4:	e7ca      	b.n	800085c <pattern1+0x4>
 80008c6:	bf00      	nop
 80008c8:	40020c00 	.word	0x40020c00

080008cc <pattern2>:
	}
}
void pattern2()
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d6:	4813      	ldr	r0, [pc, #76]	; (8000924 <pattern2+0x58>)
 80008d8:	f000 fd46 	bl	8001368 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80008dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e0:	f000 f9de 	bl	8000ca0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ea:	480e      	ldr	r0, [pc, #56]	; (8000924 <pattern2+0x58>)
 80008ec:	f000 fd3c 	bl	8001368 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80008f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f4:	f000 f9d4 	bl	8000ca0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fe:	4809      	ldr	r0, [pc, #36]	; (8000924 <pattern2+0x58>)
 8000900:	f000 fd32 	bl	8001368 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000904:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000908:	f000 f9ca 	bl	8000ca0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <pattern2+0x58>)
 8000914:	f000 fd28 	bl	8001368 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000918:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091c:	f000 f9c0 	bl	8000ca0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000920:	e7d6      	b.n	80008d0 <pattern2+0x4>
 8000922:	bf00      	nop
 8000924:	40020c00 	.word	0x40020c00

08000928 <pattern3>:
	}
}
void pattern3()
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000932:	480f      	ldr	r0, [pc, #60]	; (8000970 <pattern3+0x48>)
 8000934:	f000 fd18 	bl	8001368 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800093e:	480c      	ldr	r0, [pc, #48]	; (8000970 <pattern3+0x48>)
 8000940:	f000 fd12 	bl	8001368 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000944:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000948:	f000 f9aa 	bl	8000ca0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000952:	4807      	ldr	r0, [pc, #28]	; (8000970 <pattern3+0x48>)
 8000954:	f000 fd08 	bl	8001368 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800095e:	4804      	ldr	r0, [pc, #16]	; (8000970 <pattern3+0x48>)
 8000960:	f000 fd02 	bl	8001368 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000968:	f000 f99a 	bl	8000ca0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800096c:	e7de      	b.n	800092c <pattern3+0x4>
 800096e:	bf00      	nop
 8000970:	40020c00 	.word	0x40020c00

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>
	...

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <HAL_MspInit+0x4c>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6453      	str	r3, [r2, #68]	; 0x44
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_MspInit+0x4c>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009be:	2007      	movs	r0, #7
 80009c0:	f000 fa62 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800

080009d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <HAL_UART_MspInit+0x94>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d133      	bne.n	8000a5a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <HAL_UART_MspInit+0x98>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a1b      	ldr	r2, [pc, #108]	; (8000a68 <HAL_UART_MspInit+0x98>)
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a2a:	230c      	movs	r3, #12
 8000a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	4809      	ldr	r0, [pc, #36]	; (8000a6c <HAL_UART_MspInit+0x9c>)
 8000a46:	f000 faf3 	bl	8001030 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2026      	movs	r0, #38	; 0x26
 8000a50:	f000 fa25 	bl	8000e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a54:	2026      	movs	r0, #38	; 0x26
 8000a56:	f000 fa3e 	bl	8000ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40004400 	.word	0x40004400
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f8d0 	bl	8000c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <USART2_IRQHandler+0x10>)
 8000aca:	f001 fa81 	bl	8001fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000008c 	.word	0x2000008c

08000ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae0:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <_sbrk+0x5c>)
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <_sbrk+0x60>)
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d102      	bne.n	8000afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <_sbrk+0x64>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <_sbrk+0x68>)
 8000af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d207      	bcs.n	8000b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b08:	f002 f996 	bl	8002e38 <__errno>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	220c      	movs	r2, #12
 8000b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295
 8000b16:	e009      	b.n	8000b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <_sbrk+0x64>)
 8000b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20020000 	.word	0x20020000
 8000b38:	00000400 	.word	0x00000400
 8000b3c:	200000d4 	.word	0x200000d4
 8000b40:	200000f0 	.word	0x200000f0

08000b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <SystemInit+0x20>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4e:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <SystemInit+0x20>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b6e:	490e      	ldr	r1, [pc, #56]	; (8000ba8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b70:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b84:	4c0b      	ldr	r4, [pc, #44]	; (8000bb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b92:	f7ff ffd7 	bl	8000b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b96:	f002 f955 	bl	8002e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9a:	f7ff fd1f 	bl	80005dc <main>
  bx  lr    
 8000b9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bac:	08003cb8 	.word	0x08003cb8
  ldr r2, =_sbss
 8000bb0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bb4:	200000ec 	.word	0x200000ec

08000bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC_IRQHandler>
	...

08000bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <HAL_Init+0x40>)
 8000bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_Init+0x40>)
 8000bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_Init+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_Init+0x40>)
 8000bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f94f 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 f808 	bl	8000c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf0:	f7ff fec6 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023c00 	.word	0x40023c00

08000c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_InitTick+0x54>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_InitTick+0x58>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f967 	bl	8000ef2 <HAL_SYSTICK_Config>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e00e      	b.n	8000c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d80a      	bhi.n	8000c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c34:	2200      	movs	r2, #0
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	f000 f92f 	bl	8000e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c40:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <HAL_InitTick+0x5c>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e000      	b.n	8000c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20000004 	.word	0x20000004

08000c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x20>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_IncTick+0x24>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <HAL_IncTick+0x24>)
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000008 	.word	0x20000008
 8000c84:	200000d8 	.word	0x200000d8

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <HAL_GetTick+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	200000d8 	.word	0x200000d8

08000ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca8:	f7ff ffee 	bl	8000c88 <HAL_GetTick>
 8000cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb8:	d005      	beq.n	8000cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_Delay+0x44>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cc6:	bf00      	nop
 8000cc8:	f7ff ffde 	bl	8000c88 <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d8f7      	bhi.n	8000cc8 <HAL_Delay+0x28>
  {
  }
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4907      	ldr	r1, [pc, #28]	; (8000d84 <__NVIC_EnableIRQ+0x38>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	; (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	; (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	; 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f7ff ff8e 	bl	8000d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff29 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb0:	f7ff ff3e 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	6978      	ldr	r0, [r7, #20]
 8000ebc:	f7ff ff8e 	bl	8000ddc <NVIC_EncodePriority>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff5d 	bl	8000d88 <__NVIC_SetPriority>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff31 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ffa2 	bl	8000e44 <SysTick_Config>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f16:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff feb6 	bl	8000c88 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d008      	beq.n	8000f3c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e052      	b.n	8000fe2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0216 	bic.w	r2, r2, #22
 8000f4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	695a      	ldr	r2, [r3, #20]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f5a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d103      	bne.n	8000f6c <HAL_DMA_Abort+0x62>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d007      	beq.n	8000f7c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0208 	bic.w	r2, r2, #8
 8000f7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0201 	bic.w	r2, r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f8c:	e013      	b.n	8000fb6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f8e:	f7ff fe7b 	bl	8000c88 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b05      	cmp	r3, #5
 8000f9a:	d90c      	bls.n	8000fb6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e015      	b.n	8000fe2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1e4      	bne.n	8000f8e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fc8:	223f      	movs	r2, #63	; 0x3f
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d004      	beq.n	8001008 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2280      	movs	r2, #128	; 0x80
 8001002:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e00c      	b.n	8001022 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2205      	movs	r2, #5
 800100c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0201 	bic.w	r2, r2, #1
 800101e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e16b      	b.n	8001324 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	429a      	cmp	r2, r3
 8001066:	f040 815a 	bne.w	800131e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d005      	beq.n	8001082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	2b02      	cmp	r3, #2
 8001080:	d130      	bne.n	80010e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f003 0201 	and.w	r2, r3, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d017      	beq.n	8001120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d123      	bne.n	8001174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	69b9      	ldr	r1, [r7, #24]
 8001170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0203 	and.w	r2, r3, #3
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80b4 	beq.w	800131e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b60      	ldr	r3, [pc, #384]	; (800133c <HAL_GPIO_Init+0x30c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a5f      	ldr	r2, [pc, #380]	; (800133c <HAL_GPIO_Init+0x30c>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b5d      	ldr	r3, [pc, #372]	; (800133c <HAL_GPIO_Init+0x30c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d2:	4a5b      	ldr	r2, [pc, #364]	; (8001340 <HAL_GPIO_Init+0x310>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a52      	ldr	r2, [pc, #328]	; (8001344 <HAL_GPIO_Init+0x314>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d02b      	beq.n	8001256 <HAL_GPIO_Init+0x226>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a51      	ldr	r2, [pc, #324]	; (8001348 <HAL_GPIO_Init+0x318>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d025      	beq.n	8001252 <HAL_GPIO_Init+0x222>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a50      	ldr	r2, [pc, #320]	; (800134c <HAL_GPIO_Init+0x31c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d01f      	beq.n	800124e <HAL_GPIO_Init+0x21e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4f      	ldr	r2, [pc, #316]	; (8001350 <HAL_GPIO_Init+0x320>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d019      	beq.n	800124a <HAL_GPIO_Init+0x21a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4e      	ldr	r2, [pc, #312]	; (8001354 <HAL_GPIO_Init+0x324>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0x216>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4d      	ldr	r2, [pc, #308]	; (8001358 <HAL_GPIO_Init+0x328>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d00d      	beq.n	8001242 <HAL_GPIO_Init+0x212>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4c      	ldr	r2, [pc, #304]	; (800135c <HAL_GPIO_Init+0x32c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0x20e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4b      	ldr	r2, [pc, #300]	; (8001360 <HAL_GPIO_Init+0x330>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <HAL_GPIO_Init+0x20a>
 8001236:	2307      	movs	r3, #7
 8001238:	e00e      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800123a:	2308      	movs	r3, #8
 800123c:	e00c      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800123e:	2306      	movs	r3, #6
 8001240:	e00a      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001242:	2305      	movs	r3, #5
 8001244:	e008      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001246:	2304      	movs	r3, #4
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800124a:	2303      	movs	r3, #3
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001256:	2300      	movs	r3, #0
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	f002 0203 	and.w	r2, r2, #3
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001268:	4935      	ldr	r1, [pc, #212]	; (8001340 <HAL_GPIO_Init+0x310>)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001276:	4b3b      	ldr	r3, [pc, #236]	; (8001364 <HAL_GPIO_Init+0x334>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800129a:	4a32      	ldr	r2, [pc, #200]	; (8001364 <HAL_GPIO_Init+0x334>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012a0:	4b30      	ldr	r3, [pc, #192]	; (8001364 <HAL_GPIO_Init+0x334>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c4:	4a27      	ldr	r2, [pc, #156]	; (8001364 <HAL_GPIO_Init+0x334>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ca:	4b26      	ldr	r3, [pc, #152]	; (8001364 <HAL_GPIO_Init+0x334>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ee:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <HAL_GPIO_Init+0x334>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <HAL_GPIO_Init+0x334>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <HAL_GPIO_Init+0x334>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3301      	adds	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	2b0f      	cmp	r3, #15
 8001328:	f67f ae90 	bls.w	800104c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40013800 	.word	0x40013800
 8001344:	40020000 	.word	0x40020000
 8001348:	40020400 	.word	0x40020400
 800134c:	40020800 	.word	0x40020800
 8001350:	40020c00 	.word	0x40020c00
 8001354:	40021000 	.word	0x40021000
 8001358:	40021400 	.word	0x40021400
 800135c:	40021800 	.word	0x40021800
 8001360:	40021c00 	.word	0x40021c00
 8001364:	40013c00 	.word	0x40013c00

08001368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001384:	e003      	b.n	800138e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	041a      	lsls	r2, r3, #16
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	619a      	str	r2, [r3, #24]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e267      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d075      	beq.n	80014a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ba:	4b88      	ldr	r3, [pc, #544]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d00c      	beq.n	80013e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c6:	4b85      	ldr	r3, [pc, #532]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d112      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d2:	4b82      	ldr	r3, [pc, #520]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013de:	d10b      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	4b7e      	ldr	r3, [pc, #504]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d05b      	beq.n	80014a4 <HAL_RCC_OscConfig+0x108>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d157      	bne.n	80014a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e242      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001400:	d106      	bne.n	8001410 <HAL_RCC_OscConfig+0x74>
 8001402:	4b76      	ldr	r3, [pc, #472]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a75      	ldr	r2, [pc, #468]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e01d      	b.n	800144c <HAL_RCC_OscConfig+0xb0>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0x98>
 800141a:	4b70      	ldr	r3, [pc, #448]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a6f      	ldr	r2, [pc, #444]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b6d      	ldr	r3, [pc, #436]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a6c      	ldr	r2, [pc, #432]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800142c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e00b      	b.n	800144c <HAL_RCC_OscConfig+0xb0>
 8001434:	4b69      	ldr	r3, [pc, #420]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a68      	ldr	r2, [pc, #416]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800143a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b66      	ldr	r3, [pc, #408]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a65      	ldr	r2, [pc, #404]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d013      	beq.n	800147c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fc18 	bl	8000c88 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fc14 	bl	8000c88 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e207      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b5b      	ldr	r3, [pc, #364]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0xc0>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fc04 	bl	8000c88 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fc00 	bl	8000c88 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	; 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e1f3      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	4b51      	ldr	r3, [pc, #324]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0xe8>
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d063      	beq.n	800157a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014b2:	4b4a      	ldr	r3, [pc, #296]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014be:	4b47      	ldr	r3, [pc, #284]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d11c      	bne.n	8001504 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ca:	4b44      	ldr	r3, [pc, #272]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d116      	bne.n	8001504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d6:	4b41      	ldr	r3, [pc, #260]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <HAL_RCC_OscConfig+0x152>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e1c7      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ee:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4937      	ldr	r1, [pc, #220]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001502:	e03a      	b.n	800157a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d020      	beq.n	800154e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800150c:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <HAL_RCC_OscConfig+0x244>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff fbb9 	bl	8000c88 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff fbb5 	bl	8000c88 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e1a8      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4925      	ldr	r1, [pc, #148]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001548:	4313      	orrs	r3, r2
 800154a:	600b      	str	r3, [r1, #0]
 800154c:	e015      	b.n	800157a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <HAL_RCC_OscConfig+0x244>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fb98 	bl	8000c88 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155c:	f7ff fb94 	bl	8000c88 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e187      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d036      	beq.n	80015f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d016      	beq.n	80015bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_RCC_OscConfig+0x248>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001594:	f7ff fb78 	bl	8000c88 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff fb74 	bl	8000c88 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e167      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_RCC_OscConfig+0x240>)
 80015b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x200>
 80015ba:	e01b      	b.n	80015f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_RCC_OscConfig+0x248>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c2:	f7ff fb61 	bl	8000c88 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	e00e      	b.n	80015e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ca:	f7ff fb5d 	bl	8000c88 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d907      	bls.n	80015e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e150      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
 80015dc:	40023800 	.word	0x40023800
 80015e0:	42470000 	.word	0x42470000
 80015e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	4b88      	ldr	r3, [pc, #544]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80015ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ea      	bne.n	80015ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8097 	beq.w	8001730 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001606:	4b81      	ldr	r3, [pc, #516]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10f      	bne.n	8001632 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b7d      	ldr	r3, [pc, #500]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a7c      	ldr	r2, [pc, #496]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b7a      	ldr	r3, [pc, #488]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162e:	2301      	movs	r3, #1
 8001630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	4b77      	ldr	r3, [pc, #476]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d118      	bne.n	8001670 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163e:	4b74      	ldr	r3, [pc, #464]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a73      	ldr	r2, [pc, #460]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164a:	f7ff fb1d 	bl	8000c88 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001652:	f7ff fb19 	bl	8000c88 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e10c      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	4b6a      	ldr	r3, [pc, #424]	; (8001810 <HAL_RCC_OscConfig+0x474>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x2ea>
 8001678:	4b64      	ldr	r3, [pc, #400]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	4a63      	ldr	r2, [pc, #396]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6713      	str	r3, [r2, #112]	; 0x70
 8001684:	e01c      	b.n	80016c0 <HAL_RCC_OscConfig+0x324>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b05      	cmp	r3, #5
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x30c>
 800168e:	4b5f      	ldr	r3, [pc, #380]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	4a5e      	ldr	r2, [pc, #376]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6713      	str	r3, [r2, #112]	; 0x70
 800169a:	4b5c      	ldr	r3, [pc, #368]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a5b      	ldr	r2, [pc, #364]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_OscConfig+0x324>
 80016a8:	4b58      	ldr	r3, [pc, #352]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ac:	4a57      	ldr	r2, [pc, #348]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016ae:	f023 0301 	bic.w	r3, r3, #1
 80016b2:	6713      	str	r3, [r2, #112]	; 0x70
 80016b4:	4b55      	ldr	r3, [pc, #340]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b8:	4a54      	ldr	r2, [pc, #336]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016ba:	f023 0304 	bic.w	r3, r3, #4
 80016be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d015      	beq.n	80016f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff fade 	bl	8000c88 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff fada 	bl	8000c88 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e0cb      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e6:	4b49      	ldr	r3, [pc, #292]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0ee      	beq.n	80016d0 <HAL_RCC_OscConfig+0x334>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f4:	f7ff fac8 	bl	8000c88 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fc:	f7ff fac4 	bl	8000c88 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e0b5      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001712:	4b3e      	ldr	r3, [pc, #248]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1ee      	bne.n	80016fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800171e:	7dfb      	ldrb	r3, [r7, #23]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001724:	4b39      	ldr	r3, [pc, #228]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	4a38      	ldr	r2, [pc, #224]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800172a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80a1 	beq.w	800187c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800173a:	4b34      	ldr	r3, [pc, #208]	; (800180c <HAL_RCC_OscConfig+0x470>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b08      	cmp	r3, #8
 8001744:	d05c      	beq.n	8001800 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d141      	bne.n	80017d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b31      	ldr	r3, [pc, #196]	; (8001814 <HAL_RCC_OscConfig+0x478>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fa98 	bl	8000c88 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff fa94 	bl	8000c88 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e087      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	4b27      	ldr	r3, [pc, #156]	; (800180c <HAL_RCC_OscConfig+0x470>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	019b      	lsls	r3, r3, #6
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	085b      	lsrs	r3, r3, #1
 8001792:	3b01      	subs	r3, #1
 8001794:	041b      	lsls	r3, r3, #16
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	061b      	lsls	r3, r3, #24
 800179e:	491b      	ldr	r1, [pc, #108]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_RCC_OscConfig+0x478>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff fa6d 	bl	8000c88 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b2:	f7ff fa69 	bl	8000c88 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e05c      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x416>
 80017d0:	e054      	b.n	800187c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <HAL_RCC_OscConfig+0x478>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fa56 	bl	8000c88 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff fa52 	bl	8000c88 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e045      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_RCC_OscConfig+0x470>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x444>
 80017fe:	e03d      	b.n	800187c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d107      	bne.n	8001818 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e038      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000
 8001814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_RCC_OscConfig+0x4ec>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d028      	beq.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d121      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d11a      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001848:	4013      	ands	r3, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800184e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001850:	4293      	cmp	r3, r2
 8001852:	d111      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	085b      	lsrs	r3, r3, #1
 8001860:	3b01      	subs	r3, #1
 8001862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d107      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800

0800188c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0cc      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a0:	4b68      	ldr	r3, [pc, #416]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d90c      	bls.n	80018c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b65      	ldr	r3, [pc, #404]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b63      	ldr	r3, [pc, #396]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0b8      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d020      	beq.n	8001916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e0:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f8:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a52      	ldr	r2, [pc, #328]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001904:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	494d      	ldr	r1, [pc, #308]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d044      	beq.n	80019ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d107      	bne.n	800193a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d119      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e07f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d003      	beq.n	800194a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001946:	2b03      	cmp	r3, #3
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194a:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e06f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e067      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f023 0203 	bic.w	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4934      	ldr	r1, [pc, #208]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	4313      	orrs	r3, r2
 800197a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800197c:	f7ff f984 	bl	8000c88 <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	e00a      	b.n	800199a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001984:	f7ff f980 	bl	8000c88 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e04f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 020c 	and.w	r2, r3, #12
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d1eb      	bne.n	8001984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d20c      	bcs.n	80019d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e032      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4916      	ldr	r1, [pc, #88]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d009      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	490e      	ldr	r1, [pc, #56]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a12:	f000 f821 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8001a16:	4602      	mov	r2, r0
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	490a      	ldr	r1, [pc, #40]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	5ccb      	ldrb	r3, [r1, r3]
 8001a26:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_ClockConfig+0x1c8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f8e4 	bl	8000c00 <HAL_InitTick>

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023c00 	.word	0x40023c00
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	08003b10 	.word	0x08003b10
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a5c:	b094      	sub	sp, #80	; 0x50
 8001a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	647b      	str	r3, [r7, #68]	; 0x44
 8001a64:	2300      	movs	r3, #0
 8001a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a68:	2300      	movs	r3, #0
 8001a6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a70:	4b79      	ldr	r3, [pc, #484]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d00d      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x40>
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	f200 80e1 	bhi.w	8001c44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0x34>
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a8a:	e0db      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a8c:	4b73      	ldr	r3, [pc, #460]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a90:	e0db      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a92:	4b73      	ldr	r3, [pc, #460]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a96:	e0d8      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a98:	4b6f      	ldr	r3, [pc, #444]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aa0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aa2:	4b6d      	ldr	r3, [pc, #436]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d063      	beq.n	8001b76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aae:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	099b      	lsrs	r3, r3, #6
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ab8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ac6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001aca:	4622      	mov	r2, r4
 8001acc:	462b      	mov	r3, r5
 8001ace:	f04f 0000 	mov.w	r0, #0
 8001ad2:	f04f 0100 	mov.w	r1, #0
 8001ad6:	0159      	lsls	r1, r3, #5
 8001ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001adc:	0150      	lsls	r0, r2, #5
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	1a51      	subs	r1, r2, r1
 8001ae6:	6139      	str	r1, [r7, #16]
 8001ae8:	4629      	mov	r1, r5
 8001aea:	eb63 0301 	sbc.w	r3, r3, r1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001afc:	4659      	mov	r1, fp
 8001afe:	018b      	lsls	r3, r1, #6
 8001b00:	4651      	mov	r1, sl
 8001b02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b06:	4651      	mov	r1, sl
 8001b08:	018a      	lsls	r2, r1, #6
 8001b0a:	4651      	mov	r1, sl
 8001b0c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b10:	4659      	mov	r1, fp
 8001b12:	eb63 0901 	sbc.w	r9, r3, r1
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b2a:	4690      	mov	r8, r2
 8001b2c:	4699      	mov	r9, r3
 8001b2e:	4623      	mov	r3, r4
 8001b30:	eb18 0303 	adds.w	r3, r8, r3
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	462b      	mov	r3, r5
 8001b38:	eb49 0303 	adc.w	r3, r9, r3
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	024b      	lsls	r3, r1, #9
 8001b4e:	4621      	mov	r1, r4
 8001b50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b54:	4621      	mov	r1, r4
 8001b56:	024a      	lsls	r2, r1, #9
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5e:	2200      	movs	r2, #0
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b68:	f7fe fb8a 	bl	8000280 <__aeabi_uldivmod>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4613      	mov	r3, r2
 8001b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b74:	e058      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	099b      	lsrs	r3, r3, #6
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	4611      	mov	r1, r2
 8001b82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b86:	623b      	str	r3, [r7, #32]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b90:	4642      	mov	r2, r8
 8001b92:	464b      	mov	r3, r9
 8001b94:	f04f 0000 	mov.w	r0, #0
 8001b98:	f04f 0100 	mov.w	r1, #0
 8001b9c:	0159      	lsls	r1, r3, #5
 8001b9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ba2:	0150      	lsls	r0, r2, #5
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4641      	mov	r1, r8
 8001baa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bae:	4649      	mov	r1, r9
 8001bb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bc8:	ebb2 040a 	subs.w	r4, r2, sl
 8001bcc:	eb63 050b 	sbc.w	r5, r3, fp
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	00eb      	lsls	r3, r5, #3
 8001bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bde:	00e2      	lsls	r2, r4, #3
 8001be0:	4614      	mov	r4, r2
 8001be2:	461d      	mov	r5, r3
 8001be4:	4643      	mov	r3, r8
 8001be6:	18e3      	adds	r3, r4, r3
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	464b      	mov	r3, r9
 8001bec:	eb45 0303 	adc.w	r3, r5, r3
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bfe:	4629      	mov	r1, r5
 8001c00:	028b      	lsls	r3, r1, #10
 8001c02:	4621      	mov	r1, r4
 8001c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c08:	4621      	mov	r1, r4
 8001c0a:	028a      	lsls	r2, r1, #10
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c12:	2200      	movs	r2, #0
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	61fa      	str	r2, [r7, #28]
 8001c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c1c:	f7fe fb30 	bl	8000280 <__aeabi_uldivmod>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4613      	mov	r3, r2
 8001c26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	3301      	adds	r3, #1
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c42:	e002      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3750      	adds	r7, #80	; 0x50
 8001c50:	46bd      	mov	sp, r7
 8001c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	00f42400 	.word	0x00f42400
 8001c60:	007a1200 	.word	0x007a1200

08001c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000000 	.word	0x20000000

08001c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c80:	f7ff fff0 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0a9b      	lsrs	r3, r3, #10
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4903      	ldr	r1, [pc, #12]	; (8001ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08003b20 	.word	0x08003b20

08001ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ca8:	f7ff ffdc 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0b5b      	lsrs	r3, r3, #13
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4903      	ldr	r1, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	08003b20 	.word	0x08003b20

08001ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e03f      	b.n	8001d5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7fe fe6c 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2224      	movs	r2, #36	; 0x24
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 fe1d 	bl	8002950 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b08a      	sub	sp, #40	; 0x28
 8001d6a:	af02      	add	r7, sp, #8
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	4613      	mov	r3, r2
 8001d74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b20      	cmp	r3, #32
 8001d84:	d17c      	bne.n	8001e80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_UART_Transmit+0x2c>
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e075      	b.n	8001e82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_UART_Transmit+0x3e>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e06e      	b.n	8001e82 <HAL_UART_Transmit+0x11c>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2221      	movs	r2, #33	; 0x21
 8001db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001dba:	f7fe ff65 	bl	8000c88 <HAL_GetTick>
 8001dbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	88fa      	ldrh	r2, [r7, #6]
 8001dc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	88fa      	ldrh	r2, [r7, #6]
 8001dca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dd4:	d108      	bne.n	8001de8 <HAL_UART_Transmit+0x82>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d104      	bne.n	8001de8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	61bb      	str	r3, [r7, #24]
 8001de6:	e003      	b.n	8001df0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001df8:	e02a      	b.n	8001e50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2200      	movs	r2, #0
 8001e02:	2180      	movs	r1, #128	; 0x80
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 fb9b 	bl	8002540 <UART_WaitOnFlagUntilTimeout>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e036      	b.n	8001e82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10b      	bne.n	8001e32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	61bb      	str	r3, [r7, #24]
 8001e30:	e007      	b.n	8001e42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1cf      	bne.n	8001dfa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2200      	movs	r2, #0
 8001e62:	2140      	movs	r1, #64	; 0x40
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 fb6b 	bl	8002540 <UART_WaitOnFlagUntilTimeout>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e006      	b.n	8001e82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e000      	b.n	8001e82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e80:	2302      	movs	r3, #2
  }
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3720      	adds	r7, #32
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b08a      	sub	sp, #40	; 0x28
 8001e8e:	af02      	add	r7, sp, #8
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	603b      	str	r3, [r7, #0]
 8001e96:	4613      	mov	r3, r2
 8001e98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b20      	cmp	r3, #32
 8001ea8:	f040 808c 	bne.w	8001fc4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_UART_Receive+0x2e>
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e084      	b.n	8001fc6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_UART_Receive+0x40>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e07d      	b.n	8001fc6 <HAL_UART_Receive+0x13c>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2222      	movs	r2, #34	; 0x22
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ee6:	f7fe fecf 	bl	8000c88 <HAL_GetTick>
 8001eea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	88fa      	ldrh	r2, [r7, #6]
 8001ef0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	88fa      	ldrh	r2, [r7, #6]
 8001ef6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f00:	d108      	bne.n	8001f14 <HAL_UART_Receive+0x8a>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d104      	bne.n	8001f14 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	e003      	b.n	8001f1c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001f24:	e043      	b.n	8001fae <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2120      	movs	r1, #32
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 fb05 	bl	8002540 <UART_WaitOnFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e042      	b.n	8001fc6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10c      	bne.n	8001f60 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	e01f      	b.n	8001fa0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f68:	d007      	beq.n	8001f7a <HAL_UART_Receive+0xf0>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10a      	bne.n	8001f88 <HAL_UART_Receive+0xfe>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d106      	bne.n	8001f88 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e008      	b.n	8001f9a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1b6      	bne.n	8001f26 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e000      	b.n	8001fc6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001fc4:	2302      	movs	r3, #2
  }
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3720      	adds	r7, #32
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b0ba      	sub	sp, #232	; 0xe8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800200e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10f      	bne.n	8002036 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	2b00      	cmp	r3, #0
 8002020:	d009      	beq.n	8002036 <HAL_UART_IRQHandler+0x66>
 8002022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fbd3 	bl	80027da <UART_Receive_IT>
      return;
 8002034:	e256      	b.n	80024e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002036:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 80de 	beq.w	80021fc <HAL_UART_IRQHandler+0x22c>
 8002040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d106      	bne.n	800205a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800204c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002050:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80d1 	beq.w	80021fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800205a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_UART_IRQHandler+0xae>
 8002066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800206a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f043 0201 	orr.w	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800207e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00b      	beq.n	80020a2 <HAL_UART_IRQHandler+0xd2>
 800208a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f043 0202 	orr.w	r2, r3, #2
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00b      	beq.n	80020c6 <HAL_UART_IRQHandler+0xf6>
 80020ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f043 0204 	orr.w	r2, r3, #4
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d011      	beq.n	80020f6 <HAL_UART_IRQHandler+0x126>
 80020d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020d6:	f003 0320 	and.w	r3, r3, #32
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d105      	bne.n	80020ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80020de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f043 0208 	orr.w	r2, r3, #8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 81ed 	beq.w	80024da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002104:	f003 0320 	and.w	r3, r3, #32
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_UART_IRQHandler+0x14e>
 800210c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 fb5e 	bl	80027da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002128:	2b40      	cmp	r3, #64	; 0x40
 800212a:	bf0c      	ite	eq
 800212c:	2301      	moveq	r3, #1
 800212e:	2300      	movne	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d103      	bne.n	800214a <HAL_UART_IRQHandler+0x17a>
 8002142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002146:	2b00      	cmp	r3, #0
 8002148:	d04f      	beq.n	80021ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fa66 	bl	800261c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215a:	2b40      	cmp	r3, #64	; 0x40
 800215c:	d141      	bne.n	80021e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	3314      	adds	r3, #20
 8002164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800216c:	e853 3f00 	ldrex	r3, [r3]
 8002170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800217c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	3314      	adds	r3, #20
 8002186:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800218a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800218e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002192:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002196:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800219a:	e841 2300 	strex	r3, r2, [r1]
 800219e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80021a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1d9      	bne.n	800215e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d013      	beq.n	80021da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b6:	4a7d      	ldr	r2, [pc, #500]	; (80023ac <HAL_UART_IRQHandler+0x3dc>)
 80021b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe ff13 	bl	8000fea <HAL_DMA_Abort_IT>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d016      	beq.n	80021f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021d4:	4610      	mov	r0, r2
 80021d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d8:	e00e      	b.n	80021f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f99a 	bl	8002514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021e0:	e00a      	b.n	80021f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f996 	bl	8002514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021e8:	e006      	b.n	80021f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f992 	bl	8002514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80021f6:	e170      	b.n	80024da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f8:	bf00      	nop
    return;
 80021fa:	e16e      	b.n	80024da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	2b01      	cmp	r3, #1
 8002202:	f040 814a 	bne.w	800249a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 8143 	beq.w	800249a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 813c 	beq.w	800249a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002242:	2b40      	cmp	r3, #64	; 0x40
 8002244:	f040 80b4 	bne.w	80023b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002254:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 8140 	beq.w	80024de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002266:	429a      	cmp	r2, r3
 8002268:	f080 8139 	bcs.w	80024de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002272:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800227e:	f000 8088 	beq.w	8002392 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	330c      	adds	r3, #12
 8002288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800228c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002290:	e853 3f00 	ldrex	r3, [r3]
 8002294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002298:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800229c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	330c      	adds	r3, #12
 80022aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80022ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80022ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022be:	e841 2300 	strex	r3, r2, [r1]
 80022c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80022c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1d9      	bne.n	8002282 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3314      	adds	r3, #20
 80022d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d8:	e853 3f00 	ldrex	r3, [r3]
 80022dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80022de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022e0:	f023 0301 	bic.w	r3, r3, #1
 80022e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	3314      	adds	r3, #20
 80022ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80022f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80022f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80022fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80022fe:	e841 2300 	strex	r3, r2, [r1]
 8002302:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1e1      	bne.n	80022ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3314      	adds	r3, #20
 8002310:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002314:	e853 3f00 	ldrex	r3, [r3]
 8002318:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800231a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800231c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	3314      	adds	r3, #20
 800232a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800232e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002330:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002332:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002334:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002336:	e841 2300 	strex	r3, r2, [r1]
 800233a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800233c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1e3      	bne.n	800230a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	330c      	adds	r3, #12
 8002356:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800235a:	e853 3f00 	ldrex	r3, [r3]
 800235e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002362:	f023 0310 	bic.w	r3, r3, #16
 8002366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	330c      	adds	r3, #12
 8002370:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002374:	65ba      	str	r2, [r7, #88]	; 0x58
 8002376:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800237a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800237c:	e841 2300 	strex	r3, r2, [r1]
 8002380:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1e3      	bne.n	8002350 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe fdbc 	bl	8000f0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800239a:	b29b      	uxth	r3, r3
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	b29b      	uxth	r3, r3
 80023a0:	4619      	mov	r1, r3
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f8c0 	bl	8002528 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023a8:	e099      	b.n	80024de <HAL_UART_IRQHandler+0x50e>
 80023aa:	bf00      	nop
 80023ac:	080026e3 	.word	0x080026e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 808b 	beq.w	80024e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80023cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 8086 	beq.w	80024e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	330c      	adds	r3, #12
 80023dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e0:	e853 3f00 	ldrex	r3, [r3]
 80023e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80023e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80023ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	330c      	adds	r3, #12
 80023f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80023fa:	647a      	str	r2, [r7, #68]	; 0x44
 80023fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002402:	e841 2300 	strex	r3, r2, [r1]
 8002406:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1e3      	bne.n	80023d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	3314      	adds	r3, #20
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	e853 3f00 	ldrex	r3, [r3]
 800241c:	623b      	str	r3, [r7, #32]
   return(result);
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	3314      	adds	r3, #20
 800242e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002432:	633a      	str	r2, [r7, #48]	; 0x30
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800243a:	e841 2300 	strex	r3, r2, [r1]
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1e3      	bne.n	800240e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	330c      	adds	r3, #12
 800245a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	e853 3f00 	ldrex	r3, [r3]
 8002462:	60fb      	str	r3, [r7, #12]
   return(result);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f023 0310 	bic.w	r3, r3, #16
 800246a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	330c      	adds	r3, #12
 8002474:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002478:	61fa      	str	r2, [r7, #28]
 800247a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247c:	69b9      	ldr	r1, [r7, #24]
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	e841 2300 	strex	r3, r2, [r1]
 8002484:	617b      	str	r3, [r7, #20]
   return(result);
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1e3      	bne.n	8002454 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800248c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002490:	4619      	mov	r1, r3
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f848 	bl	8002528 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002498:	e023      	b.n	80024e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800249a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800249e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <HAL_UART_IRQHandler+0x4ea>
 80024a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f929 	bl	800270a <UART_Transmit_IT>
    return;
 80024b8:	e014      	b.n	80024e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00e      	beq.n	80024e4 <HAL_UART_IRQHandler+0x514>
 80024c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f969 	bl	80027aa <UART_EndTransmit_IT>
    return;
 80024d8:	e004      	b.n	80024e4 <HAL_UART_IRQHandler+0x514>
    return;
 80024da:	bf00      	nop
 80024dc:	e002      	b.n	80024e4 <HAL_UART_IRQHandler+0x514>
      return;
 80024de:	bf00      	nop
 80024e0:	e000      	b.n	80024e4 <HAL_UART_IRQHandler+0x514>
      return;
 80024e2:	bf00      	nop
  }
}
 80024e4:	37e8      	adds	r7, #232	; 0xe8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop

080024ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b090      	sub	sp, #64	; 0x40
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	4613      	mov	r3, r2
 800254e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002550:	e050      	b.n	80025f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	d04c      	beq.n	80025f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800255a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <UART_WaitOnFlagUntilTimeout+0x30>
 8002560:	f7fe fb92 	bl	8000c88 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800256c:	429a      	cmp	r2, r3
 800256e:	d241      	bcs.n	80025f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	330c      	adds	r3, #12
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257a:	e853 3f00 	ldrex	r3, [r3]
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	330c      	adds	r3, #12
 800258e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002590:	637a      	str	r2, [r7, #52]	; 0x34
 8002592:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002594:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002598:	e841 2300 	strex	r3, r2, [r1]
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1e5      	bne.n	8002570 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3314      	adds	r3, #20
 80025aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	e853 3f00 	ldrex	r3, [r3]
 80025b2:	613b      	str	r3, [r7, #16]
   return(result);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	f023 0301 	bic.w	r3, r3, #1
 80025ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	3314      	adds	r3, #20
 80025c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025c4:	623a      	str	r2, [r7, #32]
 80025c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c8:	69f9      	ldr	r1, [r7, #28]
 80025ca:	6a3a      	ldr	r2, [r7, #32]
 80025cc:	e841 2300 	strex	r3, r2, [r1]
 80025d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e5      	bne.n	80025a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e00f      	b.n	8002614 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	4013      	ands	r3, r2
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	429a      	cmp	r2, r3
 8002602:	bf0c      	ite	eq
 8002604:	2301      	moveq	r3, #1
 8002606:	2300      	movne	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	461a      	mov	r2, r3
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	429a      	cmp	r2, r3
 8002610:	d09f      	beq.n	8002552 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3740      	adds	r7, #64	; 0x40
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800261c:	b480      	push	{r7}
 800261e:	b095      	sub	sp, #84	; 0x54
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	330c      	adds	r3, #12
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262e:	e853 3f00 	ldrex	r3, [r3]
 8002632:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002636:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800263a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	330c      	adds	r3, #12
 8002642:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002644:	643a      	str	r2, [r7, #64]	; 0x40
 8002646:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002648:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800264a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800264c:	e841 2300 	strex	r3, r2, [r1]
 8002650:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1e5      	bne.n	8002624 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	3314      	adds	r3, #20
 800265e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	e853 3f00 	ldrex	r3, [r3]
 8002666:	61fb      	str	r3, [r7, #28]
   return(result);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f023 0301 	bic.w	r3, r3, #1
 800266e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	3314      	adds	r3, #20
 8002676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002678:	62fa      	str	r2, [r7, #44]	; 0x2c
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800267e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002680:	e841 2300 	strex	r3, r2, [r1]
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1e5      	bne.n	8002658 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	2b01      	cmp	r3, #1
 8002692:	d119      	bne.n	80026c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	330c      	adds	r3, #12
 800269a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	e853 3f00 	ldrex	r3, [r3]
 80026a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f023 0310 	bic.w	r3, r3, #16
 80026aa:	647b      	str	r3, [r7, #68]	; 0x44
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	330c      	adds	r3, #12
 80026b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026b4:	61ba      	str	r2, [r7, #24]
 80026b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b8:	6979      	ldr	r1, [r7, #20]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	e841 2300 	strex	r3, r2, [r1]
 80026c0:	613b      	str	r3, [r7, #16]
   return(result);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1e5      	bne.n	8002694 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026d6:	bf00      	nop
 80026d8:	3754      	adds	r7, #84	; 0x54
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b084      	sub	sp, #16
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f7ff ff09 	bl	8002514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b21      	cmp	r3, #33	; 0x21
 800271c:	d13e      	bne.n	800279c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002726:	d114      	bne.n	8002752 <UART_Transmit_IT+0x48>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d110      	bne.n	8002752 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002744:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	1c9a      	adds	r2, r3, #2
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	621a      	str	r2, [r3, #32]
 8002750:	e008      	b.n	8002764 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	1c59      	adds	r1, r3, #1
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6211      	str	r1, [r2, #32]
 800275c:	781a      	ldrb	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29b      	uxth	r3, r3
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	4619      	mov	r1, r3
 8002772:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10f      	bne.n	8002798 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002786:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002796:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	e000      	b.n	800279e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800279c:	2302      	movs	r3, #2
  }
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff fe8e 	bl	80024ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b08c      	sub	sp, #48	; 0x30
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b22      	cmp	r3, #34	; 0x22
 80027ec:	f040 80ab 	bne.w	8002946 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f8:	d117      	bne.n	800282a <UART_Receive_IT+0x50>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d113      	bne.n	800282a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002802:	2300      	movs	r3, #0
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	b29b      	uxth	r3, r3
 8002814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002818:	b29a      	uxth	r2, r3
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	1c9a      	adds	r2, r3, #2
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	629a      	str	r2, [r3, #40]	; 0x28
 8002828:	e026      	b.n	8002878 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002830:	2300      	movs	r3, #0
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283c:	d007      	beq.n	800284e <UART_Receive_IT+0x74>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10a      	bne.n	800285c <UART_Receive_IT+0x82>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	b2da      	uxtb	r2, r3
 8002856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	e008      	b.n	800286e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002868:	b2da      	uxtb	r2, r3
 800286a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29b      	uxth	r3, r3
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	4619      	mov	r1, r3
 8002886:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002888:	2b00      	cmp	r3, #0
 800288a:	d15a      	bne.n	8002942 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0220 	bic.w	r2, r2, #32
 800289a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0201 	bic.w	r2, r2, #1
 80028ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d135      	bne.n	8002938 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	e853 3f00 	ldrex	r3, [r3]
 80028e0:	613b      	str	r3, [r7, #16]
   return(result);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f023 0310 	bic.w	r3, r3, #16
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	330c      	adds	r3, #12
 80028f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f2:	623a      	str	r2, [r7, #32]
 80028f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f6:	69f9      	ldr	r1, [r7, #28]
 80028f8:	6a3a      	ldr	r2, [r7, #32]
 80028fa:	e841 2300 	strex	r3, r2, [r1]
 80028fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1e5      	bne.n	80028d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b10      	cmp	r3, #16
 8002912:	d10a      	bne.n	800292a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800292e:	4619      	mov	r1, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff fdf9 	bl	8002528 <HAL_UARTEx_RxEventCallback>
 8002936:	e002      	b.n	800293e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff fde1 	bl	8002500 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e002      	b.n	8002948 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	e000      	b.n	8002948 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002946:	2302      	movs	r3, #2
  }
}
 8002948:	4618      	mov	r0, r3
 800294a:	3730      	adds	r7, #48	; 0x30
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002954:	b0c0      	sub	sp, #256	; 0x100
 8002956:	af00      	add	r7, sp, #0
 8002958:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296c:	68d9      	ldr	r1, [r3, #12]
 800296e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	ea40 0301 	orr.w	r3, r0, r1
 8002978:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800297a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	431a      	orrs	r2, r3
 8002988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	431a      	orrs	r2, r3
 8002990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800299c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029a8:	f021 010c 	bic.w	r1, r1, #12
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029b6:	430b      	orrs	r3, r1
 80029b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ca:	6999      	ldr	r1, [r3, #24]
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	ea40 0301 	orr.w	r3, r0, r1
 80029d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	4b8f      	ldr	r3, [pc, #572]	; (8002c1c <UART_SetConfig+0x2cc>)
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d005      	beq.n	80029f0 <UART_SetConfig+0xa0>
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b8d      	ldr	r3, [pc, #564]	; (8002c20 <UART_SetConfig+0x2d0>)
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d104      	bne.n	80029fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029f0:	f7ff f958 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 80029f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80029f8:	e003      	b.n	8002a02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029fa:	f7ff f93f 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 80029fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a0c:	f040 810c 	bne.w	8002c28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a14:	2200      	movs	r2, #0
 8002a16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a22:	4622      	mov	r2, r4
 8002a24:	462b      	mov	r3, r5
 8002a26:	1891      	adds	r1, r2, r2
 8002a28:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a2a:	415b      	adcs	r3, r3
 8002a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a32:	4621      	mov	r1, r4
 8002a34:	eb12 0801 	adds.w	r8, r2, r1
 8002a38:	4629      	mov	r1, r5
 8002a3a:	eb43 0901 	adc.w	r9, r3, r1
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a52:	4690      	mov	r8, r2
 8002a54:	4699      	mov	r9, r3
 8002a56:	4623      	mov	r3, r4
 8002a58:	eb18 0303 	adds.w	r3, r8, r3
 8002a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a60:	462b      	mov	r3, r5
 8002a62:	eb49 0303 	adc.w	r3, r9, r3
 8002a66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a7e:	460b      	mov	r3, r1
 8002a80:	18db      	adds	r3, r3, r3
 8002a82:	653b      	str	r3, [r7, #80]	; 0x50
 8002a84:	4613      	mov	r3, r2
 8002a86:	eb42 0303 	adc.w	r3, r2, r3
 8002a8a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a94:	f7fd fbf4 	bl	8000280 <__aeabi_uldivmod>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4b61      	ldr	r3, [pc, #388]	; (8002c24 <UART_SetConfig+0x2d4>)
 8002a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	011c      	lsls	r4, r3, #4
 8002aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ab0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ab4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ab8:	4642      	mov	r2, r8
 8002aba:	464b      	mov	r3, r9
 8002abc:	1891      	adds	r1, r2, r2
 8002abe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ac0:	415b      	adcs	r3, r3
 8002ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ac8:	4641      	mov	r1, r8
 8002aca:	eb12 0a01 	adds.w	sl, r2, r1
 8002ace:	4649      	mov	r1, r9
 8002ad0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ae0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ae4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ae8:	4692      	mov	sl, r2
 8002aea:	469b      	mov	fp, r3
 8002aec:	4643      	mov	r3, r8
 8002aee:	eb1a 0303 	adds.w	r3, sl, r3
 8002af2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002af6:	464b      	mov	r3, r9
 8002af8:	eb4b 0303 	adc.w	r3, fp, r3
 8002afc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b14:	460b      	mov	r3, r1
 8002b16:	18db      	adds	r3, r3, r3
 8002b18:	643b      	str	r3, [r7, #64]	; 0x40
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	eb42 0303 	adc.w	r3, r2, r3
 8002b20:	647b      	str	r3, [r7, #68]	; 0x44
 8002b22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b2a:	f7fd fba9 	bl	8000280 <__aeabi_uldivmod>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4611      	mov	r1, r2
 8002b34:	4b3b      	ldr	r3, [pc, #236]	; (8002c24 <UART_SetConfig+0x2d4>)
 8002b36:	fba3 2301 	umull	r2, r3, r3, r1
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2264      	movs	r2, #100	; 0x64
 8002b3e:	fb02 f303 	mul.w	r3, r2, r3
 8002b42:	1acb      	subs	r3, r1, r3
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b4a:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <UART_SetConfig+0x2d4>)
 8002b4c:	fba3 2302 	umull	r2, r3, r3, r2
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b58:	441c      	add	r4, r3
 8002b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	464b      	mov	r3, r9
 8002b70:	1891      	adds	r1, r2, r2
 8002b72:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b74:	415b      	adcs	r3, r3
 8002b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b7c:	4641      	mov	r1, r8
 8002b7e:	1851      	adds	r1, r2, r1
 8002b80:	6339      	str	r1, [r7, #48]	; 0x30
 8002b82:	4649      	mov	r1, r9
 8002b84:	414b      	adcs	r3, r1
 8002b86:	637b      	str	r3, [r7, #52]	; 0x34
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b94:	4659      	mov	r1, fp
 8002b96:	00cb      	lsls	r3, r1, #3
 8002b98:	4651      	mov	r1, sl
 8002b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b9e:	4651      	mov	r1, sl
 8002ba0:	00ca      	lsls	r2, r1, #3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4642      	mov	r2, r8
 8002baa:	189b      	adds	r3, r3, r2
 8002bac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bb0:	464b      	mov	r3, r9
 8002bb2:	460a      	mov	r2, r1
 8002bb4:	eb42 0303 	adc.w	r3, r2, r3
 8002bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002bc8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002bcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	18db      	adds	r3, r3, r3
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	eb42 0303 	adc.w	r3, r2, r3
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002be2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002be6:	f7fd fb4b 	bl	8000280 <__aeabi_uldivmod>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <UART_SetConfig+0x2d4>)
 8002bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	2164      	movs	r1, #100	; 0x64
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	3332      	adds	r3, #50	; 0x32
 8002c02:	4a08      	ldr	r2, [pc, #32]	; (8002c24 <UART_SetConfig+0x2d4>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	f003 0207 	and.w	r2, r3, #7
 8002c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4422      	add	r2, r4
 8002c16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c18:	e105      	b.n	8002e26 <UART_SetConfig+0x4d6>
 8002c1a:	bf00      	nop
 8002c1c:	40011000 	.word	0x40011000
 8002c20:	40011400 	.word	0x40011400
 8002c24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c3a:	4642      	mov	r2, r8
 8002c3c:	464b      	mov	r3, r9
 8002c3e:	1891      	adds	r1, r2, r2
 8002c40:	6239      	str	r1, [r7, #32]
 8002c42:	415b      	adcs	r3, r3
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
 8002c46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c4a:	4641      	mov	r1, r8
 8002c4c:	1854      	adds	r4, r2, r1
 8002c4e:	4649      	mov	r1, r9
 8002c50:	eb43 0501 	adc.w	r5, r3, r1
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	00eb      	lsls	r3, r5, #3
 8002c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c62:	00e2      	lsls	r2, r4, #3
 8002c64:	4614      	mov	r4, r2
 8002c66:	461d      	mov	r5, r3
 8002c68:	4643      	mov	r3, r8
 8002c6a:	18e3      	adds	r3, r4, r3
 8002c6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c70:	464b      	mov	r3, r9
 8002c72:	eb45 0303 	adc.w	r3, r5, r3
 8002c76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c96:	4629      	mov	r1, r5
 8002c98:	008b      	lsls	r3, r1, #2
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	008a      	lsls	r2, r1, #2
 8002ca4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ca8:	f7fd faea 	bl	8000280 <__aeabi_uldivmod>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4b60      	ldr	r3, [pc, #384]	; (8002e34 <UART_SetConfig+0x4e4>)
 8002cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	011c      	lsls	r4, r3, #4
 8002cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ccc:	4642      	mov	r2, r8
 8002cce:	464b      	mov	r3, r9
 8002cd0:	1891      	adds	r1, r2, r2
 8002cd2:	61b9      	str	r1, [r7, #24]
 8002cd4:	415b      	adcs	r3, r3
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cdc:	4641      	mov	r1, r8
 8002cde:	1851      	adds	r1, r2, r1
 8002ce0:	6139      	str	r1, [r7, #16]
 8002ce2:	4649      	mov	r1, r9
 8002ce4:	414b      	adcs	r3, r1
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cf4:	4659      	mov	r1, fp
 8002cf6:	00cb      	lsls	r3, r1, #3
 8002cf8:	4651      	mov	r1, sl
 8002cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cfe:	4651      	mov	r1, sl
 8002d00:	00ca      	lsls	r2, r1, #3
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	4642      	mov	r2, r8
 8002d0a:	189b      	adds	r3, r3, r2
 8002d0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d10:	464b      	mov	r3, r9
 8002d12:	460a      	mov	r2, r1
 8002d14:	eb42 0303 	adc.w	r3, r2, r3
 8002d18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d34:	4649      	mov	r1, r9
 8002d36:	008b      	lsls	r3, r1, #2
 8002d38:	4641      	mov	r1, r8
 8002d3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d3e:	4641      	mov	r1, r8
 8002d40:	008a      	lsls	r2, r1, #2
 8002d42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d46:	f7fd fa9b 	bl	8000280 <__aeabi_uldivmod>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <UART_SetConfig+0x4e4>)
 8002d50:	fba3 1302 	umull	r1, r3, r3, r2
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	2164      	movs	r1, #100	; 0x64
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	3332      	adds	r3, #50	; 0x32
 8002d62:	4a34      	ldr	r2, [pc, #208]	; (8002e34 <UART_SetConfig+0x4e4>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d6e:	441c      	add	r4, r3
 8002d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d74:	2200      	movs	r2, #0
 8002d76:	673b      	str	r3, [r7, #112]	; 0x70
 8002d78:	677a      	str	r2, [r7, #116]	; 0x74
 8002d7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d7e:	4642      	mov	r2, r8
 8002d80:	464b      	mov	r3, r9
 8002d82:	1891      	adds	r1, r2, r2
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	415b      	adcs	r3, r3
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d8e:	4641      	mov	r1, r8
 8002d90:	1851      	adds	r1, r2, r1
 8002d92:	6039      	str	r1, [r7, #0]
 8002d94:	4649      	mov	r1, r9
 8002d96:	414b      	adcs	r3, r1
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002da6:	4659      	mov	r1, fp
 8002da8:	00cb      	lsls	r3, r1, #3
 8002daa:	4651      	mov	r1, sl
 8002dac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002db0:	4651      	mov	r1, sl
 8002db2:	00ca      	lsls	r2, r1, #3
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	4603      	mov	r3, r0
 8002dba:	4642      	mov	r2, r8
 8002dbc:	189b      	adds	r3, r3, r2
 8002dbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dc0:	464b      	mov	r3, r9
 8002dc2:	460a      	mov	r2, r1
 8002dc4:	eb42 0303 	adc.w	r3, r2, r3
 8002dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	663b      	str	r3, [r7, #96]	; 0x60
 8002dd4:	667a      	str	r2, [r7, #100]	; 0x64
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002de2:	4649      	mov	r1, r9
 8002de4:	008b      	lsls	r3, r1, #2
 8002de6:	4641      	mov	r1, r8
 8002de8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dec:	4641      	mov	r1, r8
 8002dee:	008a      	lsls	r2, r1, #2
 8002df0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002df4:	f7fd fa44 	bl	8000280 <__aeabi_uldivmod>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <UART_SetConfig+0x4e4>)
 8002dfe:	fba3 1302 	umull	r1, r3, r3, r2
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	2164      	movs	r1, #100	; 0x64
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	3332      	adds	r3, #50	; 0x32
 8002e10:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <UART_SetConfig+0x4e4>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	f003 020f 	and.w	r2, r3, #15
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4422      	add	r2, r4
 8002e24:	609a      	str	r2, [r3, #8]
}
 8002e26:	bf00      	nop
 8002e28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e32:	bf00      	nop
 8002e34:	51eb851f 	.word	0x51eb851f

08002e38 <__errno>:
 8002e38:	4b01      	ldr	r3, [pc, #4]	; (8002e40 <__errno+0x8>)
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	2000000c 	.word	0x2000000c

08002e44 <__libc_init_array>:
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	4d0d      	ldr	r5, [pc, #52]	; (8002e7c <__libc_init_array+0x38>)
 8002e48:	4c0d      	ldr	r4, [pc, #52]	; (8002e80 <__libc_init_array+0x3c>)
 8002e4a:	1b64      	subs	r4, r4, r5
 8002e4c:	10a4      	asrs	r4, r4, #2
 8002e4e:	2600      	movs	r6, #0
 8002e50:	42a6      	cmp	r6, r4
 8002e52:	d109      	bne.n	8002e68 <__libc_init_array+0x24>
 8002e54:	4d0b      	ldr	r5, [pc, #44]	; (8002e84 <__libc_init_array+0x40>)
 8002e56:	4c0c      	ldr	r4, [pc, #48]	; (8002e88 <__libc_init_array+0x44>)
 8002e58:	f000 fe20 	bl	8003a9c <_init>
 8002e5c:	1b64      	subs	r4, r4, r5
 8002e5e:	10a4      	asrs	r4, r4, #2
 8002e60:	2600      	movs	r6, #0
 8002e62:	42a6      	cmp	r6, r4
 8002e64:	d105      	bne.n	8002e72 <__libc_init_array+0x2e>
 8002e66:	bd70      	pop	{r4, r5, r6, pc}
 8002e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e6c:	4798      	blx	r3
 8002e6e:	3601      	adds	r6, #1
 8002e70:	e7ee      	b.n	8002e50 <__libc_init_array+0xc>
 8002e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e76:	4798      	blx	r3
 8002e78:	3601      	adds	r6, #1
 8002e7a:	e7f2      	b.n	8002e62 <__libc_init_array+0x1e>
 8002e7c:	08003cb0 	.word	0x08003cb0
 8002e80:	08003cb0 	.word	0x08003cb0
 8002e84:	08003cb0 	.word	0x08003cb0
 8002e88:	08003cb4 	.word	0x08003cb4

08002e8c <memcpy>:
 8002e8c:	440a      	add	r2, r1
 8002e8e:	4291      	cmp	r1, r2
 8002e90:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e94:	d100      	bne.n	8002e98 <memcpy+0xc>
 8002e96:	4770      	bx	lr
 8002e98:	b510      	push	{r4, lr}
 8002e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ea2:	4291      	cmp	r1, r2
 8002ea4:	d1f9      	bne.n	8002e9a <memcpy+0xe>
 8002ea6:	bd10      	pop	{r4, pc}

08002ea8 <memset>:
 8002ea8:	4402      	add	r2, r0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d100      	bne.n	8002eb2 <memset+0xa>
 8002eb0:	4770      	bx	lr
 8002eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002eb6:	e7f9      	b.n	8002eac <memset+0x4>

08002eb8 <siscanf>:
 8002eb8:	b40e      	push	{r1, r2, r3}
 8002eba:	b510      	push	{r4, lr}
 8002ebc:	b09f      	sub	sp, #124	; 0x7c
 8002ebe:	ac21      	add	r4, sp, #132	; 0x84
 8002ec0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8002ec4:	f854 2b04 	ldr.w	r2, [r4], #4
 8002ec8:	9201      	str	r2, [sp, #4]
 8002eca:	f8ad 101c 	strh.w	r1, [sp, #28]
 8002ece:	9004      	str	r0, [sp, #16]
 8002ed0:	9008      	str	r0, [sp, #32]
 8002ed2:	f7fd f97d 	bl	80001d0 <strlen>
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <siscanf+0x50>)
 8002ed8:	9005      	str	r0, [sp, #20]
 8002eda:	9009      	str	r0, [sp, #36]	; 0x24
 8002edc:	930d      	str	r3, [sp, #52]	; 0x34
 8002ede:	480b      	ldr	r0, [pc, #44]	; (8002f0c <siscanf+0x54>)
 8002ee0:	9a01      	ldr	r2, [sp, #4]
 8002ee2:	6800      	ldr	r0, [r0, #0]
 8002ee4:	9403      	str	r4, [sp, #12]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	9311      	str	r3, [sp, #68]	; 0x44
 8002eea:	9316      	str	r3, [sp, #88]	; 0x58
 8002eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ef0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8002ef4:	a904      	add	r1, sp, #16
 8002ef6:	4623      	mov	r3, r4
 8002ef8:	f000 f866 	bl	8002fc8 <__ssvfiscanf_r>
 8002efc:	b01f      	add	sp, #124	; 0x7c
 8002efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f02:	b003      	add	sp, #12
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	08002f11 	.word	0x08002f11
 8002f0c:	2000000c 	.word	0x2000000c

08002f10 <__seofread>:
 8002f10:	2000      	movs	r0, #0
 8002f12:	4770      	bx	lr

08002f14 <_sungetc_r>:
 8002f14:	b538      	push	{r3, r4, r5, lr}
 8002f16:	1c4b      	adds	r3, r1, #1
 8002f18:	4614      	mov	r4, r2
 8002f1a:	d103      	bne.n	8002f24 <_sungetc_r+0x10>
 8002f1c:	f04f 35ff 	mov.w	r5, #4294967295
 8002f20:	4628      	mov	r0, r5
 8002f22:	bd38      	pop	{r3, r4, r5, pc}
 8002f24:	8993      	ldrh	r3, [r2, #12]
 8002f26:	f023 0320 	bic.w	r3, r3, #32
 8002f2a:	8193      	strh	r3, [r2, #12]
 8002f2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f2e:	6852      	ldr	r2, [r2, #4]
 8002f30:	b2cd      	uxtb	r5, r1
 8002f32:	b18b      	cbz	r3, 8002f58 <_sungetc_r+0x44>
 8002f34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f36:	4293      	cmp	r3, r2
 8002f38:	dd08      	ble.n	8002f4c <_sungetc_r+0x38>
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	1e5a      	subs	r2, r3, #1
 8002f3e:	6022      	str	r2, [r4, #0]
 8002f40:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002f44:	6863      	ldr	r3, [r4, #4]
 8002f46:	3301      	adds	r3, #1
 8002f48:	6063      	str	r3, [r4, #4]
 8002f4a:	e7e9      	b.n	8002f20 <_sungetc_r+0xc>
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	f000 fc35 	bl	80037bc <__submore>
 8002f52:	2800      	cmp	r0, #0
 8002f54:	d0f1      	beq.n	8002f3a <_sungetc_r+0x26>
 8002f56:	e7e1      	b.n	8002f1c <_sungetc_r+0x8>
 8002f58:	6921      	ldr	r1, [r4, #16]
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	b151      	cbz	r1, 8002f74 <_sungetc_r+0x60>
 8002f5e:	4299      	cmp	r1, r3
 8002f60:	d208      	bcs.n	8002f74 <_sungetc_r+0x60>
 8002f62:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002f66:	42a9      	cmp	r1, r5
 8002f68:	d104      	bne.n	8002f74 <_sungetc_r+0x60>
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	3201      	adds	r2, #1
 8002f6e:	6023      	str	r3, [r4, #0]
 8002f70:	6062      	str	r2, [r4, #4]
 8002f72:	e7d5      	b.n	8002f20 <_sungetc_r+0xc>
 8002f74:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8002f78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f7c:	6363      	str	r3, [r4, #52]	; 0x34
 8002f7e:	2303      	movs	r3, #3
 8002f80:	63a3      	str	r3, [r4, #56]	; 0x38
 8002f82:	4623      	mov	r3, r4
 8002f84:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002f88:	6023      	str	r3, [r4, #0]
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e7dc      	b.n	8002f48 <_sungetc_r+0x34>

08002f8e <__ssrefill_r>:
 8002f8e:	b510      	push	{r4, lr}
 8002f90:	460c      	mov	r4, r1
 8002f92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002f94:	b169      	cbz	r1, 8002fb2 <__ssrefill_r+0x24>
 8002f96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f9a:	4299      	cmp	r1, r3
 8002f9c:	d001      	beq.n	8002fa2 <__ssrefill_r+0x14>
 8002f9e:	f000 fc49 	bl	8003834 <_free_r>
 8002fa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fa4:	6063      	str	r3, [r4, #4]
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	6360      	str	r0, [r4, #52]	; 0x34
 8002faa:	b113      	cbz	r3, 8002fb2 <__ssrefill_r+0x24>
 8002fac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fae:	6023      	str	r3, [r4, #0]
 8002fb0:	bd10      	pop	{r4, pc}
 8002fb2:	6923      	ldr	r3, [r4, #16]
 8002fb4:	6023      	str	r3, [r4, #0]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	6063      	str	r3, [r4, #4]
 8002fba:	89a3      	ldrh	r3, [r4, #12]
 8002fbc:	f043 0320 	orr.w	r3, r3, #32
 8002fc0:	81a3      	strh	r3, [r4, #12]
 8002fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc6:	e7f3      	b.n	8002fb0 <__ssrefill_r+0x22>

08002fc8 <__ssvfiscanf_r>:
 8002fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fcc:	460c      	mov	r4, r1
 8002fce:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8002fd8:	49a6      	ldr	r1, [pc, #664]	; (8003274 <__ssvfiscanf_r+0x2ac>)
 8002fda:	91a0      	str	r1, [sp, #640]	; 0x280
 8002fdc:	f10d 0804 	add.w	r8, sp, #4
 8002fe0:	49a5      	ldr	r1, [pc, #660]	; (8003278 <__ssvfiscanf_r+0x2b0>)
 8002fe2:	4fa6      	ldr	r7, [pc, #664]	; (800327c <__ssvfiscanf_r+0x2b4>)
 8002fe4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003280 <__ssvfiscanf_r+0x2b8>
 8002fe8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8002fec:	4606      	mov	r6, r0
 8002fee:	91a1      	str	r1, [sp, #644]	; 0x284
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	7813      	ldrb	r3, [r2, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 815a 	beq.w	80032ae <__ssvfiscanf_r+0x2e6>
 8002ffa:	5dd9      	ldrb	r1, [r3, r7]
 8002ffc:	f011 0108 	ands.w	r1, r1, #8
 8003000:	f102 0501 	add.w	r5, r2, #1
 8003004:	d019      	beq.n	800303a <__ssvfiscanf_r+0x72>
 8003006:	6863      	ldr	r3, [r4, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	dd0f      	ble.n	800302c <__ssvfiscanf_r+0x64>
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	781a      	ldrb	r2, [r3, #0]
 8003010:	5cba      	ldrb	r2, [r7, r2]
 8003012:	0712      	lsls	r2, r2, #28
 8003014:	d401      	bmi.n	800301a <__ssvfiscanf_r+0x52>
 8003016:	462a      	mov	r2, r5
 8003018:	e7eb      	b.n	8002ff2 <__ssvfiscanf_r+0x2a>
 800301a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800301c:	3201      	adds	r2, #1
 800301e:	9245      	str	r2, [sp, #276]	; 0x114
 8003020:	6862      	ldr	r2, [r4, #4]
 8003022:	3301      	adds	r3, #1
 8003024:	3a01      	subs	r2, #1
 8003026:	6062      	str	r2, [r4, #4]
 8003028:	6023      	str	r3, [r4, #0]
 800302a:	e7ec      	b.n	8003006 <__ssvfiscanf_r+0x3e>
 800302c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800302e:	4621      	mov	r1, r4
 8003030:	4630      	mov	r0, r6
 8003032:	4798      	blx	r3
 8003034:	2800      	cmp	r0, #0
 8003036:	d0e9      	beq.n	800300c <__ssvfiscanf_r+0x44>
 8003038:	e7ed      	b.n	8003016 <__ssvfiscanf_r+0x4e>
 800303a:	2b25      	cmp	r3, #37	; 0x25
 800303c:	d012      	beq.n	8003064 <__ssvfiscanf_r+0x9c>
 800303e:	469a      	mov	sl, r3
 8003040:	6863      	ldr	r3, [r4, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f340 8091 	ble.w	800316a <__ssvfiscanf_r+0x1a2>
 8003048:	6822      	ldr	r2, [r4, #0]
 800304a:	7813      	ldrb	r3, [r2, #0]
 800304c:	4553      	cmp	r3, sl
 800304e:	f040 812e 	bne.w	80032ae <__ssvfiscanf_r+0x2e6>
 8003052:	6863      	ldr	r3, [r4, #4]
 8003054:	3b01      	subs	r3, #1
 8003056:	6063      	str	r3, [r4, #4]
 8003058:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800305a:	3201      	adds	r2, #1
 800305c:	3301      	adds	r3, #1
 800305e:	6022      	str	r2, [r4, #0]
 8003060:	9345      	str	r3, [sp, #276]	; 0x114
 8003062:	e7d8      	b.n	8003016 <__ssvfiscanf_r+0x4e>
 8003064:	9141      	str	r1, [sp, #260]	; 0x104
 8003066:	9143      	str	r1, [sp, #268]	; 0x10c
 8003068:	7853      	ldrb	r3, [r2, #1]
 800306a:	2b2a      	cmp	r3, #42	; 0x2a
 800306c:	bf02      	ittt	eq
 800306e:	2310      	moveq	r3, #16
 8003070:	1c95      	addeq	r5, r2, #2
 8003072:	9341      	streq	r3, [sp, #260]	; 0x104
 8003074:	220a      	movs	r2, #10
 8003076:	46aa      	mov	sl, r5
 8003078:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800307c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003080:	2b09      	cmp	r3, #9
 8003082:	d91d      	bls.n	80030c0 <__ssvfiscanf_r+0xf8>
 8003084:	487e      	ldr	r0, [pc, #504]	; (8003280 <__ssvfiscanf_r+0x2b8>)
 8003086:	2203      	movs	r2, #3
 8003088:	f7fd f8aa 	bl	80001e0 <memchr>
 800308c:	b140      	cbz	r0, 80030a0 <__ssvfiscanf_r+0xd8>
 800308e:	2301      	movs	r3, #1
 8003090:	eba0 0009 	sub.w	r0, r0, r9
 8003094:	fa03 f000 	lsl.w	r0, r3, r0
 8003098:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800309a:	4318      	orrs	r0, r3
 800309c:	9041      	str	r0, [sp, #260]	; 0x104
 800309e:	4655      	mov	r5, sl
 80030a0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80030a4:	2b78      	cmp	r3, #120	; 0x78
 80030a6:	d806      	bhi.n	80030b6 <__ssvfiscanf_r+0xee>
 80030a8:	2b57      	cmp	r3, #87	; 0x57
 80030aa:	d810      	bhi.n	80030ce <__ssvfiscanf_r+0x106>
 80030ac:	2b25      	cmp	r3, #37	; 0x25
 80030ae:	d0c6      	beq.n	800303e <__ssvfiscanf_r+0x76>
 80030b0:	d856      	bhi.n	8003160 <__ssvfiscanf_r+0x198>
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d064      	beq.n	8003180 <__ssvfiscanf_r+0x1b8>
 80030b6:	2303      	movs	r3, #3
 80030b8:	9347      	str	r3, [sp, #284]	; 0x11c
 80030ba:	230a      	movs	r3, #10
 80030bc:	9342      	str	r3, [sp, #264]	; 0x108
 80030be:	e071      	b.n	80031a4 <__ssvfiscanf_r+0x1dc>
 80030c0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80030c2:	fb02 1103 	mla	r1, r2, r3, r1
 80030c6:	3930      	subs	r1, #48	; 0x30
 80030c8:	9143      	str	r1, [sp, #268]	; 0x10c
 80030ca:	4655      	mov	r5, sl
 80030cc:	e7d3      	b.n	8003076 <__ssvfiscanf_r+0xae>
 80030ce:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80030d2:	2a20      	cmp	r2, #32
 80030d4:	d8ef      	bhi.n	80030b6 <__ssvfiscanf_r+0xee>
 80030d6:	a101      	add	r1, pc, #4	; (adr r1, 80030dc <__ssvfiscanf_r+0x114>)
 80030d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80030dc:	0800318f 	.word	0x0800318f
 80030e0:	080030b7 	.word	0x080030b7
 80030e4:	080030b7 	.word	0x080030b7
 80030e8:	080031ed 	.word	0x080031ed
 80030ec:	080030b7 	.word	0x080030b7
 80030f0:	080030b7 	.word	0x080030b7
 80030f4:	080030b7 	.word	0x080030b7
 80030f8:	080030b7 	.word	0x080030b7
 80030fc:	080030b7 	.word	0x080030b7
 8003100:	080030b7 	.word	0x080030b7
 8003104:	080030b7 	.word	0x080030b7
 8003108:	08003203 	.word	0x08003203
 800310c:	080031d9 	.word	0x080031d9
 8003110:	08003167 	.word	0x08003167
 8003114:	08003167 	.word	0x08003167
 8003118:	08003167 	.word	0x08003167
 800311c:	080030b7 	.word	0x080030b7
 8003120:	080031dd 	.word	0x080031dd
 8003124:	080030b7 	.word	0x080030b7
 8003128:	080030b7 	.word	0x080030b7
 800312c:	080030b7 	.word	0x080030b7
 8003130:	080030b7 	.word	0x080030b7
 8003134:	08003213 	.word	0x08003213
 8003138:	080031e5 	.word	0x080031e5
 800313c:	08003187 	.word	0x08003187
 8003140:	080030b7 	.word	0x080030b7
 8003144:	080030b7 	.word	0x080030b7
 8003148:	0800320f 	.word	0x0800320f
 800314c:	080030b7 	.word	0x080030b7
 8003150:	080031d9 	.word	0x080031d9
 8003154:	080030b7 	.word	0x080030b7
 8003158:	080030b7 	.word	0x080030b7
 800315c:	0800318f 	.word	0x0800318f
 8003160:	3b45      	subs	r3, #69	; 0x45
 8003162:	2b02      	cmp	r3, #2
 8003164:	d8a7      	bhi.n	80030b6 <__ssvfiscanf_r+0xee>
 8003166:	2305      	movs	r3, #5
 8003168:	e01b      	b.n	80031a2 <__ssvfiscanf_r+0x1da>
 800316a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800316c:	4621      	mov	r1, r4
 800316e:	4630      	mov	r0, r6
 8003170:	4798      	blx	r3
 8003172:	2800      	cmp	r0, #0
 8003174:	f43f af68 	beq.w	8003048 <__ssvfiscanf_r+0x80>
 8003178:	9844      	ldr	r0, [sp, #272]	; 0x110
 800317a:	2800      	cmp	r0, #0
 800317c:	f040 808d 	bne.w	800329a <__ssvfiscanf_r+0x2d2>
 8003180:	f04f 30ff 	mov.w	r0, #4294967295
 8003184:	e08f      	b.n	80032a6 <__ssvfiscanf_r+0x2de>
 8003186:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003188:	f042 0220 	orr.w	r2, r2, #32
 800318c:	9241      	str	r2, [sp, #260]	; 0x104
 800318e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003194:	9241      	str	r2, [sp, #260]	; 0x104
 8003196:	2210      	movs	r2, #16
 8003198:	2b6f      	cmp	r3, #111	; 0x6f
 800319a:	9242      	str	r2, [sp, #264]	; 0x108
 800319c:	bf34      	ite	cc
 800319e:	2303      	movcc	r3, #3
 80031a0:	2304      	movcs	r3, #4
 80031a2:	9347      	str	r3, [sp, #284]	; 0x11c
 80031a4:	6863      	ldr	r3, [r4, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	dd42      	ble.n	8003230 <__ssvfiscanf_r+0x268>
 80031aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80031ac:	0659      	lsls	r1, r3, #25
 80031ae:	d404      	bmi.n	80031ba <__ssvfiscanf_r+0x1f2>
 80031b0:	6823      	ldr	r3, [r4, #0]
 80031b2:	781a      	ldrb	r2, [r3, #0]
 80031b4:	5cba      	ldrb	r2, [r7, r2]
 80031b6:	0712      	lsls	r2, r2, #28
 80031b8:	d441      	bmi.n	800323e <__ssvfiscanf_r+0x276>
 80031ba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80031bc:	2b02      	cmp	r3, #2
 80031be:	dc50      	bgt.n	8003262 <__ssvfiscanf_r+0x29a>
 80031c0:	466b      	mov	r3, sp
 80031c2:	4622      	mov	r2, r4
 80031c4:	a941      	add	r1, sp, #260	; 0x104
 80031c6:	4630      	mov	r0, r6
 80031c8:	f000 f876 	bl	80032b8 <_scanf_chars>
 80031cc:	2801      	cmp	r0, #1
 80031ce:	d06e      	beq.n	80032ae <__ssvfiscanf_r+0x2e6>
 80031d0:	2802      	cmp	r0, #2
 80031d2:	f47f af20 	bne.w	8003016 <__ssvfiscanf_r+0x4e>
 80031d6:	e7cf      	b.n	8003178 <__ssvfiscanf_r+0x1b0>
 80031d8:	220a      	movs	r2, #10
 80031da:	e7dd      	b.n	8003198 <__ssvfiscanf_r+0x1d0>
 80031dc:	2300      	movs	r3, #0
 80031de:	9342      	str	r3, [sp, #264]	; 0x108
 80031e0:	2303      	movs	r3, #3
 80031e2:	e7de      	b.n	80031a2 <__ssvfiscanf_r+0x1da>
 80031e4:	2308      	movs	r3, #8
 80031e6:	9342      	str	r3, [sp, #264]	; 0x108
 80031e8:	2304      	movs	r3, #4
 80031ea:	e7da      	b.n	80031a2 <__ssvfiscanf_r+0x1da>
 80031ec:	4629      	mov	r1, r5
 80031ee:	4640      	mov	r0, r8
 80031f0:	f000 f9b4 	bl	800355c <__sccl>
 80031f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80031f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031fa:	9341      	str	r3, [sp, #260]	; 0x104
 80031fc:	4605      	mov	r5, r0
 80031fe:	2301      	movs	r3, #1
 8003200:	e7cf      	b.n	80031a2 <__ssvfiscanf_r+0x1da>
 8003202:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003208:	9341      	str	r3, [sp, #260]	; 0x104
 800320a:	2300      	movs	r3, #0
 800320c:	e7c9      	b.n	80031a2 <__ssvfiscanf_r+0x1da>
 800320e:	2302      	movs	r3, #2
 8003210:	e7c7      	b.n	80031a2 <__ssvfiscanf_r+0x1da>
 8003212:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003214:	06c3      	lsls	r3, r0, #27
 8003216:	f53f aefe 	bmi.w	8003016 <__ssvfiscanf_r+0x4e>
 800321a:	9b00      	ldr	r3, [sp, #0]
 800321c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800321e:	1d19      	adds	r1, r3, #4
 8003220:	9100      	str	r1, [sp, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f010 0f01 	tst.w	r0, #1
 8003228:	bf14      	ite	ne
 800322a:	801a      	strhne	r2, [r3, #0]
 800322c:	601a      	streq	r2, [r3, #0]
 800322e:	e6f2      	b.n	8003016 <__ssvfiscanf_r+0x4e>
 8003230:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003232:	4621      	mov	r1, r4
 8003234:	4630      	mov	r0, r6
 8003236:	4798      	blx	r3
 8003238:	2800      	cmp	r0, #0
 800323a:	d0b6      	beq.n	80031aa <__ssvfiscanf_r+0x1e2>
 800323c:	e79c      	b.n	8003178 <__ssvfiscanf_r+0x1b0>
 800323e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003240:	3201      	adds	r2, #1
 8003242:	9245      	str	r2, [sp, #276]	; 0x114
 8003244:	6862      	ldr	r2, [r4, #4]
 8003246:	3a01      	subs	r2, #1
 8003248:	2a00      	cmp	r2, #0
 800324a:	6062      	str	r2, [r4, #4]
 800324c:	dd02      	ble.n	8003254 <__ssvfiscanf_r+0x28c>
 800324e:	3301      	adds	r3, #1
 8003250:	6023      	str	r3, [r4, #0]
 8003252:	e7ad      	b.n	80031b0 <__ssvfiscanf_r+0x1e8>
 8003254:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003256:	4621      	mov	r1, r4
 8003258:	4630      	mov	r0, r6
 800325a:	4798      	blx	r3
 800325c:	2800      	cmp	r0, #0
 800325e:	d0a7      	beq.n	80031b0 <__ssvfiscanf_r+0x1e8>
 8003260:	e78a      	b.n	8003178 <__ssvfiscanf_r+0x1b0>
 8003262:	2b04      	cmp	r3, #4
 8003264:	dc0e      	bgt.n	8003284 <__ssvfiscanf_r+0x2bc>
 8003266:	466b      	mov	r3, sp
 8003268:	4622      	mov	r2, r4
 800326a:	a941      	add	r1, sp, #260	; 0x104
 800326c:	4630      	mov	r0, r6
 800326e:	f000 f87d 	bl	800336c <_scanf_i>
 8003272:	e7ab      	b.n	80031cc <__ssvfiscanf_r+0x204>
 8003274:	08002f15 	.word	0x08002f15
 8003278:	08002f8f 	.word	0x08002f8f
 800327c:	08003b48 	.word	0x08003b48
 8003280:	08003b28 	.word	0x08003b28
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <__ssvfiscanf_r+0x2ec>)
 8003286:	2b00      	cmp	r3, #0
 8003288:	f43f aec5 	beq.w	8003016 <__ssvfiscanf_r+0x4e>
 800328c:	466b      	mov	r3, sp
 800328e:	4622      	mov	r2, r4
 8003290:	a941      	add	r1, sp, #260	; 0x104
 8003292:	4630      	mov	r0, r6
 8003294:	f3af 8000 	nop.w
 8003298:	e798      	b.n	80031cc <__ssvfiscanf_r+0x204>
 800329a:	89a3      	ldrh	r3, [r4, #12]
 800329c:	f013 0f40 	tst.w	r3, #64	; 0x40
 80032a0:	bf18      	it	ne
 80032a2:	f04f 30ff 	movne.w	r0, #4294967295
 80032a6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80032aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ae:	9844      	ldr	r0, [sp, #272]	; 0x110
 80032b0:	e7f9      	b.n	80032a6 <__ssvfiscanf_r+0x2de>
 80032b2:	bf00      	nop
 80032b4:	00000000 	.word	0x00000000

080032b8 <_scanf_chars>:
 80032b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032bc:	4615      	mov	r5, r2
 80032be:	688a      	ldr	r2, [r1, #8]
 80032c0:	4680      	mov	r8, r0
 80032c2:	460c      	mov	r4, r1
 80032c4:	b932      	cbnz	r2, 80032d4 <_scanf_chars+0x1c>
 80032c6:	698a      	ldr	r2, [r1, #24]
 80032c8:	2a00      	cmp	r2, #0
 80032ca:	bf0c      	ite	eq
 80032cc:	2201      	moveq	r2, #1
 80032ce:	f04f 32ff 	movne.w	r2, #4294967295
 80032d2:	608a      	str	r2, [r1, #8]
 80032d4:	6822      	ldr	r2, [r4, #0]
 80032d6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003368 <_scanf_chars+0xb0>
 80032da:	06d1      	lsls	r1, r2, #27
 80032dc:	bf5f      	itttt	pl
 80032de:	681a      	ldrpl	r2, [r3, #0]
 80032e0:	1d11      	addpl	r1, r2, #4
 80032e2:	6019      	strpl	r1, [r3, #0]
 80032e4:	6816      	ldrpl	r6, [r2, #0]
 80032e6:	2700      	movs	r7, #0
 80032e8:	69a0      	ldr	r0, [r4, #24]
 80032ea:	b188      	cbz	r0, 8003310 <_scanf_chars+0x58>
 80032ec:	2801      	cmp	r0, #1
 80032ee:	d107      	bne.n	8003300 <_scanf_chars+0x48>
 80032f0:	682a      	ldr	r2, [r5, #0]
 80032f2:	7811      	ldrb	r1, [r2, #0]
 80032f4:	6962      	ldr	r2, [r4, #20]
 80032f6:	5c52      	ldrb	r2, [r2, r1]
 80032f8:	b952      	cbnz	r2, 8003310 <_scanf_chars+0x58>
 80032fa:	2f00      	cmp	r7, #0
 80032fc:	d031      	beq.n	8003362 <_scanf_chars+0xaa>
 80032fe:	e022      	b.n	8003346 <_scanf_chars+0x8e>
 8003300:	2802      	cmp	r0, #2
 8003302:	d120      	bne.n	8003346 <_scanf_chars+0x8e>
 8003304:	682b      	ldr	r3, [r5, #0]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	f813 3009 	ldrb.w	r3, [r3, r9]
 800330c:	071b      	lsls	r3, r3, #28
 800330e:	d41a      	bmi.n	8003346 <_scanf_chars+0x8e>
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	06da      	lsls	r2, r3, #27
 8003314:	bf5e      	ittt	pl
 8003316:	682b      	ldrpl	r3, [r5, #0]
 8003318:	781b      	ldrbpl	r3, [r3, #0]
 800331a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800331e:	682a      	ldr	r2, [r5, #0]
 8003320:	686b      	ldr	r3, [r5, #4]
 8003322:	3201      	adds	r2, #1
 8003324:	602a      	str	r2, [r5, #0]
 8003326:	68a2      	ldr	r2, [r4, #8]
 8003328:	3b01      	subs	r3, #1
 800332a:	3a01      	subs	r2, #1
 800332c:	606b      	str	r3, [r5, #4]
 800332e:	3701      	adds	r7, #1
 8003330:	60a2      	str	r2, [r4, #8]
 8003332:	b142      	cbz	r2, 8003346 <_scanf_chars+0x8e>
 8003334:	2b00      	cmp	r3, #0
 8003336:	dcd7      	bgt.n	80032e8 <_scanf_chars+0x30>
 8003338:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800333c:	4629      	mov	r1, r5
 800333e:	4640      	mov	r0, r8
 8003340:	4798      	blx	r3
 8003342:	2800      	cmp	r0, #0
 8003344:	d0d0      	beq.n	80032e8 <_scanf_chars+0x30>
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	f013 0310 	ands.w	r3, r3, #16
 800334c:	d105      	bne.n	800335a <_scanf_chars+0xa2>
 800334e:	68e2      	ldr	r2, [r4, #12]
 8003350:	3201      	adds	r2, #1
 8003352:	60e2      	str	r2, [r4, #12]
 8003354:	69a2      	ldr	r2, [r4, #24]
 8003356:	b102      	cbz	r2, 800335a <_scanf_chars+0xa2>
 8003358:	7033      	strb	r3, [r6, #0]
 800335a:	6923      	ldr	r3, [r4, #16]
 800335c:	443b      	add	r3, r7
 800335e:	6123      	str	r3, [r4, #16]
 8003360:	2000      	movs	r0, #0
 8003362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003366:	bf00      	nop
 8003368:	08003b48 	.word	0x08003b48

0800336c <_scanf_i>:
 800336c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003370:	4698      	mov	r8, r3
 8003372:	4b76      	ldr	r3, [pc, #472]	; (800354c <_scanf_i+0x1e0>)
 8003374:	460c      	mov	r4, r1
 8003376:	4682      	mov	sl, r0
 8003378:	4616      	mov	r6, r2
 800337a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800337e:	b087      	sub	sp, #28
 8003380:	ab03      	add	r3, sp, #12
 8003382:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003386:	4b72      	ldr	r3, [pc, #456]	; (8003550 <_scanf_i+0x1e4>)
 8003388:	69a1      	ldr	r1, [r4, #24]
 800338a:	4a72      	ldr	r2, [pc, #456]	; (8003554 <_scanf_i+0x1e8>)
 800338c:	2903      	cmp	r1, #3
 800338e:	bf18      	it	ne
 8003390:	461a      	movne	r2, r3
 8003392:	68a3      	ldr	r3, [r4, #8]
 8003394:	9201      	str	r2, [sp, #4]
 8003396:	1e5a      	subs	r2, r3, #1
 8003398:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800339c:	bf88      	it	hi
 800339e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80033a2:	4627      	mov	r7, r4
 80033a4:	bf82      	ittt	hi
 80033a6:	eb03 0905 	addhi.w	r9, r3, r5
 80033aa:	f240 135d 	movwhi	r3, #349	; 0x15d
 80033ae:	60a3      	strhi	r3, [r4, #8]
 80033b0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80033b4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80033b8:	bf98      	it	ls
 80033ba:	f04f 0900 	movls.w	r9, #0
 80033be:	6023      	str	r3, [r4, #0]
 80033c0:	463d      	mov	r5, r7
 80033c2:	f04f 0b00 	mov.w	fp, #0
 80033c6:	6831      	ldr	r1, [r6, #0]
 80033c8:	ab03      	add	r3, sp, #12
 80033ca:	7809      	ldrb	r1, [r1, #0]
 80033cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f7fc ff05 	bl	80001e0 <memchr>
 80033d6:	b328      	cbz	r0, 8003424 <_scanf_i+0xb8>
 80033d8:	f1bb 0f01 	cmp.w	fp, #1
 80033dc:	d159      	bne.n	8003492 <_scanf_i+0x126>
 80033de:	6862      	ldr	r2, [r4, #4]
 80033e0:	b92a      	cbnz	r2, 80033ee <_scanf_i+0x82>
 80033e2:	6822      	ldr	r2, [r4, #0]
 80033e4:	2308      	movs	r3, #8
 80033e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ea:	6063      	str	r3, [r4, #4]
 80033ec:	6022      	str	r2, [r4, #0]
 80033ee:	6822      	ldr	r2, [r4, #0]
 80033f0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80033f4:	6022      	str	r2, [r4, #0]
 80033f6:	68a2      	ldr	r2, [r4, #8]
 80033f8:	1e51      	subs	r1, r2, #1
 80033fa:	60a1      	str	r1, [r4, #8]
 80033fc:	b192      	cbz	r2, 8003424 <_scanf_i+0xb8>
 80033fe:	6832      	ldr	r2, [r6, #0]
 8003400:	1c51      	adds	r1, r2, #1
 8003402:	6031      	str	r1, [r6, #0]
 8003404:	7812      	ldrb	r2, [r2, #0]
 8003406:	f805 2b01 	strb.w	r2, [r5], #1
 800340a:	6872      	ldr	r2, [r6, #4]
 800340c:	3a01      	subs	r2, #1
 800340e:	2a00      	cmp	r2, #0
 8003410:	6072      	str	r2, [r6, #4]
 8003412:	dc07      	bgt.n	8003424 <_scanf_i+0xb8>
 8003414:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003418:	4631      	mov	r1, r6
 800341a:	4650      	mov	r0, sl
 800341c:	4790      	blx	r2
 800341e:	2800      	cmp	r0, #0
 8003420:	f040 8085 	bne.w	800352e <_scanf_i+0x1c2>
 8003424:	f10b 0b01 	add.w	fp, fp, #1
 8003428:	f1bb 0f03 	cmp.w	fp, #3
 800342c:	d1cb      	bne.n	80033c6 <_scanf_i+0x5a>
 800342e:	6863      	ldr	r3, [r4, #4]
 8003430:	b90b      	cbnz	r3, 8003436 <_scanf_i+0xca>
 8003432:	230a      	movs	r3, #10
 8003434:	6063      	str	r3, [r4, #4]
 8003436:	6863      	ldr	r3, [r4, #4]
 8003438:	4947      	ldr	r1, [pc, #284]	; (8003558 <_scanf_i+0x1ec>)
 800343a:	6960      	ldr	r0, [r4, #20]
 800343c:	1ac9      	subs	r1, r1, r3
 800343e:	f000 f88d 	bl	800355c <__sccl>
 8003442:	f04f 0b00 	mov.w	fp, #0
 8003446:	68a3      	ldr	r3, [r4, #8]
 8003448:	6822      	ldr	r2, [r4, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d03d      	beq.n	80034ca <_scanf_i+0x15e>
 800344e:	6831      	ldr	r1, [r6, #0]
 8003450:	6960      	ldr	r0, [r4, #20]
 8003452:	f891 c000 	ldrb.w	ip, [r1]
 8003456:	f810 000c 	ldrb.w	r0, [r0, ip]
 800345a:	2800      	cmp	r0, #0
 800345c:	d035      	beq.n	80034ca <_scanf_i+0x15e>
 800345e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003462:	d124      	bne.n	80034ae <_scanf_i+0x142>
 8003464:	0510      	lsls	r0, r2, #20
 8003466:	d522      	bpl.n	80034ae <_scanf_i+0x142>
 8003468:	f10b 0b01 	add.w	fp, fp, #1
 800346c:	f1b9 0f00 	cmp.w	r9, #0
 8003470:	d003      	beq.n	800347a <_scanf_i+0x10e>
 8003472:	3301      	adds	r3, #1
 8003474:	f109 39ff 	add.w	r9, r9, #4294967295
 8003478:	60a3      	str	r3, [r4, #8]
 800347a:	6873      	ldr	r3, [r6, #4]
 800347c:	3b01      	subs	r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	6073      	str	r3, [r6, #4]
 8003482:	dd1b      	ble.n	80034bc <_scanf_i+0x150>
 8003484:	6833      	ldr	r3, [r6, #0]
 8003486:	3301      	adds	r3, #1
 8003488:	6033      	str	r3, [r6, #0]
 800348a:	68a3      	ldr	r3, [r4, #8]
 800348c:	3b01      	subs	r3, #1
 800348e:	60a3      	str	r3, [r4, #8]
 8003490:	e7d9      	b.n	8003446 <_scanf_i+0xda>
 8003492:	f1bb 0f02 	cmp.w	fp, #2
 8003496:	d1ae      	bne.n	80033f6 <_scanf_i+0x8a>
 8003498:	6822      	ldr	r2, [r4, #0]
 800349a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800349e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80034a2:	d1bf      	bne.n	8003424 <_scanf_i+0xb8>
 80034a4:	2310      	movs	r3, #16
 80034a6:	6063      	str	r3, [r4, #4]
 80034a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ac:	e7a2      	b.n	80033f4 <_scanf_i+0x88>
 80034ae:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80034b2:	6022      	str	r2, [r4, #0]
 80034b4:	780b      	ldrb	r3, [r1, #0]
 80034b6:	f805 3b01 	strb.w	r3, [r5], #1
 80034ba:	e7de      	b.n	800347a <_scanf_i+0x10e>
 80034bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80034c0:	4631      	mov	r1, r6
 80034c2:	4650      	mov	r0, sl
 80034c4:	4798      	blx	r3
 80034c6:	2800      	cmp	r0, #0
 80034c8:	d0df      	beq.n	800348a <_scanf_i+0x11e>
 80034ca:	6823      	ldr	r3, [r4, #0]
 80034cc:	05db      	lsls	r3, r3, #23
 80034ce:	d50d      	bpl.n	80034ec <_scanf_i+0x180>
 80034d0:	42bd      	cmp	r5, r7
 80034d2:	d909      	bls.n	80034e8 <_scanf_i+0x17c>
 80034d4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80034d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80034dc:	4632      	mov	r2, r6
 80034de:	4650      	mov	r0, sl
 80034e0:	4798      	blx	r3
 80034e2:	f105 39ff 	add.w	r9, r5, #4294967295
 80034e6:	464d      	mov	r5, r9
 80034e8:	42bd      	cmp	r5, r7
 80034ea:	d02d      	beq.n	8003548 <_scanf_i+0x1dc>
 80034ec:	6822      	ldr	r2, [r4, #0]
 80034ee:	f012 0210 	ands.w	r2, r2, #16
 80034f2:	d113      	bne.n	800351c <_scanf_i+0x1b0>
 80034f4:	702a      	strb	r2, [r5, #0]
 80034f6:	6863      	ldr	r3, [r4, #4]
 80034f8:	9e01      	ldr	r6, [sp, #4]
 80034fa:	4639      	mov	r1, r7
 80034fc:	4650      	mov	r0, sl
 80034fe:	47b0      	blx	r6
 8003500:	6821      	ldr	r1, [r4, #0]
 8003502:	f8d8 3000 	ldr.w	r3, [r8]
 8003506:	f011 0f20 	tst.w	r1, #32
 800350a:	d013      	beq.n	8003534 <_scanf_i+0x1c8>
 800350c:	1d1a      	adds	r2, r3, #4
 800350e:	f8c8 2000 	str.w	r2, [r8]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6018      	str	r0, [r3, #0]
 8003516:	68e3      	ldr	r3, [r4, #12]
 8003518:	3301      	adds	r3, #1
 800351a:	60e3      	str	r3, [r4, #12]
 800351c:	1bed      	subs	r5, r5, r7
 800351e:	44ab      	add	fp, r5
 8003520:	6925      	ldr	r5, [r4, #16]
 8003522:	445d      	add	r5, fp
 8003524:	6125      	str	r5, [r4, #16]
 8003526:	2000      	movs	r0, #0
 8003528:	b007      	add	sp, #28
 800352a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800352e:	f04f 0b00 	mov.w	fp, #0
 8003532:	e7ca      	b.n	80034ca <_scanf_i+0x15e>
 8003534:	1d1a      	adds	r2, r3, #4
 8003536:	f8c8 2000 	str.w	r2, [r8]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f011 0f01 	tst.w	r1, #1
 8003540:	bf14      	ite	ne
 8003542:	8018      	strhne	r0, [r3, #0]
 8003544:	6018      	streq	r0, [r3, #0]
 8003546:	e7e6      	b.n	8003516 <_scanf_i+0x1aa>
 8003548:	2001      	movs	r0, #1
 800354a:	e7ed      	b.n	8003528 <_scanf_i+0x1bc>
 800354c:	08003b04 	.word	0x08003b04
 8003550:	080037b9 	.word	0x080037b9
 8003554:	080036d1 	.word	0x080036d1
 8003558:	08003b45 	.word	0x08003b45

0800355c <__sccl>:
 800355c:	b570      	push	{r4, r5, r6, lr}
 800355e:	780b      	ldrb	r3, [r1, #0]
 8003560:	4604      	mov	r4, r0
 8003562:	2b5e      	cmp	r3, #94	; 0x5e
 8003564:	bf0b      	itete	eq
 8003566:	784b      	ldrbeq	r3, [r1, #1]
 8003568:	1c48      	addne	r0, r1, #1
 800356a:	1c88      	addeq	r0, r1, #2
 800356c:	2200      	movne	r2, #0
 800356e:	bf08      	it	eq
 8003570:	2201      	moveq	r2, #1
 8003572:	1e61      	subs	r1, r4, #1
 8003574:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003578:	f801 2f01 	strb.w	r2, [r1, #1]!
 800357c:	42a9      	cmp	r1, r5
 800357e:	d1fb      	bne.n	8003578 <__sccl+0x1c>
 8003580:	b90b      	cbnz	r3, 8003586 <__sccl+0x2a>
 8003582:	3801      	subs	r0, #1
 8003584:	bd70      	pop	{r4, r5, r6, pc}
 8003586:	f082 0201 	eor.w	r2, r2, #1
 800358a:	54e2      	strb	r2, [r4, r3]
 800358c:	4605      	mov	r5, r0
 800358e:	4628      	mov	r0, r5
 8003590:	f810 1b01 	ldrb.w	r1, [r0], #1
 8003594:	292d      	cmp	r1, #45	; 0x2d
 8003596:	d006      	beq.n	80035a6 <__sccl+0x4a>
 8003598:	295d      	cmp	r1, #93	; 0x5d
 800359a:	d0f3      	beq.n	8003584 <__sccl+0x28>
 800359c:	b909      	cbnz	r1, 80035a2 <__sccl+0x46>
 800359e:	4628      	mov	r0, r5
 80035a0:	e7f0      	b.n	8003584 <__sccl+0x28>
 80035a2:	460b      	mov	r3, r1
 80035a4:	e7f1      	b.n	800358a <__sccl+0x2e>
 80035a6:	786e      	ldrb	r6, [r5, #1]
 80035a8:	2e5d      	cmp	r6, #93	; 0x5d
 80035aa:	d0fa      	beq.n	80035a2 <__sccl+0x46>
 80035ac:	42b3      	cmp	r3, r6
 80035ae:	dcf8      	bgt.n	80035a2 <__sccl+0x46>
 80035b0:	3502      	adds	r5, #2
 80035b2:	4619      	mov	r1, r3
 80035b4:	3101      	adds	r1, #1
 80035b6:	428e      	cmp	r6, r1
 80035b8:	5462      	strb	r2, [r4, r1]
 80035ba:	dcfb      	bgt.n	80035b4 <__sccl+0x58>
 80035bc:	1af1      	subs	r1, r6, r3
 80035be:	3901      	subs	r1, #1
 80035c0:	1c58      	adds	r0, r3, #1
 80035c2:	42b3      	cmp	r3, r6
 80035c4:	bfa8      	it	ge
 80035c6:	2100      	movge	r1, #0
 80035c8:	1843      	adds	r3, r0, r1
 80035ca:	e7e0      	b.n	800358e <__sccl+0x32>

080035cc <_strtol_l.constprop.0>:
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035d2:	d001      	beq.n	80035d8 <_strtol_l.constprop.0+0xc>
 80035d4:	2b24      	cmp	r3, #36	; 0x24
 80035d6:	d906      	bls.n	80035e6 <_strtol_l.constprop.0+0x1a>
 80035d8:	f7ff fc2e 	bl	8002e38 <__errno>
 80035dc:	2316      	movs	r3, #22
 80035de:	6003      	str	r3, [r0, #0]
 80035e0:	2000      	movs	r0, #0
 80035e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80036cc <_strtol_l.constprop.0+0x100>
 80035ea:	460d      	mov	r5, r1
 80035ec:	462e      	mov	r6, r5
 80035ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80035f2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80035f6:	f017 0708 	ands.w	r7, r7, #8
 80035fa:	d1f7      	bne.n	80035ec <_strtol_l.constprop.0+0x20>
 80035fc:	2c2d      	cmp	r4, #45	; 0x2d
 80035fe:	d132      	bne.n	8003666 <_strtol_l.constprop.0+0x9a>
 8003600:	782c      	ldrb	r4, [r5, #0]
 8003602:	2701      	movs	r7, #1
 8003604:	1cb5      	adds	r5, r6, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d05b      	beq.n	80036c2 <_strtol_l.constprop.0+0xf6>
 800360a:	2b10      	cmp	r3, #16
 800360c:	d109      	bne.n	8003622 <_strtol_l.constprop.0+0x56>
 800360e:	2c30      	cmp	r4, #48	; 0x30
 8003610:	d107      	bne.n	8003622 <_strtol_l.constprop.0+0x56>
 8003612:	782c      	ldrb	r4, [r5, #0]
 8003614:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003618:	2c58      	cmp	r4, #88	; 0x58
 800361a:	d14d      	bne.n	80036b8 <_strtol_l.constprop.0+0xec>
 800361c:	786c      	ldrb	r4, [r5, #1]
 800361e:	2310      	movs	r3, #16
 8003620:	3502      	adds	r5, #2
 8003622:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003626:	f108 38ff 	add.w	r8, r8, #4294967295
 800362a:	f04f 0c00 	mov.w	ip, #0
 800362e:	fbb8 f9f3 	udiv	r9, r8, r3
 8003632:	4666      	mov	r6, ip
 8003634:	fb03 8a19 	mls	sl, r3, r9, r8
 8003638:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800363c:	f1be 0f09 	cmp.w	lr, #9
 8003640:	d816      	bhi.n	8003670 <_strtol_l.constprop.0+0xa4>
 8003642:	4674      	mov	r4, lr
 8003644:	42a3      	cmp	r3, r4
 8003646:	dd24      	ble.n	8003692 <_strtol_l.constprop.0+0xc6>
 8003648:	f1bc 0f00 	cmp.w	ip, #0
 800364c:	db1e      	blt.n	800368c <_strtol_l.constprop.0+0xc0>
 800364e:	45b1      	cmp	r9, r6
 8003650:	d31c      	bcc.n	800368c <_strtol_l.constprop.0+0xc0>
 8003652:	d101      	bne.n	8003658 <_strtol_l.constprop.0+0x8c>
 8003654:	45a2      	cmp	sl, r4
 8003656:	db19      	blt.n	800368c <_strtol_l.constprop.0+0xc0>
 8003658:	fb06 4603 	mla	r6, r6, r3, r4
 800365c:	f04f 0c01 	mov.w	ip, #1
 8003660:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003664:	e7e8      	b.n	8003638 <_strtol_l.constprop.0+0x6c>
 8003666:	2c2b      	cmp	r4, #43	; 0x2b
 8003668:	bf04      	itt	eq
 800366a:	782c      	ldrbeq	r4, [r5, #0]
 800366c:	1cb5      	addeq	r5, r6, #2
 800366e:	e7ca      	b.n	8003606 <_strtol_l.constprop.0+0x3a>
 8003670:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003674:	f1be 0f19 	cmp.w	lr, #25
 8003678:	d801      	bhi.n	800367e <_strtol_l.constprop.0+0xb2>
 800367a:	3c37      	subs	r4, #55	; 0x37
 800367c:	e7e2      	b.n	8003644 <_strtol_l.constprop.0+0x78>
 800367e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003682:	f1be 0f19 	cmp.w	lr, #25
 8003686:	d804      	bhi.n	8003692 <_strtol_l.constprop.0+0xc6>
 8003688:	3c57      	subs	r4, #87	; 0x57
 800368a:	e7db      	b.n	8003644 <_strtol_l.constprop.0+0x78>
 800368c:	f04f 3cff 	mov.w	ip, #4294967295
 8003690:	e7e6      	b.n	8003660 <_strtol_l.constprop.0+0x94>
 8003692:	f1bc 0f00 	cmp.w	ip, #0
 8003696:	da05      	bge.n	80036a4 <_strtol_l.constprop.0+0xd8>
 8003698:	2322      	movs	r3, #34	; 0x22
 800369a:	6003      	str	r3, [r0, #0]
 800369c:	4646      	mov	r6, r8
 800369e:	b942      	cbnz	r2, 80036b2 <_strtol_l.constprop.0+0xe6>
 80036a0:	4630      	mov	r0, r6
 80036a2:	e79e      	b.n	80035e2 <_strtol_l.constprop.0+0x16>
 80036a4:	b107      	cbz	r7, 80036a8 <_strtol_l.constprop.0+0xdc>
 80036a6:	4276      	negs	r6, r6
 80036a8:	2a00      	cmp	r2, #0
 80036aa:	d0f9      	beq.n	80036a0 <_strtol_l.constprop.0+0xd4>
 80036ac:	f1bc 0f00 	cmp.w	ip, #0
 80036b0:	d000      	beq.n	80036b4 <_strtol_l.constprop.0+0xe8>
 80036b2:	1e69      	subs	r1, r5, #1
 80036b4:	6011      	str	r1, [r2, #0]
 80036b6:	e7f3      	b.n	80036a0 <_strtol_l.constprop.0+0xd4>
 80036b8:	2430      	movs	r4, #48	; 0x30
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1b1      	bne.n	8003622 <_strtol_l.constprop.0+0x56>
 80036be:	2308      	movs	r3, #8
 80036c0:	e7af      	b.n	8003622 <_strtol_l.constprop.0+0x56>
 80036c2:	2c30      	cmp	r4, #48	; 0x30
 80036c4:	d0a5      	beq.n	8003612 <_strtol_l.constprop.0+0x46>
 80036c6:	230a      	movs	r3, #10
 80036c8:	e7ab      	b.n	8003622 <_strtol_l.constprop.0+0x56>
 80036ca:	bf00      	nop
 80036cc:	08003b48 	.word	0x08003b48

080036d0 <_strtol_r>:
 80036d0:	f7ff bf7c 	b.w	80035cc <_strtol_l.constprop.0>

080036d4 <_strtoul_l.constprop.0>:
 80036d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036d8:	4f36      	ldr	r7, [pc, #216]	; (80037b4 <_strtoul_l.constprop.0+0xe0>)
 80036da:	4686      	mov	lr, r0
 80036dc:	460d      	mov	r5, r1
 80036de:	4628      	mov	r0, r5
 80036e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80036e4:	5de6      	ldrb	r6, [r4, r7]
 80036e6:	f016 0608 	ands.w	r6, r6, #8
 80036ea:	d1f8      	bne.n	80036de <_strtoul_l.constprop.0+0xa>
 80036ec:	2c2d      	cmp	r4, #45	; 0x2d
 80036ee:	d12f      	bne.n	8003750 <_strtoul_l.constprop.0+0x7c>
 80036f0:	782c      	ldrb	r4, [r5, #0]
 80036f2:	2601      	movs	r6, #1
 80036f4:	1c85      	adds	r5, r0, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d057      	beq.n	80037aa <_strtoul_l.constprop.0+0xd6>
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d109      	bne.n	8003712 <_strtoul_l.constprop.0+0x3e>
 80036fe:	2c30      	cmp	r4, #48	; 0x30
 8003700:	d107      	bne.n	8003712 <_strtoul_l.constprop.0+0x3e>
 8003702:	7828      	ldrb	r0, [r5, #0]
 8003704:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003708:	2858      	cmp	r0, #88	; 0x58
 800370a:	d149      	bne.n	80037a0 <_strtoul_l.constprop.0+0xcc>
 800370c:	786c      	ldrb	r4, [r5, #1]
 800370e:	2310      	movs	r3, #16
 8003710:	3502      	adds	r5, #2
 8003712:	f04f 38ff 	mov.w	r8, #4294967295
 8003716:	2700      	movs	r7, #0
 8003718:	fbb8 f8f3 	udiv	r8, r8, r3
 800371c:	fb03 f908 	mul.w	r9, r3, r8
 8003720:	ea6f 0909 	mvn.w	r9, r9
 8003724:	4638      	mov	r0, r7
 8003726:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800372a:	f1bc 0f09 	cmp.w	ip, #9
 800372e:	d814      	bhi.n	800375a <_strtoul_l.constprop.0+0x86>
 8003730:	4664      	mov	r4, ip
 8003732:	42a3      	cmp	r3, r4
 8003734:	dd22      	ble.n	800377c <_strtoul_l.constprop.0+0xa8>
 8003736:	2f00      	cmp	r7, #0
 8003738:	db1d      	blt.n	8003776 <_strtoul_l.constprop.0+0xa2>
 800373a:	4580      	cmp	r8, r0
 800373c:	d31b      	bcc.n	8003776 <_strtoul_l.constprop.0+0xa2>
 800373e:	d101      	bne.n	8003744 <_strtoul_l.constprop.0+0x70>
 8003740:	45a1      	cmp	r9, r4
 8003742:	db18      	blt.n	8003776 <_strtoul_l.constprop.0+0xa2>
 8003744:	fb00 4003 	mla	r0, r0, r3, r4
 8003748:	2701      	movs	r7, #1
 800374a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800374e:	e7ea      	b.n	8003726 <_strtoul_l.constprop.0+0x52>
 8003750:	2c2b      	cmp	r4, #43	; 0x2b
 8003752:	bf04      	itt	eq
 8003754:	782c      	ldrbeq	r4, [r5, #0]
 8003756:	1c85      	addeq	r5, r0, #2
 8003758:	e7cd      	b.n	80036f6 <_strtoul_l.constprop.0+0x22>
 800375a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800375e:	f1bc 0f19 	cmp.w	ip, #25
 8003762:	d801      	bhi.n	8003768 <_strtoul_l.constprop.0+0x94>
 8003764:	3c37      	subs	r4, #55	; 0x37
 8003766:	e7e4      	b.n	8003732 <_strtoul_l.constprop.0+0x5e>
 8003768:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800376c:	f1bc 0f19 	cmp.w	ip, #25
 8003770:	d804      	bhi.n	800377c <_strtoul_l.constprop.0+0xa8>
 8003772:	3c57      	subs	r4, #87	; 0x57
 8003774:	e7dd      	b.n	8003732 <_strtoul_l.constprop.0+0x5e>
 8003776:	f04f 37ff 	mov.w	r7, #4294967295
 800377a:	e7e6      	b.n	800374a <_strtoul_l.constprop.0+0x76>
 800377c:	2f00      	cmp	r7, #0
 800377e:	da07      	bge.n	8003790 <_strtoul_l.constprop.0+0xbc>
 8003780:	2322      	movs	r3, #34	; 0x22
 8003782:	f8ce 3000 	str.w	r3, [lr]
 8003786:	f04f 30ff 	mov.w	r0, #4294967295
 800378a:	b932      	cbnz	r2, 800379a <_strtoul_l.constprop.0+0xc6>
 800378c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003790:	b106      	cbz	r6, 8003794 <_strtoul_l.constprop.0+0xc0>
 8003792:	4240      	negs	r0, r0
 8003794:	2a00      	cmp	r2, #0
 8003796:	d0f9      	beq.n	800378c <_strtoul_l.constprop.0+0xb8>
 8003798:	b107      	cbz	r7, 800379c <_strtoul_l.constprop.0+0xc8>
 800379a:	1e69      	subs	r1, r5, #1
 800379c:	6011      	str	r1, [r2, #0]
 800379e:	e7f5      	b.n	800378c <_strtoul_l.constprop.0+0xb8>
 80037a0:	2430      	movs	r4, #48	; 0x30
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1b5      	bne.n	8003712 <_strtoul_l.constprop.0+0x3e>
 80037a6:	2308      	movs	r3, #8
 80037a8:	e7b3      	b.n	8003712 <_strtoul_l.constprop.0+0x3e>
 80037aa:	2c30      	cmp	r4, #48	; 0x30
 80037ac:	d0a9      	beq.n	8003702 <_strtoul_l.constprop.0+0x2e>
 80037ae:	230a      	movs	r3, #10
 80037b0:	e7af      	b.n	8003712 <_strtoul_l.constprop.0+0x3e>
 80037b2:	bf00      	nop
 80037b4:	08003b48 	.word	0x08003b48

080037b8 <_strtoul_r>:
 80037b8:	f7ff bf8c 	b.w	80036d4 <_strtoul_l.constprop.0>

080037bc <__submore>:
 80037bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037c0:	460c      	mov	r4, r1
 80037c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80037c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037c8:	4299      	cmp	r1, r3
 80037ca:	d11d      	bne.n	8003808 <__submore+0x4c>
 80037cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037d0:	f000 f89c 	bl	800390c <_malloc_r>
 80037d4:	b918      	cbnz	r0, 80037de <__submore+0x22>
 80037d6:	f04f 30ff 	mov.w	r0, #4294967295
 80037da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037e2:	63a3      	str	r3, [r4, #56]	; 0x38
 80037e4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80037e8:	6360      	str	r0, [r4, #52]	; 0x34
 80037ea:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80037ee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80037f2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80037f6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80037fa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80037fe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003802:	6020      	str	r0, [r4, #0]
 8003804:	2000      	movs	r0, #0
 8003806:	e7e8      	b.n	80037da <__submore+0x1e>
 8003808:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800380a:	0077      	lsls	r7, r6, #1
 800380c:	463a      	mov	r2, r7
 800380e:	f000 f8f1 	bl	80039f4 <_realloc_r>
 8003812:	4605      	mov	r5, r0
 8003814:	2800      	cmp	r0, #0
 8003816:	d0de      	beq.n	80037d6 <__submore+0x1a>
 8003818:	eb00 0806 	add.w	r8, r0, r6
 800381c:	4601      	mov	r1, r0
 800381e:	4632      	mov	r2, r6
 8003820:	4640      	mov	r0, r8
 8003822:	f7ff fb33 	bl	8002e8c <memcpy>
 8003826:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800382a:	f8c4 8000 	str.w	r8, [r4]
 800382e:	e7e9      	b.n	8003804 <__submore+0x48>

08003830 <__retarget_lock_acquire_recursive>:
 8003830:	4770      	bx	lr

08003832 <__retarget_lock_release_recursive>:
 8003832:	4770      	bx	lr

08003834 <_free_r>:
 8003834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003836:	2900      	cmp	r1, #0
 8003838:	d044      	beq.n	80038c4 <_free_r+0x90>
 800383a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800383e:	9001      	str	r0, [sp, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	f1a1 0404 	sub.w	r4, r1, #4
 8003846:	bfb8      	it	lt
 8003848:	18e4      	addlt	r4, r4, r3
 800384a:	f000 f913 	bl	8003a74 <__malloc_lock>
 800384e:	4a1e      	ldr	r2, [pc, #120]	; (80038c8 <_free_r+0x94>)
 8003850:	9801      	ldr	r0, [sp, #4]
 8003852:	6813      	ldr	r3, [r2, #0]
 8003854:	b933      	cbnz	r3, 8003864 <_free_r+0x30>
 8003856:	6063      	str	r3, [r4, #4]
 8003858:	6014      	str	r4, [r2, #0]
 800385a:	b003      	add	sp, #12
 800385c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003860:	f000 b90e 	b.w	8003a80 <__malloc_unlock>
 8003864:	42a3      	cmp	r3, r4
 8003866:	d908      	bls.n	800387a <_free_r+0x46>
 8003868:	6825      	ldr	r5, [r4, #0]
 800386a:	1961      	adds	r1, r4, r5
 800386c:	428b      	cmp	r3, r1
 800386e:	bf01      	itttt	eq
 8003870:	6819      	ldreq	r1, [r3, #0]
 8003872:	685b      	ldreq	r3, [r3, #4]
 8003874:	1949      	addeq	r1, r1, r5
 8003876:	6021      	streq	r1, [r4, #0]
 8003878:	e7ed      	b.n	8003856 <_free_r+0x22>
 800387a:	461a      	mov	r2, r3
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	b10b      	cbz	r3, 8003884 <_free_r+0x50>
 8003880:	42a3      	cmp	r3, r4
 8003882:	d9fa      	bls.n	800387a <_free_r+0x46>
 8003884:	6811      	ldr	r1, [r2, #0]
 8003886:	1855      	adds	r5, r2, r1
 8003888:	42a5      	cmp	r5, r4
 800388a:	d10b      	bne.n	80038a4 <_free_r+0x70>
 800388c:	6824      	ldr	r4, [r4, #0]
 800388e:	4421      	add	r1, r4
 8003890:	1854      	adds	r4, r2, r1
 8003892:	42a3      	cmp	r3, r4
 8003894:	6011      	str	r1, [r2, #0]
 8003896:	d1e0      	bne.n	800385a <_free_r+0x26>
 8003898:	681c      	ldr	r4, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	6053      	str	r3, [r2, #4]
 800389e:	4421      	add	r1, r4
 80038a0:	6011      	str	r1, [r2, #0]
 80038a2:	e7da      	b.n	800385a <_free_r+0x26>
 80038a4:	d902      	bls.n	80038ac <_free_r+0x78>
 80038a6:	230c      	movs	r3, #12
 80038a8:	6003      	str	r3, [r0, #0]
 80038aa:	e7d6      	b.n	800385a <_free_r+0x26>
 80038ac:	6825      	ldr	r5, [r4, #0]
 80038ae:	1961      	adds	r1, r4, r5
 80038b0:	428b      	cmp	r3, r1
 80038b2:	bf04      	itt	eq
 80038b4:	6819      	ldreq	r1, [r3, #0]
 80038b6:	685b      	ldreq	r3, [r3, #4]
 80038b8:	6063      	str	r3, [r4, #4]
 80038ba:	bf04      	itt	eq
 80038bc:	1949      	addeq	r1, r1, r5
 80038be:	6021      	streq	r1, [r4, #0]
 80038c0:	6054      	str	r4, [r2, #4]
 80038c2:	e7ca      	b.n	800385a <_free_r+0x26>
 80038c4:	b003      	add	sp, #12
 80038c6:	bd30      	pop	{r4, r5, pc}
 80038c8:	200000e4 	.word	0x200000e4

080038cc <sbrk_aligned>:
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	4e0e      	ldr	r6, [pc, #56]	; (8003908 <sbrk_aligned+0x3c>)
 80038d0:	460c      	mov	r4, r1
 80038d2:	6831      	ldr	r1, [r6, #0]
 80038d4:	4605      	mov	r5, r0
 80038d6:	b911      	cbnz	r1, 80038de <sbrk_aligned+0x12>
 80038d8:	f000 f8bc 	bl	8003a54 <_sbrk_r>
 80038dc:	6030      	str	r0, [r6, #0]
 80038de:	4621      	mov	r1, r4
 80038e0:	4628      	mov	r0, r5
 80038e2:	f000 f8b7 	bl	8003a54 <_sbrk_r>
 80038e6:	1c43      	adds	r3, r0, #1
 80038e8:	d00a      	beq.n	8003900 <sbrk_aligned+0x34>
 80038ea:	1cc4      	adds	r4, r0, #3
 80038ec:	f024 0403 	bic.w	r4, r4, #3
 80038f0:	42a0      	cmp	r0, r4
 80038f2:	d007      	beq.n	8003904 <sbrk_aligned+0x38>
 80038f4:	1a21      	subs	r1, r4, r0
 80038f6:	4628      	mov	r0, r5
 80038f8:	f000 f8ac 	bl	8003a54 <_sbrk_r>
 80038fc:	3001      	adds	r0, #1
 80038fe:	d101      	bne.n	8003904 <sbrk_aligned+0x38>
 8003900:	f04f 34ff 	mov.w	r4, #4294967295
 8003904:	4620      	mov	r0, r4
 8003906:	bd70      	pop	{r4, r5, r6, pc}
 8003908:	200000e8 	.word	0x200000e8

0800390c <_malloc_r>:
 800390c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003910:	1ccd      	adds	r5, r1, #3
 8003912:	f025 0503 	bic.w	r5, r5, #3
 8003916:	3508      	adds	r5, #8
 8003918:	2d0c      	cmp	r5, #12
 800391a:	bf38      	it	cc
 800391c:	250c      	movcc	r5, #12
 800391e:	2d00      	cmp	r5, #0
 8003920:	4607      	mov	r7, r0
 8003922:	db01      	blt.n	8003928 <_malloc_r+0x1c>
 8003924:	42a9      	cmp	r1, r5
 8003926:	d905      	bls.n	8003934 <_malloc_r+0x28>
 8003928:	230c      	movs	r3, #12
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	2600      	movs	r6, #0
 800392e:	4630      	mov	r0, r6
 8003930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003934:	4e2e      	ldr	r6, [pc, #184]	; (80039f0 <_malloc_r+0xe4>)
 8003936:	f000 f89d 	bl	8003a74 <__malloc_lock>
 800393a:	6833      	ldr	r3, [r6, #0]
 800393c:	461c      	mov	r4, r3
 800393e:	bb34      	cbnz	r4, 800398e <_malloc_r+0x82>
 8003940:	4629      	mov	r1, r5
 8003942:	4638      	mov	r0, r7
 8003944:	f7ff ffc2 	bl	80038cc <sbrk_aligned>
 8003948:	1c43      	adds	r3, r0, #1
 800394a:	4604      	mov	r4, r0
 800394c:	d14d      	bne.n	80039ea <_malloc_r+0xde>
 800394e:	6834      	ldr	r4, [r6, #0]
 8003950:	4626      	mov	r6, r4
 8003952:	2e00      	cmp	r6, #0
 8003954:	d140      	bne.n	80039d8 <_malloc_r+0xcc>
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	4631      	mov	r1, r6
 800395a:	4638      	mov	r0, r7
 800395c:	eb04 0803 	add.w	r8, r4, r3
 8003960:	f000 f878 	bl	8003a54 <_sbrk_r>
 8003964:	4580      	cmp	r8, r0
 8003966:	d13a      	bne.n	80039de <_malloc_r+0xd2>
 8003968:	6821      	ldr	r1, [r4, #0]
 800396a:	3503      	adds	r5, #3
 800396c:	1a6d      	subs	r5, r5, r1
 800396e:	f025 0503 	bic.w	r5, r5, #3
 8003972:	3508      	adds	r5, #8
 8003974:	2d0c      	cmp	r5, #12
 8003976:	bf38      	it	cc
 8003978:	250c      	movcc	r5, #12
 800397a:	4629      	mov	r1, r5
 800397c:	4638      	mov	r0, r7
 800397e:	f7ff ffa5 	bl	80038cc <sbrk_aligned>
 8003982:	3001      	adds	r0, #1
 8003984:	d02b      	beq.n	80039de <_malloc_r+0xd2>
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	442b      	add	r3, r5
 800398a:	6023      	str	r3, [r4, #0]
 800398c:	e00e      	b.n	80039ac <_malloc_r+0xa0>
 800398e:	6822      	ldr	r2, [r4, #0]
 8003990:	1b52      	subs	r2, r2, r5
 8003992:	d41e      	bmi.n	80039d2 <_malloc_r+0xc6>
 8003994:	2a0b      	cmp	r2, #11
 8003996:	d916      	bls.n	80039c6 <_malloc_r+0xba>
 8003998:	1961      	adds	r1, r4, r5
 800399a:	42a3      	cmp	r3, r4
 800399c:	6025      	str	r5, [r4, #0]
 800399e:	bf18      	it	ne
 80039a0:	6059      	strne	r1, [r3, #4]
 80039a2:	6863      	ldr	r3, [r4, #4]
 80039a4:	bf08      	it	eq
 80039a6:	6031      	streq	r1, [r6, #0]
 80039a8:	5162      	str	r2, [r4, r5]
 80039aa:	604b      	str	r3, [r1, #4]
 80039ac:	4638      	mov	r0, r7
 80039ae:	f104 060b 	add.w	r6, r4, #11
 80039b2:	f000 f865 	bl	8003a80 <__malloc_unlock>
 80039b6:	f026 0607 	bic.w	r6, r6, #7
 80039ba:	1d23      	adds	r3, r4, #4
 80039bc:	1af2      	subs	r2, r6, r3
 80039be:	d0b6      	beq.n	800392e <_malloc_r+0x22>
 80039c0:	1b9b      	subs	r3, r3, r6
 80039c2:	50a3      	str	r3, [r4, r2]
 80039c4:	e7b3      	b.n	800392e <_malloc_r+0x22>
 80039c6:	6862      	ldr	r2, [r4, #4]
 80039c8:	42a3      	cmp	r3, r4
 80039ca:	bf0c      	ite	eq
 80039cc:	6032      	streq	r2, [r6, #0]
 80039ce:	605a      	strne	r2, [r3, #4]
 80039d0:	e7ec      	b.n	80039ac <_malloc_r+0xa0>
 80039d2:	4623      	mov	r3, r4
 80039d4:	6864      	ldr	r4, [r4, #4]
 80039d6:	e7b2      	b.n	800393e <_malloc_r+0x32>
 80039d8:	4634      	mov	r4, r6
 80039da:	6876      	ldr	r6, [r6, #4]
 80039dc:	e7b9      	b.n	8003952 <_malloc_r+0x46>
 80039de:	230c      	movs	r3, #12
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	4638      	mov	r0, r7
 80039e4:	f000 f84c 	bl	8003a80 <__malloc_unlock>
 80039e8:	e7a1      	b.n	800392e <_malloc_r+0x22>
 80039ea:	6025      	str	r5, [r4, #0]
 80039ec:	e7de      	b.n	80039ac <_malloc_r+0xa0>
 80039ee:	bf00      	nop
 80039f0:	200000e4 	.word	0x200000e4

080039f4 <_realloc_r>:
 80039f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039f8:	4680      	mov	r8, r0
 80039fa:	4614      	mov	r4, r2
 80039fc:	460e      	mov	r6, r1
 80039fe:	b921      	cbnz	r1, 8003a0a <_realloc_r+0x16>
 8003a00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a04:	4611      	mov	r1, r2
 8003a06:	f7ff bf81 	b.w	800390c <_malloc_r>
 8003a0a:	b92a      	cbnz	r2, 8003a18 <_realloc_r+0x24>
 8003a0c:	f7ff ff12 	bl	8003834 <_free_r>
 8003a10:	4625      	mov	r5, r4
 8003a12:	4628      	mov	r0, r5
 8003a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a18:	f000 f838 	bl	8003a8c <_malloc_usable_size_r>
 8003a1c:	4284      	cmp	r4, r0
 8003a1e:	4607      	mov	r7, r0
 8003a20:	d802      	bhi.n	8003a28 <_realloc_r+0x34>
 8003a22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a26:	d812      	bhi.n	8003a4e <_realloc_r+0x5a>
 8003a28:	4621      	mov	r1, r4
 8003a2a:	4640      	mov	r0, r8
 8003a2c:	f7ff ff6e 	bl	800390c <_malloc_r>
 8003a30:	4605      	mov	r5, r0
 8003a32:	2800      	cmp	r0, #0
 8003a34:	d0ed      	beq.n	8003a12 <_realloc_r+0x1e>
 8003a36:	42bc      	cmp	r4, r7
 8003a38:	4622      	mov	r2, r4
 8003a3a:	4631      	mov	r1, r6
 8003a3c:	bf28      	it	cs
 8003a3e:	463a      	movcs	r2, r7
 8003a40:	f7ff fa24 	bl	8002e8c <memcpy>
 8003a44:	4631      	mov	r1, r6
 8003a46:	4640      	mov	r0, r8
 8003a48:	f7ff fef4 	bl	8003834 <_free_r>
 8003a4c:	e7e1      	b.n	8003a12 <_realloc_r+0x1e>
 8003a4e:	4635      	mov	r5, r6
 8003a50:	e7df      	b.n	8003a12 <_realloc_r+0x1e>
	...

08003a54 <_sbrk_r>:
 8003a54:	b538      	push	{r3, r4, r5, lr}
 8003a56:	4d06      	ldr	r5, [pc, #24]	; (8003a70 <_sbrk_r+0x1c>)
 8003a58:	2300      	movs	r3, #0
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	4608      	mov	r0, r1
 8003a5e:	602b      	str	r3, [r5, #0]
 8003a60:	f7fd f83a 	bl	8000ad8 <_sbrk>
 8003a64:	1c43      	adds	r3, r0, #1
 8003a66:	d102      	bne.n	8003a6e <_sbrk_r+0x1a>
 8003a68:	682b      	ldr	r3, [r5, #0]
 8003a6a:	b103      	cbz	r3, 8003a6e <_sbrk_r+0x1a>
 8003a6c:	6023      	str	r3, [r4, #0]
 8003a6e:	bd38      	pop	{r3, r4, r5, pc}
 8003a70:	200000dc 	.word	0x200000dc

08003a74 <__malloc_lock>:
 8003a74:	4801      	ldr	r0, [pc, #4]	; (8003a7c <__malloc_lock+0x8>)
 8003a76:	f7ff bedb 	b.w	8003830 <__retarget_lock_acquire_recursive>
 8003a7a:	bf00      	nop
 8003a7c:	200000e0 	.word	0x200000e0

08003a80 <__malloc_unlock>:
 8003a80:	4801      	ldr	r0, [pc, #4]	; (8003a88 <__malloc_unlock+0x8>)
 8003a82:	f7ff bed6 	b.w	8003832 <__retarget_lock_release_recursive>
 8003a86:	bf00      	nop
 8003a88:	200000e0 	.word	0x200000e0

08003a8c <_malloc_usable_size_r>:
 8003a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a90:	1f18      	subs	r0, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	bfbc      	itt	lt
 8003a96:	580b      	ldrlt	r3, [r1, r0]
 8003a98:	18c0      	addlt	r0, r0, r3
 8003a9a:	4770      	bx	lr

08003a9c <_init>:
 8003a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9e:	bf00      	nop
 8003aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aa2:	bc08      	pop	{r3}
 8003aa4:	469e      	mov	lr, r3
 8003aa6:	4770      	bx	lr

08003aa8 <_fini>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	bf00      	nop
 8003aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aae:	bc08      	pop	{r3}
 8003ab0:	469e      	mov	lr, r3
 8003ab2:	4770      	bx	lr
