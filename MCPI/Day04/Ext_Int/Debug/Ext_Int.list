
Ext_Int.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000568  08000568  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000568  08000568  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000568  08000568  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000568  08000568  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000568  08000568  00010568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800056c  0800056c  0001056c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001360  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000477  00000000  00000000  000213d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000f8  00000000  00000000  00021848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000a3  00000000  00000000  00021940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018fb1  00000000  00000000  000219e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000136f  00000000  00000000  0003a994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008bcc3  00000000  00000000  0003bd03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000248  00000000  00000000  000c79c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  000c7c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000550 	.word	0x08000550

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08000550 	.word	0x08000550

080001e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db0b      	blt.n	8000212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	f003 021f 	and.w	r2, r3, #31
 8000200:	4906      	ldr	r1, [pc, #24]	; (800021c <__NVIC_EnableIRQ+0x34>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	095b      	lsrs	r3, r3, #5
 8000208:	2001      	movs	r0, #1
 800020a:	fa00 f202 	lsl.w	r2, r0, r2
 800020e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	e000e100 	.word	0xe000e100

08000220 <extint_init>:
 */
#include"extint.h"
#include"led.h"

void extint_init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	//1. set GPIOA.0 pin as input
	RCC->AHB1ENR |= BV(GPIOA_CLK_ENB);
 8000224:	4b14      	ldr	r3, [pc, #80]	; (8000278 <extint_init+0x58>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a13      	ldr	r2, [pc, #76]	; (8000278 <extint_init+0x58>)
 800022a:	f043 0301 	orr.w	r3, r3, #1
 800022e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIO_SWITCH->MODER &= ~(BV(0) | BV(1));
 8000230:	4b12      	ldr	r3, [pc, #72]	; (800027c <extint_init+0x5c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a11      	ldr	r2, [pc, #68]	; (800027c <extint_init+0x5c>)
 8000236:	f023 0303 	bic.w	r3, r3, #3
 800023a:	6013      	str	r3, [r2, #0]
	GPIO_SWITCH->PUPDR &= ~(BV(0) | BV(1));
 800023c:	4b0f      	ldr	r3, [pc, #60]	; (800027c <extint_init+0x5c>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	4a0e      	ldr	r2, [pc, #56]	; (800027c <extint_init+0x5c>)
 8000242:	f023 0303 	bic.w	r3, r3, #3
 8000246:	60d3      	str	r3, [r2, #12]

	//2. enable external interrupt in system configuration(STM32F407VG)
	SYSCFG->EXTICR[0] &= ~(BV(0) | BV(1) | BV(2) | BV(3));
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <extint_init+0x60>)
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	4a0c      	ldr	r2, [pc, #48]	; (8000280 <extint_init+0x60>)
 800024e:	f023 030f 	bic.w	r3, r3, #15
 8000252:	6093      	str	r3, [r2, #8]
	//3. enable ext interrupt in external interrupt controller
	EXTI->IMR |= BV(0);
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <extint_init+0x64>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <extint_init+0x64>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= BV(0);
 8000260:	4b08      	ldr	r3, [pc, #32]	; (8000284 <extint_init+0x64>)
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	4a07      	ldr	r2, [pc, #28]	; (8000284 <extint_init+0x64>)
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	6093      	str	r3, [r2, #8]

	//4. enable ext interrupt in NVIC
	NVIC_EnableIRQ(EXTI0_IRQn);
 800026c:	2006      	movs	r0, #6
 800026e:	f7ff ffbb 	bl	80001e8 <__NVIC_EnableIRQ>
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40023800 	.word	0x40023800
 800027c:	40020000 	.word	0x40020000
 8000280:	40013800 	.word	0x40013800
 8000284:	40013c00 	.word	0x40013c00

08000288 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	// clear pending bit into PR register
	EXTI->PR |= BV(0);
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <EXTI0_IRQHandler+0x1c>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	4a04      	ldr	r2, [pc, #16]	; (80002a4 <EXTI0_IRQHandler+0x1c>)
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	6153      	str	r3, [r2, #20]
	// led blink
	led_blink(LED_RED);
 8000298:	200e      	movs	r0, #14
 800029a:	f000 f8b7 	bl	800040c <led_blink>
}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40013c00 	.word	0x40013c00

080002a8 <DelayMs>:

void SwDelayMs(uint32_t ms);

uint32_t DWT_Init(void);

static inline void DelayMs(volatile uint32_t ms) {
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80002b0:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <DelayMs+0x44>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80002b6:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <DelayMs+0x48>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a0e      	ldr	r2, [pc, #56]	; (80002f4 <DelayMs+0x4c>)
 80002bc:	fba2 2303 	umull	r2, r3, r2, r3
 80002c0:	099b      	lsrs	r3, r3, #6
 80002c2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	68ba      	ldr	r2, [r7, #8]
 80002c8:	fb02 f303 	mul.w	r3, r2, r3
 80002cc:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80002ce:	bf00      	nop
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <DelayMs+0x44>)
 80002d2:	685a      	ldr	r2, [r3, #4]
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d3f8      	bcc.n	80002d0 <DelayMs+0x28>
}
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	3714      	adds	r7, #20
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	e0001000 	.word	0xe0001000
 80002f0:	20000000 	.word	0x20000000
 80002f4:	10624dd3 	.word	0x10624dd3

080002f8 <led_init>:
 *      Author: sunbeam
 */
#include"led.h"

void led_init(uint16_t pin)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	80fb      	strh	r3, [r7, #6]
	// enable clock for gpio D port
	RCC->AHB1ENR |= BV(GPIOD_CLK_ENB);
 8000302:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <led_init+0xb0>)
 8000304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000306:	4a28      	ldr	r2, [pc, #160]	; (80003a8 <led_init+0xb0>)
 8000308:	f043 0308 	orr.w	r3, r3, #8
 800030c:	6313      	str	r3, [r2, #48]	; 0x30

	// select mode of GPIO pins as output
	LED_GPIO->MODER |= BV(2 * pin);
 800030e:	4b27      	ldr	r3, [pc, #156]	; (80003ac <led_init+0xb4>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	88fa      	ldrh	r2, [r7, #6]
 8000314:	0052      	lsls	r2, r2, #1
 8000316:	2101      	movs	r1, #1
 8000318:	fa01 f202 	lsl.w	r2, r1, r2
 800031c:	4611      	mov	r1, r2
 800031e:	4a23      	ldr	r2, [pc, #140]	; (80003ac <led_init+0xb4>)
 8000320:	430b      	orrs	r3, r1
 8000322:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER &= ~BV(2 * pin + 1);
 8000324:	4b21      	ldr	r3, [pc, #132]	; (80003ac <led_init+0xb4>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	88fa      	ldrh	r2, [r7, #6]
 800032a:	0052      	lsls	r2, r2, #1
 800032c:	3201      	adds	r2, #1
 800032e:	2101      	movs	r1, #1
 8000330:	fa01 f202 	lsl.w	r2, r1, r2
 8000334:	43d2      	mvns	r2, r2
 8000336:	4611      	mov	r1, r2
 8000338:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <led_init+0xb4>)
 800033a:	400b      	ands	r3, r1
 800033c:	6013      	str	r3, [r2, #0]

	// select output type as push pull
	LED_GPIO->OTYPER &= ~BV(pin);
 800033e:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <led_init+0xb4>)
 8000340:	685b      	ldr	r3, [r3, #4]
 8000342:	88fa      	ldrh	r2, [r7, #6]
 8000344:	2101      	movs	r1, #1
 8000346:	fa01 f202 	lsl.w	r2, r1, r2
 800034a:	43d2      	mvns	r2, r2
 800034c:	4611      	mov	r1, r2
 800034e:	4a17      	ldr	r2, [pc, #92]	; (80003ac <led_init+0xb4>)
 8000350:	400b      	ands	r3, r1
 8000352:	6053      	str	r3, [r2, #4]

	// select output speed as low
	LED_GPIO->OSPEEDR &= ~(BV(2 * pin ) | BV(2 * pin + 1));
 8000354:	4b15      	ldr	r3, [pc, #84]	; (80003ac <led_init+0xb4>)
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	88fa      	ldrh	r2, [r7, #6]
 800035a:	0052      	lsls	r2, r2, #1
 800035c:	2101      	movs	r1, #1
 800035e:	4091      	lsls	r1, r2
 8000360:	88fa      	ldrh	r2, [r7, #6]
 8000362:	0052      	lsls	r2, r2, #1
 8000364:	3201      	adds	r2, #1
 8000366:	2001      	movs	r0, #1
 8000368:	fa00 f202 	lsl.w	r2, r0, r2
 800036c:	430a      	orrs	r2, r1
 800036e:	43d2      	mvns	r2, r2
 8000370:	4611      	mov	r1, r2
 8000372:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <led_init+0xb4>)
 8000374:	400b      	ands	r3, r1
 8000376:	6093      	str	r3, [r2, #8]

	// do not select pull up / pull down resistor
	LED_GPIO->PUPDR &=~(BV(2 * pin ) | BV(2 * pin + 1));
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <led_init+0xb4>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	88fa      	ldrh	r2, [r7, #6]
 800037e:	0052      	lsls	r2, r2, #1
 8000380:	2101      	movs	r1, #1
 8000382:	4091      	lsls	r1, r2
 8000384:	88fa      	ldrh	r2, [r7, #6]
 8000386:	0052      	lsls	r2, r2, #1
 8000388:	3201      	adds	r2, #1
 800038a:	2001      	movs	r0, #1
 800038c:	fa00 f202 	lsl.w	r2, r0, r2
 8000390:	430a      	orrs	r2, r1
 8000392:	43d2      	mvns	r2, r2
 8000394:	4611      	mov	r1, r2
 8000396:	4a05      	ldr	r2, [pc, #20]	; (80003ac <led_init+0xb4>)
 8000398:	400b      	ands	r3, r1
 800039a:	60d3      	str	r3, [r2, #12]
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40023800 	.word	0x40023800
 80003ac:	40020c00 	.word	0x40020c00

080003b0 <led_on>:
void led_on(uint16_t pin)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	80fb      	strh	r3, [r7, #6]
	// write 1 on respective bits of ODR
	LED_GPIO->ODR |= BV(pin);
 80003ba:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <led_on+0x28>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	88fa      	ldrh	r2, [r7, #6]
 80003c0:	2101      	movs	r1, #1
 80003c2:	fa01 f202 	lsl.w	r2, r1, r2
 80003c6:	4611      	mov	r1, r2
 80003c8:	4a03      	ldr	r2, [pc, #12]	; (80003d8 <led_on+0x28>)
 80003ca:	430b      	orrs	r3, r1
 80003cc:	6153      	str	r3, [r2, #20]
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	40020c00 	.word	0x40020c00

080003dc <led_off>:
void led_off(uint16_t pin)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	80fb      	strh	r3, [r7, #6]
	// write 0 on respective bits of ODR
	LED_GPIO->ODR &= ~BV(pin);
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <led_off+0x2c>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	88fa      	ldrh	r2, [r7, #6]
 80003ec:	2101      	movs	r1, #1
 80003ee:	fa01 f202 	lsl.w	r2, r1, r2
 80003f2:	43d2      	mvns	r2, r2
 80003f4:	4611      	mov	r1, r2
 80003f6:	4a04      	ldr	r2, [pc, #16]	; (8000408 <led_off+0x2c>)
 80003f8:	400b      	ands	r3, r1
 80003fa:	6153      	str	r3, [r2, #20]
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40020c00 	.word	0x40020c00

0800040c <led_blink>:
{
	LED_GPIO->ODR ^= BV(pin);
}

void led_blink(uint16_t pin)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	80fb      	strh	r3, [r7, #6]
	led_on(pin);
 8000416:	88fb      	ldrh	r3, [r7, #6]
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff ffc9 	bl	80003b0 <led_on>
	DelayMs(500);
 800041e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000422:	f7ff ff41 	bl	80002a8 <DelayMs>
	led_off(pin);
 8000426:	88fb      	ldrh	r3, [r7, #6]
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff ffd7 	bl	80003dc <led_off>
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	af00      	add	r7, sp, #0
	extint_init();
 800043a:	f7ff fef1 	bl	8000220 <extint_init>
	led_init(LED_RED);
 800043e:	200e      	movs	r0, #14
 8000440:	f7ff ff5a 	bl	80002f8 <led_init>

	while(1);
 8000444:	e7fe      	b.n	8000444 <main+0xe>
	...

08000448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 800044c:	f000 f802 	bl	8000454 <DWT_Init>
}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}

08000454 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000458:	4b14      	ldr	r3, [pc, #80]	; (80004ac <DWT_Init+0x58>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4a13      	ldr	r2, [pc, #76]	; (80004ac <DWT_Init+0x58>)
 800045e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000462:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <DWT_Init+0x58>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	4a10      	ldr	r2, [pc, #64]	; (80004ac <DWT_Init+0x58>)
 800046a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800046e:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <DWT_Init+0x5c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <DWT_Init+0x5c>)
 8000476:	f023 0301 	bic.w	r3, r3, #1
 800047a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <DWT_Init+0x5c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a0b      	ldr	r2, [pc, #44]	; (80004b0 <DWT_Init+0x5c>)
 8000482:	f043 0301 	orr.w	r3, r3, #1
 8000486:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <DWT_Init+0x5c>)
 800048a:	2200      	movs	r2, #0
 800048c:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800048e:	bf00      	nop
    __ASM volatile ("NOP");
 8000490:	bf00      	nop
    __ASM volatile ("NOP");
 8000492:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <DWT_Init+0x5c>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	2b00      	cmp	r3, #0
 800049a:	bf0c      	ite	eq
 800049c:	2301      	moveq	r3, #1
 800049e:	2300      	movne	r3, #0
 80004a0:	b2db      	uxtb	r3, r3
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	e000edf0 	.word	0xe000edf0
 80004b0:	e0001000 	.word	0xe0001000

080004b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004b4:	480d      	ldr	r0, [pc, #52]	; (80004ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004b8:	f7ff ffc6 	bl	8000448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004bc:	480c      	ldr	r0, [pc, #48]	; (80004f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80004be:	490d      	ldr	r1, [pc, #52]	; (80004f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c0:	4a0d      	ldr	r2, [pc, #52]	; (80004f8 <LoopForever+0xe>)
  movs r3, #0
 80004c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c4:	e002      	b.n	80004cc <LoopCopyDataInit>

080004c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ca:	3304      	adds	r3, #4

080004cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d0:	d3f9      	bcc.n	80004c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d2:	4a0a      	ldr	r2, [pc, #40]	; (80004fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d4:	4c0a      	ldr	r4, [pc, #40]	; (8000500 <LoopForever+0x16>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d8:	e001      	b.n	80004de <LoopFillZerobss>

080004da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004dc:	3204      	adds	r2, #4

080004de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e0:	d3fb      	bcc.n	80004da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004e2:	f000 f811 	bl	8000508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004e6:	f7ff ffa6 	bl	8000436 <main>

080004ea <LoopForever>:

LoopForever:
    b LoopForever
 80004ea:	e7fe      	b.n	80004ea <LoopForever>
  ldr   r0, =_estack
 80004ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004f8:	08000570 	.word	0x08000570
  ldr r2, =_sbss
 80004fc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000500:	20000020 	.word	0x20000020

08000504 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000504:	e7fe      	b.n	8000504 <ADC_IRQHandler>
	...

08000508 <__libc_init_array>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	4d0d      	ldr	r5, [pc, #52]	; (8000540 <__libc_init_array+0x38>)
 800050c:	4c0d      	ldr	r4, [pc, #52]	; (8000544 <__libc_init_array+0x3c>)
 800050e:	1b64      	subs	r4, r4, r5
 8000510:	10a4      	asrs	r4, r4, #2
 8000512:	2600      	movs	r6, #0
 8000514:	42a6      	cmp	r6, r4
 8000516:	d109      	bne.n	800052c <__libc_init_array+0x24>
 8000518:	4d0b      	ldr	r5, [pc, #44]	; (8000548 <__libc_init_array+0x40>)
 800051a:	4c0c      	ldr	r4, [pc, #48]	; (800054c <__libc_init_array+0x44>)
 800051c:	f000 f818 	bl	8000550 <_init>
 8000520:	1b64      	subs	r4, r4, r5
 8000522:	10a4      	asrs	r4, r4, #2
 8000524:	2600      	movs	r6, #0
 8000526:	42a6      	cmp	r6, r4
 8000528:	d105      	bne.n	8000536 <__libc_init_array+0x2e>
 800052a:	bd70      	pop	{r4, r5, r6, pc}
 800052c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000530:	4798      	blx	r3
 8000532:	3601      	adds	r6, #1
 8000534:	e7ee      	b.n	8000514 <__libc_init_array+0xc>
 8000536:	f855 3b04 	ldr.w	r3, [r5], #4
 800053a:	4798      	blx	r3
 800053c:	3601      	adds	r6, #1
 800053e:	e7f2      	b.n	8000526 <__libc_init_array+0x1e>
 8000540:	08000568 	.word	0x08000568
 8000544:	08000568 	.word	0x08000568
 8000548:	08000568 	.word	0x08000568
 800054c:	0800056c 	.word	0x0800056c

08000550 <_init>:
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000552:	bf00      	nop
 8000554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000556:	bc08      	pop	{r3}
 8000558:	469e      	mov	lr, r3
 800055a:	4770      	bx	lr

0800055c <_fini>:
 800055c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055e:	bf00      	nop
 8000560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000562:	bc08      	pop	{r3}
 8000564:	469e      	mov	lr, r3
 8000566:	4770      	bx	lr
