
extInt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004340  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080044d0  080044d0  000144d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004584  08004584  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004584  08004584  00014584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800458c  0800458c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800458c  0800458c  0001458c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004080  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200040f4  200040f4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d06  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000293a  00000000  00000000  00031daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f48  00000000  00000000  000346e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e20  00000000  00000000  00035630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021fb7  00000000  00000000  00036450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001074b  00000000  00000000  00058407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d09d2  00000000  00000000  00068b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139524  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000421c  00000000  00000000  00139574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044b8 	.word	0x080044b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080044b8 	.word	0x080044b8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000090 	.word	0x20000090
 8000504:	20000144 	.word	0x20000144

08000508 <vExTIntHandlingTask>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vExTIntHandlingTask(void *pvParam)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(xSemaphore, 0);
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <vExTIntHandlingTask+0x44>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f002 f874 	bl	8002604 <xQueueSemaphoreTake>
	while(1)
	{
		xSemaphoreTake(xSemaphore, portMAX_DELAY);
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <vExTIntHandlingTask+0x44>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f04f 31ff 	mov.w	r1, #4294967295
 8000524:	4618      	mov	r0, r3
 8000526:	f002 f86d 	bl	8002604 <xQueueSemaphoreTake>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800052a:	2201      	movs	r2, #1
 800052c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000530:	4807      	ldr	r0, [pc, #28]	; (8000550 <vExTIntHandlingTask+0x48>)
 8000532:	f000 fd4f 	bl	8000fd4 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000536:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800053a:	f000 faa9 	bl	8000a90 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <vExTIntHandlingTask+0x48>)
 8000546:	f000 fd45 	bl	8000fd4 <HAL_GPIO_WritePin>
		xSemaphoreTake(xSemaphore, portMAX_DELAY);
 800054a:	e7e7      	b.n	800051c <vExTIntHandlingTask+0x14>
 800054c:	20000348 	.word	0x20000348
 8000550:	40020c00 	.word	0x40020c00

08000554 <HAL_GPIO_EXTI_Callback>:

	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	80fb      	strh	r3, [r7, #6]
	portBASE_TYPE xHigherPriorityTaskWoken;
	xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_GPIO_EXTI_Callback+0x38>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f107 020c 	add.w	r2, r7, #12
 8000566:	4611      	mov	r1, r2
 8000568:	4618      	mov	r0, r3
 800056a:	f001 ffbd 	bl	80024e8 <xQueueGiveFromISR>

	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d007      	beq.n	8000584 <HAL_GPIO_EXTI_Callback+0x30>
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	f3bf 8f4f 	dsb	sy
 8000580:	f3bf 8f6f 	isb	sy
}
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000348 	.word	0x20000348
 8000590:	e000ed04 	.word	0xe000ed04

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fa37 	bl	8000a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f83d 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f8a5 	bl	80006f0 <MX_GPIO_Init>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  vSemaphoreCreateBinary( xSemaphore);
 80005a6:	2203      	movs	r2, #3
 80005a8:	2100      	movs	r1, #0
 80005aa:	2001      	movs	r0, #1
 80005ac:	f001 fe44 	bl	8002238 <xQueueGenericCreate>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a15      	ldr	r2, [pc, #84]	; (8000608 <main+0x74>)
 80005b4:	6013      	str	r3, [r2, #0]
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <main+0x74>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d006      	beq.n	80005cc <main+0x38>
 80005be:	4b12      	ldr	r3, [pc, #72]	; (8000608 <main+0x74>)
 80005c0:	6818      	ldr	r0, [r3, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	f001 fe90 	bl	80022ec <xQueueGenericSend>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <main+0x78>)
 80005ce:	1d3c      	adds	r4, r7, #4
 80005d0:	461d      	mov	r5, r3
 80005d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fcab 	bl	8001f3e <osThreadCreate>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a09      	ldr	r2, [pc, #36]	; (8000610 <main+0x7c>)
 80005ec:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(vExTIntHandlingTask, "ExtIntTask", configMINIMAL_STACK_SIZE, NULL, 6, NULL);
 80005ee:	2300      	movs	r3, #0
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2306      	movs	r3, #6
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	4906      	ldr	r1, [pc, #24]	; (8000614 <main+0x80>)
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <main+0x84>)
 80005fe:	f002 fa6c 	bl	8002ada <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000602:	f001 fc95 	bl	8001f30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000606:	e7fe      	b.n	8000606 <main+0x72>
 8000608:	20000348 	.word	0x20000348
 800060c:	080044e8 	.word	0x080044e8
 8000610:	20000344 	.word	0x20000344
 8000614:	080044dc 	.word	0x080044dc
 8000618:	08000509 	.word	0x08000509

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fe7a 	bl	8004324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd0>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000690:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000694:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800069a:	2307      	movs	r3, #7
 800069c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fcc8 	bl	8001038 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ae:	f000 f8a3 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2105      	movs	r1, #5
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 ff29 	bl	8001528 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006dc:	f000 f88c 	bl	80007f8 <Error_Handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3750      	adds	r7, #80	; 0x50
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <MX_GPIO_Init+0xc8>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a2a      	ldr	r2, [pc, #168]	; (80007b8 <MX_GPIO_Init+0xc8>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <MX_GPIO_Init+0xc8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b24      	ldr	r3, [pc, #144]	; (80007b8 <MX_GPIO_Init+0xc8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a23      	ldr	r2, [pc, #140]	; (80007b8 <MX_GPIO_Init+0xc8>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_GPIO_Init+0xc8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_GPIO_Init+0xc8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <MX_GPIO_Init+0xc8>)
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_GPIO_Init+0xc8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0308 	and.w	r3, r3, #8
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000760:	4816      	ldr	r0, [pc, #88]	; (80007bc <MX_GPIO_Init+0xcc>)
 8000762:	f000 fc37 	bl	8000fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000766:	2301      	movs	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800076a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800076e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	4811      	ldr	r0, [pc, #68]	; (80007c0 <MX_GPIO_Init+0xd0>)
 800077c:	f000 fa8e 	bl	8000c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000780:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	4619      	mov	r1, r3
 8000798:	4808      	ldr	r0, [pc, #32]	; (80007bc <MX_GPIO_Init+0xcc>)
 800079a:	f000 fa7f 	bl	8000c9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2105      	movs	r1, #5
 80007a2:	2006      	movs	r0, #6
 80007a4:	f000 fa50 	bl	8000c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007a8:	2006      	movs	r0, #6
 80007aa:	f000 fa69 	bl	8000c80 <HAL_NVIC_EnableIRQ>

}
 80007ae:	bf00      	nop
 80007b0:	3720      	adds	r7, #32
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020c00 	.word	0x40020c00
 80007c0:	40020000 	.word	0x40020000

080007c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f001 fc02 	bl	8001fd6 <osDelay>
 80007d2:	e7fb      	b.n	80007cc <StartDefaultTask+0x8>

080007d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d101      	bne.n	80007ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007e6:	f000 f933 	bl	8000a50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40010000 	.word	0x40010000

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	e7fe      	b.n	8000800 <Error_Handler+0x8>
	...

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_MspInit+0x54>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	4a11      	ldr	r2, [pc, #68]	; (8000858 <HAL_MspInit+0x54>)
 8000814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000818:	6453      	str	r3, [r2, #68]	; 0x44
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <HAL_MspInit+0x54>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <HAL_MspInit+0x54>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <HAL_MspInit+0x54>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_MspInit+0x54>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	210f      	movs	r1, #15
 8000846:	f06f 0001 	mvn.w	r0, #1
 800084a:	f000 f9fd 	bl	8000c48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	; 0x30
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <HAL_InitTick+0xd4>)
 8000872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000874:	4a2e      	ldr	r2, [pc, #184]	; (8000930 <HAL_InitTick+0xd4>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	6453      	str	r3, [r2, #68]	; 0x44
 800087c:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <HAL_InitTick+0xd4>)
 800087e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000888:	f107 020c 	add.w	r2, r7, #12
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	4611      	mov	r1, r2
 8000892:	4618      	mov	r0, r3
 8000894:	f001 f854 	bl	8001940 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000898:	f001 f83e 	bl	8001918 <HAL_RCC_GetPCLK2Freq>
 800089c:	4603      	mov	r3, r0
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a4:	4a23      	ldr	r2, [pc, #140]	; (8000934 <HAL_InitTick+0xd8>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	0c9b      	lsrs	r3, r3, #18
 80008ac:	3b01      	subs	r3, #1
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008b0:	4b21      	ldr	r3, [pc, #132]	; (8000938 <HAL_InitTick+0xdc>)
 80008b2:	4a22      	ldr	r2, [pc, #136]	; (800093c <HAL_InitTick+0xe0>)
 80008b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008b6:	4b20      	ldr	r3, [pc, #128]	; (8000938 <HAL_InitTick+0xdc>)
 80008b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008be:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <HAL_InitTick+0xdc>)
 80008c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008c4:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <HAL_InitTick+0xdc>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <HAL_InitTick+0xdc>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	4b19      	ldr	r3, [pc, #100]	; (8000938 <HAL_InitTick+0xdc>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008d6:	4818      	ldr	r0, [pc, #96]	; (8000938 <HAL_InitTick+0xdc>)
 80008d8:	f001 f864 	bl	80019a4 <HAL_TIM_Base_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80008e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d11b      	bne.n	8000922 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008ea:	4813      	ldr	r0, [pc, #76]	; (8000938 <HAL_InitTick+0xdc>)
 80008ec:	f001 f8b4 	bl	8001a58 <HAL_TIM_Base_Start_IT>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d111      	bne.n	8000922 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008fe:	2019      	movs	r0, #25
 8000900:	f000 f9be 	bl	8000c80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b0f      	cmp	r3, #15
 8000908:	d808      	bhi.n	800091c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800090a:	2200      	movs	r2, #0
 800090c:	6879      	ldr	r1, [r7, #4]
 800090e:	2019      	movs	r0, #25
 8000910:	f000 f99a 	bl	8000c48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000914:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <HAL_InitTick+0xe4>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	e002      	b.n	8000922 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800091c:	2301      	movs	r3, #1
 800091e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000926:	4618      	mov	r0, r3
 8000928:	3730      	adds	r7, #48	; 0x30
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	431bde83 	.word	0x431bde83
 8000938:	2000034c 	.word	0x2000034c
 800093c:	40010000 	.word	0x40010000
 8000940:	20000004 	.word	0x20000004

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000974:	2001      	movs	r0, #1
 8000976:	f000 fb47 	bl	8001008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000986:	f001 f8d7 	bl	8001b38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000034c 	.word	0x2000034c

08000994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SystemInit+0x20>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <SystemInit+0x20>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009be:	490e      	ldr	r1, [pc, #56]	; (80009f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009c0:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009d4:	4c0b      	ldr	r4, [pc, #44]	; (8000a04 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009e2:	f7ff ffd7 	bl	8000994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e6:	f003 fc69 	bl	80042bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ea:	f7ff fdd3 	bl	8000594 <main>
  bx  lr    
 80009ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80009fc:	08004594 	.word	0x08004594
  ldr r2, =_sbss
 8000a00:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a04:	200040f4 	.word	0x200040f4

08000a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC_IRQHandler>
	...

08000a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <HAL_Init+0x40>)
 8000a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_Init+0x40>)
 8000a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_Init+0x40>)
 8000a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 f8fc 	bl	8000c32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3a:	200f      	movs	r0, #15
 8000a3c:	f7ff ff0e 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a40:	f7ff fee0 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023c00 	.word	0x40023c00

08000a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_IncTick+0x20>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_IncTick+0x24>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <HAL_IncTick+0x24>)
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000394 	.word	0x20000394

08000a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <HAL_GetTick+0x14>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000394 	.word	0x20000394

08000a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a98:	f7ff ffee 	bl	8000a78 <HAL_GetTick>
 8000a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa8:	d005      	beq.n	8000ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <HAL_Delay+0x44>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ab6:	bf00      	nop
 8000ab8:	f7ff ffde 	bl	8000a78 <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d8f7      	bhi.n	8000ab8 <HAL_Delay+0x28>
  {
  }
}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000008 	.word	0x20000008

08000ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	60d3      	str	r3, [r2, #12]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <__NVIC_GetPriorityGrouping+0x18>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	f003 0307 	and.w	r3, r3, #7
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db0b      	blt.n	8000b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 021f 	and.w	r2, r3, #31
 8000b54:	4907      	ldr	r1, [pc, #28]	; (8000b74 <__NVIC_EnableIRQ+0x38>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	; 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ff4c 	bl	8000ad8 <__NVIC_SetPriorityGrouping>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5a:	f7ff ff61 	bl	8000b20 <__NVIC_GetPriorityGrouping>
 8000c5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	68b9      	ldr	r1, [r7, #8]
 8000c64:	6978      	ldr	r0, [r7, #20]
 8000c66:	f7ff ffb1 	bl	8000bcc <NVIC_EncodePriority>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff80 	bl	8000b78 <__NVIC_SetPriority>
}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff54 	bl	8000b3c <__NVIC_EnableIRQ>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
 8000cb6:	e16b      	b.n	8000f90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f040 815a 	bne.w	8000f8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d005      	beq.n	8000cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d130      	bne.n	8000d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68da      	ldr	r2, [r3, #12]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d24:	2201      	movs	r2, #1
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	091b      	lsrs	r3, r3, #4
 8000d3a:	f003 0201 	and.w	r2, r3, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d017      	beq.n	8000d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d123      	bne.n	8000de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	08da      	lsrs	r2, r3, #3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3208      	adds	r2, #8
 8000da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	220f      	movs	r2, #15
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	691a      	ldr	r2, [r3, #16]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	08da      	lsrs	r2, r3, #3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3208      	adds	r2, #8
 8000dda:	69b9      	ldr	r1, [r7, #24]
 8000ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0203 	and.w	r2, r3, #3
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 80b4 	beq.w	8000f8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b60      	ldr	r3, [pc, #384]	; (8000fa8 <HAL_GPIO_Init+0x30c>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a5f      	ldr	r2, [pc, #380]	; (8000fa8 <HAL_GPIO_Init+0x30c>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b5d      	ldr	r3, [pc, #372]	; (8000fa8 <HAL_GPIO_Init+0x30c>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e3e:	4a5b      	ldr	r2, [pc, #364]	; (8000fac <HAL_GPIO_Init+0x310>)
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	220f      	movs	r2, #15
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a52      	ldr	r2, [pc, #328]	; (8000fb0 <HAL_GPIO_Init+0x314>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d02b      	beq.n	8000ec2 <HAL_GPIO_Init+0x226>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a51      	ldr	r2, [pc, #324]	; (8000fb4 <HAL_GPIO_Init+0x318>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d025      	beq.n	8000ebe <HAL_GPIO_Init+0x222>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a50      	ldr	r2, [pc, #320]	; (8000fb8 <HAL_GPIO_Init+0x31c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d01f      	beq.n	8000eba <HAL_GPIO_Init+0x21e>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4f      	ldr	r2, [pc, #316]	; (8000fbc <HAL_GPIO_Init+0x320>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d019      	beq.n	8000eb6 <HAL_GPIO_Init+0x21a>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4e      	ldr	r2, [pc, #312]	; (8000fc0 <HAL_GPIO_Init+0x324>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d013      	beq.n	8000eb2 <HAL_GPIO_Init+0x216>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4d      	ldr	r2, [pc, #308]	; (8000fc4 <HAL_GPIO_Init+0x328>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d00d      	beq.n	8000eae <HAL_GPIO_Init+0x212>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4c      	ldr	r2, [pc, #304]	; (8000fc8 <HAL_GPIO_Init+0x32c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d007      	beq.n	8000eaa <HAL_GPIO_Init+0x20e>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4b      	ldr	r2, [pc, #300]	; (8000fcc <HAL_GPIO_Init+0x330>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d101      	bne.n	8000ea6 <HAL_GPIO_Init+0x20a>
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	e00e      	b.n	8000ec4 <HAL_GPIO_Init+0x228>
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	e00c      	b.n	8000ec4 <HAL_GPIO_Init+0x228>
 8000eaa:	2306      	movs	r3, #6
 8000eac:	e00a      	b.n	8000ec4 <HAL_GPIO_Init+0x228>
 8000eae:	2305      	movs	r3, #5
 8000eb0:	e008      	b.n	8000ec4 <HAL_GPIO_Init+0x228>
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x228>
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e004      	b.n	8000ec4 <HAL_GPIO_Init+0x228>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_Init+0x228>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <HAL_GPIO_Init+0x228>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	69fa      	ldr	r2, [r7, #28]
 8000ec6:	f002 0203 	and.w	r2, r2, #3
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	4093      	lsls	r3, r2
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed4:	4935      	ldr	r1, [pc, #212]	; (8000fac <HAL_GPIO_Init+0x310>)
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	3302      	adds	r3, #2
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ee2:	4b3b      	ldr	r3, [pc, #236]	; (8000fd0 <HAL_GPIO_Init+0x334>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f06:	4a32      	ldr	r2, [pc, #200]	; (8000fd0 <HAL_GPIO_Init+0x334>)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f0c:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <HAL_GPIO_Init+0x334>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f30:	4a27      	ldr	r2, [pc, #156]	; (8000fd0 <HAL_GPIO_Init+0x334>)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f36:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <HAL_GPIO_Init+0x334>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f5a:	4a1d      	ldr	r2, [pc, #116]	; (8000fd0 <HAL_GPIO_Init+0x334>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <HAL_GPIO_Init+0x334>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f84:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <HAL_GPIO_Init+0x334>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	2b0f      	cmp	r3, #15
 8000f94:	f67f ae90 	bls.w	8000cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40013800 	.word	0x40013800
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	40020800 	.word	0x40020800
 8000fbc:	40020c00 	.word	0x40020c00
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40021400 	.word	0x40021400
 8000fc8:	40021800 	.word	0x40021800
 8000fcc:	40021c00 	.word	0x40021c00
 8000fd0:	40013c00 	.word	0x40013c00

08000fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	807b      	strh	r3, [r7, #2]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe4:	787b      	ldrb	r3, [r7, #1]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fea:	887a      	ldrh	r2, [r7, #2]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ff0:	e003      	b.n	8000ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	041a      	lsls	r2, r3, #16
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	619a      	str	r2, [r3, #24]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001014:	695a      	ldr	r2, [r3, #20]
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	4013      	ands	r3, r2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d006      	beq.n	800102c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fa94 	bl	8000554 <HAL_GPIO_EXTI_Callback>
  }
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40013c00 	.word	0x40013c00

08001038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e267      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d075      	beq.n	8001142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001056:	4b88      	ldr	r3, [pc, #544]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b04      	cmp	r3, #4
 8001060:	d00c      	beq.n	800107c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001062:	4b85      	ldr	r3, [pc, #532]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800106a:	2b08      	cmp	r3, #8
 800106c:	d112      	bne.n	8001094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800106e:	4b82      	ldr	r3, [pc, #520]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800107a:	d10b      	bne.n	8001094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	4b7e      	ldr	r3, [pc, #504]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d05b      	beq.n	8001140 <HAL_RCC_OscConfig+0x108>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d157      	bne.n	8001140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e242      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109c:	d106      	bne.n	80010ac <HAL_RCC_OscConfig+0x74>
 800109e:	4b76      	ldr	r3, [pc, #472]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a75      	ldr	r2, [pc, #468]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e01d      	b.n	80010e8 <HAL_RCC_OscConfig+0xb0>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b4:	d10c      	bne.n	80010d0 <HAL_RCC_OscConfig+0x98>
 80010b6:	4b70      	ldr	r3, [pc, #448]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a6f      	ldr	r2, [pc, #444]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b6d      	ldr	r3, [pc, #436]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a6c      	ldr	r2, [pc, #432]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e00b      	b.n	80010e8 <HAL_RCC_OscConfig+0xb0>
 80010d0:	4b69      	ldr	r3, [pc, #420]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a68      	ldr	r2, [pc, #416]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b66      	ldr	r3, [pc, #408]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a65      	ldr	r2, [pc, #404]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80010e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d013      	beq.n	8001118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fcc2 	bl	8000a78 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fcbe 	bl	8000a78 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e207      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	4b5b      	ldr	r3, [pc, #364]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0xc0>
 8001116:	e014      	b.n	8001142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fcae 	bl	8000a78 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fcaa 	bl	8000a78 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e1f3      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001132:	4b51      	ldr	r3, [pc, #324]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0xe8>
 800113e:	e000      	b.n	8001142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d063      	beq.n	8001216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800114e:	4b4a      	ldr	r3, [pc, #296]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800115a:	4b47      	ldr	r3, [pc, #284]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001162:	2b08      	cmp	r3, #8
 8001164:	d11c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001166:	4b44      	ldr	r3, [pc, #272]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d116      	bne.n	80011a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001172:	4b41      	ldr	r3, [pc, #260]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <HAL_RCC_OscConfig+0x152>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d001      	beq.n	800118a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e1c7      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118a:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4937      	ldr	r1, [pc, #220]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800119a:	4313      	orrs	r3, r2
 800119c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119e:	e03a      	b.n	8001216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d020      	beq.n	80011ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a8:	4b34      	ldr	r3, [pc, #208]	; (800127c <HAL_RCC_OscConfig+0x244>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ae:	f7ff fc63 	bl	8000a78 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b6:	f7ff fc5f 	bl	8000a78 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e1a8      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c8:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4925      	ldr	r1, [pc, #148]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	600b      	str	r3, [r1, #0]
 80011e8:	e015      	b.n	8001216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <HAL_RCC_OscConfig+0x244>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f0:	f7ff fc42 	bl	8000a78 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f8:	f7ff fc3e 	bl	8000a78 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e187      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	2b00      	cmp	r3, #0
 8001220:	d036      	beq.n	8001290 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d016      	beq.n	8001258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_RCC_OscConfig+0x248>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001230:	f7ff fc22 	bl	8000a78 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fc1e 	bl	8000a78 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e167      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_RCC_OscConfig+0x240>)
 800124c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f0      	beq.n	8001238 <HAL_RCC_OscConfig+0x200>
 8001256:	e01b      	b.n	8001290 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_RCC_OscConfig+0x248>)
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125e:	f7ff fc0b 	bl	8000a78 <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001264:	e00e      	b.n	8001284 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001266:	f7ff fc07 	bl	8000a78 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d907      	bls.n	8001284 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e150      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
 8001278:	40023800 	.word	0x40023800
 800127c:	42470000 	.word	0x42470000
 8001280:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001284:	4b88      	ldr	r3, [pc, #544]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1ea      	bne.n	8001266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 8097 	beq.w	80013cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012a2:	4b81      	ldr	r3, [pc, #516]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10f      	bne.n	80012ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b7d      	ldr	r3, [pc, #500]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a7c      	ldr	r2, [pc, #496]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b7a      	ldr	r3, [pc, #488]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ca:	2301      	movs	r3, #1
 80012cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ce:	4b77      	ldr	r3, [pc, #476]	; (80014ac <HAL_RCC_OscConfig+0x474>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d118      	bne.n	800130c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012da:	4b74      	ldr	r3, [pc, #464]	; (80014ac <HAL_RCC_OscConfig+0x474>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a73      	ldr	r2, [pc, #460]	; (80014ac <HAL_RCC_OscConfig+0x474>)
 80012e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e6:	f7ff fbc7 	bl	8000a78 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ee:	f7ff fbc3 	bl	8000a78 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e10c      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001300:	4b6a      	ldr	r3, [pc, #424]	; (80014ac <HAL_RCC_OscConfig+0x474>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d106      	bne.n	8001322 <HAL_RCC_OscConfig+0x2ea>
 8001314:	4b64      	ldr	r3, [pc, #400]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001318:	4a63      	ldr	r2, [pc, #396]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6713      	str	r3, [r2, #112]	; 0x70
 8001320:	e01c      	b.n	800135c <HAL_RCC_OscConfig+0x324>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b05      	cmp	r3, #5
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x30c>
 800132a:	4b5f      	ldr	r3, [pc, #380]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 800132c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132e:	4a5e      	ldr	r2, [pc, #376]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6713      	str	r3, [r2, #112]	; 0x70
 8001336:	4b5c      	ldr	r3, [pc, #368]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133a:	4a5b      	ldr	r2, [pc, #364]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6713      	str	r3, [r2, #112]	; 0x70
 8001342:	e00b      	b.n	800135c <HAL_RCC_OscConfig+0x324>
 8001344:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001348:	4a57      	ldr	r2, [pc, #348]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 800134a:	f023 0301 	bic.w	r3, r3, #1
 800134e:	6713      	str	r3, [r2, #112]	; 0x70
 8001350:	4b55      	ldr	r3, [pc, #340]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001354:	4a54      	ldr	r2, [pc, #336]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001356:	f023 0304 	bic.w	r3, r3, #4
 800135a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d015      	beq.n	8001390 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001364:	f7ff fb88 	bl	8000a78 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800136a:	e00a      	b.n	8001382 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136c:	f7ff fb84 	bl	8000a78 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f241 3288 	movw	r2, #5000	; 0x1388
 800137a:	4293      	cmp	r3, r2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e0cb      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001382:	4b49      	ldr	r3, [pc, #292]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0ee      	beq.n	800136c <HAL_RCC_OscConfig+0x334>
 800138e:	e014      	b.n	80013ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001390:	f7ff fb72 	bl	8000a78 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001396:	e00a      	b.n	80013ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001398:	f7ff fb6e 	bl	8000a78 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e0b5      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ae:	4b3e      	ldr	r3, [pc, #248]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80013b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1ee      	bne.n	8001398 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d105      	bne.n	80013cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c0:	4b39      	ldr	r3, [pc, #228]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	4a38      	ldr	r2, [pc, #224]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80013c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 80a1 	beq.w	8001518 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013d6:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d05c      	beq.n	800149c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d141      	bne.n	800146e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ea:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <HAL_RCC_OscConfig+0x478>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fb42 	bl	8000a78 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f8:	f7ff fb3e 	bl	8000a78 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e087      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69da      	ldr	r2, [r3, #28]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	019b      	lsls	r3, r3, #6
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	085b      	lsrs	r3, r3, #1
 800142e:	3b01      	subs	r3, #1
 8001430:	041b      	lsls	r3, r3, #16
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	061b      	lsls	r3, r3, #24
 800143a:	491b      	ldr	r1, [pc, #108]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 800143c:	4313      	orrs	r3, r2
 800143e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_RCC_OscConfig+0x478>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001446:	f7ff fb17 	bl	8000a78 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144e:	f7ff fb13 	bl	8000a78 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e05c      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x416>
 800146c:	e054      	b.n	8001518 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_RCC_OscConfig+0x478>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fb00 	bl	8000a78 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147c:	f7ff fafc 	bl	8000a78 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e045      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_RCC_OscConfig+0x470>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x444>
 800149a:	e03d      	b.n	8001518 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d107      	bne.n	80014b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e038      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40007000 	.word	0x40007000
 80014b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_RCC_OscConfig+0x4ec>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d028      	beq.n	8001514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d121      	bne.n	8001514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014da:	429a      	cmp	r2, r3
 80014dc:	d11a      	bne.n	8001514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014e4:	4013      	ands	r3, r2
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d111      	bne.n	8001514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fa:	085b      	lsrs	r3, r3, #1
 80014fc:	3b01      	subs	r3, #1
 80014fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001500:	429a      	cmp	r2, r3
 8001502:	d107      	bne.n	8001514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0cc      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800153c:	4b68      	ldr	r3, [pc, #416]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d90c      	bls.n	8001564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	4b65      	ldr	r3, [pc, #404]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001552:	4b63      	ldr	r3, [pc, #396]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d001      	beq.n	8001564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e0b8      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d020      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800157c:	4b59      	ldr	r3, [pc, #356]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	4a58      	ldr	r2, [pc, #352]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001594:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a52      	ldr	r2, [pc, #328]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800159e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a0:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	494d      	ldr	r1, [pc, #308]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d044      	beq.n	8001648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d107      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d119      	bne.n	8001606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e07f      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d003      	beq.n	80015e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d107      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e6:	4b3f      	ldr	r3, [pc, #252]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e06f      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f6:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e067      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001606:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f023 0203 	bic.w	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4934      	ldr	r1, [pc, #208]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	4313      	orrs	r3, r2
 8001616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001618:	f7ff fa2e 	bl	8000a78 <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161e:	e00a      	b.n	8001636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001620:	f7ff fa2a 	bl	8000a78 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e04f      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001636:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 020c 	and.w	r2, r3, #12
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	429a      	cmp	r2, r3
 8001646:	d1eb      	bne.n	8001620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d20c      	bcs.n	8001670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e032      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	4916      	ldr	r1, [pc, #88]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d009      	beq.n	80016ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	490e      	ldr	r1, [pc, #56]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ae:	f000 f821 	bl	80016f4 <HAL_RCC_GetSysClockFreq>
 80016b2:	4602      	mov	r2, r0
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	490a      	ldr	r1, [pc, #40]	; (80016e8 <HAL_RCC_ClockConfig+0x1c0>)
 80016c0:	5ccb      	ldrb	r3, [r1, r3]
 80016c2:	fa22 f303 	lsr.w	r3, r2, r3
 80016c6:	4a09      	ldr	r2, [pc, #36]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_RCC_ClockConfig+0x1c8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff f8c4 	bl	800085c <HAL_InitTick>

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023c00 	.word	0x40023c00
 80016e4:	40023800 	.word	0x40023800
 80016e8:	0800450c 	.word	0x0800450c
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000004 	.word	0x20000004

080016f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016f8:	b094      	sub	sp, #80	; 0x50
 80016fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	647b      	str	r3, [r7, #68]	; 0x44
 8001700:	2300      	movs	r3, #0
 8001702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001704:	2300      	movs	r3, #0
 8001706:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800170c:	4b79      	ldr	r3, [pc, #484]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b08      	cmp	r3, #8
 8001716:	d00d      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x40>
 8001718:	2b08      	cmp	r3, #8
 800171a:	f200 80e1 	bhi.w	80018e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0x34>
 8001722:	2b04      	cmp	r3, #4
 8001724:	d003      	beq.n	800172e <HAL_RCC_GetSysClockFreq+0x3a>
 8001726:	e0db      	b.n	80018e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001728:	4b73      	ldr	r3, [pc, #460]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800172c:	e0db      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800172e:	4b73      	ldr	r3, [pc, #460]	; (80018fc <HAL_RCC_GetSysClockFreq+0x208>)
 8001730:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001732:	e0d8      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001734:	4b6f      	ldr	r3, [pc, #444]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800173c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800173e:	4b6d      	ldr	r3, [pc, #436]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d063      	beq.n	8001812 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174a:	4b6a      	ldr	r3, [pc, #424]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	099b      	lsrs	r3, r3, #6
 8001750:	2200      	movs	r2, #0
 8001752:	63bb      	str	r3, [r7, #56]	; 0x38
 8001754:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
 800175e:	2300      	movs	r3, #0
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
 8001762:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001766:	4622      	mov	r2, r4
 8001768:	462b      	mov	r3, r5
 800176a:	f04f 0000 	mov.w	r0, #0
 800176e:	f04f 0100 	mov.w	r1, #0
 8001772:	0159      	lsls	r1, r3, #5
 8001774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001778:	0150      	lsls	r0, r2, #5
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4621      	mov	r1, r4
 8001780:	1a51      	subs	r1, r2, r1
 8001782:	6139      	str	r1, [r7, #16]
 8001784:	4629      	mov	r1, r5
 8001786:	eb63 0301 	sbc.w	r3, r3, r1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001798:	4659      	mov	r1, fp
 800179a:	018b      	lsls	r3, r1, #6
 800179c:	4651      	mov	r1, sl
 800179e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017a2:	4651      	mov	r1, sl
 80017a4:	018a      	lsls	r2, r1, #6
 80017a6:	4651      	mov	r1, sl
 80017a8:	ebb2 0801 	subs.w	r8, r2, r1
 80017ac:	4659      	mov	r1, fp
 80017ae:	eb63 0901 	sbc.w	r9, r3, r1
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017c6:	4690      	mov	r8, r2
 80017c8:	4699      	mov	r9, r3
 80017ca:	4623      	mov	r3, r4
 80017cc:	eb18 0303 	adds.w	r3, r8, r3
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	462b      	mov	r3, r5
 80017d4:	eb49 0303 	adc.w	r3, r9, r3
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017e6:	4629      	mov	r1, r5
 80017e8:	024b      	lsls	r3, r1, #9
 80017ea:	4621      	mov	r1, r4
 80017ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017f0:	4621      	mov	r1, r4
 80017f2:	024a      	lsls	r2, r1, #9
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017fa:	2200      	movs	r2, #0
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80017fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001800:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001804:	f7fe fce4 	bl	80001d0 <__aeabi_uldivmod>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4613      	mov	r3, r2
 800180e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001810:	e058      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001812:	4b38      	ldr	r3, [pc, #224]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	099b      	lsrs	r3, r3, #6
 8001818:	2200      	movs	r2, #0
 800181a:	4618      	mov	r0, r3
 800181c:	4611      	mov	r1, r2
 800181e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001822:	623b      	str	r3, [r7, #32]
 8001824:	2300      	movs	r3, #0
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
 8001828:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800182c:	4642      	mov	r2, r8
 800182e:	464b      	mov	r3, r9
 8001830:	f04f 0000 	mov.w	r0, #0
 8001834:	f04f 0100 	mov.w	r1, #0
 8001838:	0159      	lsls	r1, r3, #5
 800183a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800183e:	0150      	lsls	r0, r2, #5
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4641      	mov	r1, r8
 8001846:	ebb2 0a01 	subs.w	sl, r2, r1
 800184a:	4649      	mov	r1, r9
 800184c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800185c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001860:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001864:	ebb2 040a 	subs.w	r4, r2, sl
 8001868:	eb63 050b 	sbc.w	r5, r3, fp
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	00eb      	lsls	r3, r5, #3
 8001876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800187a:	00e2      	lsls	r2, r4, #3
 800187c:	4614      	mov	r4, r2
 800187e:	461d      	mov	r5, r3
 8001880:	4643      	mov	r3, r8
 8001882:	18e3      	adds	r3, r4, r3
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	464b      	mov	r3, r9
 8001888:	eb45 0303 	adc.w	r3, r5, r3
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	e9d7 4500 	ldrd	r4, r5, [r7]
 800189a:	4629      	mov	r1, r5
 800189c:	028b      	lsls	r3, r1, #10
 800189e:	4621      	mov	r1, r4
 80018a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018a4:	4621      	mov	r1, r4
 80018a6:	028a      	lsls	r2, r1, #10
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ae:	2200      	movs	r2, #0
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	61fa      	str	r2, [r7, #28]
 80018b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018b8:	f7fe fc8a 	bl	80001d0 <__aeabi_uldivmod>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4613      	mov	r3, r2
 80018c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	0c1b      	lsrs	r3, r3, #16
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	3301      	adds	r3, #1
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80018d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018de:	e002      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80018e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3750      	adds	r7, #80	; 0x50
 80018ec:	46bd      	mov	sp, r7
 80018ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	00f42400 	.word	0x00f42400
 80018fc:	007a1200 	.word	0x007a1200

08001900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_RCC_GetHCLKFreq+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000000 	.word	0x20000000

08001918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800191c:	f7ff fff0 	bl	8001900 <HAL_RCC_GetHCLKFreq>
 8001920:	4602      	mov	r2, r0
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	0b5b      	lsrs	r3, r3, #13
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	4903      	ldr	r1, [pc, #12]	; (800193c <HAL_RCC_GetPCLK2Freq+0x24>)
 800192e:	5ccb      	ldrb	r3, [r1, r3]
 8001930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001934:	4618      	mov	r0, r3
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40023800 	.word	0x40023800
 800193c:	0800451c 	.word	0x0800451c

08001940 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	220f      	movs	r2, #15
 800194e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_RCC_GetClockConfig+0x5c>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 0203 	and.w	r2, r3, #3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <HAL_RCC_GetClockConfig+0x5c>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_RCC_GetClockConfig+0x5c>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_RCC_GetClockConfig+0x5c>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	08db      	lsrs	r3, r3, #3
 800197a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <HAL_RCC_GetClockConfig+0x60>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0207 	and.w	r2, r3, #7
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	601a      	str	r2, [r3, #0]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	40023c00 	.word	0x40023c00

080019a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e041      	b.n	8001a3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d106      	bne.n	80019d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f839 	bl	8001a42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3304      	adds	r3, #4
 80019e0:	4619      	mov	r1, r3
 80019e2:	4610      	mov	r0, r2
 80019e4:	f000 f9d8 	bl	8001d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d001      	beq.n	8001a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e04e      	b.n	8001b0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a23      	ldr	r2, [pc, #140]	; (8001b1c <HAL_TIM_Base_Start_IT+0xc4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d022      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x80>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a9a:	d01d      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x80>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <HAL_TIM_Base_Start_IT+0xc8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d018      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x80>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a1e      	ldr	r2, [pc, #120]	; (8001b24 <HAL_TIM_Base_Start_IT+0xcc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d013      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x80>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a1c      	ldr	r2, [pc, #112]	; (8001b28 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d00e      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x80>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a1b      	ldr	r2, [pc, #108]	; (8001b2c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d009      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x80>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a19      	ldr	r2, [pc, #100]	; (8001b30 <HAL_TIM_Base_Start_IT+0xd8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d004      	beq.n	8001ad8 <HAL_TIM_Base_Start_IT+0x80>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a18      	ldr	r2, [pc, #96]	; (8001b34 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d111      	bne.n	8001afc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d010      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 0201 	orr.w	r2, r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afa:	e007      	b.n	8001b0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	40000400 	.word	0x40000400
 8001b24:	40000800 	.word	0x40000800
 8001b28:	40000c00 	.word	0x40000c00
 8001b2c:	40010400 	.word	0x40010400
 8001b30:	40014000 	.word	0x40014000
 8001b34:	40001800 	.word	0x40001800

08001b38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d122      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d11b      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f06f 0202 	mvn.w	r2, #2
 8001b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f8ee 	bl	8001d5c <HAL_TIM_IC_CaptureCallback>
 8001b80:	e005      	b.n	8001b8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f8e0 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f8f1 	bl	8001d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d122      	bne.n	8001be8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d11b      	bne.n	8001be8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f06f 0204 	mvn.w	r2, #4
 8001bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f8c4 	bl	8001d5c <HAL_TIM_IC_CaptureCallback>
 8001bd4:	e005      	b.n	8001be2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f8b6 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f8c7 	bl	8001d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d122      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d11b      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f06f 0208 	mvn.w	r2, #8
 8001c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2204      	movs	r2, #4
 8001c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f89a 	bl	8001d5c <HAL_TIM_IC_CaptureCallback>
 8001c28:	e005      	b.n	8001c36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f88c 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f89d 	bl	8001d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b10      	cmp	r3, #16
 8001c48:	d122      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b10      	cmp	r3, #16
 8001c56:	d11b      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0210 	mvn.w	r2, #16
 8001c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2208      	movs	r2, #8
 8001c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f870 	bl	8001d5c <HAL_TIM_IC_CaptureCallback>
 8001c7c:	e005      	b.n	8001c8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f862 	bl	8001d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f873 	bl	8001d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d10e      	bne.n	8001cbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d107      	bne.n	8001cbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0201 	mvn.w	r2, #1
 8001cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7fe fd8c 	bl	80007d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc6:	2b80      	cmp	r3, #128	; 0x80
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd4:	2b80      	cmp	r3, #128	; 0x80
 8001cd6:	d107      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f902 	bl	8001eec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf2:	2b40      	cmp	r3, #64	; 0x40
 8001cf4:	d10e      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d00:	2b40      	cmp	r3, #64	; 0x40
 8001d02:	d107      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f838 	bl	8001d84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	2b20      	cmp	r3, #32
 8001d20:	d10e      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	d107      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0220 	mvn.w	r2, #32
 8001d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f8cc 	bl	8001ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a40      	ldr	r2, [pc, #256]	; (8001eac <TIM_Base_SetConfig+0x114>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d013      	beq.n	8001dd8 <TIM_Base_SetConfig+0x40>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db6:	d00f      	beq.n	8001dd8 <TIM_Base_SetConfig+0x40>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a3d      	ldr	r2, [pc, #244]	; (8001eb0 <TIM_Base_SetConfig+0x118>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d00b      	beq.n	8001dd8 <TIM_Base_SetConfig+0x40>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a3c      	ldr	r2, [pc, #240]	; (8001eb4 <TIM_Base_SetConfig+0x11c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d007      	beq.n	8001dd8 <TIM_Base_SetConfig+0x40>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a3b      	ldr	r2, [pc, #236]	; (8001eb8 <TIM_Base_SetConfig+0x120>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d003      	beq.n	8001dd8 <TIM_Base_SetConfig+0x40>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a3a      	ldr	r2, [pc, #232]	; (8001ebc <TIM_Base_SetConfig+0x124>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d108      	bne.n	8001dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a2f      	ldr	r2, [pc, #188]	; (8001eac <TIM_Base_SetConfig+0x114>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d02b      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df8:	d027      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a2c      	ldr	r2, [pc, #176]	; (8001eb0 <TIM_Base_SetConfig+0x118>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d023      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a2b      	ldr	r2, [pc, #172]	; (8001eb4 <TIM_Base_SetConfig+0x11c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d01f      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a2a      	ldr	r2, [pc, #168]	; (8001eb8 <TIM_Base_SetConfig+0x120>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01b      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a29      	ldr	r2, [pc, #164]	; (8001ebc <TIM_Base_SetConfig+0x124>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d017      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a28      	ldr	r2, [pc, #160]	; (8001ec0 <TIM_Base_SetConfig+0x128>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a27      	ldr	r2, [pc, #156]	; (8001ec4 <TIM_Base_SetConfig+0x12c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00f      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a26      	ldr	r2, [pc, #152]	; (8001ec8 <TIM_Base_SetConfig+0x130>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00b      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a25      	ldr	r2, [pc, #148]	; (8001ecc <TIM_Base_SetConfig+0x134>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d007      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a24      	ldr	r2, [pc, #144]	; (8001ed0 <TIM_Base_SetConfig+0x138>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d003      	beq.n	8001e4a <TIM_Base_SetConfig+0xb2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a23      	ldr	r2, [pc, #140]	; (8001ed4 <TIM_Base_SetConfig+0x13c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d108      	bne.n	8001e5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <TIM_Base_SetConfig+0x114>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d003      	beq.n	8001e90 <TIM_Base_SetConfig+0xf8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a0c      	ldr	r2, [pc, #48]	; (8001ebc <TIM_Base_SetConfig+0x124>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d103      	bne.n	8001e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	615a      	str	r2, [r3, #20]
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	40000400 	.word	0x40000400
 8001eb4:	40000800 	.word	0x40000800
 8001eb8:	40000c00 	.word	0x40000c00
 8001ebc:	40010400 	.word	0x40010400
 8001ec0:	40014000 	.word	0x40014000
 8001ec4:	40014400 	.word	0x40014400
 8001ec8:	40014800 	.word	0x40014800
 8001ecc:	40001800 	.word	0x40001800
 8001ed0:	40001c00 	.word	0x40001c00
 8001ed4:	40002000 	.word	0x40002000

08001ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f12:	2b84      	cmp	r3, #132	; 0x84
 8001f14:	d005      	beq.n	8001f22 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001f16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3303      	adds	r3, #3
 8001f20:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001f34:	f000 ff52 	bl	8002ddc <vTaskStartScheduler>
  
  return osOK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001f3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f40:	b089      	sub	sp, #36	; 0x24
 8001f42:	af04      	add	r7, sp, #16
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d020      	beq.n	8001f92 <osThreadCreate+0x54>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01c      	beq.n	8001f92 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685c      	ldr	r4, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681d      	ldr	r5, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691e      	ldr	r6, [r3, #16]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff ffc8 	bl	8001f00 <makeFreeRtosPriority>
 8001f70:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f7a:	9202      	str	r2, [sp, #8]
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	9100      	str	r1, [sp, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	4632      	mov	r2, r6
 8001f84:	4629      	mov	r1, r5
 8001f86:	4620      	mov	r0, r4
 8001f88:	f000 fd4a 	bl	8002a20 <xTaskCreateStatic>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	e01c      	b.n	8001fcc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685c      	ldr	r4, [r3, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f9e:	b29e      	uxth	r6, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ffaa 	bl	8001f00 <makeFreeRtosPriority>
 8001fac:	4602      	mov	r2, r0
 8001fae:	f107 030c 	add.w	r3, r7, #12
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	9200      	str	r2, [sp, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	4632      	mov	r2, r6
 8001fba:	4629      	mov	r1, r5
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f000 fd8c 	bl	8002ada <xTaskCreate>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d001      	beq.n	8001fcc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	e000      	b.n	8001fce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fd6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <osDelay+0x16>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	e000      	b.n	8001fee <osDelay+0x18>
 8001fec:	2301      	movs	r3, #1
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 fec0 	bl	8002d74 <vTaskDelay>
  
  return osOK;
 8001ff4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f103 0208 	add.w	r2, r3, #8
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f04f 32ff 	mov.w	r2, #4294967295
 8002016:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f103 0208 	add.w	r2, r3, #8
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f103 0208 	add.w	r2, r3, #8
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	601a      	str	r2, [r3, #0]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b6:	d103      	bne.n	80020c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	e00c      	b.n	80020da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3308      	adds	r3, #8
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	e002      	b.n	80020ce <vListInsert+0x2e>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d2f6      	bcs.n	80020c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	601a      	str	r2, [r3, #0]
}
 8002106:	bf00      	nop
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002112:	b480      	push	{r7}
 8002114:	b085      	sub	sp, #20
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6892      	ldr	r2, [r2, #8]
 8002128:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6852      	ldr	r2, [r2, #4]
 8002132:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	429a      	cmp	r2, r3
 800213c:	d103      	bne.n	8002146 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	1e5a      	subs	r2, r3, #1
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10a      	bne.n	8002192 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800218e:	bf00      	nop
 8002190:	e7fe      	b.n	8002190 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002192:	f001 fd87 	bl	8003ca4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219e:	68f9      	ldr	r1, [r7, #12]
 80021a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	441a      	add	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c2:	3b01      	subs	r3, #1
 80021c4:	68f9      	ldr	r1, [r7, #12]
 80021c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	441a      	add	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	22ff      	movs	r2, #255	; 0xff
 80021d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	22ff      	movs	r2, #255	; 0xff
 80021de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d114      	bne.n	8002212 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01a      	beq.n	8002226 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	3310      	adds	r3, #16
 80021f4:	4618      	mov	r0, r3
 80021f6:	f001 f843 	bl	8003280 <xTaskRemoveFromEventList>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d012      	beq.n	8002226 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <xQueueGenericReset+0xcc>)
 8002202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	f3bf 8f4f 	dsb	sy
 800220c:	f3bf 8f6f 	isb	sy
 8002210:	e009      	b.n	8002226 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	3310      	adds	r3, #16
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fef1 	bl	8001ffe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3324      	adds	r3, #36	; 0x24
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff feec 	bl	8001ffe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002226:	f001 fd6d 	bl	8003d04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	e000ed04 	.word	0xe000ed04

08002238 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af02      	add	r7, sp, #8
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	4613      	mov	r3, r2
 8002244:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10a      	bne.n	8002262 <xQueueGenericCreate+0x2a>
	__asm volatile
 800224c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002250:	f383 8811 	msr	BASEPRI, r3
 8002254:	f3bf 8f6f 	isb	sy
 8002258:	f3bf 8f4f 	dsb	sy
 800225c:	613b      	str	r3, [r7, #16]
}
 800225e:	bf00      	nop
 8002260:	e7fe      	b.n	8002260 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	fb02 f303 	mul.w	r3, r2, r3
 800226a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	3348      	adds	r3, #72	; 0x48
 8002270:	4618      	mov	r0, r3
 8002272:	f001 fe39 	bl	8003ee8 <pvPortMalloc>
 8002276:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d011      	beq.n	80022a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	3348      	adds	r3, #72	; 0x48
 8002286:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002290:	79fa      	ldrb	r2, [r7, #7]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	4613      	mov	r3, r2
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f805 	bl	80022ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80022a2:	69bb      	ldr	r3, [r7, #24]
	}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d103      	bne.n	80022c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	e002      	b.n	80022ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80022da:	2101      	movs	r1, #1
 80022dc:	69b8      	ldr	r0, [r7, #24]
 80022de:	f7ff ff43 	bl	8002168 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08e      	sub	sp, #56	; 0x38
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80022fa:	2300      	movs	r3, #0
 80022fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10a      	bne.n	800231e <xQueueGenericSend+0x32>
	__asm volatile
 8002308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800231a:	bf00      	nop
 800231c:	e7fe      	b.n	800231c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d103      	bne.n	800232c <xQueueGenericSend+0x40>
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <xQueueGenericSend+0x44>
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <xQueueGenericSend+0x46>
 8002330:	2300      	movs	r3, #0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10a      	bne.n	800234c <xQueueGenericSend+0x60>
	__asm volatile
 8002336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233a:	f383 8811 	msr	BASEPRI, r3
 800233e:	f3bf 8f6f 	isb	sy
 8002342:	f3bf 8f4f 	dsb	sy
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002348:	bf00      	nop
 800234a:	e7fe      	b.n	800234a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d103      	bne.n	800235a <xQueueGenericSend+0x6e>
 8002352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <xQueueGenericSend+0x72>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <xQueueGenericSend+0x74>
 800235e:	2300      	movs	r3, #0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10a      	bne.n	800237a <xQueueGenericSend+0x8e>
	__asm volatile
 8002364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002368:	f383 8811 	msr	BASEPRI, r3
 800236c:	f3bf 8f6f 	isb	sy
 8002370:	f3bf 8f4f 	dsb	sy
 8002374:	623b      	str	r3, [r7, #32]
}
 8002376:	bf00      	nop
 8002378:	e7fe      	b.n	8002378 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800237a:	f001 f941 	bl	8003600 <xTaskGetSchedulerState>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <xQueueGenericSend+0x9e>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <xQueueGenericSend+0xa2>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <xQueueGenericSend+0xa4>
 800238e:	2300      	movs	r3, #0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10a      	bne.n	80023aa <xQueueGenericSend+0xbe>
	__asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	61fb      	str	r3, [r7, #28]
}
 80023a6:	bf00      	nop
 80023a8:	e7fe      	b.n	80023a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80023aa:	f001 fc7b 	bl	8003ca4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d302      	bcc.n	80023c0 <xQueueGenericSend+0xd4>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d129      	bne.n	8002414 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	68b9      	ldr	r1, [r7, #8]
 80023c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023c6:	f000 fa41 	bl	800284c <prvCopyDataToQueue>
 80023ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d010      	beq.n	80023f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d6:	3324      	adds	r3, #36	; 0x24
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 ff51 	bl	8003280 <xTaskRemoveFromEventList>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d013      	beq.n	800240c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80023e4:	4b3f      	ldr	r3, [pc, #252]	; (80024e4 <xQueueGenericSend+0x1f8>)
 80023e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	f3bf 8f4f 	dsb	sy
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	e00a      	b.n	800240c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80023f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80023fc:	4b39      	ldr	r3, [pc, #228]	; (80024e4 <xQueueGenericSend+0x1f8>)
 80023fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800240c:	f001 fc7a 	bl	8003d04 <vPortExitCritical>
				return pdPASS;
 8002410:	2301      	movs	r3, #1
 8002412:	e063      	b.n	80024dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d103      	bne.n	8002422 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800241a:	f001 fc73 	bl	8003d04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800241e:	2300      	movs	r3, #0
 8002420:	e05c      	b.n	80024dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002424:	2b00      	cmp	r3, #0
 8002426:	d106      	bne.n	8002436 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4618      	mov	r0, r3
 800242e:	f000 ff89 	bl	8003344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002432:	2301      	movs	r3, #1
 8002434:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002436:	f001 fc65 	bl	8003d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800243a:	f000 fd39 	bl	8002eb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800243e:	f001 fc31 	bl	8003ca4 <vPortEnterCritical>
 8002442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002444:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002448:	b25b      	sxtb	r3, r3
 800244a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244e:	d103      	bne.n	8002458 <xQueueGenericSend+0x16c>
 8002450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800245e:	b25b      	sxtb	r3, r3
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d103      	bne.n	800246e <xQueueGenericSend+0x182>
 8002466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800246e:	f001 fc49 	bl	8003d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002472:	1d3a      	adds	r2, r7, #4
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f000 ff78 	bl	8003370 <xTaskCheckForTimeOut>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d124      	bne.n	80024d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002486:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002488:	f000 fab2 	bl	80029f0 <prvIsQueueFull>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d018      	beq.n	80024c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	3310      	adds	r3, #16
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fecc 	bl	8003238 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80024a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024a2:	f000 fa3d 	bl	8002920 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80024a6:	f000 fd11 	bl	8002ecc <xTaskResumeAll>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f47f af7c 	bne.w	80023aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <xQueueGenericSend+0x1f8>)
 80024b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	f3bf 8f4f 	dsb	sy
 80024be:	f3bf 8f6f 	isb	sy
 80024c2:	e772      	b.n	80023aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80024c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024c6:	f000 fa2b 	bl	8002920 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80024ca:	f000 fcff 	bl	8002ecc <xTaskResumeAll>
 80024ce:	e76c      	b.n	80023aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80024d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024d2:	f000 fa25 	bl	8002920 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80024d6:	f000 fcf9 	bl	8002ecc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80024da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3738      	adds	r7, #56	; 0x38
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	e000ed04 	.word	0xe000ed04

080024e8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08e      	sub	sp, #56	; 0x38
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10a      	bne.n	8002512 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80024fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002500:	f383 8811 	msr	BASEPRI, r3
 8002504:	f3bf 8f6f 	isb	sy
 8002508:	f3bf 8f4f 	dsb	sy
 800250c:	623b      	str	r3, [r7, #32]
}
 800250e:	bf00      	nop
 8002510:	e7fe      	b.n	8002510 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <xQueueGiveFromISR+0x48>
	__asm volatile
 800251a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251e:	f383 8811 	msr	BASEPRI, r3
 8002522:	f3bf 8f6f 	isb	sy
 8002526:	f3bf 8f4f 	dsb	sy
 800252a:	61fb      	str	r3, [r7, #28]
}
 800252c:	bf00      	nop
 800252e:	e7fe      	b.n	800252e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d103      	bne.n	8002540 <xQueueGiveFromISR+0x58>
 8002538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <xQueueGiveFromISR+0x5c>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <xQueueGiveFromISR+0x5e>
 8002544:	2300      	movs	r3, #0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10a      	bne.n	8002560 <xQueueGiveFromISR+0x78>
	__asm volatile
 800254a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254e:	f383 8811 	msr	BASEPRI, r3
 8002552:	f3bf 8f6f 	isb	sy
 8002556:	f3bf 8f4f 	dsb	sy
 800255a:	61bb      	str	r3, [r7, #24]
}
 800255c:	bf00      	nop
 800255e:	e7fe      	b.n	800255e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002560:	f001 fc82 	bl	8003e68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002564:	f3ef 8211 	mrs	r2, BASEPRI
 8002568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	617a      	str	r2, [r7, #20]
 800257a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800257c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800258c:	429a      	cmp	r2, r3
 800258e:	d22b      	bcs.n	80025e8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800259a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80025a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80025a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025aa:	d112      	bne.n	80025d2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d016      	beq.n	80025e2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b6:	3324      	adds	r3, #36	; 0x24
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 fe61 	bl	8003280 <xTaskRemoveFromEventList>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00e      	beq.n	80025e2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2201      	movs	r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	e007      	b.n	80025e2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80025d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025d6:	3301      	adds	r3, #1
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	b25a      	sxtb	r2, r3
 80025dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80025e2:	2301      	movs	r3, #1
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
 80025e6:	e001      	b.n	80025ec <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	637b      	str	r3, [r7, #52]	; 0x34
 80025ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ee:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80025f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80025f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3738      	adds	r7, #56	; 0x38
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08e      	sub	sp, #56	; 0x38
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800260e:	2300      	movs	r3, #0
 8002610:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002616:	2300      	movs	r3, #0
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10a      	bne.n	8002636 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002624:	f383 8811 	msr	BASEPRI, r3
 8002628:	f3bf 8f6f 	isb	sy
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	623b      	str	r3, [r7, #32]
}
 8002632:	bf00      	nop
 8002634:	e7fe      	b.n	8002634 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800263e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002642:	f383 8811 	msr	BASEPRI, r3
 8002646:	f3bf 8f6f 	isb	sy
 800264a:	f3bf 8f4f 	dsb	sy
 800264e:	61fb      	str	r3, [r7, #28]
}
 8002650:	bf00      	nop
 8002652:	e7fe      	b.n	8002652 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002654:	f000 ffd4 	bl	8003600 <xTaskGetSchedulerState>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <xQueueSemaphoreTake+0x60>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <xQueueSemaphoreTake+0x64>
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <xQueueSemaphoreTake+0x66>
 8002668:	2300      	movs	r3, #0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10a      	bne.n	8002684 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800266e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	61bb      	str	r3, [r7, #24]
}
 8002680:	bf00      	nop
 8002682:	e7fe      	b.n	8002682 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002684:	f001 fb0e 	bl	8003ca4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002690:	2b00      	cmp	r3, #0
 8002692:	d024      	beq.n	80026de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	1e5a      	subs	r2, r3, #1
 8002698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d104      	bne.n	80026ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80026a4:	f001 f954 	bl	8003950 <pvTaskIncrementMutexHeldCount>
 80026a8:	4602      	mov	r2, r0
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00f      	beq.n	80026d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	3310      	adds	r3, #16
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 fde0 	bl	8003280 <xTaskRemoveFromEventList>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80026c6:	4b54      	ldr	r3, [pc, #336]	; (8002818 <xQueueSemaphoreTake+0x214>)
 80026c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80026d6:	f001 fb15 	bl	8003d04 <vPortExitCritical>
				return pdPASS;
 80026da:	2301      	movs	r3, #1
 80026dc:	e097      	b.n	800280e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d111      	bne.n	8002708 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80026ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ee:	f383 8811 	msr	BASEPRI, r3
 80026f2:	f3bf 8f6f 	isb	sy
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	617b      	str	r3, [r7, #20]
}
 80026fc:	bf00      	nop
 80026fe:	e7fe      	b.n	80026fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002700:	f001 fb00 	bl	8003d04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002704:	2300      	movs	r3, #0
 8002706:	e082      	b.n	800280e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800270e:	f107 030c 	add.w	r3, r7, #12
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fe16 	bl	8003344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002718:	2301      	movs	r3, #1
 800271a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800271c:	f001 faf2 	bl	8003d04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002720:	f000 fbc6 	bl	8002eb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002724:	f001 fabe 	bl	8003ca4 <vPortEnterCritical>
 8002728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800272e:	b25b      	sxtb	r3, r3
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d103      	bne.n	800273e <xQueueSemaphoreTake+0x13a>
 8002736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002744:	b25b      	sxtb	r3, r3
 8002746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274a:	d103      	bne.n	8002754 <xQueueSemaphoreTake+0x150>
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002754:	f001 fad6 	bl	8003d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002758:	463a      	mov	r2, r7
 800275a:	f107 030c 	add.w	r3, r7, #12
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fe05 	bl	8003370 <xTaskCheckForTimeOut>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d132      	bne.n	80027d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800276c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800276e:	f000 f929 	bl	80029c4 <prvIsQueueEmpty>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d026      	beq.n	80027c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d109      	bne.n	8002794 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002780:	f001 fa90 	bl	8003ca4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	4618      	mov	r0, r3
 800278a:	f000 ff57 	bl	800363c <xTaskPriorityInherit>
 800278e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002790:	f001 fab8 	bl	8003d04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002796:	3324      	adds	r3, #36	; 0x24
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f000 fd4b 	bl	8003238 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80027a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027a4:	f000 f8bc 	bl	8002920 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80027a8:	f000 fb90 	bl	8002ecc <xTaskResumeAll>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f47f af68 	bne.w	8002684 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80027b4:	4b18      	ldr	r3, [pc, #96]	; (8002818 <xQueueSemaphoreTake+0x214>)
 80027b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	e75e      	b.n	8002684 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80027c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027c8:	f000 f8aa 	bl	8002920 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027cc:	f000 fb7e 	bl	8002ecc <xTaskResumeAll>
 80027d0:	e758      	b.n	8002684 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80027d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027d4:	f000 f8a4 	bl	8002920 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027d8:	f000 fb78 	bl	8002ecc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027de:	f000 f8f1 	bl	80029c4 <prvIsQueueEmpty>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f43f af4d 	beq.w	8002684 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80027ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00d      	beq.n	800280c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80027f0:	f001 fa58 	bl	8003ca4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80027f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027f6:	f000 f811 	bl	800281c <prvGetDisinheritPriorityAfterTimeout>
 80027fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80027fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002802:	4618      	mov	r0, r3
 8002804:	f001 f816 	bl	8003834 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002808:	f001 fa7c 	bl	8003d04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800280c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800280e:	4618      	mov	r0, r3
 8002810:	3738      	adds	r7, #56	; 0x38
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	e000ed04 	.word	0xe000ed04

0800281c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	2b00      	cmp	r3, #0
 800282a:	d006      	beq.n	800283a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f1c3 0307 	rsb	r3, r3, #7
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e001      	b.n	800283e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800283e:	68fb      	ldr	r3, [r7, #12]
	}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10d      	bne.n	8002886 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d14d      	bne.n	800290e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	4618      	mov	r0, r3
 8002878:	f000 ff56 	bl	8003728 <xTaskPriorityDisinherit>
 800287c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	e043      	b.n	800290e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d119      	bne.n	80028c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6858      	ldr	r0, [r3, #4]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	461a      	mov	r2, r3
 8002896:	68b9      	ldr	r1, [r7, #8]
 8002898:	f001 fd36 	bl	8004308 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	441a      	add	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d32b      	bcc.n	800290e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	e026      	b.n	800290e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	68d8      	ldr	r0, [r3, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	461a      	mov	r2, r3
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	f001 fd1c 	bl	8004308 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	425b      	negs	r3, r3
 80028da:	441a      	add	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d207      	bcs.n	80028fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	425b      	negs	r3, r3
 80028f6:	441a      	add	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d105      	bne.n	800290e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	3b01      	subs	r3, #1
 800290c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002916:	697b      	ldr	r3, [r7, #20]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002928:	f001 f9bc 	bl	8003ca4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002932:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002934:	e011      	b.n	800295a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	2b00      	cmp	r3, #0
 800293c:	d012      	beq.n	8002964 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3324      	adds	r3, #36	; 0x24
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fc9c 	bl	8003280 <xTaskRemoveFromEventList>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800294e:	f000 fd71 	bl	8003434 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	3b01      	subs	r3, #1
 8002956:	b2db      	uxtb	r3, r3
 8002958:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800295a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295e:	2b00      	cmp	r3, #0
 8002960:	dce9      	bgt.n	8002936 <prvUnlockQueue+0x16>
 8002962:	e000      	b.n	8002966 <prvUnlockQueue+0x46>
					break;
 8002964:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	22ff      	movs	r2, #255	; 0xff
 800296a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800296e:	f001 f9c9 	bl	8003d04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002972:	f001 f997 	bl	8003ca4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800297c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800297e:	e011      	b.n	80029a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d012      	beq.n	80029ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3310      	adds	r3, #16
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fc77 	bl	8003280 <xTaskRemoveFromEventList>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002998:	f000 fd4c 	bl	8003434 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800299c:	7bbb      	ldrb	r3, [r7, #14]
 800299e:	3b01      	subs	r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	dce9      	bgt.n	8002980 <prvUnlockQueue+0x60>
 80029ac:	e000      	b.n	80029b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80029ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	22ff      	movs	r2, #255	; 0xff
 80029b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80029b8:	f001 f9a4 	bl	8003d04 <vPortExitCritical>
}
 80029bc:	bf00      	nop
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80029cc:	f001 f96a 	bl	8003ca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d102      	bne.n	80029de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80029d8:	2301      	movs	r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	e001      	b.n	80029e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80029e2:	f001 f98f 	bl	8003d04 <vPortExitCritical>

	return xReturn;
 80029e6:	68fb      	ldr	r3, [r7, #12]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80029f8:	f001 f954 	bl	8003ca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d102      	bne.n	8002a0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	e001      	b.n	8002a12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a12:	f001 f977 	bl	8003d04 <vPortExitCritical>

	return xReturn;
 8002a16:	68fb      	ldr	r3, [r7, #12]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08e      	sub	sp, #56	; 0x38
 8002a24:	af04      	add	r7, sp, #16
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	623b      	str	r3, [r7, #32]
}
 8002a46:	bf00      	nop
 8002a48:	e7fe      	b.n	8002a48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10a      	bne.n	8002a66 <xTaskCreateStatic+0x46>
	__asm volatile
 8002a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a54:	f383 8811 	msr	BASEPRI, r3
 8002a58:	f3bf 8f6f 	isb	sy
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	61fb      	str	r3, [r7, #28]
}
 8002a62:	bf00      	nop
 8002a64:	e7fe      	b.n	8002a64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a66:	23b4      	movs	r3, #180	; 0xb4
 8002a68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2bb4      	cmp	r3, #180	; 0xb4
 8002a6e:	d00a      	beq.n	8002a86 <xTaskCreateStatic+0x66>
	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	61bb      	str	r3, [r7, #24]
}
 8002a82:	bf00      	nop
 8002a84:	e7fe      	b.n	8002a84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002a86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d01e      	beq.n	8002acc <xTaskCreateStatic+0xac>
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01b      	beq.n	8002acc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	9303      	str	r3, [sp, #12]
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	9302      	str	r3, [sp, #8]
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f850 	bl	8002b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ac6:	f000 f8eb 	bl	8002ca0 <prvAddNewTaskToReadyList>
 8002aca:	e001      	b.n	8002ad0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ad0:	697b      	ldr	r3, [r7, #20]
	}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3728      	adds	r7, #40	; 0x28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b08c      	sub	sp, #48	; 0x30
 8002ade:	af04      	add	r7, sp, #16
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f001 f9fa 	bl	8003ee8 <pvPortMalloc>
 8002af4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00e      	beq.n	8002b1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002afc:	20b4      	movs	r0, #180	; 0xb4
 8002afe:	f001 f9f3 	bl	8003ee8 <pvPortMalloc>
 8002b02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b10:	e005      	b.n	8002b1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b12:	6978      	ldr	r0, [r7, #20]
 8002b14:	f001 fab4 	bl	8004080 <vPortFree>
 8002b18:	e001      	b.n	8002b1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d017      	beq.n	8002b54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b2c:	88fa      	ldrh	r2, [r7, #6]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	9303      	str	r3, [sp, #12]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	9302      	str	r3, [sp, #8]
 8002b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b38:	9301      	str	r3, [sp, #4]
 8002b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f80e 	bl	8002b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b48:	69f8      	ldr	r0, [r7, #28]
 8002b4a:	f000 f8a9 	bl	8002ca0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	e002      	b.n	8002b5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b54:	f04f 33ff 	mov.w	r3, #4294967295
 8002b58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b5a:	69bb      	ldr	r3, [r7, #24]
	}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	f023 0307 	bic.w	r3, r3, #7
 8002b8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <prvInitialiseNewTask+0x48>
	__asm volatile
 8002b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	617b      	str	r3, [r7, #20]
}
 8002ba8:	bf00      	nop
 8002baa:	e7fe      	b.n	8002baa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d01f      	beq.n	8002bf2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	e012      	b.n	8002bde <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	7819      	ldrb	r1, [r3, #0]
 8002bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3334      	adds	r3, #52	; 0x34
 8002bc8:	460a      	mov	r2, r1
 8002bca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d006      	beq.n	8002be6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	2b0f      	cmp	r3, #15
 8002be2:	d9e9      	bls.n	8002bb8 <prvInitialiseNewTask+0x54>
 8002be4:	e000      	b.n	8002be8 <prvInitialiseNewTask+0x84>
			{
				break;
 8002be6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bf0:	e003      	b.n	8002bfa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfc:	2b06      	cmp	r3, #6
 8002bfe:	d901      	bls.n	8002c04 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c00:	2306      	movs	r3, #6
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c0e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	2200      	movs	r2, #0
 8002c14:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	3304      	adds	r3, #4
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fa0f 	bl	800203e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	3318      	adds	r3, #24
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fa0a 	bl	800203e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c32:	f1c3 0207 	rsb	r2, r3, #7
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c42:	2200      	movs	r2, #0
 8002c44:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	334c      	adds	r3, #76	; 0x4c
 8002c54:	2260      	movs	r2, #96	; 0x60
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f001 fb63 	bl	8004324 <memset>
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	4a0c      	ldr	r2, [pc, #48]	; (8002c94 <prvInitialiseNewTask+0x130>)
 8002c62:	651a      	str	r2, [r3, #80]	; 0x50
 8002c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c66:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <prvInitialiseNewTask+0x134>)
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <prvInitialiseNewTask+0x138>)
 8002c6e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	68f9      	ldr	r1, [r7, #12]
 8002c74:	69b8      	ldr	r0, [r7, #24]
 8002c76:	f000 fee5 	bl	8003a44 <pxPortInitialiseStack>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c8c:	bf00      	nop
 8002c8e:	3720      	adds	r7, #32
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	08004544 	.word	0x08004544
 8002c98:	08004564 	.word	0x08004564
 8002c9c:	08004524 	.word	0x08004524

08002ca0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ca8:	f000 fffc 	bl	8003ca4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002cac:	4b2a      	ldr	r3, [pc, #168]	; (8002d58 <prvAddNewTaskToReadyList+0xb8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	4a29      	ldr	r2, [pc, #164]	; (8002d58 <prvAddNewTaskToReadyList+0xb8>)
 8002cb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002cb6:	4b29      	ldr	r3, [pc, #164]	; (8002d5c <prvAddNewTaskToReadyList+0xbc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002cbe:	4a27      	ldr	r2, [pc, #156]	; (8002d5c <prvAddNewTaskToReadyList+0xbc>)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cc4:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <prvAddNewTaskToReadyList+0xb8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d110      	bne.n	8002cee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ccc:	f000 fbd6 	bl	800347c <prvInitialiseTaskLists>
 8002cd0:	e00d      	b.n	8002cee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002cd2:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <prvAddNewTaskToReadyList+0xc0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cda:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <prvAddNewTaskToReadyList+0xbc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d802      	bhi.n	8002cee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ce8:	4a1c      	ldr	r2, [pc, #112]	; (8002d5c <prvAddNewTaskToReadyList+0xbc>)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002cee:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <prvAddNewTaskToReadyList+0xc4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	; (8002d64 <prvAddNewTaskToReadyList+0xc4>)
 8002cf6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <prvAddNewTaskToReadyList+0xc8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	4a18      	ldr	r2, [pc, #96]	; (8002d68 <prvAddNewTaskToReadyList+0xc8>)
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4a15      	ldr	r2, [pc, #84]	; (8002d6c <prvAddNewTaskToReadyList+0xcc>)
 8002d18:	441a      	add	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4610      	mov	r0, r2
 8002d22:	f7ff f999 	bl	8002058 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d26:	f000 ffed 	bl	8003d04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <prvAddNewTaskToReadyList+0xc0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00e      	beq.n	8002d50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <prvAddNewTaskToReadyList+0xbc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d207      	bcs.n	8002d50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <prvAddNewTaskToReadyList+0xd0>)
 8002d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000498 	.word	0x20000498
 8002d5c:	20000398 	.word	0x20000398
 8002d60:	200004a4 	.word	0x200004a4
 8002d64:	200004b4 	.word	0x200004b4
 8002d68:	200004a0 	.word	0x200004a0
 8002d6c:	2000039c 	.word	0x2000039c
 8002d70:	e000ed04 	.word	0xe000ed04

08002d74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d017      	beq.n	8002db6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <vTaskDelay+0x60>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <vTaskDelay+0x30>
	__asm volatile
 8002d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	60bb      	str	r3, [r7, #8]
}
 8002da0:	bf00      	nop
 8002da2:	e7fe      	b.n	8002da2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002da4:	f000 f884 	bl	8002eb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002da8:	2100      	movs	r1, #0
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fde4 	bl	8003978 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002db0:	f000 f88c 	bl	8002ecc <xTaskResumeAll>
 8002db4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d107      	bne.n	8002dcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <vTaskDelay+0x64>)
 8002dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002dcc:	bf00      	nop
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	200004c0 	.word	0x200004c0
 8002dd8:	e000ed04 	.word	0xe000ed04

08002ddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002dea:	463a      	mov	r2, r7
 8002dec:	1d39      	adds	r1, r7, #4
 8002dee:	f107 0308 	add.w	r3, r7, #8
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd fb6e 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002df8:	6839      	ldr	r1, [r7, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	9202      	str	r2, [sp, #8]
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	2300      	movs	r3, #0
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2300      	movs	r3, #0
 8002e08:	460a      	mov	r2, r1
 8002e0a:	4921      	ldr	r1, [pc, #132]	; (8002e90 <vTaskStartScheduler+0xb4>)
 8002e0c:	4821      	ldr	r0, [pc, #132]	; (8002e94 <vTaskStartScheduler+0xb8>)
 8002e0e:	f7ff fe07 	bl	8002a20 <xTaskCreateStatic>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4a20      	ldr	r2, [pc, #128]	; (8002e98 <vTaskStartScheduler+0xbc>)
 8002e16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002e18:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <vTaskStartScheduler+0xbc>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002e20:	2301      	movs	r3, #1
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e001      	b.n	8002e2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d11b      	bne.n	8002e68 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	613b      	str	r3, [r7, #16]
}
 8002e42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002e44:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <vTaskStartScheduler+0xc0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	334c      	adds	r3, #76	; 0x4c
 8002e4a:	4a15      	ldr	r2, [pc, #84]	; (8002ea0 <vTaskStartScheduler+0xc4>)
 8002e4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <vTaskStartScheduler+0xc8>)
 8002e50:	f04f 32ff 	mov.w	r2, #4294967295
 8002e54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e56:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <vTaskStartScheduler+0xcc>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e5c:	4b13      	ldr	r3, [pc, #76]	; (8002eac <vTaskStartScheduler+0xd0>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e62:	f000 fe7d 	bl	8003b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e66:	e00e      	b.n	8002e86 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d10a      	bne.n	8002e86 <vTaskStartScheduler+0xaa>
	__asm volatile
 8002e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e74:	f383 8811 	msr	BASEPRI, r3
 8002e78:	f3bf 8f6f 	isb	sy
 8002e7c:	f3bf 8f4f 	dsb	sy
 8002e80:	60fb      	str	r3, [r7, #12]
}
 8002e82:	bf00      	nop
 8002e84:	e7fe      	b.n	8002e84 <vTaskStartScheduler+0xa8>
}
 8002e86:	bf00      	nop
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	08004504 	.word	0x08004504
 8002e94:	0800344d 	.word	0x0800344d
 8002e98:	200004bc 	.word	0x200004bc
 8002e9c:	20000398 	.word	0x20000398
 8002ea0:	20000010 	.word	0x20000010
 8002ea4:	200004b8 	.word	0x200004b8
 8002ea8:	200004a4 	.word	0x200004a4
 8002eac:	2000049c 	.word	0x2000049c

08002eb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <vTaskSuspendAll+0x18>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	4a03      	ldr	r2, [pc, #12]	; (8002ec8 <vTaskSuspendAll+0x18>)
 8002ebc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	200004c0 	.word	0x200004c0

08002ecc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002eda:	4b41      	ldr	r3, [pc, #260]	; (8002fe0 <xTaskResumeAll+0x114>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10a      	bne.n	8002ef8 <xTaskResumeAll+0x2c>
	__asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	603b      	str	r3, [r7, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	e7fe      	b.n	8002ef6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ef8:	f000 fed4 	bl	8003ca4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002efc:	4b38      	ldr	r3, [pc, #224]	; (8002fe0 <xTaskResumeAll+0x114>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	4a37      	ldr	r2, [pc, #220]	; (8002fe0 <xTaskResumeAll+0x114>)
 8002f04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f06:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <xTaskResumeAll+0x114>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d161      	bne.n	8002fd2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f0e:	4b35      	ldr	r3, [pc, #212]	; (8002fe4 <xTaskResumeAll+0x118>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d05d      	beq.n	8002fd2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f16:	e02e      	b.n	8002f76 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f18:	4b33      	ldr	r3, [pc, #204]	; (8002fe8 <xTaskResumeAll+0x11c>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3318      	adds	r3, #24
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff f8f4 	bl	8002112 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff f8ef 	bl	8002112 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	2201      	movs	r2, #1
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <xTaskResumeAll+0x120>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	4a2a      	ldr	r2, [pc, #168]	; (8002fec <xTaskResumeAll+0x120>)
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4a27      	ldr	r2, [pc, #156]	; (8002ff0 <xTaskResumeAll+0x124>)
 8002f54:	441a      	add	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	f7ff f87b 	bl	8002058 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f66:	4b23      	ldr	r3, [pc, #140]	; (8002ff4 <xTaskResumeAll+0x128>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d302      	bcc.n	8002f76 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002f70:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <xTaskResumeAll+0x12c>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f76:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <xTaskResumeAll+0x11c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1cc      	bne.n	8002f18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f84:	f000 fb1c 	bl	80035c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f88:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <xTaskResumeAll+0x130>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d010      	beq.n	8002fb6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f94:	f000 f836 	bl	8003004 <xTaskIncrementTick>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002f9e:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <xTaskResumeAll+0x12c>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f1      	bne.n	8002f94 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002fb0:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <xTaskResumeAll+0x130>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <xTaskResumeAll+0x12c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d009      	beq.n	8002fd2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <xTaskResumeAll+0x134>)
 8002fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002fd2:	f000 fe97 	bl	8003d04 <vPortExitCritical>

	return xAlreadyYielded;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	200004c0 	.word	0x200004c0
 8002fe4:	20000498 	.word	0x20000498
 8002fe8:	20000458 	.word	0x20000458
 8002fec:	200004a0 	.word	0x200004a0
 8002ff0:	2000039c 	.word	0x2000039c
 8002ff4:	20000398 	.word	0x20000398
 8002ff8:	200004ac 	.word	0x200004ac
 8002ffc:	200004a8 	.word	0x200004a8
 8003000:	e000ed04 	.word	0xe000ed04

08003004 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800300e:	4b4e      	ldr	r3, [pc, #312]	; (8003148 <xTaskIncrementTick+0x144>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 808e 	bne.w	8003134 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003018:	4b4c      	ldr	r3, [pc, #304]	; (800314c <xTaskIncrementTick+0x148>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3301      	adds	r3, #1
 800301e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003020:	4a4a      	ldr	r2, [pc, #296]	; (800314c <xTaskIncrementTick+0x148>)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d120      	bne.n	800306e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800302c:	4b48      	ldr	r3, [pc, #288]	; (8003150 <xTaskIncrementTick+0x14c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <xTaskIncrementTick+0x48>
	__asm volatile
 8003036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	603b      	str	r3, [r7, #0]
}
 8003048:	bf00      	nop
 800304a:	e7fe      	b.n	800304a <xTaskIncrementTick+0x46>
 800304c:	4b40      	ldr	r3, [pc, #256]	; (8003150 <xTaskIncrementTick+0x14c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	4b40      	ldr	r3, [pc, #256]	; (8003154 <xTaskIncrementTick+0x150>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a3e      	ldr	r2, [pc, #248]	; (8003150 <xTaskIncrementTick+0x14c>)
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4a3e      	ldr	r2, [pc, #248]	; (8003154 <xTaskIncrementTick+0x150>)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	4b3d      	ldr	r3, [pc, #244]	; (8003158 <xTaskIncrementTick+0x154>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3301      	adds	r3, #1
 8003066:	4a3c      	ldr	r2, [pc, #240]	; (8003158 <xTaskIncrementTick+0x154>)
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	f000 faa9 	bl	80035c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800306e:	4b3b      	ldr	r3, [pc, #236]	; (800315c <xTaskIncrementTick+0x158>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	429a      	cmp	r2, r3
 8003076:	d348      	bcc.n	800310a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003078:	4b35      	ldr	r3, [pc, #212]	; (8003150 <xTaskIncrementTick+0x14c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d104      	bne.n	800308c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003082:	4b36      	ldr	r3, [pc, #216]	; (800315c <xTaskIncrementTick+0x158>)
 8003084:	f04f 32ff 	mov.w	r2, #4294967295
 8003088:	601a      	str	r2, [r3, #0]
					break;
 800308a:	e03e      	b.n	800310a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800308c:	4b30      	ldr	r3, [pc, #192]	; (8003150 <xTaskIncrementTick+0x14c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d203      	bcs.n	80030ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80030a4:	4a2d      	ldr	r2, [pc, #180]	; (800315c <xTaskIncrementTick+0x158>)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80030aa:	e02e      	b.n	800310a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	3304      	adds	r3, #4
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff f82e 	bl	8002112 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d004      	beq.n	80030c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	3318      	adds	r3, #24
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff f825 	bl	8002112 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	2201      	movs	r2, #1
 80030ce:	409a      	lsls	r2, r3
 80030d0:	4b23      	ldr	r3, [pc, #140]	; (8003160 <xTaskIncrementTick+0x15c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	4a22      	ldr	r2, [pc, #136]	; (8003160 <xTaskIncrementTick+0x15c>)
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4a1f      	ldr	r2, [pc, #124]	; (8003164 <xTaskIncrementTick+0x160>)
 80030e8:	441a      	add	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	3304      	adds	r3, #4
 80030ee:	4619      	mov	r1, r3
 80030f0:	4610      	mov	r0, r2
 80030f2:	f7fe ffb1 	bl	8002058 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fa:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <xTaskIncrementTick+0x164>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	429a      	cmp	r2, r3
 8003102:	d3b9      	bcc.n	8003078 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003104:	2301      	movs	r3, #1
 8003106:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003108:	e7b6      	b.n	8003078 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800310a:	4b17      	ldr	r3, [pc, #92]	; (8003168 <xTaskIncrementTick+0x164>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003110:	4914      	ldr	r1, [pc, #80]	; (8003164 <xTaskIncrementTick+0x160>)
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d901      	bls.n	8003126 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003122:	2301      	movs	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <xTaskIncrementTick+0x168>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800312e:	2301      	movs	r3, #1
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	e004      	b.n	800313e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003134:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <xTaskIncrementTick+0x16c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	4a0d      	ldr	r2, [pc, #52]	; (8003170 <xTaskIncrementTick+0x16c>)
 800313c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800313e:	697b      	ldr	r3, [r7, #20]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	200004c0 	.word	0x200004c0
 800314c:	2000049c 	.word	0x2000049c
 8003150:	20000450 	.word	0x20000450
 8003154:	20000454 	.word	0x20000454
 8003158:	200004b0 	.word	0x200004b0
 800315c:	200004b8 	.word	0x200004b8
 8003160:	200004a0 	.word	0x200004a0
 8003164:	2000039c 	.word	0x2000039c
 8003168:	20000398 	.word	0x20000398
 800316c:	200004ac 	.word	0x200004ac
 8003170:	200004a8 	.word	0x200004a8

08003174 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800317a:	4b29      	ldr	r3, [pc, #164]	; (8003220 <vTaskSwitchContext+0xac>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003182:	4b28      	ldr	r3, [pc, #160]	; (8003224 <vTaskSwitchContext+0xb0>)
 8003184:	2201      	movs	r2, #1
 8003186:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003188:	e044      	b.n	8003214 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800318a:	4b26      	ldr	r3, [pc, #152]	; (8003224 <vTaskSwitchContext+0xb0>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003190:	4b25      	ldr	r3, [pc, #148]	; (8003228 <vTaskSwitchContext+0xb4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	fab3 f383 	clz	r3, r3
 800319c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800319e:	7afb      	ldrb	r3, [r7, #11]
 80031a0:	f1c3 031f 	rsb	r3, r3, #31
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	4921      	ldr	r1, [pc, #132]	; (800322c <vTaskSwitchContext+0xb8>)
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10a      	bne.n	80031d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	607b      	str	r3, [r7, #4]
}
 80031cc:	bf00      	nop
 80031ce:	e7fe      	b.n	80031ce <vTaskSwitchContext+0x5a>
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4a14      	ldr	r2, [pc, #80]	; (800322c <vTaskSwitchContext+0xb8>)
 80031dc:	4413      	add	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	3308      	adds	r3, #8
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d104      	bne.n	8003200 <vTaskSwitchContext+0x8c>
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	4a0a      	ldr	r2, [pc, #40]	; (8003230 <vTaskSwitchContext+0xbc>)
 8003208:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <vTaskSwitchContext+0xbc>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	334c      	adds	r3, #76	; 0x4c
 8003210:	4a08      	ldr	r2, [pc, #32]	; (8003234 <vTaskSwitchContext+0xc0>)
 8003212:	6013      	str	r3, [r2, #0]
}
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	200004c0 	.word	0x200004c0
 8003224:	200004ac 	.word	0x200004ac
 8003228:	200004a0 	.word	0x200004a0
 800322c:	2000039c 	.word	0x2000039c
 8003230:	20000398 	.word	0x20000398
 8003234:	20000010 	.word	0x20000010

08003238 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	60fb      	str	r3, [r7, #12]
}
 800325a:	bf00      	nop
 800325c:	e7fe      	b.n	800325c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800325e:	4b07      	ldr	r3, [pc, #28]	; (800327c <vTaskPlaceOnEventList+0x44>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3318      	adds	r3, #24
 8003264:	4619      	mov	r1, r3
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fe ff1a 	bl	80020a0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800326c:	2101      	movs	r1, #1
 800326e:	6838      	ldr	r0, [r7, #0]
 8003270:	f000 fb82 	bl	8003978 <prvAddCurrentTaskToDelayedList>
}
 8003274:	bf00      	nop
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20000398 	.word	0x20000398

08003280 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10a      	bne.n	80032ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	60fb      	str	r3, [r7, #12]
}
 80032a8:	bf00      	nop
 80032aa:	e7fe      	b.n	80032aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	3318      	adds	r3, #24
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe ff2e 	bl	8002112 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032b6:	4b1d      	ldr	r3, [pc, #116]	; (800332c <xTaskRemoveFromEventList+0xac>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d11c      	bne.n	80032f8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	3304      	adds	r3, #4
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe ff25 	bl	8002112 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	2201      	movs	r2, #1
 80032ce:	409a      	lsls	r2, r3
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <xTaskRemoveFromEventList+0xb0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	4a16      	ldr	r2, [pc, #88]	; (8003330 <xTaskRemoveFromEventList+0xb0>)
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4a13      	ldr	r2, [pc, #76]	; (8003334 <xTaskRemoveFromEventList+0xb4>)
 80032e8:	441a      	add	r2, r3
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	3304      	adds	r3, #4
 80032ee:	4619      	mov	r1, r3
 80032f0:	4610      	mov	r0, r2
 80032f2:	f7fe feb1 	bl	8002058 <vListInsertEnd>
 80032f6:	e005      	b.n	8003304 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	3318      	adds	r3, #24
 80032fc:	4619      	mov	r1, r3
 80032fe:	480e      	ldr	r0, [pc, #56]	; (8003338 <xTaskRemoveFromEventList+0xb8>)
 8003300:	f7fe feaa 	bl	8002058 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <xTaskRemoveFromEventList+0xbc>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	429a      	cmp	r2, r3
 8003310:	d905      	bls.n	800331e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003312:	2301      	movs	r3, #1
 8003314:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003316:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <xTaskRemoveFromEventList+0xc0>)
 8003318:	2201      	movs	r2, #1
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e001      	b.n	8003322 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003322:	697b      	ldr	r3, [r7, #20]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	200004c0 	.word	0x200004c0
 8003330:	200004a0 	.word	0x200004a0
 8003334:	2000039c 	.word	0x2000039c
 8003338:	20000458 	.word	0x20000458
 800333c:	20000398 	.word	0x20000398
 8003340:	200004ac 	.word	0x200004ac

08003344 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <vTaskInternalSetTimeOutState+0x24>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <vTaskInternalSetTimeOutState+0x28>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	605a      	str	r2, [r3, #4]
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	200004b0 	.word	0x200004b0
 800336c:	2000049c 	.word	0x2000049c

08003370 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	613b      	str	r3, [r7, #16]
}
 8003392:	bf00      	nop
 8003394:	e7fe      	b.n	8003394 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10a      	bne.n	80033b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800339c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a0:	f383 8811 	msr	BASEPRI, r3
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	60fb      	str	r3, [r7, #12]
}
 80033ae:	bf00      	nop
 80033b0:	e7fe      	b.n	80033b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80033b2:	f000 fc77 	bl	8003ca4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80033b6:	4b1d      	ldr	r3, [pc, #116]	; (800342c <xTaskCheckForTimeOut+0xbc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ce:	d102      	bne.n	80033d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61fb      	str	r3, [r7, #28]
 80033d4:	e023      	b.n	800341e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4b15      	ldr	r3, [pc, #84]	; (8003430 <xTaskCheckForTimeOut+0xc0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d007      	beq.n	80033f2 <xTaskCheckForTimeOut+0x82>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d302      	bcc.n	80033f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80033ec:	2301      	movs	r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]
 80033f0:	e015      	b.n	800341e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d20b      	bcs.n	8003414 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	1ad2      	subs	r2, r2, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff ff9b 	bl	8003344 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	e004      	b.n	800341e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800341a:	2301      	movs	r3, #1
 800341c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800341e:	f000 fc71 	bl	8003d04 <vPortExitCritical>

	return xReturn;
 8003422:	69fb      	ldr	r3, [r7, #28]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3720      	adds	r7, #32
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	2000049c 	.word	0x2000049c
 8003430:	200004b0 	.word	0x200004b0

08003434 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <vTaskMissedYield+0x14>)
 800343a:	2201      	movs	r2, #1
 800343c:	601a      	str	r2, [r3, #0]
}
 800343e:	bf00      	nop
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	200004ac 	.word	0x200004ac

0800344c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003454:	f000 f852 	bl	80034fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003458:	4b06      	ldr	r3, [pc, #24]	; (8003474 <prvIdleTask+0x28>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d9f9      	bls.n	8003454 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <prvIdleTask+0x2c>)
 8003462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003470:	e7f0      	b.n	8003454 <prvIdleTask+0x8>
 8003472:	bf00      	nop
 8003474:	2000039c 	.word	0x2000039c
 8003478:	e000ed04 	.word	0xe000ed04

0800347c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003482:	2300      	movs	r3, #0
 8003484:	607b      	str	r3, [r7, #4]
 8003486:	e00c      	b.n	80034a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4a12      	ldr	r2, [pc, #72]	; (80034dc <prvInitialiseTaskLists+0x60>)
 8003494:	4413      	add	r3, r2
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fdb1 	bl	8001ffe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3301      	adds	r3, #1
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b06      	cmp	r3, #6
 80034a6:	d9ef      	bls.n	8003488 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80034a8:	480d      	ldr	r0, [pc, #52]	; (80034e0 <prvInitialiseTaskLists+0x64>)
 80034aa:	f7fe fda8 	bl	8001ffe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80034ae:	480d      	ldr	r0, [pc, #52]	; (80034e4 <prvInitialiseTaskLists+0x68>)
 80034b0:	f7fe fda5 	bl	8001ffe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80034b4:	480c      	ldr	r0, [pc, #48]	; (80034e8 <prvInitialiseTaskLists+0x6c>)
 80034b6:	f7fe fda2 	bl	8001ffe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80034ba:	480c      	ldr	r0, [pc, #48]	; (80034ec <prvInitialiseTaskLists+0x70>)
 80034bc:	f7fe fd9f 	bl	8001ffe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80034c0:	480b      	ldr	r0, [pc, #44]	; (80034f0 <prvInitialiseTaskLists+0x74>)
 80034c2:	f7fe fd9c 	bl	8001ffe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80034c6:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <prvInitialiseTaskLists+0x78>)
 80034c8:	4a05      	ldr	r2, [pc, #20]	; (80034e0 <prvInitialiseTaskLists+0x64>)
 80034ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80034cc:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <prvInitialiseTaskLists+0x7c>)
 80034ce:	4a05      	ldr	r2, [pc, #20]	; (80034e4 <prvInitialiseTaskLists+0x68>)
 80034d0:	601a      	str	r2, [r3, #0]
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	2000039c 	.word	0x2000039c
 80034e0:	20000428 	.word	0x20000428
 80034e4:	2000043c 	.word	0x2000043c
 80034e8:	20000458 	.word	0x20000458
 80034ec:	2000046c 	.word	0x2000046c
 80034f0:	20000484 	.word	0x20000484
 80034f4:	20000450 	.word	0x20000450
 80034f8:	20000454 	.word	0x20000454

080034fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003502:	e019      	b.n	8003538 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003504:	f000 fbce 	bl	8003ca4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003508:	4b10      	ldr	r3, [pc, #64]	; (800354c <prvCheckTasksWaitingTermination+0x50>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3304      	adds	r3, #4
 8003514:	4618      	mov	r0, r3
 8003516:	f7fe fdfc 	bl	8002112 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <prvCheckTasksWaitingTermination+0x54>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3b01      	subs	r3, #1
 8003520:	4a0b      	ldr	r2, [pc, #44]	; (8003550 <prvCheckTasksWaitingTermination+0x54>)
 8003522:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <prvCheckTasksWaitingTermination+0x58>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3b01      	subs	r3, #1
 800352a:	4a0a      	ldr	r2, [pc, #40]	; (8003554 <prvCheckTasksWaitingTermination+0x58>)
 800352c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800352e:	f000 fbe9 	bl	8003d04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f810 	bl	8003558 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003538:	4b06      	ldr	r3, [pc, #24]	; (8003554 <prvCheckTasksWaitingTermination+0x58>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e1      	bne.n	8003504 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003540:	bf00      	nop
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	2000046c 	.word	0x2000046c
 8003550:	20000498 	.word	0x20000498
 8003554:	20000480 	.word	0x20000480

08003558 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	334c      	adds	r3, #76	; 0x4c
 8003564:	4618      	mov	r0, r3
 8003566:	f000 fef3 	bl	8004350 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d108      	bne.n	8003586 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fd81 	bl	8004080 <vPortFree>
				vPortFree( pxTCB );
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fd7e 	bl	8004080 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003584:	e018      	b.n	80035b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d103      	bne.n	8003598 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fd75 	bl	8004080 <vPortFree>
	}
 8003596:	e00f      	b.n	80035b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d00a      	beq.n	80035b8 <prvDeleteTCB+0x60>
	__asm volatile
 80035a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	60fb      	str	r3, [r7, #12]
}
 80035b4:	bf00      	nop
 80035b6:	e7fe      	b.n	80035b6 <prvDeleteTCB+0x5e>
	}
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <prvResetNextTaskUnblockTime+0x38>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d104      	bne.n	80035da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <prvResetNextTaskUnblockTime+0x3c>)
 80035d2:	f04f 32ff 	mov.w	r2, #4294967295
 80035d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80035d8:	e008      	b.n	80035ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035da:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <prvResetNextTaskUnblockTime+0x38>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	4a04      	ldr	r2, [pc, #16]	; (80035fc <prvResetNextTaskUnblockTime+0x3c>)
 80035ea:	6013      	str	r3, [r2, #0]
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	20000450 	.word	0x20000450
 80035fc:	200004b8 	.word	0x200004b8

08003600 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <xTaskGetSchedulerState+0x34>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800360e:	2301      	movs	r3, #1
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	e008      	b.n	8003626 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003614:	4b08      	ldr	r3, [pc, #32]	; (8003638 <xTaskGetSchedulerState+0x38>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d102      	bne.n	8003622 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800361c:	2302      	movs	r3, #2
 800361e:	607b      	str	r3, [r7, #4]
 8003620:	e001      	b.n	8003626 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003622:	2300      	movs	r3, #0
 8003624:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003626:	687b      	ldr	r3, [r7, #4]
	}
 8003628:	4618      	mov	r0, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	200004a4 	.word	0x200004a4
 8003638:	200004c0 	.word	0x200004c0

0800363c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d05e      	beq.n	8003710 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003656:	4b31      	ldr	r3, [pc, #196]	; (800371c <xTaskPriorityInherit+0xe0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	429a      	cmp	r2, r3
 800365e:	d24e      	bcs.n	80036fe <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	db06      	blt.n	8003676 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003668:	4b2c      	ldr	r3, [pc, #176]	; (800371c <xTaskPriorityInherit+0xe0>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	f1c3 0207 	rsb	r2, r3, #7
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	6959      	ldr	r1, [r3, #20]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4a26      	ldr	r2, [pc, #152]	; (8003720 <xTaskPriorityInherit+0xe4>)
 8003688:	4413      	add	r3, r2
 800368a:	4299      	cmp	r1, r3
 800368c:	d12f      	bne.n	80036ee <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3304      	adds	r3, #4
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe fd3d 	bl	8002112 <uxListRemove>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10a      	bne.n	80036b4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	2201      	movs	r2, #1
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	43da      	mvns	r2, r3
 80036aa:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <xTaskPriorityInherit+0xe8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4013      	ands	r3, r2
 80036b0:	4a1c      	ldr	r2, [pc, #112]	; (8003724 <xTaskPriorityInherit+0xe8>)
 80036b2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80036b4:	4b19      	ldr	r3, [pc, #100]	; (800371c <xTaskPriorityInherit+0xe0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	2201      	movs	r2, #1
 80036c4:	409a      	lsls	r2, r3
 80036c6:	4b17      	ldr	r3, [pc, #92]	; (8003724 <xTaskPriorityInherit+0xe8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	4a15      	ldr	r2, [pc, #84]	; (8003724 <xTaskPriorityInherit+0xe8>)
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4a10      	ldr	r2, [pc, #64]	; (8003720 <xTaskPriorityInherit+0xe4>)
 80036de:	441a      	add	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	3304      	adds	r3, #4
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f7fe fcb6 	bl	8002058 <vListInsertEnd>
 80036ec:	e004      	b.n	80036f8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80036ee:	4b0b      	ldr	r3, [pc, #44]	; (800371c <xTaskPriorityInherit+0xe0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80036f8:	2301      	movs	r3, #1
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	e008      	b.n	8003710 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <xTaskPriorityInherit+0xe0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	429a      	cmp	r2, r3
 800370a:	d201      	bcs.n	8003710 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800370c:	2301      	movs	r3, #1
 800370e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003710:	68fb      	ldr	r3, [r7, #12]
	}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000398 	.word	0x20000398
 8003720:	2000039c 	.word	0x2000039c
 8003724:	200004a0 	.word	0x200004a0

08003728 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d06e      	beq.n	800381c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800373e:	4b3a      	ldr	r3, [pc, #232]	; (8003828 <xTaskPriorityDisinherit+0x100>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	429a      	cmp	r2, r3
 8003746:	d00a      	beq.n	800375e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	60fb      	str	r3, [r7, #12]
}
 800375a:	bf00      	nop
 800375c:	e7fe      	b.n	800375c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10a      	bne.n	800377c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	60bb      	str	r3, [r7, #8]
}
 8003778:	bf00      	nop
 800377a:	e7fe      	b.n	800377a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003780:	1e5a      	subs	r2, r3, #1
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	429a      	cmp	r2, r3
 8003790:	d044      	beq.n	800381c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003796:	2b00      	cmp	r3, #0
 8003798:	d140      	bne.n	800381c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	3304      	adds	r3, #4
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fe fcb7 	bl	8002112 <uxListRemove>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d115      	bne.n	80037d6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ae:	491f      	ldr	r1, [pc, #124]	; (800382c <xTaskPriorityDisinherit+0x104>)
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <xTaskPriorityDisinherit+0xae>
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	2201      	movs	r2, #1
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43da      	mvns	r2, r3
 80037cc:	4b18      	ldr	r3, [pc, #96]	; (8003830 <xTaskPriorityDisinherit+0x108>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4013      	ands	r3, r2
 80037d2:	4a17      	ldr	r2, [pc, #92]	; (8003830 <xTaskPriorityDisinherit+0x108>)
 80037d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	f1c3 0207 	rsb	r2, r3, #7
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	2201      	movs	r2, #1
 80037f0:	409a      	lsls	r2, r3
 80037f2:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <xTaskPriorityDisinherit+0x108>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	4a0d      	ldr	r2, [pc, #52]	; (8003830 <xTaskPriorityDisinherit+0x108>)
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4a08      	ldr	r2, [pc, #32]	; (800382c <xTaskPriorityDisinherit+0x104>)
 800380a:	441a      	add	r2, r3
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	3304      	adds	r3, #4
 8003810:	4619      	mov	r1, r3
 8003812:	4610      	mov	r0, r2
 8003814:	f7fe fc20 	bl	8002058 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003818:	2301      	movs	r3, #1
 800381a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800381c:	697b      	ldr	r3, [r7, #20]
	}
 800381e:	4618      	mov	r0, r3
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000398 	.word	0x20000398
 800382c:	2000039c 	.word	0x2000039c
 8003830:	200004a0 	.word	0x200004a0

08003834 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003842:	2301      	movs	r3, #1
 8003844:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d077      	beq.n	800393c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	60fb      	str	r3, [r7, #12]
}
 8003866:	bf00      	nop
 8003868:	e7fe      	b.n	8003868 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d902      	bls.n	800387a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	e002      	b.n	8003880 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	429a      	cmp	r2, r3
 8003888:	d058      	beq.n	800393c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	429a      	cmp	r2, r3
 8003892:	d153      	bne.n	800393c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003894:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	429a      	cmp	r2, r3
 800389c:	d10a      	bne.n	80038b4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	60bb      	str	r3, [r7, #8]
}
 80038b0:	bf00      	nop
 80038b2:	e7fe      	b.n	80038b2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	db04      	blt.n	80038d2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f1c3 0207 	rsb	r2, r3, #7
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	6959      	ldr	r1, [r3, #20]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4a19      	ldr	r2, [pc, #100]	; (8003948 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80038e2:	4413      	add	r3, r2
 80038e4:	4299      	cmp	r1, r3
 80038e6:	d129      	bne.n	800393c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	3304      	adds	r3, #4
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fe fc10 	bl	8002112 <uxListRemove>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	2201      	movs	r2, #1
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43da      	mvns	r2, r3
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4013      	ands	r3, r2
 800390a:	4a10      	ldr	r2, [pc, #64]	; (800394c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800390c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	2201      	movs	r2, #1
 8003914:	409a      	lsls	r2, r3
 8003916:	4b0d      	ldr	r3, [pc, #52]	; (800394c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4313      	orrs	r3, r2
 800391c:	4a0b      	ldr	r2, [pc, #44]	; (800394c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4a06      	ldr	r2, [pc, #24]	; (8003948 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800392e:	441a      	add	r2, r3
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	3304      	adds	r3, #4
 8003934:	4619      	mov	r1, r3
 8003936:	4610      	mov	r0, r2
 8003938:	f7fe fb8e 	bl	8002058 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800393c:	bf00      	nop
 800393e:	3720      	adds	r7, #32
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000398 	.word	0x20000398
 8003948:	2000039c 	.word	0x2000039c
 800394c:	200004a0 	.word	0x200004a0

08003950 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003954:	4b07      	ldr	r3, [pc, #28]	; (8003974 <pvTaskIncrementMutexHeldCount+0x24>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d004      	beq.n	8003966 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <pvTaskIncrementMutexHeldCount+0x24>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003962:	3201      	adds	r2, #1
 8003964:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003966:	4b03      	ldr	r3, [pc, #12]	; (8003974 <pvTaskIncrementMutexHeldCount+0x24>)
 8003968:	681b      	ldr	r3, [r3, #0]
	}
 800396a:	4618      	mov	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	20000398 	.word	0x20000398

08003978 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003982:	4b29      	ldr	r3, [pc, #164]	; (8003a28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003988:	4b28      	ldr	r3, [pc, #160]	; (8003a2c <prvAddCurrentTaskToDelayedList+0xb4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3304      	adds	r3, #4
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fbbf 	bl	8002112 <uxListRemove>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10b      	bne.n	80039b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800399a:	4b24      	ldr	r3, [pc, #144]	; (8003a2c <prvAddCurrentTaskToDelayedList+0xb4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	2201      	movs	r2, #1
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43da      	mvns	r2, r3
 80039a8:	4b21      	ldr	r3, [pc, #132]	; (8003a30 <prvAddCurrentTaskToDelayedList+0xb8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4013      	ands	r3, r2
 80039ae:	4a20      	ldr	r2, [pc, #128]	; (8003a30 <prvAddCurrentTaskToDelayedList+0xb8>)
 80039b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d10a      	bne.n	80039d0 <prvAddCurrentTaskToDelayedList+0x58>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d007      	beq.n	80039d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039c0:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <prvAddCurrentTaskToDelayedList+0xb4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3304      	adds	r3, #4
 80039c6:	4619      	mov	r1, r3
 80039c8:	481a      	ldr	r0, [pc, #104]	; (8003a34 <prvAddCurrentTaskToDelayedList+0xbc>)
 80039ca:	f7fe fb45 	bl	8002058 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039ce:	e026      	b.n	8003a1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4413      	add	r3, r2
 80039d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039d8:	4b14      	ldr	r3, [pc, #80]	; (8003a2c <prvAddCurrentTaskToDelayedList+0xb4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d209      	bcs.n	80039fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039e8:	4b13      	ldr	r3, [pc, #76]	; (8003a38 <prvAddCurrentTaskToDelayedList+0xc0>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <prvAddCurrentTaskToDelayedList+0xb4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3304      	adds	r3, #4
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f7fe fb53 	bl	80020a0 <vListInsert>
}
 80039fa:	e010      	b.n	8003a1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039fc:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <prvAddCurrentTaskToDelayedList+0xc4>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4619      	mov	r1, r3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f7fe fb49 	bl	80020a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a0e:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d202      	bcs.n	8003a1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003a18:	4a09      	ldr	r2, [pc, #36]	; (8003a40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	6013      	str	r3, [r2, #0]
}
 8003a1e:	bf00      	nop
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	2000049c 	.word	0x2000049c
 8003a2c:	20000398 	.word	0x20000398
 8003a30:	200004a0 	.word	0x200004a0
 8003a34:	20000484 	.word	0x20000484
 8003a38:	20000454 	.word	0x20000454
 8003a3c:	20000450 	.word	0x20000450
 8003a40:	200004b8 	.word	0x200004b8

08003a44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	3b04      	subs	r3, #4
 8003a54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3b04      	subs	r3, #4
 8003a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f023 0201 	bic.w	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3b04      	subs	r3, #4
 8003a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a74:	4a0c      	ldr	r2, [pc, #48]	; (8003aa8 <pxPortInitialiseStack+0x64>)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3b14      	subs	r3, #20
 8003a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	3b04      	subs	r3, #4
 8003a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f06f 0202 	mvn.w	r2, #2
 8003a92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3b20      	subs	r3, #32
 8003a98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	08003aad 	.word	0x08003aad

08003aac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ab6:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <prvTaskExitError+0x54>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abe:	d00a      	beq.n	8003ad6 <prvTaskExitError+0x2a>
	__asm volatile
 8003ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	60fb      	str	r3, [r7, #12]
}
 8003ad2:	bf00      	nop
 8003ad4:	e7fe      	b.n	8003ad4 <prvTaskExitError+0x28>
	__asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	60bb      	str	r3, [r7, #8]
}
 8003ae8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003aea:	bf00      	nop
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0fc      	beq.n	8003aec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003af2:	bf00      	nop
 8003af4:	bf00      	nop
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	2000000c 	.word	0x2000000c
	...

08003b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003b10:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <pxCurrentTCBConst2>)
 8003b12:	6819      	ldr	r1, [r3, #0]
 8003b14:	6808      	ldr	r0, [r1, #0]
 8003b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b1a:	f380 8809 	msr	PSP, r0
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f04f 0000 	mov.w	r0, #0
 8003b26:	f380 8811 	msr	BASEPRI, r0
 8003b2a:	4770      	bx	lr
 8003b2c:	f3af 8000 	nop.w

08003b30 <pxCurrentTCBConst2>:
 8003b30:	20000398 	.word	0x20000398
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop

08003b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003b38:	4808      	ldr	r0, [pc, #32]	; (8003b5c <prvPortStartFirstTask+0x24>)
 8003b3a:	6800      	ldr	r0, [r0, #0]
 8003b3c:	6800      	ldr	r0, [r0, #0]
 8003b3e:	f380 8808 	msr	MSP, r0
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f380 8814 	msr	CONTROL, r0
 8003b4a:	b662      	cpsie	i
 8003b4c:	b661      	cpsie	f
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	df00      	svc	0
 8003b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b5a:	bf00      	nop
 8003b5c:	e000ed08 	.word	0xe000ed08

08003b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b66:	4b46      	ldr	r3, [pc, #280]	; (8003c80 <xPortStartScheduler+0x120>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a46      	ldr	r2, [pc, #280]	; (8003c84 <xPortStartScheduler+0x124>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d10a      	bne.n	8003b86 <xPortStartScheduler+0x26>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	613b      	str	r3, [r7, #16]
}
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b86:	4b3e      	ldr	r3, [pc, #248]	; (8003c80 <xPortStartScheduler+0x120>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a3f      	ldr	r2, [pc, #252]	; (8003c88 <xPortStartScheduler+0x128>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d10a      	bne.n	8003ba6 <xPortStartScheduler+0x46>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	60fb      	str	r3, [r7, #12]
}
 8003ba2:	bf00      	nop
 8003ba4:	e7fe      	b.n	8003ba4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ba6:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <xPortStartScheduler+0x12c>)
 8003ba8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	22ff      	movs	r2, #255	; 0xff
 8003bb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <xPortStartScheduler+0x130>)
 8003bcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003bce:	4b31      	ldr	r3, [pc, #196]	; (8003c94 <xPortStartScheduler+0x134>)
 8003bd0:	2207      	movs	r2, #7
 8003bd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bd4:	e009      	b.n	8003bea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003bd6:	4b2f      	ldr	r3, [pc, #188]	; (8003c94 <xPortStartScheduler+0x134>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	4a2d      	ldr	r2, [pc, #180]	; (8003c94 <xPortStartScheduler+0x134>)
 8003bde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b80      	cmp	r3, #128	; 0x80
 8003bf4:	d0ef      	beq.n	8003bd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003bf6:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <xPortStartScheduler+0x134>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f1c3 0307 	rsb	r3, r3, #7
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d00a      	beq.n	8003c18 <xPortStartScheduler+0xb8>
	__asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	60bb      	str	r3, [r7, #8]
}
 8003c14:	bf00      	nop
 8003c16:	e7fe      	b.n	8003c16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c18:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <xPortStartScheduler+0x134>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	021b      	lsls	r3, r3, #8
 8003c1e:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <xPortStartScheduler+0x134>)
 8003c20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c22:	4b1c      	ldr	r3, [pc, #112]	; (8003c94 <xPortStartScheduler+0x134>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c2a:	4a1a      	ldr	r2, [pc, #104]	; (8003c94 <xPortStartScheduler+0x134>)
 8003c2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c36:	4b18      	ldr	r3, [pc, #96]	; (8003c98 <xPortStartScheduler+0x138>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a17      	ldr	r2, [pc, #92]	; (8003c98 <xPortStartScheduler+0x138>)
 8003c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c42:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <xPortStartScheduler+0x138>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a14      	ldr	r2, [pc, #80]	; (8003c98 <xPortStartScheduler+0x138>)
 8003c48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c4e:	f000 f8dd 	bl	8003e0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c52:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <xPortStartScheduler+0x13c>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003c58:	f000 f8fc 	bl	8003e54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c5c:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <xPortStartScheduler+0x140>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a0f      	ldr	r2, [pc, #60]	; (8003ca0 <xPortStartScheduler+0x140>)
 8003c62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c68:	f7ff ff66 	bl	8003b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c6c:	f7ff fa82 	bl	8003174 <vTaskSwitchContext>
	prvTaskExitError();
 8003c70:	f7ff ff1c 	bl	8003aac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	e000ed00 	.word	0xe000ed00
 8003c84:	410fc271 	.word	0x410fc271
 8003c88:	410fc270 	.word	0x410fc270
 8003c8c:	e000e400 	.word	0xe000e400
 8003c90:	200004c4 	.word	0x200004c4
 8003c94:	200004c8 	.word	0x200004c8
 8003c98:	e000ed20 	.word	0xe000ed20
 8003c9c:	2000000c 	.word	0x2000000c
 8003ca0:	e000ef34 	.word	0xe000ef34

08003ca4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
	__asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	607b      	str	r3, [r7, #4]
}
 8003cbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003cbe:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <vPortEnterCritical+0x58>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	4a0d      	ldr	r2, [pc, #52]	; (8003cfc <vPortEnterCritical+0x58>)
 8003cc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <vPortEnterCritical+0x58>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d10f      	bne.n	8003cf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <vPortEnterCritical+0x5c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	603b      	str	r3, [r7, #0]
}
 8003cec:	bf00      	nop
 8003cee:	e7fe      	b.n	8003cee <vPortEnterCritical+0x4a>
	}
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	2000000c 	.word	0x2000000c
 8003d00:	e000ed04 	.word	0xe000ed04

08003d04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <vPortExitCritical+0x50>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <vPortExitCritical+0x24>
	__asm volatile
 8003d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d16:	f383 8811 	msr	BASEPRI, r3
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	607b      	str	r3, [r7, #4]
}
 8003d24:	bf00      	nop
 8003d26:	e7fe      	b.n	8003d26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003d28:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <vPortExitCritical+0x50>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	4a09      	ldr	r2, [pc, #36]	; (8003d54 <vPortExitCritical+0x50>)
 8003d30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d32:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <vPortExitCritical+0x50>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d105      	bne.n	8003d46 <vPortExitCritical+0x42>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	f383 8811 	msr	BASEPRI, r3
}
 8003d44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	2000000c 	.word	0x2000000c
	...

08003d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d60:	f3ef 8009 	mrs	r0, PSP
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <pxCurrentTCBConst>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	f01e 0f10 	tst.w	lr, #16
 8003d70:	bf08      	it	eq
 8003d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d7a:	6010      	str	r0, [r2, #0]
 8003d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003d84:	f380 8811 	msr	BASEPRI, r0
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f7ff f9f0 	bl	8003174 <vTaskSwitchContext>
 8003d94:	f04f 0000 	mov.w	r0, #0
 8003d98:	f380 8811 	msr	BASEPRI, r0
 8003d9c:	bc09      	pop	{r0, r3}
 8003d9e:	6819      	ldr	r1, [r3, #0]
 8003da0:	6808      	ldr	r0, [r1, #0]
 8003da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da6:	f01e 0f10 	tst.w	lr, #16
 8003daa:	bf08      	it	eq
 8003dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003db0:	f380 8809 	msr	PSP, r0
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	f3af 8000 	nop.w

08003dc0 <pxCurrentTCBConst>:
 8003dc0:	20000398 	.word	0x20000398
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop

08003dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8003dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	607b      	str	r3, [r7, #4]
}
 8003de0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003de2:	f7ff f90f 	bl	8003004 <xTaskIncrementTick>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003dec:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <SysTick_Handler+0x40>)
 8003dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	2300      	movs	r3, #0
 8003df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	f383 8811 	msr	BASEPRI, r3
}
 8003dfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	e000ed04 	.word	0xe000ed04

08003e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <vPortSetupTimerInterrupt+0x34>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <vPortSetupTimerInterrupt+0x38>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <vPortSetupTimerInterrupt+0x3c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a0a      	ldr	r2, [pc, #40]	; (8003e4c <vPortSetupTimerInterrupt+0x40>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	099b      	lsrs	r3, r3, #6
 8003e28:	4a09      	ldr	r2, [pc, #36]	; (8003e50 <vPortSetupTimerInterrupt+0x44>)
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e2e:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <vPortSetupTimerInterrupt+0x34>)
 8003e30:	2207      	movs	r2, #7
 8003e32:	601a      	str	r2, [r3, #0]
}
 8003e34:	bf00      	nop
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	e000e010 	.word	0xe000e010
 8003e44:	e000e018 	.word	0xe000e018
 8003e48:	20000000 	.word	0x20000000
 8003e4c:	10624dd3 	.word	0x10624dd3
 8003e50:	e000e014 	.word	0xe000e014

08003e54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003e54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003e64 <vPortEnableVFP+0x10>
 8003e58:	6801      	ldr	r1, [r0, #0]
 8003e5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e5e:	6001      	str	r1, [r0, #0]
 8003e60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003e62:	bf00      	nop
 8003e64:	e000ed88 	.word	0xe000ed88

08003e68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003e6e:	f3ef 8305 	mrs	r3, IPSR
 8003e72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b0f      	cmp	r3, #15
 8003e78:	d914      	bls.n	8003ea4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e7a:	4a17      	ldr	r2, [pc, #92]	; (8003ed8 <vPortValidateInterruptPriority+0x70>)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e84:	4b15      	ldr	r3, [pc, #84]	; (8003edc <vPortValidateInterruptPriority+0x74>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	7afa      	ldrb	r2, [r7, #11]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d20a      	bcs.n	8003ea4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	607b      	str	r3, [r7, #4]
}
 8003ea0:	bf00      	nop
 8003ea2:	e7fe      	b.n	8003ea2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ea4:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <vPortValidateInterruptPriority+0x78>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003eac:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <vPortValidateInterruptPriority+0x7c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d90a      	bls.n	8003eca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	603b      	str	r3, [r7, #0]
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <vPortValidateInterruptPriority+0x60>
	}
 8003eca:	bf00      	nop
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	e000e3f0 	.word	0xe000e3f0
 8003edc:	200004c4 	.word	0x200004c4
 8003ee0:	e000ed0c 	.word	0xe000ed0c
 8003ee4:	200004c8 	.word	0x200004c8

08003ee8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08a      	sub	sp, #40	; 0x28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003ef4:	f7fe ffdc 	bl	8002eb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ef8:	4b5b      	ldr	r3, [pc, #364]	; (8004068 <pvPortMalloc+0x180>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f00:	f000 f920 	bl	8004144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f04:	4b59      	ldr	r3, [pc, #356]	; (800406c <pvPortMalloc+0x184>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f040 8093 	bne.w	8004038 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01d      	beq.n	8003f54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003f18:	2208      	movs	r2, #8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d014      	beq.n	8003f54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f023 0307 	bic.w	r3, r3, #7
 8003f30:	3308      	adds	r3, #8
 8003f32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <pvPortMalloc+0x6c>
	__asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	617b      	str	r3, [r7, #20]
}
 8003f50:	bf00      	nop
 8003f52:	e7fe      	b.n	8003f52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d06e      	beq.n	8004038 <pvPortMalloc+0x150>
 8003f5a:	4b45      	ldr	r3, [pc, #276]	; (8004070 <pvPortMalloc+0x188>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d869      	bhi.n	8004038 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f64:	4b43      	ldr	r3, [pc, #268]	; (8004074 <pvPortMalloc+0x18c>)
 8003f66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f68:	4b42      	ldr	r3, [pc, #264]	; (8004074 <pvPortMalloc+0x18c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f6e:	e004      	b.n	8003f7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d903      	bls.n	8003f8c <pvPortMalloc+0xa4>
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1f1      	bne.n	8003f70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f8c:	4b36      	ldr	r3, [pc, #216]	; (8004068 <pvPortMalloc+0x180>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d050      	beq.n	8004038 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2208      	movs	r2, #8
 8003f9c:	4413      	add	r3, r2
 8003f9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	1ad2      	subs	r2, r2, r3
 8003fb0:	2308      	movs	r3, #8
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d91f      	bls.n	8003ff8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <pvPortMalloc+0xf8>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	613b      	str	r3, [r7, #16]
}
 8003fdc:	bf00      	nop
 8003fde:	e7fe      	b.n	8003fde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	1ad2      	subs	r2, r2, r3
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003ff2:	69b8      	ldr	r0, [r7, #24]
 8003ff4:	f000 f908 	bl	8004208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ff8:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <pvPortMalloc+0x188>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	4a1b      	ldr	r2, [pc, #108]	; (8004070 <pvPortMalloc+0x188>)
 8004004:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004006:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <pvPortMalloc+0x188>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <pvPortMalloc+0x190>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d203      	bcs.n	800401a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004012:	4b17      	ldr	r3, [pc, #92]	; (8004070 <pvPortMalloc+0x188>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a18      	ldr	r2, [pc, #96]	; (8004078 <pvPortMalloc+0x190>)
 8004018:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	4b13      	ldr	r3, [pc, #76]	; (800406c <pvPortMalloc+0x184>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	431a      	orrs	r2, r3
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800402e:	4b13      	ldr	r3, [pc, #76]	; (800407c <pvPortMalloc+0x194>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3301      	adds	r3, #1
 8004034:	4a11      	ldr	r2, [pc, #68]	; (800407c <pvPortMalloc+0x194>)
 8004036:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004038:	f7fe ff48 	bl	8002ecc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <pvPortMalloc+0x174>
	__asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	60fb      	str	r3, [r7, #12]
}
 8004058:	bf00      	nop
 800405a:	e7fe      	b.n	800405a <pvPortMalloc+0x172>
	return pvReturn;
 800405c:	69fb      	ldr	r3, [r7, #28]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3728      	adds	r7, #40	; 0x28
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	200040d4 	.word	0x200040d4
 800406c:	200040e8 	.word	0x200040e8
 8004070:	200040d8 	.word	0x200040d8
 8004074:	200040cc 	.word	0x200040cc
 8004078:	200040dc 	.word	0x200040dc
 800407c:	200040e0 	.word	0x200040e0

08004080 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d04d      	beq.n	800412e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004092:	2308      	movs	r3, #8
 8004094:	425b      	negs	r3, r3
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4413      	add	r3, r2
 800409a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	4b24      	ldr	r3, [pc, #144]	; (8004138 <vPortFree+0xb8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10a      	bne.n	80040c4 <vPortFree+0x44>
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	60fb      	str	r3, [r7, #12]
}
 80040c0:	bf00      	nop
 80040c2:	e7fe      	b.n	80040c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <vPortFree+0x62>
	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	60bb      	str	r3, [r7, #8]
}
 80040de:	bf00      	nop
 80040e0:	e7fe      	b.n	80040e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	4b14      	ldr	r3, [pc, #80]	; (8004138 <vPortFree+0xb8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01e      	beq.n	800412e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d11a      	bne.n	800412e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	4b0e      	ldr	r3, [pc, #56]	; (8004138 <vPortFree+0xb8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	43db      	mvns	r3, r3
 8004102:	401a      	ands	r2, r3
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004108:	f7fe fed2 	bl	8002eb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	4b0a      	ldr	r3, [pc, #40]	; (800413c <vPortFree+0xbc>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4413      	add	r3, r2
 8004116:	4a09      	ldr	r2, [pc, #36]	; (800413c <vPortFree+0xbc>)
 8004118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800411a:	6938      	ldr	r0, [r7, #16]
 800411c:	f000 f874 	bl	8004208 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004120:	4b07      	ldr	r3, [pc, #28]	; (8004140 <vPortFree+0xc0>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3301      	adds	r3, #1
 8004126:	4a06      	ldr	r2, [pc, #24]	; (8004140 <vPortFree+0xc0>)
 8004128:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800412a:	f7fe fecf 	bl	8002ecc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800412e:	bf00      	nop
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	200040e8 	.word	0x200040e8
 800413c:	200040d8 	.word	0x200040d8
 8004140:	200040e4 	.word	0x200040e4

08004144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800414a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800414e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004150:	4b27      	ldr	r3, [pc, #156]	; (80041f0 <prvHeapInit+0xac>)
 8004152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00c      	beq.n	8004178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3307      	adds	r3, #7
 8004162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0307 	bic.w	r3, r3, #7
 800416a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	4a1f      	ldr	r2, [pc, #124]	; (80041f0 <prvHeapInit+0xac>)
 8004174:	4413      	add	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800417c:	4a1d      	ldr	r2, [pc, #116]	; (80041f4 <prvHeapInit+0xb0>)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004182:	4b1c      	ldr	r3, [pc, #112]	; (80041f4 <prvHeapInit+0xb0>)
 8004184:	2200      	movs	r2, #0
 8004186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	4413      	add	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004190:	2208      	movs	r2, #8
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1a9b      	subs	r3, r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0307 	bic.w	r3, r3, #7
 800419e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4a15      	ldr	r2, [pc, #84]	; (80041f8 <prvHeapInit+0xb4>)
 80041a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80041a6:	4b14      	ldr	r3, [pc, #80]	; (80041f8 <prvHeapInit+0xb4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2200      	movs	r2, #0
 80041ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80041ae:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <prvHeapInit+0xb4>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	1ad2      	subs	r2, r2, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <prvHeapInit+0xb4>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <prvHeapInit+0xb8>)
 80041d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	4a09      	ldr	r2, [pc, #36]	; (8004200 <prvHeapInit+0xbc>)
 80041da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041dc:	4b09      	ldr	r3, [pc, #36]	; (8004204 <prvHeapInit+0xc0>)
 80041de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80041e2:	601a      	str	r2, [r3, #0]
}
 80041e4:	bf00      	nop
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	200004cc 	.word	0x200004cc
 80041f4:	200040cc 	.word	0x200040cc
 80041f8:	200040d4 	.word	0x200040d4
 80041fc:	200040dc 	.word	0x200040dc
 8004200:	200040d8 	.word	0x200040d8
 8004204:	200040e8 	.word	0x200040e8

08004208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004210:	4b28      	ldr	r3, [pc, #160]	; (80042b4 <prvInsertBlockIntoFreeList+0xac>)
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	e002      	b.n	800421c <prvInsertBlockIntoFreeList+0x14>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	429a      	cmp	r2, r3
 8004224:	d8f7      	bhi.n	8004216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	4413      	add	r3, r2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	429a      	cmp	r2, r3
 8004236:	d108      	bne.n	800424a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	441a      	add	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	441a      	add	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d118      	bne.n	8004290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <prvInsertBlockIntoFreeList+0xb0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d00d      	beq.n	8004286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	441a      	add	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	e008      	b.n	8004298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004286:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <prvInsertBlockIntoFreeList+0xb0>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	e003      	b.n	8004298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	429a      	cmp	r2, r3
 800429e:	d002      	beq.n	80042a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042a6:	bf00      	nop
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	200040cc 	.word	0x200040cc
 80042b8:	200040d4 	.word	0x200040d4

080042bc <__libc_init_array>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	4d0d      	ldr	r5, [pc, #52]	; (80042f4 <__libc_init_array+0x38>)
 80042c0:	4c0d      	ldr	r4, [pc, #52]	; (80042f8 <__libc_init_array+0x3c>)
 80042c2:	1b64      	subs	r4, r4, r5
 80042c4:	10a4      	asrs	r4, r4, #2
 80042c6:	2600      	movs	r6, #0
 80042c8:	42a6      	cmp	r6, r4
 80042ca:	d109      	bne.n	80042e0 <__libc_init_array+0x24>
 80042cc:	4d0b      	ldr	r5, [pc, #44]	; (80042fc <__libc_init_array+0x40>)
 80042ce:	4c0c      	ldr	r4, [pc, #48]	; (8004300 <__libc_init_array+0x44>)
 80042d0:	f000 f8f2 	bl	80044b8 <_init>
 80042d4:	1b64      	subs	r4, r4, r5
 80042d6:	10a4      	asrs	r4, r4, #2
 80042d8:	2600      	movs	r6, #0
 80042da:	42a6      	cmp	r6, r4
 80042dc:	d105      	bne.n	80042ea <__libc_init_array+0x2e>
 80042de:	bd70      	pop	{r4, r5, r6, pc}
 80042e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042e4:	4798      	blx	r3
 80042e6:	3601      	adds	r6, #1
 80042e8:	e7ee      	b.n	80042c8 <__libc_init_array+0xc>
 80042ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ee:	4798      	blx	r3
 80042f0:	3601      	adds	r6, #1
 80042f2:	e7f2      	b.n	80042da <__libc_init_array+0x1e>
 80042f4:	0800458c 	.word	0x0800458c
 80042f8:	0800458c 	.word	0x0800458c
 80042fc:	0800458c 	.word	0x0800458c
 8004300:	08004590 	.word	0x08004590

08004304 <__retarget_lock_acquire_recursive>:
 8004304:	4770      	bx	lr

08004306 <__retarget_lock_release_recursive>:
 8004306:	4770      	bx	lr

08004308 <memcpy>:
 8004308:	440a      	add	r2, r1
 800430a:	4291      	cmp	r1, r2
 800430c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004310:	d100      	bne.n	8004314 <memcpy+0xc>
 8004312:	4770      	bx	lr
 8004314:	b510      	push	{r4, lr}
 8004316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800431a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800431e:	4291      	cmp	r1, r2
 8004320:	d1f9      	bne.n	8004316 <memcpy+0xe>
 8004322:	bd10      	pop	{r4, pc}

08004324 <memset>:
 8004324:	4402      	add	r2, r0
 8004326:	4603      	mov	r3, r0
 8004328:	4293      	cmp	r3, r2
 800432a:	d100      	bne.n	800432e <memset+0xa>
 800432c:	4770      	bx	lr
 800432e:	f803 1b01 	strb.w	r1, [r3], #1
 8004332:	e7f9      	b.n	8004328 <memset+0x4>

08004334 <cleanup_glue>:
 8004334:	b538      	push	{r3, r4, r5, lr}
 8004336:	460c      	mov	r4, r1
 8004338:	6809      	ldr	r1, [r1, #0]
 800433a:	4605      	mov	r5, r0
 800433c:	b109      	cbz	r1, 8004342 <cleanup_glue+0xe>
 800433e:	f7ff fff9 	bl	8004334 <cleanup_glue>
 8004342:	4621      	mov	r1, r4
 8004344:	4628      	mov	r0, r5
 8004346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800434a:	f000 b869 	b.w	8004420 <_free_r>
	...

08004350 <_reclaim_reent>:
 8004350:	4b2c      	ldr	r3, [pc, #176]	; (8004404 <_reclaim_reent+0xb4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4283      	cmp	r3, r0
 8004356:	b570      	push	{r4, r5, r6, lr}
 8004358:	4604      	mov	r4, r0
 800435a:	d051      	beq.n	8004400 <_reclaim_reent+0xb0>
 800435c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800435e:	b143      	cbz	r3, 8004372 <_reclaim_reent+0x22>
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d14a      	bne.n	80043fc <_reclaim_reent+0xac>
 8004366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004368:	6819      	ldr	r1, [r3, #0]
 800436a:	b111      	cbz	r1, 8004372 <_reclaim_reent+0x22>
 800436c:	4620      	mov	r0, r4
 800436e:	f000 f857 	bl	8004420 <_free_r>
 8004372:	6961      	ldr	r1, [r4, #20]
 8004374:	b111      	cbz	r1, 800437c <_reclaim_reent+0x2c>
 8004376:	4620      	mov	r0, r4
 8004378:	f000 f852 	bl	8004420 <_free_r>
 800437c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800437e:	b111      	cbz	r1, 8004386 <_reclaim_reent+0x36>
 8004380:	4620      	mov	r0, r4
 8004382:	f000 f84d 	bl	8004420 <_free_r>
 8004386:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004388:	b111      	cbz	r1, 8004390 <_reclaim_reent+0x40>
 800438a:	4620      	mov	r0, r4
 800438c:	f000 f848 	bl	8004420 <_free_r>
 8004390:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004392:	b111      	cbz	r1, 800439a <_reclaim_reent+0x4a>
 8004394:	4620      	mov	r0, r4
 8004396:	f000 f843 	bl	8004420 <_free_r>
 800439a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800439c:	b111      	cbz	r1, 80043a4 <_reclaim_reent+0x54>
 800439e:	4620      	mov	r0, r4
 80043a0:	f000 f83e 	bl	8004420 <_free_r>
 80043a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80043a6:	b111      	cbz	r1, 80043ae <_reclaim_reent+0x5e>
 80043a8:	4620      	mov	r0, r4
 80043aa:	f000 f839 	bl	8004420 <_free_r>
 80043ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80043b0:	b111      	cbz	r1, 80043b8 <_reclaim_reent+0x68>
 80043b2:	4620      	mov	r0, r4
 80043b4:	f000 f834 	bl	8004420 <_free_r>
 80043b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043ba:	b111      	cbz	r1, 80043c2 <_reclaim_reent+0x72>
 80043bc:	4620      	mov	r0, r4
 80043be:	f000 f82f 	bl	8004420 <_free_r>
 80043c2:	69a3      	ldr	r3, [r4, #24]
 80043c4:	b1e3      	cbz	r3, 8004400 <_reclaim_reent+0xb0>
 80043c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80043c8:	4620      	mov	r0, r4
 80043ca:	4798      	blx	r3
 80043cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80043ce:	b1b9      	cbz	r1, 8004400 <_reclaim_reent+0xb0>
 80043d0:	4620      	mov	r0, r4
 80043d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80043d6:	f7ff bfad 	b.w	8004334 <cleanup_glue>
 80043da:	5949      	ldr	r1, [r1, r5]
 80043dc:	b941      	cbnz	r1, 80043f0 <_reclaim_reent+0xa0>
 80043de:	3504      	adds	r5, #4
 80043e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043e2:	2d80      	cmp	r5, #128	; 0x80
 80043e4:	68d9      	ldr	r1, [r3, #12]
 80043e6:	d1f8      	bne.n	80043da <_reclaim_reent+0x8a>
 80043e8:	4620      	mov	r0, r4
 80043ea:	f000 f819 	bl	8004420 <_free_r>
 80043ee:	e7ba      	b.n	8004366 <_reclaim_reent+0x16>
 80043f0:	680e      	ldr	r6, [r1, #0]
 80043f2:	4620      	mov	r0, r4
 80043f4:	f000 f814 	bl	8004420 <_free_r>
 80043f8:	4631      	mov	r1, r6
 80043fa:	e7ef      	b.n	80043dc <_reclaim_reent+0x8c>
 80043fc:	2500      	movs	r5, #0
 80043fe:	e7ef      	b.n	80043e0 <_reclaim_reent+0x90>
 8004400:	bd70      	pop	{r4, r5, r6, pc}
 8004402:	bf00      	nop
 8004404:	20000010 	.word	0x20000010

08004408 <__malloc_lock>:
 8004408:	4801      	ldr	r0, [pc, #4]	; (8004410 <__malloc_lock+0x8>)
 800440a:	f7ff bf7b 	b.w	8004304 <__retarget_lock_acquire_recursive>
 800440e:	bf00      	nop
 8004410:	200040ec 	.word	0x200040ec

08004414 <__malloc_unlock>:
 8004414:	4801      	ldr	r0, [pc, #4]	; (800441c <__malloc_unlock+0x8>)
 8004416:	f7ff bf76 	b.w	8004306 <__retarget_lock_release_recursive>
 800441a:	bf00      	nop
 800441c:	200040ec 	.word	0x200040ec

08004420 <_free_r>:
 8004420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004422:	2900      	cmp	r1, #0
 8004424:	d044      	beq.n	80044b0 <_free_r+0x90>
 8004426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800442a:	9001      	str	r0, [sp, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	f1a1 0404 	sub.w	r4, r1, #4
 8004432:	bfb8      	it	lt
 8004434:	18e4      	addlt	r4, r4, r3
 8004436:	f7ff ffe7 	bl	8004408 <__malloc_lock>
 800443a:	4a1e      	ldr	r2, [pc, #120]	; (80044b4 <_free_r+0x94>)
 800443c:	9801      	ldr	r0, [sp, #4]
 800443e:	6813      	ldr	r3, [r2, #0]
 8004440:	b933      	cbnz	r3, 8004450 <_free_r+0x30>
 8004442:	6063      	str	r3, [r4, #4]
 8004444:	6014      	str	r4, [r2, #0]
 8004446:	b003      	add	sp, #12
 8004448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800444c:	f7ff bfe2 	b.w	8004414 <__malloc_unlock>
 8004450:	42a3      	cmp	r3, r4
 8004452:	d908      	bls.n	8004466 <_free_r+0x46>
 8004454:	6825      	ldr	r5, [r4, #0]
 8004456:	1961      	adds	r1, r4, r5
 8004458:	428b      	cmp	r3, r1
 800445a:	bf01      	itttt	eq
 800445c:	6819      	ldreq	r1, [r3, #0]
 800445e:	685b      	ldreq	r3, [r3, #4]
 8004460:	1949      	addeq	r1, r1, r5
 8004462:	6021      	streq	r1, [r4, #0]
 8004464:	e7ed      	b.n	8004442 <_free_r+0x22>
 8004466:	461a      	mov	r2, r3
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	b10b      	cbz	r3, 8004470 <_free_r+0x50>
 800446c:	42a3      	cmp	r3, r4
 800446e:	d9fa      	bls.n	8004466 <_free_r+0x46>
 8004470:	6811      	ldr	r1, [r2, #0]
 8004472:	1855      	adds	r5, r2, r1
 8004474:	42a5      	cmp	r5, r4
 8004476:	d10b      	bne.n	8004490 <_free_r+0x70>
 8004478:	6824      	ldr	r4, [r4, #0]
 800447a:	4421      	add	r1, r4
 800447c:	1854      	adds	r4, r2, r1
 800447e:	42a3      	cmp	r3, r4
 8004480:	6011      	str	r1, [r2, #0]
 8004482:	d1e0      	bne.n	8004446 <_free_r+0x26>
 8004484:	681c      	ldr	r4, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	6053      	str	r3, [r2, #4]
 800448a:	4421      	add	r1, r4
 800448c:	6011      	str	r1, [r2, #0]
 800448e:	e7da      	b.n	8004446 <_free_r+0x26>
 8004490:	d902      	bls.n	8004498 <_free_r+0x78>
 8004492:	230c      	movs	r3, #12
 8004494:	6003      	str	r3, [r0, #0]
 8004496:	e7d6      	b.n	8004446 <_free_r+0x26>
 8004498:	6825      	ldr	r5, [r4, #0]
 800449a:	1961      	adds	r1, r4, r5
 800449c:	428b      	cmp	r3, r1
 800449e:	bf04      	itt	eq
 80044a0:	6819      	ldreq	r1, [r3, #0]
 80044a2:	685b      	ldreq	r3, [r3, #4]
 80044a4:	6063      	str	r3, [r4, #4]
 80044a6:	bf04      	itt	eq
 80044a8:	1949      	addeq	r1, r1, r5
 80044aa:	6021      	streq	r1, [r4, #0]
 80044ac:	6054      	str	r4, [r2, #4]
 80044ae:	e7ca      	b.n	8004446 <_free_r+0x26>
 80044b0:	b003      	add	sp, #12
 80044b2:	bd30      	pop	{r4, r5, pc}
 80044b4:	200040f0 	.word	0x200040f0

080044b8 <_init>:
 80044b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ba:	bf00      	nop
 80044bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044be:	bc08      	pop	{r3}
 80044c0:	469e      	mov	lr, r3
 80044c2:	4770      	bx	lr

080044c4 <_fini>:
 80044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c6:	bf00      	nop
 80044c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ca:	bc08      	pop	{r3}
 80044cc:	469e      	mov	lr, r3
 80044ce:	4770      	bx	lr
