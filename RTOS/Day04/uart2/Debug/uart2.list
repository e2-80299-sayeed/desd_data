
uart2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003db4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08003f44  08003f44  00013f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800406c  0800406c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800406c  0800406c  0001406c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004074  08004074  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004074  08004074  00014074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004078  08004078  00014078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800407c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000040c0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004134  20004134  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013c8c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000295c  00000000  00000000  00033d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001050  00000000  00000000  00036690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f58  00000000  00000000  000376e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002255e  00000000  00000000  00038638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011edf  00000000  00000000  0005ab96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2990  00000000  00000000  0006ca75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f405  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046f8  00000000  00000000  0013f458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f2c 	.word	0x08003f2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003f2c 	.word	0x08003f2c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x30>)
 80004fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000090 	.word	0x20000090
 8000514:	20000144 	.word	0x20000144

08000518 <vLEDBlinkingTask>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vLEDBlinkingTask(void *pvParam)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	uint32_t pin = GPIO_PIN_14;
 8000520:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000524:	60fb      	str	r3, [r7, #12]
	TickType_t xTickCount = xTaskGetTickCount();
 8000526:	f002 fdaf 	bl	8003088 <xTaskGetTickCount>
 800052a:	4603      	mov	r3, r0
 800052c:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, pin);
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	b29b      	uxth	r3, r3
 8000532:	4619      	mov	r1, r3
 8000534:	4805      	ldr	r0, [pc, #20]	; (800054c <vLEDBlinkingTask+0x34>)
 8000536:	f000 fdae 	bl	8001096 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xTickCount, 1000 / portTICK_RATE_MS);
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000542:	4618      	mov	r0, r3
 8000544:	f002 fbda 	bl	8002cfc <vTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOD, pin);
 8000548:	e7f1      	b.n	800052e <vLEDBlinkingTask+0x16>
 800054a:	bf00      	nop
 800054c:	40020c00 	.word	0x40020c00

08000550 <vUARTSendingTask>:
	}
	vTaskDelete(NULL);
}

void vUARTSendingTask(void *pvParam)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	char *pcMessage = (char *)pvParam;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		portENTER_CRITICAL();
 800055c:	f003 f92a 	bl	80037b4 <vPortEnterCritical>
		HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage)+1, HAL_MAX_DELAY);
 8000560:	68f8      	ldr	r0, [r7, #12]
 8000562:	f7ff fe35 	bl	80001d0 <strlen>
 8000566:	4603      	mov	r3, r0
 8000568:	b29b      	uxth	r3, r3
 800056a:	3301      	adds	r3, #1
 800056c:	b29a      	uxth	r2, r3
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
 8000572:	68f9      	ldr	r1, [r7, #12]
 8000574:	4804      	ldr	r0, [pc, #16]	; (8000588 <vUARTSendingTask+0x38>)
 8000576:	f001 fd6e 	bl	8002056 <HAL_UART_Transmit>
		portEXIT_CRITICAL();
 800057a:	f003 f94b 	bl	8003814 <vPortExitCritical>
		vTaskDelay(3000 / portTICK_RATE_MS);
 800057e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000582:	f002 fc39 	bl	8002df8 <vTaskDelay>
		portENTER_CRITICAL();
 8000586:	e7e9      	b.n	800055c <vUARTSendingTask+0xc>
 8000588:	20000344 	.word	0x20000344

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b5b0      	push	{r4, r5, r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	char *pcMessage = "This is UART Sending Task Demo\r\n";
 8000592:	4b24      	ldr	r3, [pc, #144]	; (8000624 <main+0x98>)
 8000594:	61fb      	str	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 faa5 	bl	8000ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f859 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f8eb 	bl	8000778 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 f8bf 	bl	8000724 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t *)pcMessage, strlen(pcMessage)+1, HAL_MAX_DELAY);
 80005a6:	69f8      	ldr	r0, [r7, #28]
 80005a8:	f7ff fe12 	bl	80001d0 <strlen>
 80005ac:	4603      	mov	r3, r0
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	3301      	adds	r3, #1
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	69f9      	ldr	r1, [r7, #28]
 80005ba:	481b      	ldr	r0, [pc, #108]	; (8000628 <main+0x9c>)
 80005bc:	f001 fd4b 	bl	8002056 <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <main+0xa0>)
 80005c2:	463c      	mov	r4, r7
 80005c4:	461d      	mov	r5, r3
 80005c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d2:	463b      	mov	r3, r7
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 f8d1 	bl	800277e <osThreadCreate>
 80005dc:	4603      	mov	r3, r0
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <main+0xa4>)
 80005e0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(vLEDBlinkingTask, "LEDBlinking", configMINIMAL_STACK_SIZE, NULL, 4, NULL);
 80005e2:	2300      	movs	r3, #0
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2304      	movs	r3, #4
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	4911      	ldr	r1, [pc, #68]	; (8000634 <main+0xa8>)
 80005f0:	4811      	ldr	r0, [pc, #68]	; (8000638 <main+0xac>)
 80005f2:	f002 fa35 	bl	8002a60 <xTaskCreate>
  xTaskCreate(vUARTSendingTask, "UARTTransmit1", configMINIMAL_STACK_SIZE, (void *)"UARTTransmit1 - Hello\r\n", 3, NULL);
 80005f6:	2300      	movs	r3, #0
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2303      	movs	r3, #3
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <main+0xb0>)
 8000600:	2280      	movs	r2, #128	; 0x80
 8000602:	490f      	ldr	r1, [pc, #60]	; (8000640 <main+0xb4>)
 8000604:	480f      	ldr	r0, [pc, #60]	; (8000644 <main+0xb8>)
 8000606:	f002 fa2b 	bl	8002a60 <xTaskCreate>
  xTaskCreate(vUARTSendingTask, "UARTTransmit2", configMINIMAL_STACK_SIZE, (void *)"UARTTransmit2 - Bye\r\n", 3, NULL);
 800060a:	2300      	movs	r3, #0
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2303      	movs	r3, #3
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <main+0xbc>)
 8000614:	2280      	movs	r2, #128	; 0x80
 8000616:	490d      	ldr	r1, [pc, #52]	; (800064c <main+0xc0>)
 8000618:	480a      	ldr	r0, [pc, #40]	; (8000644 <main+0xb8>)
 800061a:	f002 fa21 	bl	8002a60 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800061e:	f002 f8a7 	bl	8002770 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	e7fe      	b.n	8000622 <main+0x96>
 8000624:	08003f50 	.word	0x08003f50
 8000628:	20000344 	.word	0x20000344
 800062c:	08003fd0 	.word	0x08003fd0
 8000630:	20000388 	.word	0x20000388
 8000634:	08003f74 	.word	0x08003f74
 8000638:	08000519 	.word	0x08000519
 800063c:	08003f80 	.word	0x08003f80
 8000640:	08003f98 	.word	0x08003f98
 8000644:	08000551 	.word	0x08000551
 8000648:	08003fa8 	.word	0x08003fa8
 800064c:	08003fc0 	.word	0x08003fc0

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fb9a 	bl	8003d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ce:	2307      	movs	r3, #7
 80006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fcf8 	bl	80010cc <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006e2:	f000 f8b5 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2105      	movs	r1, #5
 8000704:	4618      	mov	r0, r3
 8000706:	f000 ff59 	bl	80015bc <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000710:	f000 f89e 	bl	8000850 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3750      	adds	r7, #80	; 0x50
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_USART2_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800075c:	f001 fc2e 	bl	8001fbc <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f873 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000344 	.word	0x20000344
 8000774:	40004400 	.word	0x40004400

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_GPIO_Init+0x9c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a1f      	ldr	r2, [pc, #124]	; (8000814 <MX_GPIO_Init+0x9c>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a18      	ldr	r2, [pc, #96]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a11      	ldr	r2, [pc, #68]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_GPIO_Init+0x9c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007ea:	f000 fc3b 	bl	8001064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_GPIO_Init+0xa0>)
 8000808:	f000 fa90 	bl	8000d2c <HAL_GPIO_Init>

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020c00 	.word	0x40020c00

0800081c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000824:	2001      	movs	r0, #1
 8000826:	f001 fff6 	bl	8002816 <osDelay>
 800082a:	e7fb      	b.n	8000824 <StartDefaultTask+0x8>

0800082c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d101      	bne.n	8000842 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800083e:	f000 f973 	bl	8000b28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40010000 	.word	0x40010000

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_MspInit+0x54>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	4a11      	ldr	r2, [pc, #68]	; (80008b0 <HAL_MspInit+0x54>)
 800086c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000870:	6453      	str	r3, [r2, #68]	; 0x44
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <HAL_MspInit+0x54>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <HAL_MspInit+0x54>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <HAL_MspInit+0x54>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	6413      	str	r3, [r2, #64]	; 0x40
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_MspInit+0x54>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	210f      	movs	r1, #15
 800089e:	f06f 0001 	mvn.w	r0, #1
 80008a2:	f000 fa19 	bl	8000cd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a19      	ldr	r2, [pc, #100]	; (8000938 <HAL_UART_MspInit+0x84>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d12b      	bne.n	800092e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <HAL_UART_MspInit+0x88>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	4a17      	ldr	r2, [pc, #92]	; (800093c <HAL_UART_MspInit+0x88>)
 80008e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e4:	6413      	str	r3, [r2, #64]	; 0x40
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <HAL_UART_MspInit+0x88>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_UART_MspInit+0x88>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <HAL_UART_MspInit+0x88>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_UART_MspInit+0x88>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800090e:	230c      	movs	r3, #12
 8000910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800091e:	2307      	movs	r3, #7
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <HAL_UART_MspInit+0x8c>)
 800092a:	f000 f9ff 	bl	8000d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40004400 	.word	0x40004400
 800093c:	40023800 	.word	0x40023800
 8000940:	40020000 	.word	0x40020000

08000944 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	; 0x30
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	4b2f      	ldr	r3, [pc, #188]	; (8000a18 <HAL_InitTick+0xd4>)
 800095a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095c:	4a2e      	ldr	r2, [pc, #184]	; (8000a18 <HAL_InitTick+0xd4>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	6453      	str	r3, [r2, #68]	; 0x44
 8000964:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <HAL_InitTick+0xd4>)
 8000966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000968:	f003 0301 	and.w	r3, r3, #1
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000970:	f107 020c 	add.w	r2, r7, #12
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	4611      	mov	r1, r2
 800097a:	4618      	mov	r0, r3
 800097c:	f001 f83e 	bl	80019fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000980:	f001 f828 	bl	80019d4 <HAL_RCC_GetPCLK2Freq>
 8000984:	4603      	mov	r3, r0
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800098a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098c:	4a23      	ldr	r2, [pc, #140]	; (8000a1c <HAL_InitTick+0xd8>)
 800098e:	fba2 2303 	umull	r2, r3, r2, r3
 8000992:	0c9b      	lsrs	r3, r3, #18
 8000994:	3b01      	subs	r3, #1
 8000996:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000998:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <HAL_InitTick+0xdc>)
 800099a:	4a22      	ldr	r2, [pc, #136]	; (8000a24 <HAL_InitTick+0xe0>)
 800099c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <HAL_InitTick+0xdc>)
 80009a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009a6:	4a1e      	ldr	r2, [pc, #120]	; (8000a20 <HAL_InitTick+0xdc>)
 80009a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009aa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <HAL_InitTick+0xdc>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <HAL_InitTick+0xdc>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <HAL_InitTick+0xdc>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009be:	4818      	ldr	r0, [pc, #96]	; (8000a20 <HAL_InitTick+0xdc>)
 80009c0:	f001 f84e 	bl	8001a60 <HAL_TIM_Base_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80009ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d11b      	bne.n	8000a0a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009d2:	4813      	ldr	r0, [pc, #76]	; (8000a20 <HAL_InitTick+0xdc>)
 80009d4:	f001 f89e 	bl	8001b14 <HAL_TIM_Base_Start_IT>
 80009d8:	4603      	mov	r3, r0
 80009da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d111      	bne.n	8000a0a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009e6:	2019      	movs	r0, #25
 80009e8:	f000 f992 	bl	8000d10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b0f      	cmp	r3, #15
 80009f0:	d808      	bhi.n	8000a04 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009f2:	2200      	movs	r2, #0
 80009f4:	6879      	ldr	r1, [r7, #4]
 80009f6:	2019      	movs	r0, #25
 80009f8:	f000 f96e 	bl	8000cd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009fc:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <HAL_InitTick+0xe4>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
 8000a02:	e002      	b.n	8000a0a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3730      	adds	r7, #48	; 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	431bde83 	.word	0x431bde83
 8000a20:	2000038c 	.word	0x2000038c
 8000a24:	40010000 	.word	0x40010000
 8000a28:	20000004 	.word	0x20000004

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <NMI_Handler+0x4>

08000a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <MemManage_Handler+0x4>

08000a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a5e:	f001 f8c9 	bl	8001bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000038c 	.word	0x2000038c

08000a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <SystemInit+0x20>)
 8000a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a76:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <SystemInit+0x20>)
 8000a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a96:	490e      	ldr	r1, [pc, #56]	; (8000ad0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a98:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aac:	4c0b      	ldr	r4, [pc, #44]	; (8000adc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aba:	f7ff ffd7 	bl	8000a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000abe:	f003 f945 	bl	8003d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac2:	f7ff fd63 	bl	800058c <main>
  bx  lr    
 8000ac6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ac8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ad4:	0800407c 	.word	0x0800407c
  ldr r2, =_sbss
 8000ad8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000adc:	20004134 	.word	0x20004134

08000ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <HAL_Init+0x40>)
 8000aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <HAL_Init+0x40>)
 8000afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_Init+0x40>)
 8000b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 f8d8 	bl	8000cc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b12:	200f      	movs	r0, #15
 8000b14:	f7ff ff16 	bl	8000944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b18:	f7ff fea0 	bl	800085c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023c00 	.word	0x40023c00

08000b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x20>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_IncTick+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_IncTick+0x24>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	200003d4 	.word	0x200003d4

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <HAL_GetTick+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	200003d4 	.word	0x200003d4

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	db0b      	blt.n	8000bf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 021f 	and.w	r2, r3, #31
 8000be4:	4907      	ldr	r1, [pc, #28]	; (8000c04 <__NVIC_EnableIRQ+0x38>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	095b      	lsrs	r3, r3, #5
 8000bec:	2001      	movs	r0, #1
 8000bee:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000e100 	.word	0xe000e100

08000c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db0a      	blt.n	8000c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	490c      	ldr	r1, [pc, #48]	; (8000c54 <__NVIC_SetPriority+0x4c>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c30:	e00a      	b.n	8000c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4908      	ldr	r1, [pc, #32]	; (8000c58 <__NVIC_SetPriority+0x50>)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	3b04      	subs	r3, #4
 8000c40:	0112      	lsls	r2, r2, #4
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	440b      	add	r3, r1
 8000c46:	761a      	strb	r2, [r3, #24]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	; 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f1c3 0307 	rsb	r3, r3, #7
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	bf28      	it	cs
 8000c7a:	2304      	movcs	r3, #4
 8000c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3304      	adds	r3, #4
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d902      	bls.n	8000c8c <NVIC_EncodePriority+0x30>
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3b03      	subs	r3, #3
 8000c8a:	e000      	b.n	8000c8e <NVIC_EncodePriority+0x32>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43d9      	mvns	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	4313      	orrs	r3, r2
         );
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3724      	adds	r7, #36	; 0x24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ff4c 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cea:	f7ff ff61 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000cee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	68b9      	ldr	r1, [r7, #8]
 8000cf4:	6978      	ldr	r0, [r7, #20]
 8000cf6:	f7ff ffb1 	bl	8000c5c <NVIC_EncodePriority>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff80 	bl	8000c08 <__NVIC_SetPriority>
}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff54 	bl	8000bcc <__NVIC_EnableIRQ>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
 8000d46:	e16b      	b.n	8001020 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f040 815a 	bne.w	800101a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d005      	beq.n	8000d7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d130      	bne.n	8000de0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db4:	2201      	movs	r2, #1
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	091b      	lsrs	r3, r3, #4
 8000dca:	f003 0201 	and.w	r2, r3, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d017      	beq.n	8000e1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d123      	bne.n	8000e70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	08da      	lsrs	r2, r3, #3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3208      	adds	r2, #8
 8000e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	220f      	movs	r2, #15
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	691a      	ldr	r2, [r3, #16]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	69b9      	ldr	r1, [r7, #24]
 8000e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0203 	and.w	r2, r3, #3
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 80b4 	beq.w	800101a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b60      	ldr	r3, [pc, #384]	; (8001038 <HAL_GPIO_Init+0x30c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a5f      	ldr	r2, [pc, #380]	; (8001038 <HAL_GPIO_Init+0x30c>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b5d      	ldr	r3, [pc, #372]	; (8001038 <HAL_GPIO_Init+0x30c>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ece:	4a5b      	ldr	r2, [pc, #364]	; (800103c <HAL_GPIO_Init+0x310>)
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a52      	ldr	r2, [pc, #328]	; (8001040 <HAL_GPIO_Init+0x314>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d02b      	beq.n	8000f52 <HAL_GPIO_Init+0x226>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a51      	ldr	r2, [pc, #324]	; (8001044 <HAL_GPIO_Init+0x318>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d025      	beq.n	8000f4e <HAL_GPIO_Init+0x222>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a50      	ldr	r2, [pc, #320]	; (8001048 <HAL_GPIO_Init+0x31c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d01f      	beq.n	8000f4a <HAL_GPIO_Init+0x21e>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4f      	ldr	r2, [pc, #316]	; (800104c <HAL_GPIO_Init+0x320>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d019      	beq.n	8000f46 <HAL_GPIO_Init+0x21a>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4e      	ldr	r2, [pc, #312]	; (8001050 <HAL_GPIO_Init+0x324>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d013      	beq.n	8000f42 <HAL_GPIO_Init+0x216>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4d      	ldr	r2, [pc, #308]	; (8001054 <HAL_GPIO_Init+0x328>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d00d      	beq.n	8000f3e <HAL_GPIO_Init+0x212>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4c      	ldr	r2, [pc, #304]	; (8001058 <HAL_GPIO_Init+0x32c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d007      	beq.n	8000f3a <HAL_GPIO_Init+0x20e>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4b      	ldr	r2, [pc, #300]	; (800105c <HAL_GPIO_Init+0x330>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d101      	bne.n	8000f36 <HAL_GPIO_Init+0x20a>
 8000f32:	2307      	movs	r3, #7
 8000f34:	e00e      	b.n	8000f54 <HAL_GPIO_Init+0x228>
 8000f36:	2308      	movs	r3, #8
 8000f38:	e00c      	b.n	8000f54 <HAL_GPIO_Init+0x228>
 8000f3a:	2306      	movs	r3, #6
 8000f3c:	e00a      	b.n	8000f54 <HAL_GPIO_Init+0x228>
 8000f3e:	2305      	movs	r3, #5
 8000f40:	e008      	b.n	8000f54 <HAL_GPIO_Init+0x228>
 8000f42:	2304      	movs	r3, #4
 8000f44:	e006      	b.n	8000f54 <HAL_GPIO_Init+0x228>
 8000f46:	2303      	movs	r3, #3
 8000f48:	e004      	b.n	8000f54 <HAL_GPIO_Init+0x228>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e002      	b.n	8000f54 <HAL_GPIO_Init+0x228>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <HAL_GPIO_Init+0x228>
 8000f52:	2300      	movs	r3, #0
 8000f54:	69fa      	ldr	r2, [r7, #28]
 8000f56:	f002 0203 	and.w	r2, r2, #3
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	4093      	lsls	r3, r2
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f64:	4935      	ldr	r1, [pc, #212]	; (800103c <HAL_GPIO_Init+0x310>)
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f72:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f96:	4a32      	ldr	r2, [pc, #200]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f9c:	4b30      	ldr	r3, [pc, #192]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc0:	4a27      	ldr	r2, [pc, #156]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fc6:	4b26      	ldr	r3, [pc, #152]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fea:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001014:	4a12      	ldr	r2, [pc, #72]	; (8001060 <HAL_GPIO_Init+0x334>)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3301      	adds	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	2b0f      	cmp	r3, #15
 8001024:	f67f ae90 	bls.w	8000d48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40013800 	.word	0x40013800
 8001040:	40020000 	.word	0x40020000
 8001044:	40020400 	.word	0x40020400
 8001048:	40020800 	.word	0x40020800
 800104c:	40020c00 	.word	0x40020c00
 8001050:	40021000 	.word	0x40021000
 8001054:	40021400 	.word	0x40021400
 8001058:	40021800 	.word	0x40021800
 800105c:	40021c00 	.word	0x40021c00
 8001060:	40013c00 	.word	0x40013c00

08001064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
 8001070:	4613      	mov	r3, r2
 8001072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001074:	787b      	ldrb	r3, [r7, #1]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001080:	e003      	b.n	800108a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	041a      	lsls	r2, r3, #16
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	619a      	str	r2, [r3, #24]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001096:	b480      	push	{r7}
 8001098:	b085      	sub	sp, #20
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	460b      	mov	r3, r1
 80010a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010a8:	887a      	ldrh	r2, [r7, #2]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4013      	ands	r3, r2
 80010ae:	041a      	lsls	r2, r3, #16
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43d9      	mvns	r1, r3
 80010b4:	887b      	ldrh	r3, [r7, #2]
 80010b6:	400b      	ands	r3, r1
 80010b8:	431a      	orrs	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	619a      	str	r2, [r3, #24]
}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e267      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d075      	beq.n	80011d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ea:	4b88      	ldr	r3, [pc, #544]	; (800130c <HAL_RCC_OscConfig+0x240>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 030c 	and.w	r3, r3, #12
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	d00c      	beq.n	8001110 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010f6:	4b85      	ldr	r3, [pc, #532]	; (800130c <HAL_RCC_OscConfig+0x240>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d112      	bne.n	8001128 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001102:	4b82      	ldr	r3, [pc, #520]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800110e:	d10b      	bne.n	8001128 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001110:	4b7e      	ldr	r3, [pc, #504]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d05b      	beq.n	80011d4 <HAL_RCC_OscConfig+0x108>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d157      	bne.n	80011d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e242      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001130:	d106      	bne.n	8001140 <HAL_RCC_OscConfig+0x74>
 8001132:	4b76      	ldr	r3, [pc, #472]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a75      	ldr	r2, [pc, #468]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e01d      	b.n	800117c <HAL_RCC_OscConfig+0xb0>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001148:	d10c      	bne.n	8001164 <HAL_RCC_OscConfig+0x98>
 800114a:	4b70      	ldr	r3, [pc, #448]	; (800130c <HAL_RCC_OscConfig+0x240>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a6f      	ldr	r2, [pc, #444]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b6d      	ldr	r3, [pc, #436]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a6c      	ldr	r2, [pc, #432]	; (800130c <HAL_RCC_OscConfig+0x240>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e00b      	b.n	800117c <HAL_RCC_OscConfig+0xb0>
 8001164:	4b69      	ldr	r3, [pc, #420]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a68      	ldr	r2, [pc, #416]	; (800130c <HAL_RCC_OscConfig+0x240>)
 800116a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b66      	ldr	r3, [pc, #408]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a65      	ldr	r2, [pc, #404]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d013      	beq.n	80011ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fce4 	bl	8000b50 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fce0 	bl	8000b50 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e207      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	4b5b      	ldr	r3, [pc, #364]	; (800130c <HAL_RCC_OscConfig+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f0      	beq.n	800118c <HAL_RCC_OscConfig+0xc0>
 80011aa:	e014      	b.n	80011d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fcd0 	bl	8000b50 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fccc 	bl	8000b50 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	; 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e1f3      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c6:	4b51      	ldr	r3, [pc, #324]	; (800130c <HAL_RCC_OscConfig+0x240>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f0      	bne.n	80011b4 <HAL_RCC_OscConfig+0xe8>
 80011d2:	e000      	b.n	80011d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d063      	beq.n	80012aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011e2:	4b4a      	ldr	r3, [pc, #296]	; (800130c <HAL_RCC_OscConfig+0x240>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00b      	beq.n	8001206 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ee:	4b47      	ldr	r3, [pc, #284]	; (800130c <HAL_RCC_OscConfig+0x240>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d11c      	bne.n	8001234 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011fa:	4b44      	ldr	r3, [pc, #272]	; (800130c <HAL_RCC_OscConfig+0x240>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d116      	bne.n	8001234 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001206:	4b41      	ldr	r3, [pc, #260]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <HAL_RCC_OscConfig+0x152>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d001      	beq.n	800121e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e1c7      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121e:	4b3b      	ldr	r3, [pc, #236]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4937      	ldr	r1, [pc, #220]	; (800130c <HAL_RCC_OscConfig+0x240>)
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001232:	e03a      	b.n	80012aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d020      	beq.n	800127e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800123c:	4b34      	ldr	r3, [pc, #208]	; (8001310 <HAL_RCC_OscConfig+0x244>)
 800123e:	2201      	movs	r2, #1
 8001240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001242:	f7ff fc85 	bl	8000b50 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800124a:	f7ff fc81 	bl	8000b50 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e1a8      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125c:	4b2b      	ldr	r3, [pc, #172]	; (800130c <HAL_RCC_OscConfig+0x240>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <HAL_RCC_OscConfig+0x240>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4925      	ldr	r1, [pc, #148]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001278:	4313      	orrs	r3, r2
 800127a:	600b      	str	r3, [r1, #0]
 800127c:	e015      	b.n	80012aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127e:	4b24      	ldr	r3, [pc, #144]	; (8001310 <HAL_RCC_OscConfig+0x244>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001284:	f7ff fc64 	bl	8000b50 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128c:	f7ff fc60 	bl	8000b50 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e187      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_RCC_OscConfig+0x240>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d036      	beq.n	8001324 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d016      	beq.n	80012ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <HAL_RCC_OscConfig+0x248>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c4:	f7ff fc44 	bl	8000b50 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012cc:	f7ff fc40 	bl	8000b50 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e167      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_RCC_OscConfig+0x240>)
 80012e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0x200>
 80012ea:	e01b      	b.n	8001324 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_RCC_OscConfig+0x248>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f2:	f7ff fc2d 	bl	8000b50 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f8:	e00e      	b.n	8001318 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fa:	f7ff fc29 	bl	8000b50 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d907      	bls.n	8001318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e150      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
 800130c:	40023800 	.word	0x40023800
 8001310:	42470000 	.word	0x42470000
 8001314:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001318:	4b88      	ldr	r3, [pc, #544]	; (800153c <HAL_RCC_OscConfig+0x470>)
 800131a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1ea      	bne.n	80012fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 8097 	beq.w	8001460 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001336:	4b81      	ldr	r3, [pc, #516]	; (800153c <HAL_RCC_OscConfig+0x470>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10f      	bne.n	8001362 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	4b7d      	ldr	r3, [pc, #500]	; (800153c <HAL_RCC_OscConfig+0x470>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a7c      	ldr	r2, [pc, #496]	; (800153c <HAL_RCC_OscConfig+0x470>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b7a      	ldr	r3, [pc, #488]	; (800153c <HAL_RCC_OscConfig+0x470>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800135e:	2301      	movs	r3, #1
 8001360:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001362:	4b77      	ldr	r3, [pc, #476]	; (8001540 <HAL_RCC_OscConfig+0x474>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136a:	2b00      	cmp	r3, #0
 800136c:	d118      	bne.n	80013a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800136e:	4b74      	ldr	r3, [pc, #464]	; (8001540 <HAL_RCC_OscConfig+0x474>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a73      	ldr	r2, [pc, #460]	; (8001540 <HAL_RCC_OscConfig+0x474>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800137a:	f7ff fbe9 	bl	8000b50 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001382:	f7ff fbe5 	bl	8000b50 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e10c      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001394:	4b6a      	ldr	r3, [pc, #424]	; (8001540 <HAL_RCC_OscConfig+0x474>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d106      	bne.n	80013b6 <HAL_RCC_OscConfig+0x2ea>
 80013a8:	4b64      	ldr	r3, [pc, #400]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ac:	4a63      	ldr	r2, [pc, #396]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6713      	str	r3, [r2, #112]	; 0x70
 80013b4:	e01c      	b.n	80013f0 <HAL_RCC_OscConfig+0x324>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2b05      	cmp	r3, #5
 80013bc:	d10c      	bne.n	80013d8 <HAL_RCC_OscConfig+0x30c>
 80013be:	4b5f      	ldr	r3, [pc, #380]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c2:	4a5e      	ldr	r2, [pc, #376]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6713      	str	r3, [r2, #112]	; 0x70
 80013ca:	4b5c      	ldr	r3, [pc, #368]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ce:	4a5b      	ldr	r2, [pc, #364]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6713      	str	r3, [r2, #112]	; 0x70
 80013d6:	e00b      	b.n	80013f0 <HAL_RCC_OscConfig+0x324>
 80013d8:	4b58      	ldr	r3, [pc, #352]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	4a57      	ldr	r2, [pc, #348]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013de:	f023 0301 	bic.w	r3, r3, #1
 80013e2:	6713      	str	r3, [r2, #112]	; 0x70
 80013e4:	4b55      	ldr	r3, [pc, #340]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e8:	4a54      	ldr	r2, [pc, #336]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013ea:	f023 0304 	bic.w	r3, r3, #4
 80013ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d015      	beq.n	8001424 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f8:	f7ff fbaa 	bl	8000b50 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fe:	e00a      	b.n	8001416 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001400:	f7ff fba6 	bl	8000b50 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	f241 3288 	movw	r2, #5000	; 0x1388
 800140e:	4293      	cmp	r3, r2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e0cb      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001416:	4b49      	ldr	r3, [pc, #292]	; (800153c <HAL_RCC_OscConfig+0x470>)
 8001418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0ee      	beq.n	8001400 <HAL_RCC_OscConfig+0x334>
 8001422:	e014      	b.n	800144e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001424:	f7ff fb94 	bl	8000b50 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800142a:	e00a      	b.n	8001442 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142c:	f7ff fb90 	bl	8000b50 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	f241 3288 	movw	r2, #5000	; 0x1388
 800143a:	4293      	cmp	r3, r2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e0b5      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001442:	4b3e      	ldr	r3, [pc, #248]	; (800153c <HAL_RCC_OscConfig+0x470>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1ee      	bne.n	800142c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800144e:	7dfb      	ldrb	r3, [r7, #23]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d105      	bne.n	8001460 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001454:	4b39      	ldr	r3, [pc, #228]	; (800153c <HAL_RCC_OscConfig+0x470>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	4a38      	ldr	r2, [pc, #224]	; (800153c <HAL_RCC_OscConfig+0x470>)
 800145a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800145e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80a1 	beq.w	80015ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800146a:	4b34      	ldr	r3, [pc, #208]	; (800153c <HAL_RCC_OscConfig+0x470>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b08      	cmp	r3, #8
 8001474:	d05c      	beq.n	8001530 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d141      	bne.n	8001502 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147e:	4b31      	ldr	r3, [pc, #196]	; (8001544 <HAL_RCC_OscConfig+0x478>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fb64 	bl	8000b50 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800148c:	f7ff fb60 	bl	8000b50 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e087      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149e:	4b27      	ldr	r3, [pc, #156]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69da      	ldr	r2, [r3, #28]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	019b      	lsls	r3, r3, #6
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c0:	085b      	lsrs	r3, r3, #1
 80014c2:	3b01      	subs	r3, #1
 80014c4:	041b      	lsls	r3, r3, #16
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014cc:	061b      	lsls	r3, r3, #24
 80014ce:	491b      	ldr	r1, [pc, #108]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_RCC_OscConfig+0x478>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff fb39 	bl	8000b50 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e2:	f7ff fb35 	bl	8000b50 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e05c      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x416>
 8001500:	e054      	b.n	80015ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_RCC_OscConfig+0x478>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fb22 	bl	8000b50 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001510:	f7ff fb1e 	bl	8000b50 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e045      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_RCC_OscConfig+0x470>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x444>
 800152e:	e03d      	b.n	80015ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d107      	bne.n	8001548 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e038      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
 800153c:	40023800 	.word	0x40023800
 8001540:	40007000 	.word	0x40007000
 8001544:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_RCC_OscConfig+0x4ec>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d028      	beq.n	80015a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001560:	429a      	cmp	r2, r3
 8001562:	d121      	bne.n	80015a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156e:	429a      	cmp	r2, r3
 8001570:	d11a      	bne.n	80015a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001578:	4013      	ands	r3, r2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800157e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001580:	4293      	cmp	r3, r2
 8001582:	d111      	bne.n	80015a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	085b      	lsrs	r3, r3, #1
 8001590:	3b01      	subs	r3, #1
 8001592:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001594:	429a      	cmp	r2, r3
 8001596:	d107      	bne.n	80015a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800

080015bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0cc      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d0:	4b68      	ldr	r3, [pc, #416]	; (8001774 <HAL_RCC_ClockConfig+0x1b8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d90c      	bls.n	80015f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015de:	4b65      	ldr	r3, [pc, #404]	; (8001774 <HAL_RCC_ClockConfig+0x1b8>)
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e6:	4b63      	ldr	r3, [pc, #396]	; (8001774 <HAL_RCC_ClockConfig+0x1b8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0b8      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d020      	beq.n	8001646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001610:	4b59      	ldr	r3, [pc, #356]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4a58      	ldr	r2, [pc, #352]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800161a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001628:	4b53      	ldr	r3, [pc, #332]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	4a52      	ldr	r2, [pc, #328]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001634:	4b50      	ldr	r3, [pc, #320]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	494d      	ldr	r1, [pc, #308]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	4313      	orrs	r3, r2
 8001644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d044      	beq.n	80016dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d107      	bne.n	800166a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d119      	bne.n	800169a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e07f      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d003      	beq.n	800167a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001676:	2b03      	cmp	r3, #3
 8001678:	d107      	bne.n	800168a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167a:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e06f      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168a:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e067      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800169a:	4b37      	ldr	r3, [pc, #220]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f023 0203 	bic.w	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4934      	ldr	r1, [pc, #208]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016ac:	f7ff fa50 	bl	8000b50 <HAL_GetTick>
 80016b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b4:	f7ff fa4c 	bl	8000b50 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e04f      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ca:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 020c 	and.w	r2, r3, #12
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	429a      	cmp	r2, r3
 80016da:	d1eb      	bne.n	80016b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016dc:	4b25      	ldr	r3, [pc, #148]	; (8001774 <HAL_RCC_ClockConfig+0x1b8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d20c      	bcs.n	8001704 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	4b22      	ldr	r3, [pc, #136]	; (8001774 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_RCC_ClockConfig+0x1b8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e032      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	4916      	ldr	r1, [pc, #88]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	4313      	orrs	r3, r2
 8001720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d009      	beq.n	8001742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	490e      	ldr	r1, [pc, #56]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	4313      	orrs	r3, r2
 8001740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001742:	f000 f821 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 8001746:	4602      	mov	r2, r0
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	490a      	ldr	r1, [pc, #40]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 8001754:	5ccb      	ldrb	r3, [r1, r3]
 8001756:	fa22 f303 	lsr.w	r3, r2, r3
 800175a:	4a09      	ldr	r2, [pc, #36]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_RCC_ClockConfig+0x1c8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff f8ee 	bl	8000944 <HAL_InitTick>

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023c00 	.word	0x40023c00
 8001778:	40023800 	.word	0x40023800
 800177c:	08003ff4 	.word	0x08003ff4
 8001780:	20000000 	.word	0x20000000
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800178c:	b094      	sub	sp, #80	; 0x50
 800178e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	647b      	str	r3, [r7, #68]	; 0x44
 8001794:	2300      	movs	r3, #0
 8001796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001798:	2300      	movs	r3, #0
 800179a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017a0:	4b79      	ldr	r3, [pc, #484]	; (8001988 <HAL_RCC_GetSysClockFreq+0x200>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d00d      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0x40>
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	f200 80e1 	bhi.w	8001974 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x34>
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d003      	beq.n	80017c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ba:	e0db      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017bc:	4b73      	ldr	r3, [pc, #460]	; (800198c <HAL_RCC_GetSysClockFreq+0x204>)
 80017be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017c0:	e0db      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017c2:	4b73      	ldr	r3, [pc, #460]	; (8001990 <HAL_RCC_GetSysClockFreq+0x208>)
 80017c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017c6:	e0d8      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017c8:	4b6f      	ldr	r3, [pc, #444]	; (8001988 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017d2:	4b6d      	ldr	r3, [pc, #436]	; (8001988 <HAL_RCC_GetSysClockFreq+0x200>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d063      	beq.n	80018a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017de:	4b6a      	ldr	r3, [pc, #424]	; (8001988 <HAL_RCC_GetSysClockFreq+0x200>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	099b      	lsrs	r3, r3, #6
 80017e4:	2200      	movs	r2, #0
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80017e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017f0:	633b      	str	r3, [r7, #48]	; 0x30
 80017f2:	2300      	movs	r3, #0
 80017f4:	637b      	str	r3, [r7, #52]	; 0x34
 80017f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017fa:	4622      	mov	r2, r4
 80017fc:	462b      	mov	r3, r5
 80017fe:	f04f 0000 	mov.w	r0, #0
 8001802:	f04f 0100 	mov.w	r1, #0
 8001806:	0159      	lsls	r1, r3, #5
 8001808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800180c:	0150      	lsls	r0, r2, #5
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4621      	mov	r1, r4
 8001814:	1a51      	subs	r1, r2, r1
 8001816:	6139      	str	r1, [r7, #16]
 8001818:	4629      	mov	r1, r5
 800181a:	eb63 0301 	sbc.w	r3, r3, r1
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800182c:	4659      	mov	r1, fp
 800182e:	018b      	lsls	r3, r1, #6
 8001830:	4651      	mov	r1, sl
 8001832:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001836:	4651      	mov	r1, sl
 8001838:	018a      	lsls	r2, r1, #6
 800183a:	4651      	mov	r1, sl
 800183c:	ebb2 0801 	subs.w	r8, r2, r1
 8001840:	4659      	mov	r1, fp
 8001842:	eb63 0901 	sbc.w	r9, r3, r1
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800185a:	4690      	mov	r8, r2
 800185c:	4699      	mov	r9, r3
 800185e:	4623      	mov	r3, r4
 8001860:	eb18 0303 	adds.w	r3, r8, r3
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	462b      	mov	r3, r5
 8001868:	eb49 0303 	adc.w	r3, r9, r3
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800187a:	4629      	mov	r1, r5
 800187c:	024b      	lsls	r3, r1, #9
 800187e:	4621      	mov	r1, r4
 8001880:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001884:	4621      	mov	r1, r4
 8001886:	024a      	lsls	r2, r1, #9
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800188e:	2200      	movs	r2, #0
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
 8001892:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001894:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001898:	f7fe fca2 	bl	80001e0 <__aeabi_uldivmod>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4613      	mov	r3, r2
 80018a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018a4:	e058      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a6:	4b38      	ldr	r3, [pc, #224]	; (8001988 <HAL_RCC_GetSysClockFreq+0x200>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	099b      	lsrs	r3, r3, #6
 80018ac:	2200      	movs	r2, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	4611      	mov	r1, r2
 80018b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018b6:	623b      	str	r3, [r7, #32]
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
 80018bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018c0:	4642      	mov	r2, r8
 80018c2:	464b      	mov	r3, r9
 80018c4:	f04f 0000 	mov.w	r0, #0
 80018c8:	f04f 0100 	mov.w	r1, #0
 80018cc:	0159      	lsls	r1, r3, #5
 80018ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018d2:	0150      	lsls	r0, r2, #5
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4641      	mov	r1, r8
 80018da:	ebb2 0a01 	subs.w	sl, r2, r1
 80018de:	4649      	mov	r1, r9
 80018e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018f8:	ebb2 040a 	subs.w	r4, r2, sl
 80018fc:	eb63 050b 	sbc.w	r5, r3, fp
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	00eb      	lsls	r3, r5, #3
 800190a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800190e:	00e2      	lsls	r2, r4, #3
 8001910:	4614      	mov	r4, r2
 8001912:	461d      	mov	r5, r3
 8001914:	4643      	mov	r3, r8
 8001916:	18e3      	adds	r3, r4, r3
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	464b      	mov	r3, r9
 800191c:	eb45 0303 	adc.w	r3, r5, r3
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800192e:	4629      	mov	r1, r5
 8001930:	028b      	lsls	r3, r1, #10
 8001932:	4621      	mov	r1, r4
 8001934:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001938:	4621      	mov	r1, r4
 800193a:	028a      	lsls	r2, r1, #10
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001942:	2200      	movs	r2, #0
 8001944:	61bb      	str	r3, [r7, #24]
 8001946:	61fa      	str	r2, [r7, #28]
 8001948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800194c:	f7fe fc48 	bl	80001e0 <__aeabi_uldivmod>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4613      	mov	r3, r2
 8001956:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_RCC_GetSysClockFreq+0x200>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	0c1b      	lsrs	r3, r3, #16
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	3301      	adds	r3, #1
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001968:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800196a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800196c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001970:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001972:	e002      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_RCC_GetSysClockFreq+0x204>)
 8001976:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800197a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800197c:	4618      	mov	r0, r3
 800197e:	3750      	adds	r7, #80	; 0x50
 8001980:	46bd      	mov	sp, r7
 8001982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	00f42400 	.word	0x00f42400
 8001990:	007a1200 	.word	0x007a1200

08001994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000000 	.word	0x20000000

080019ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019b0:	f7ff fff0 	bl	8001994 <HAL_RCC_GetHCLKFreq>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	0a9b      	lsrs	r3, r3, #10
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	4903      	ldr	r1, [pc, #12]	; (80019d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019c2:	5ccb      	ldrb	r3, [r1, r3]
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	08004004 	.word	0x08004004

080019d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019d8:	f7ff ffdc 	bl	8001994 <HAL_RCC_GetHCLKFreq>
 80019dc:	4602      	mov	r2, r0
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	0b5b      	lsrs	r3, r3, #13
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	4903      	ldr	r1, [pc, #12]	; (80019f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ea:	5ccb      	ldrb	r3, [r1, r3]
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800
 80019f8:	08004004 	.word	0x08004004

080019fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	220f      	movs	r2, #15
 8001a0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_RCC_GetClockConfig+0x5c>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0203 	and.w	r2, r3, #3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <HAL_RCC_GetClockConfig+0x5c>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <HAL_RCC_GetClockConfig+0x5c>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_RCC_GetClockConfig+0x5c>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	08db      	lsrs	r3, r3, #3
 8001a36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <HAL_RCC_GetClockConfig+0x60>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0207 	and.w	r2, r3, #7
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	601a      	str	r2, [r3, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40023c00 	.word	0x40023c00

08001a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e041      	b.n	8001af6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d106      	bne.n	8001a8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f839 	bl	8001afe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	f000 f9d8 	bl	8001e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d001      	beq.n	8001b2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e04e      	b.n	8001bca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a23      	ldr	r2, [pc, #140]	; (8001bd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d022      	beq.n	8001b94 <HAL_TIM_Base_Start_IT+0x80>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b56:	d01d      	beq.n	8001b94 <HAL_TIM_Base_Start_IT+0x80>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <HAL_TIM_Base_Start_IT+0xc8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d018      	beq.n	8001b94 <HAL_TIM_Base_Start_IT+0x80>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a1e      	ldr	r2, [pc, #120]	; (8001be0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d013      	beq.n	8001b94 <HAL_TIM_Base_Start_IT+0x80>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a1c      	ldr	r2, [pc, #112]	; (8001be4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00e      	beq.n	8001b94 <HAL_TIM_Base_Start_IT+0x80>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d009      	beq.n	8001b94 <HAL_TIM_Base_Start_IT+0x80>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a19      	ldr	r2, [pc, #100]	; (8001bec <HAL_TIM_Base_Start_IT+0xd8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d004      	beq.n	8001b94 <HAL_TIM_Base_Start_IT+0x80>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d111      	bne.n	8001bb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d010      	beq.n	8001bc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 0201 	orr.w	r2, r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bb6:	e007      	b.n	8001bc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40010000 	.word	0x40010000
 8001bdc:	40000400 	.word	0x40000400
 8001be0:	40000800 	.word	0x40000800
 8001be4:	40000c00 	.word	0x40000c00
 8001be8:	40010400 	.word	0x40010400
 8001bec:	40014000 	.word	0x40014000
 8001bf0:	40001800 	.word	0x40001800

08001bf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d122      	bne.n	8001c50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d11b      	bne.n	8001c50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f06f 0202 	mvn.w	r2, #2
 8001c20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f8ee 	bl	8001e18 <HAL_TIM_IC_CaptureCallback>
 8001c3c:	e005      	b.n	8001c4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f8e0 	bl	8001e04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f8f1 	bl	8001e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d122      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d11b      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f06f 0204 	mvn.w	r2, #4
 8001c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8c4 	bl	8001e18 <HAL_TIM_IC_CaptureCallback>
 8001c90:	e005      	b.n	8001c9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f8b6 	bl	8001e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f8c7 	bl	8001e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d122      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d11b      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f06f 0208 	mvn.w	r2, #8
 8001cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2204      	movs	r2, #4
 8001cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f89a 	bl	8001e18 <HAL_TIM_IC_CaptureCallback>
 8001ce4:	e005      	b.n	8001cf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f88c 	bl	8001e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f89d 	bl	8001e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	2b10      	cmp	r3, #16
 8001d04:	d122      	bne.n	8001d4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	2b10      	cmp	r3, #16
 8001d12:	d11b      	bne.n	8001d4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0210 	mvn.w	r2, #16
 8001d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2208      	movs	r2, #8
 8001d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f870 	bl	8001e18 <HAL_TIM_IC_CaptureCallback>
 8001d38:	e005      	b.n	8001d46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f862 	bl	8001e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f873 	bl	8001e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d10e      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d107      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0201 	mvn.w	r2, #1
 8001d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe fd5a 	bl	800082c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d82:	2b80      	cmp	r3, #128	; 0x80
 8001d84:	d10e      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d90:	2b80      	cmp	r3, #128	; 0x80
 8001d92:	d107      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f902 	bl	8001fa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dae:	2b40      	cmp	r3, #64	; 0x40
 8001db0:	d10e      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbc:	2b40      	cmp	r3, #64	; 0x40
 8001dbe:	d107      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f838 	bl	8001e40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	d10e      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0320 	and.w	r3, r3, #32
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	d107      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0220 	mvn.w	r2, #32
 8001df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8cc 	bl	8001f94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a40      	ldr	r2, [pc, #256]	; (8001f68 <TIM_Base_SetConfig+0x114>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d013      	beq.n	8001e94 <TIM_Base_SetConfig+0x40>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e72:	d00f      	beq.n	8001e94 <TIM_Base_SetConfig+0x40>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a3d      	ldr	r2, [pc, #244]	; (8001f6c <TIM_Base_SetConfig+0x118>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00b      	beq.n	8001e94 <TIM_Base_SetConfig+0x40>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a3c      	ldr	r2, [pc, #240]	; (8001f70 <TIM_Base_SetConfig+0x11c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d007      	beq.n	8001e94 <TIM_Base_SetConfig+0x40>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a3b      	ldr	r2, [pc, #236]	; (8001f74 <TIM_Base_SetConfig+0x120>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d003      	beq.n	8001e94 <TIM_Base_SetConfig+0x40>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a3a      	ldr	r2, [pc, #232]	; (8001f78 <TIM_Base_SetConfig+0x124>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d108      	bne.n	8001ea6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a2f      	ldr	r2, [pc, #188]	; (8001f68 <TIM_Base_SetConfig+0x114>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d02b      	beq.n	8001f06 <TIM_Base_SetConfig+0xb2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb4:	d027      	beq.n	8001f06 <TIM_Base_SetConfig+0xb2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a2c      	ldr	r2, [pc, #176]	; (8001f6c <TIM_Base_SetConfig+0x118>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d023      	beq.n	8001f06 <TIM_Base_SetConfig+0xb2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a2b      	ldr	r2, [pc, #172]	; (8001f70 <TIM_Base_SetConfig+0x11c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d01f      	beq.n	8001f06 <TIM_Base_SetConfig+0xb2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a2a      	ldr	r2, [pc, #168]	; (8001f74 <TIM_Base_SetConfig+0x120>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d01b      	beq.n	8001f06 <TIM_Base_SetConfig+0xb2>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a29      	ldr	r2, [pc, #164]	; (8001f78 <TIM_Base_SetConfig+0x124>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d017      	beq.n	8001f06 <TIM_Base_SetConfig+0xb2>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a28      	ldr	r2, [pc, #160]	; (8001f7c <TIM_Base_SetConfig+0x128>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d013      	beq.n	8001f06 <TIM_Base_SetConfig+0xb2>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a27      	ldr	r2, [pc, #156]	; (8001f80 <TIM_Base_SetConfig+0x12c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00f      	beq.n	8001f06 <TIM_Base_SetConfig+0xb2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a26      	ldr	r2, [pc, #152]	; (8001f84 <TIM_Base_SetConfig+0x130>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00b      	beq.n	8001f06 <TIM_Base_SetConfig+0xb2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a25      	ldr	r2, [pc, #148]	; (8001f88 <TIM_Base_SetConfig+0x134>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d007      	beq.n	8001f06 <TIM_Base_SetConfig+0xb2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a24      	ldr	r2, [pc, #144]	; (8001f8c <TIM_Base_SetConfig+0x138>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d003      	beq.n	8001f06 <TIM_Base_SetConfig+0xb2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a23      	ldr	r2, [pc, #140]	; (8001f90 <TIM_Base_SetConfig+0x13c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d108      	bne.n	8001f18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <TIM_Base_SetConfig+0x114>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d003      	beq.n	8001f4c <TIM_Base_SetConfig+0xf8>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <TIM_Base_SetConfig+0x124>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d103      	bne.n	8001f54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	615a      	str	r2, [r3, #20]
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	40000400 	.word	0x40000400
 8001f70:	40000800 	.word	0x40000800
 8001f74:	40000c00 	.word	0x40000c00
 8001f78:	40010400 	.word	0x40010400
 8001f7c:	40014000 	.word	0x40014000
 8001f80:	40014400 	.word	0x40014400
 8001f84:	40014800 	.word	0x40014800
 8001f88:	40001800 	.word	0x40001800
 8001f8c:	40001c00 	.word	0x40001c00
 8001f90:	40002000 	.word	0x40002000

08001f94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e03f      	b.n	800204e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d106      	bne.n	8001fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7fe fc66 	bl	80008b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2224      	movs	r2, #36	; 0x24
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f929 	bl	8002258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b08a      	sub	sp, #40	; 0x28
 800205a:	af02      	add	r7, sp, #8
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	4613      	mov	r3, r2
 8002064:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b20      	cmp	r3, #32
 8002074:	d17c      	bne.n	8002170 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <HAL_UART_Transmit+0x2c>
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e075      	b.n	8002172 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_UART_Transmit+0x3e>
 8002090:	2302      	movs	r3, #2
 8002092:	e06e      	b.n	8002172 <HAL_UART_Transmit+0x11c>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2221      	movs	r2, #33	; 0x21
 80020a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020aa:	f7fe fd51 	bl	8000b50 <HAL_GetTick>
 80020ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	88fa      	ldrh	r2, [r7, #6]
 80020b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	88fa      	ldrh	r2, [r7, #6]
 80020ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c4:	d108      	bne.n	80020d8 <HAL_UART_Transmit+0x82>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d104      	bne.n	80020d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	e003      	b.n	80020e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020e8:	e02a      	b.n	8002140 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2200      	movs	r2, #0
 80020f2:	2180      	movs	r1, #128	; 0x80
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 f840 	bl	800217a <UART_WaitOnFlagUntilTimeout>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e036      	b.n	8002172 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10b      	bne.n	8002122 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002118:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	3302      	adds	r3, #2
 800211e:	61bb      	str	r3, [r7, #24]
 8002120:	e007      	b.n	8002132 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	781a      	ldrb	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	3301      	adds	r3, #1
 8002130:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002136:	b29b      	uxth	r3, r3
 8002138:	3b01      	subs	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002144:	b29b      	uxth	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1cf      	bne.n	80020ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2200      	movs	r2, #0
 8002152:	2140      	movs	r1, #64	; 0x40
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 f810 	bl	800217a <UART_WaitOnFlagUntilTimeout>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e006      	b.n	8002172 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2220      	movs	r2, #32
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	e000      	b.n	8002172 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002170:	2302      	movs	r3, #2
  }
}
 8002172:	4618      	mov	r0, r3
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b090      	sub	sp, #64	; 0x40
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	4613      	mov	r3, r2
 8002188:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800218a:	e050      	b.n	800222e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800218c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800218e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002192:	d04c      	beq.n	800222e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002196:	2b00      	cmp	r3, #0
 8002198:	d007      	beq.n	80021aa <UART_WaitOnFlagUntilTimeout+0x30>
 800219a:	f7fe fcd9 	bl	8000b50 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d241      	bcs.n	800222e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	330c      	adds	r3, #12
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b4:	e853 3f00 	ldrex	r3, [r3]
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	330c      	adds	r3, #12
 80021c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ca:	637a      	str	r2, [r7, #52]	; 0x34
 80021cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021d2:	e841 2300 	strex	r3, r2, [r1]
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80021d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1e5      	bne.n	80021aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3314      	adds	r3, #20
 80021e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	e853 3f00 	ldrex	r3, [r3]
 80021ec:	613b      	str	r3, [r7, #16]
   return(result);
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3314      	adds	r3, #20
 80021fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021fe:	623a      	str	r2, [r7, #32]
 8002200:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002202:	69f9      	ldr	r1, [r7, #28]
 8002204:	6a3a      	ldr	r2, [r7, #32]
 8002206:	e841 2300 	strex	r3, r2, [r1]
 800220a:	61bb      	str	r3, [r7, #24]
   return(result);
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1e5      	bne.n	80021de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2220      	movs	r2, #32
 8002216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2220      	movs	r2, #32
 800221e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e00f      	b.n	800224e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4013      	ands	r3, r2
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	429a      	cmp	r2, r3
 800223c:	bf0c      	ite	eq
 800223e:	2301      	moveq	r3, #1
 8002240:	2300      	movne	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	429a      	cmp	r2, r3
 800224a:	d09f      	beq.n	800218c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3740      	adds	r7, #64	; 0x40
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800225c:	b0c0      	sub	sp, #256	; 0x100
 800225e:	af00      	add	r7, sp, #0
 8002260:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002274:	68d9      	ldr	r1, [r3, #12]
 8002276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	ea40 0301 	orr.w	r3, r0, r1
 8002280:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	431a      	orrs	r2, r3
 8002290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	431a      	orrs	r2, r3
 8002298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80022a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80022b0:	f021 010c 	bic.w	r1, r1, #12
 80022b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80022be:	430b      	orrs	r3, r1
 80022c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80022ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d2:	6999      	ldr	r1, [r3, #24]
 80022d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	ea40 0301 	orr.w	r3, r0, r1
 80022de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4b8f      	ldr	r3, [pc, #572]	; (8002524 <UART_SetConfig+0x2cc>)
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d005      	beq.n	80022f8 <UART_SetConfig+0xa0>
 80022ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	4b8d      	ldr	r3, [pc, #564]	; (8002528 <UART_SetConfig+0x2d0>)
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d104      	bne.n	8002302 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022f8:	f7ff fb6c 	bl	80019d4 <HAL_RCC_GetPCLK2Freq>
 80022fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002300:	e003      	b.n	800230a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002302:	f7ff fb53 	bl	80019ac <HAL_RCC_GetPCLK1Freq>
 8002306:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800230a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002314:	f040 810c 	bne.w	8002530 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800231c:	2200      	movs	r2, #0
 800231e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002322:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002326:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800232a:	4622      	mov	r2, r4
 800232c:	462b      	mov	r3, r5
 800232e:	1891      	adds	r1, r2, r2
 8002330:	65b9      	str	r1, [r7, #88]	; 0x58
 8002332:	415b      	adcs	r3, r3
 8002334:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002336:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800233a:	4621      	mov	r1, r4
 800233c:	eb12 0801 	adds.w	r8, r2, r1
 8002340:	4629      	mov	r1, r5
 8002342:	eb43 0901 	adc.w	r9, r3, r1
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002352:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002356:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800235a:	4690      	mov	r8, r2
 800235c:	4699      	mov	r9, r3
 800235e:	4623      	mov	r3, r4
 8002360:	eb18 0303 	adds.w	r3, r8, r3
 8002364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002368:	462b      	mov	r3, r5
 800236a:	eb49 0303 	adc.w	r3, r9, r3
 800236e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800237e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002382:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002386:	460b      	mov	r3, r1
 8002388:	18db      	adds	r3, r3, r3
 800238a:	653b      	str	r3, [r7, #80]	; 0x50
 800238c:	4613      	mov	r3, r2
 800238e:	eb42 0303 	adc.w	r3, r2, r3
 8002392:	657b      	str	r3, [r7, #84]	; 0x54
 8002394:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002398:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800239c:	f7fd ff20 	bl	80001e0 <__aeabi_uldivmod>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4b61      	ldr	r3, [pc, #388]	; (800252c <UART_SetConfig+0x2d4>)
 80023a6:	fba3 2302 	umull	r2, r3, r3, r2
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	011c      	lsls	r4, r3, #4
 80023ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023b2:	2200      	movs	r2, #0
 80023b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80023bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80023c0:	4642      	mov	r2, r8
 80023c2:	464b      	mov	r3, r9
 80023c4:	1891      	adds	r1, r2, r2
 80023c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80023c8:	415b      	adcs	r3, r3
 80023ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80023d0:	4641      	mov	r1, r8
 80023d2:	eb12 0a01 	adds.w	sl, r2, r1
 80023d6:	4649      	mov	r1, r9
 80023d8:	eb43 0b01 	adc.w	fp, r3, r1
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023f0:	4692      	mov	sl, r2
 80023f2:	469b      	mov	fp, r3
 80023f4:	4643      	mov	r3, r8
 80023f6:	eb1a 0303 	adds.w	r3, sl, r3
 80023fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023fe:	464b      	mov	r3, r9
 8002400:	eb4b 0303 	adc.w	r3, fp, r3
 8002404:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002414:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002418:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800241c:	460b      	mov	r3, r1
 800241e:	18db      	adds	r3, r3, r3
 8002420:	643b      	str	r3, [r7, #64]	; 0x40
 8002422:	4613      	mov	r3, r2
 8002424:	eb42 0303 	adc.w	r3, r2, r3
 8002428:	647b      	str	r3, [r7, #68]	; 0x44
 800242a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800242e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002432:	f7fd fed5 	bl	80001e0 <__aeabi_uldivmod>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4611      	mov	r1, r2
 800243c:	4b3b      	ldr	r3, [pc, #236]	; (800252c <UART_SetConfig+0x2d4>)
 800243e:	fba3 2301 	umull	r2, r3, r3, r1
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	2264      	movs	r2, #100	; 0x64
 8002446:	fb02 f303 	mul.w	r3, r2, r3
 800244a:	1acb      	subs	r3, r1, r3
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002452:	4b36      	ldr	r3, [pc, #216]	; (800252c <UART_SetConfig+0x2d4>)
 8002454:	fba3 2302 	umull	r2, r3, r3, r2
 8002458:	095b      	lsrs	r3, r3, #5
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002460:	441c      	add	r4, r3
 8002462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002466:	2200      	movs	r2, #0
 8002468:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800246c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002470:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002474:	4642      	mov	r2, r8
 8002476:	464b      	mov	r3, r9
 8002478:	1891      	adds	r1, r2, r2
 800247a:	63b9      	str	r1, [r7, #56]	; 0x38
 800247c:	415b      	adcs	r3, r3
 800247e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002480:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002484:	4641      	mov	r1, r8
 8002486:	1851      	adds	r1, r2, r1
 8002488:	6339      	str	r1, [r7, #48]	; 0x30
 800248a:	4649      	mov	r1, r9
 800248c:	414b      	adcs	r3, r1
 800248e:	637b      	str	r3, [r7, #52]	; 0x34
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800249c:	4659      	mov	r1, fp
 800249e:	00cb      	lsls	r3, r1, #3
 80024a0:	4651      	mov	r1, sl
 80024a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024a6:	4651      	mov	r1, sl
 80024a8:	00ca      	lsls	r2, r1, #3
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	4603      	mov	r3, r0
 80024b0:	4642      	mov	r2, r8
 80024b2:	189b      	adds	r3, r3, r2
 80024b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024b8:	464b      	mov	r3, r9
 80024ba:	460a      	mov	r2, r1
 80024bc:	eb42 0303 	adc.w	r3, r2, r3
 80024c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80024d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80024d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80024d8:	460b      	mov	r3, r1
 80024da:	18db      	adds	r3, r3, r3
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80024de:	4613      	mov	r3, r2
 80024e0:	eb42 0303 	adc.w	r3, r2, r3
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80024ee:	f7fd fe77 	bl	80001e0 <__aeabi_uldivmod>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4b0d      	ldr	r3, [pc, #52]	; (800252c <UART_SetConfig+0x2d4>)
 80024f8:	fba3 1302 	umull	r1, r3, r3, r2
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	2164      	movs	r1, #100	; 0x64
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	3332      	adds	r3, #50	; 0x32
 800250a:	4a08      	ldr	r2, [pc, #32]	; (800252c <UART_SetConfig+0x2d4>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	f003 0207 	and.w	r2, r3, #7
 8002516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4422      	add	r2, r4
 800251e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002520:	e105      	b.n	800272e <UART_SetConfig+0x4d6>
 8002522:	bf00      	nop
 8002524:	40011000 	.word	0x40011000
 8002528:	40011400 	.word	0x40011400
 800252c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002534:	2200      	movs	r2, #0
 8002536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800253a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800253e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002542:	4642      	mov	r2, r8
 8002544:	464b      	mov	r3, r9
 8002546:	1891      	adds	r1, r2, r2
 8002548:	6239      	str	r1, [r7, #32]
 800254a:	415b      	adcs	r3, r3
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
 800254e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002552:	4641      	mov	r1, r8
 8002554:	1854      	adds	r4, r2, r1
 8002556:	4649      	mov	r1, r9
 8002558:	eb43 0501 	adc.w	r5, r3, r1
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	00eb      	lsls	r3, r5, #3
 8002566:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800256a:	00e2      	lsls	r2, r4, #3
 800256c:	4614      	mov	r4, r2
 800256e:	461d      	mov	r5, r3
 8002570:	4643      	mov	r3, r8
 8002572:	18e3      	adds	r3, r4, r3
 8002574:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002578:	464b      	mov	r3, r9
 800257a:	eb45 0303 	adc.w	r3, r5, r3
 800257e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800258e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800259e:	4629      	mov	r1, r5
 80025a0:	008b      	lsls	r3, r1, #2
 80025a2:	4621      	mov	r1, r4
 80025a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025a8:	4621      	mov	r1, r4
 80025aa:	008a      	lsls	r2, r1, #2
 80025ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80025b0:	f7fd fe16 	bl	80001e0 <__aeabi_uldivmod>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4b60      	ldr	r3, [pc, #384]	; (800273c <UART_SetConfig+0x4e4>)
 80025ba:	fba3 2302 	umull	r2, r3, r3, r2
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	011c      	lsls	r4, r3, #4
 80025c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025c6:	2200      	movs	r2, #0
 80025c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80025d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80025d4:	4642      	mov	r2, r8
 80025d6:	464b      	mov	r3, r9
 80025d8:	1891      	adds	r1, r2, r2
 80025da:	61b9      	str	r1, [r7, #24]
 80025dc:	415b      	adcs	r3, r3
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025e4:	4641      	mov	r1, r8
 80025e6:	1851      	adds	r1, r2, r1
 80025e8:	6139      	str	r1, [r7, #16]
 80025ea:	4649      	mov	r1, r9
 80025ec:	414b      	adcs	r3, r1
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025fc:	4659      	mov	r1, fp
 80025fe:	00cb      	lsls	r3, r1, #3
 8002600:	4651      	mov	r1, sl
 8002602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002606:	4651      	mov	r1, sl
 8002608:	00ca      	lsls	r2, r1, #3
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	4603      	mov	r3, r0
 8002610:	4642      	mov	r2, r8
 8002612:	189b      	adds	r3, r3, r2
 8002614:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002618:	464b      	mov	r3, r9
 800261a:	460a      	mov	r2, r1
 800261c:	eb42 0303 	adc.w	r3, r2, r3
 8002620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	67bb      	str	r3, [r7, #120]	; 0x78
 800262e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800263c:	4649      	mov	r1, r9
 800263e:	008b      	lsls	r3, r1, #2
 8002640:	4641      	mov	r1, r8
 8002642:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002646:	4641      	mov	r1, r8
 8002648:	008a      	lsls	r2, r1, #2
 800264a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800264e:	f7fd fdc7 	bl	80001e0 <__aeabi_uldivmod>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4b39      	ldr	r3, [pc, #228]	; (800273c <UART_SetConfig+0x4e4>)
 8002658:	fba3 1302 	umull	r1, r3, r3, r2
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	2164      	movs	r1, #100	; 0x64
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	3332      	adds	r3, #50	; 0x32
 800266a:	4a34      	ldr	r2, [pc, #208]	; (800273c <UART_SetConfig+0x4e4>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002676:	441c      	add	r4, r3
 8002678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800267c:	2200      	movs	r2, #0
 800267e:	673b      	str	r3, [r7, #112]	; 0x70
 8002680:	677a      	str	r2, [r7, #116]	; 0x74
 8002682:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002686:	4642      	mov	r2, r8
 8002688:	464b      	mov	r3, r9
 800268a:	1891      	adds	r1, r2, r2
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	415b      	adcs	r3, r3
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002696:	4641      	mov	r1, r8
 8002698:	1851      	adds	r1, r2, r1
 800269a:	6039      	str	r1, [r7, #0]
 800269c:	4649      	mov	r1, r9
 800269e:	414b      	adcs	r3, r1
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80026ae:	4659      	mov	r1, fp
 80026b0:	00cb      	lsls	r3, r1, #3
 80026b2:	4651      	mov	r1, sl
 80026b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026b8:	4651      	mov	r1, sl
 80026ba:	00ca      	lsls	r2, r1, #3
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	4603      	mov	r3, r0
 80026c2:	4642      	mov	r2, r8
 80026c4:	189b      	adds	r3, r3, r2
 80026c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80026c8:	464b      	mov	r3, r9
 80026ca:	460a      	mov	r2, r1
 80026cc:	eb42 0303 	adc.w	r3, r2, r3
 80026d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	663b      	str	r3, [r7, #96]	; 0x60
 80026dc:	667a      	str	r2, [r7, #100]	; 0x64
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80026ea:	4649      	mov	r1, r9
 80026ec:	008b      	lsls	r3, r1, #2
 80026ee:	4641      	mov	r1, r8
 80026f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026f4:	4641      	mov	r1, r8
 80026f6:	008a      	lsls	r2, r1, #2
 80026f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026fc:	f7fd fd70 	bl	80001e0 <__aeabi_uldivmod>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4b0d      	ldr	r3, [pc, #52]	; (800273c <UART_SetConfig+0x4e4>)
 8002706:	fba3 1302 	umull	r1, r3, r3, r2
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	2164      	movs	r1, #100	; 0x64
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	3332      	adds	r3, #50	; 0x32
 8002718:	4a08      	ldr	r2, [pc, #32]	; (800273c <UART_SetConfig+0x4e4>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	f003 020f 	and.w	r2, r3, #15
 8002724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4422      	add	r2, r4
 800272c:	609a      	str	r2, [r3, #8]
}
 800272e:	bf00      	nop
 8002730:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002734:	46bd      	mov	sp, r7
 8002736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800273a:	bf00      	nop
 800273c:	51eb851f 	.word	0x51eb851f

08002740 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800274e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002752:	2b84      	cmp	r3, #132	; 0x84
 8002754:	d005      	beq.n	8002762 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002756:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4413      	add	r3, r2
 800275e:	3303      	adds	r3, #3
 8002760:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002762:	68fb      	ldr	r3, [r7, #12]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002774:	f000 fb74 	bl	8002e60 <vTaskStartScheduler>
  
  return osOK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	bd80      	pop	{r7, pc}

0800277e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800277e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002780:	b089      	sub	sp, #36	; 0x24
 8002782:	af04      	add	r7, sp, #16
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d020      	beq.n	80027d2 <osThreadCreate+0x54>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d01c      	beq.n	80027d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685c      	ldr	r4, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681d      	ldr	r5, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691e      	ldr	r6, [r3, #16]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ffc8 	bl	8002740 <makeFreeRtosPriority>
 80027b0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027ba:	9202      	str	r2, [sp, #8]
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	9100      	str	r1, [sp, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4632      	mov	r2, r6
 80027c4:	4629      	mov	r1, r5
 80027c6:	4620      	mov	r0, r4
 80027c8:	f000 f8ed 	bl	80029a6 <xTaskCreateStatic>
 80027cc:	4603      	mov	r3, r0
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	e01c      	b.n	800280c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685c      	ldr	r4, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027de:	b29e      	uxth	r6, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ffaa 	bl	8002740 <makeFreeRtosPriority>
 80027ec:	4602      	mov	r2, r0
 80027ee:	f107 030c 	add.w	r3, r7, #12
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	9200      	str	r2, [sp, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	4632      	mov	r2, r6
 80027fa:	4629      	mov	r1, r5
 80027fc:	4620      	mov	r0, r4
 80027fe:	f000 f92f 	bl	8002a60 <xTaskCreate>
 8002802:	4603      	mov	r3, r0
 8002804:	2b01      	cmp	r3, #1
 8002806:	d001      	beq.n	800280c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002808:	2300      	movs	r3, #0
 800280a:	e000      	b.n	800280e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800280c:	68fb      	ldr	r3, [r7, #12]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002816 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <osDelay+0x16>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	e000      	b.n	800282e <osDelay+0x18>
 800282c:	2301      	movs	r3, #1
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fae2 	bl	8002df8 <vTaskDelay>
  
  return osOK;
 8002834:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f103 0208 	add.w	r2, r3, #8
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f04f 32ff 	mov.w	r2, #4294967295
 8002856:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f103 0208 	add.w	r2, r3, #8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f103 0208 	add.w	r2, r3, #8
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	601a      	str	r2, [r3, #0]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f6:	d103      	bne.n	8002900 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	e00c      	b.n	800291a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3308      	adds	r3, #8
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	e002      	b.n	800290e <vListInsert+0x2e>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	429a      	cmp	r2, r3
 8002918:	d2f6      	bcs.n	8002908 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	601a      	str	r2, [r3, #0]
}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002952:	b480      	push	{r7}
 8002954:	b085      	sub	sp, #20
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6892      	ldr	r2, [r2, #8]
 8002968:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6852      	ldr	r2, [r2, #4]
 8002972:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	429a      	cmp	r2, r3
 800297c:	d103      	bne.n	8002986 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	1e5a      	subs	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b08e      	sub	sp, #56	; 0x38
 80029aa:	af04      	add	r7, sp, #16
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80029b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10a      	bne.n	80029d0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029be:	f383 8811 	msr	BASEPRI, r3
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029cc:	bf00      	nop
 80029ce:	e7fe      	b.n	80029ce <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80029d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10a      	bne.n	80029ec <xTaskCreateStatic+0x46>
	__asm volatile
 80029d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029da:	f383 8811 	msr	BASEPRI, r3
 80029de:	f3bf 8f6f 	isb	sy
 80029e2:	f3bf 8f4f 	dsb	sy
 80029e6:	61fb      	str	r3, [r7, #28]
}
 80029e8:	bf00      	nop
 80029ea:	e7fe      	b.n	80029ea <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80029ec:	23b4      	movs	r3, #180	; 0xb4
 80029ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	2bb4      	cmp	r3, #180	; 0xb4
 80029f4:	d00a      	beq.n	8002a0c <xTaskCreateStatic+0x66>
	__asm volatile
 80029f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fa:	f383 8811 	msr	BASEPRI, r3
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	61bb      	str	r3, [r7, #24]
}
 8002a08:	bf00      	nop
 8002a0a:	e7fe      	b.n	8002a0a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002a0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01e      	beq.n	8002a52 <xTaskCreateStatic+0xac>
 8002a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d01b      	beq.n	8002a52 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	9303      	str	r3, [sp, #12]
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	9302      	str	r3, [sp, #8]
 8002a34:	f107 0314 	add.w	r3, r7, #20
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f851 	bl	8002aec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a4c:	f000 f8ec 	bl	8002c28 <prvAddNewTaskToReadyList>
 8002a50:	e001      	b.n	8002a56 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a56:	697b      	ldr	r3, [r7, #20]
	}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3728      	adds	r7, #40	; 0x28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08c      	sub	sp, #48	; 0x30
 8002a64:	af04      	add	r7, sp, #16
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 ff7f 	bl	8003978 <pvPortMalloc>
 8002a7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00e      	beq.n	8002aa0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a82:	20b4      	movs	r0, #180	; 0xb4
 8002a84:	f000 ff78 	bl	8003978 <pvPortMalloc>
 8002a88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	631a      	str	r2, [r3, #48]	; 0x30
 8002a96:	e005      	b.n	8002aa4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a98:	6978      	ldr	r0, [r7, #20]
 8002a9a:	f001 f839 	bl	8003b10 <vPortFree>
 8002a9e:	e001      	b.n	8002aa4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d017      	beq.n	8002ada <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ab2:	88fa      	ldrh	r2, [r7, #6]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	9303      	str	r3, [sp, #12]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	9302      	str	r3, [sp, #8]
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f80f 	bl	8002aec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ace:	69f8      	ldr	r0, [r7, #28]
 8002ad0:	f000 f8aa 	bl	8002c28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	e002      	b.n	8002ae0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295
 8002ade:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ae0:	69bb      	ldr	r3, [r7, #24]
	}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b04:	3b01      	subs	r3, #1
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f023 0307 	bic.w	r3, r3, #7
 8002b12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	617b      	str	r3, [r7, #20]
}
 8002b30:	bf00      	nop
 8002b32:	e7fe      	b.n	8002b32 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d01f      	beq.n	8002b7a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	e012      	b.n	8002b66 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	4413      	add	r3, r2
 8002b46:	7819      	ldrb	r1, [r3, #0]
 8002b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3334      	adds	r3, #52	; 0x34
 8002b50:	460a      	mov	r2, r1
 8002b52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	4413      	add	r3, r2
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	3301      	adds	r3, #1
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	2b0f      	cmp	r3, #15
 8002b6a:	d9e9      	bls.n	8002b40 <prvInitialiseNewTask+0x54>
 8002b6c:	e000      	b.n	8002b70 <prvInitialiseNewTask+0x84>
			{
				break;
 8002b6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b78:	e003      	b.n	8002b82 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	2b06      	cmp	r3, #6
 8002b86:	d901      	bls.n	8002b8c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b88:	2306      	movs	r3, #6
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b96:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fe6b 	bl	800287e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	3318      	adds	r3, #24
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fe66 	bl	800287e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bba:	f1c3 0207 	rsb	r2, r3, #7
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	334c      	adds	r3, #76	; 0x4c
 8002bdc:	2260      	movs	r2, #96	; 0x60
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 f8d9 	bl	8003d98 <memset>
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	4a0c      	ldr	r2, [pc, #48]	; (8002c1c <prvInitialiseNewTask+0x130>)
 8002bea:	651a      	str	r2, [r3, #80]	; 0x50
 8002bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bee:	4a0c      	ldr	r2, [pc, #48]	; (8002c20 <prvInitialiseNewTask+0x134>)
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <prvInitialiseNewTask+0x138>)
 8002bf6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	68f9      	ldr	r1, [r7, #12]
 8002bfc:	69b8      	ldr	r0, [r7, #24]
 8002bfe:	f000 fcad 	bl	800355c <pxPortInitialiseStack>
 8002c02:	4602      	mov	r2, r0
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c14:	bf00      	nop
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	0800402c 	.word	0x0800402c
 8002c20:	0800404c 	.word	0x0800404c
 8002c24:	0800400c 	.word	0x0800400c

08002c28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c30:	f000 fdc0 	bl	80037b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c34:	4b2a      	ldr	r3, [pc, #168]	; (8002ce0 <prvAddNewTaskToReadyList+0xb8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	4a29      	ldr	r2, [pc, #164]	; (8002ce0 <prvAddNewTaskToReadyList+0xb8>)
 8002c3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c3e:	4b29      	ldr	r3, [pc, #164]	; (8002ce4 <prvAddNewTaskToReadyList+0xbc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c46:	4a27      	ldr	r2, [pc, #156]	; (8002ce4 <prvAddNewTaskToReadyList+0xbc>)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c4c:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <prvAddNewTaskToReadyList+0xb8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d110      	bne.n	8002c76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c54:	f000 fb5a 	bl	800330c <prvInitialiseTaskLists>
 8002c58:	e00d      	b.n	8002c76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c5a:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <prvAddNewTaskToReadyList+0xc0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c62:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <prvAddNewTaskToReadyList+0xbc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d802      	bhi.n	8002c76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c70:	4a1c      	ldr	r2, [pc, #112]	; (8002ce4 <prvAddNewTaskToReadyList+0xbc>)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <prvAddNewTaskToReadyList+0xc4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	4a1b      	ldr	r2, [pc, #108]	; (8002cec <prvAddNewTaskToReadyList+0xc4>)
 8002c7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	2201      	movs	r2, #1
 8002c86:	409a      	lsls	r2, r3
 8002c88:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <prvAddNewTaskToReadyList+0xc8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	4a18      	ldr	r2, [pc, #96]	; (8002cf0 <prvAddNewTaskToReadyList+0xc8>)
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4a15      	ldr	r2, [pc, #84]	; (8002cf4 <prvAddNewTaskToReadyList+0xcc>)
 8002ca0:	441a      	add	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	f7ff fdf5 	bl	8002898 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002cae:	f000 fdb1 	bl	8003814 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <prvAddNewTaskToReadyList+0xc0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00e      	beq.n	8002cd8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <prvAddNewTaskToReadyList+0xbc>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d207      	bcs.n	8002cd8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <prvAddNewTaskToReadyList+0xd0>)
 8002cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	200004d8 	.word	0x200004d8
 8002ce4:	200003d8 	.word	0x200003d8
 8002ce8:	200004e4 	.word	0x200004e4
 8002cec:	200004f4 	.word	0x200004f4
 8002cf0:	200004e0 	.word	0x200004e0
 8002cf4:	200003dc 	.word	0x200003dc
 8002cf8:	e000ed04 	.word	0xe000ed04

08002cfc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08a      	sub	sp, #40	; 0x28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <vTaskDelayUntil+0x2a>
	__asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	617b      	str	r3, [r7, #20]
}
 8002d22:	bf00      	nop
 8002d24:	e7fe      	b.n	8002d24 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <vTaskDelayUntil+0x46>
	__asm volatile
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	613b      	str	r3, [r7, #16]
}
 8002d3e:	bf00      	nop
 8002d40:	e7fe      	b.n	8002d40 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8002d42:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <vTaskDelayUntil+0xf0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <vTaskDelayUntil+0x64>
	__asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	60fb      	str	r3, [r7, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	e7fe      	b.n	8002d5e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8002d60:	f000 f8e8 	bl	8002f34 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002d64:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <vTaskDelayUntil+0xf4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6a3a      	ldr	r2, [r7, #32]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d20b      	bcs.n	8002d96 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d211      	bcs.n	8002dac <vTaskDelayUntil+0xb0>
 8002d88:	69fa      	ldr	r2, [r7, #28]
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d90d      	bls.n	8002dac <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8002d90:	2301      	movs	r3, #1
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
 8002d94:	e00a      	b.n	8002dac <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d303      	bcc.n	8002da8 <vTaskDelayUntil+0xac>
 8002da0:	69fa      	ldr	r2, [r7, #28]
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d901      	bls.n	8002dac <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8002da8:	2301      	movs	r3, #1
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d006      	beq.n	8002dc6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fb65 	bl	8003490 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8002dc6:	f000 f8c3 	bl	8002f50 <xTaskResumeAll>
 8002dca:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d107      	bne.n	8002de2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <vTaskDelayUntil+0xf8>)
 8002dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002de2:	bf00      	nop
 8002de4:	3728      	adds	r7, #40	; 0x28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000500 	.word	0x20000500
 8002df0:	200004dc 	.word	0x200004dc
 8002df4:	e000ed04 	.word	0xe000ed04

08002df8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d017      	beq.n	8002e3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <vTaskDelay+0x60>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <vTaskDelay+0x30>
	__asm volatile
 8002e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	60bb      	str	r3, [r7, #8]
}
 8002e24:	bf00      	nop
 8002e26:	e7fe      	b.n	8002e26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e28:	f000 f884 	bl	8002f34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 fb2e 	bl	8003490 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e34:	f000 f88c 	bl	8002f50 <xTaskResumeAll>
 8002e38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d107      	bne.n	8002e50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <vTaskDelay+0x64>)
 8002e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e50:	bf00      	nop
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000500 	.word	0x20000500
 8002e5c:	e000ed04 	.word	0xe000ed04

08002e60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	; 0x28
 8002e64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002e6e:	463a      	mov	r2, r7
 8002e70:	1d39      	adds	r1, r7, #4
 8002e72:	f107 0308 	add.w	r3, r7, #8
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fd fb34 	bl	80004e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002e7c:	6839      	ldr	r1, [r7, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	9202      	str	r2, [sp, #8]
 8002e84:	9301      	str	r3, [sp, #4]
 8002e86:	2300      	movs	r3, #0
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	460a      	mov	r2, r1
 8002e8e:	4921      	ldr	r1, [pc, #132]	; (8002f14 <vTaskStartScheduler+0xb4>)
 8002e90:	4821      	ldr	r0, [pc, #132]	; (8002f18 <vTaskStartScheduler+0xb8>)
 8002e92:	f7ff fd88 	bl	80029a6 <xTaskCreateStatic>
 8002e96:	4603      	mov	r3, r0
 8002e98:	4a20      	ldr	r2, [pc, #128]	; (8002f1c <vTaskStartScheduler+0xbc>)
 8002e9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002e9c:	4b1f      	ldr	r3, [pc, #124]	; (8002f1c <vTaskStartScheduler+0xbc>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	e001      	b.n	8002eae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d11b      	bne.n	8002eec <vTaskStartScheduler+0x8c>
	__asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	613b      	str	r3, [r7, #16]
}
 8002ec6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002ec8:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <vTaskStartScheduler+0xc0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	334c      	adds	r3, #76	; 0x4c
 8002ece:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <vTaskStartScheduler+0xc4>)
 8002ed0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <vTaskStartScheduler+0xc8>)
 8002ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002eda:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <vTaskStartScheduler+0xcc>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ee0:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <vTaskStartScheduler+0xd0>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ee6:	f000 fbc3 	bl	8003670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002eea:	e00e      	b.n	8002f0a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef2:	d10a      	bne.n	8002f0a <vTaskStartScheduler+0xaa>
	__asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	60fb      	str	r3, [r7, #12]
}
 8002f06:	bf00      	nop
 8002f08:	e7fe      	b.n	8002f08 <vTaskStartScheduler+0xa8>
}
 8002f0a:	bf00      	nop
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	08003fec 	.word	0x08003fec
 8002f18:	080032dd 	.word	0x080032dd
 8002f1c:	200004fc 	.word	0x200004fc
 8002f20:	200003d8 	.word	0x200003d8
 8002f24:	20000010 	.word	0x20000010
 8002f28:	200004f8 	.word	0x200004f8
 8002f2c:	200004e4 	.word	0x200004e4
 8002f30:	200004dc 	.word	0x200004dc

08002f34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <vTaskSuspendAll+0x18>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	4a03      	ldr	r2, [pc, #12]	; (8002f4c <vTaskSuspendAll+0x18>)
 8002f40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002f42:	bf00      	nop
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	20000500 	.word	0x20000500

08002f50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f5e:	4b41      	ldr	r3, [pc, #260]	; (8003064 <xTaskResumeAll+0x114>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10a      	bne.n	8002f7c <xTaskResumeAll+0x2c>
	__asm volatile
 8002f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6a:	f383 8811 	msr	BASEPRI, r3
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	f3bf 8f4f 	dsb	sy
 8002f76:	603b      	str	r3, [r7, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	e7fe      	b.n	8002f7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002f7c:	f000 fc1a 	bl	80037b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002f80:	4b38      	ldr	r3, [pc, #224]	; (8003064 <xTaskResumeAll+0x114>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3b01      	subs	r3, #1
 8002f86:	4a37      	ldr	r2, [pc, #220]	; (8003064 <xTaskResumeAll+0x114>)
 8002f88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f8a:	4b36      	ldr	r3, [pc, #216]	; (8003064 <xTaskResumeAll+0x114>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d161      	bne.n	8003056 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f92:	4b35      	ldr	r3, [pc, #212]	; (8003068 <xTaskResumeAll+0x118>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d05d      	beq.n	8003056 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f9a:	e02e      	b.n	8002ffa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f9c:	4b33      	ldr	r3, [pc, #204]	; (800306c <xTaskResumeAll+0x11c>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3318      	adds	r3, #24
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fcd2 	bl	8002952 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fccd 	bl	8002952 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <xTaskResumeAll+0x120>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	4a2a      	ldr	r2, [pc, #168]	; (8003070 <xTaskResumeAll+0x120>)
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4a27      	ldr	r2, [pc, #156]	; (8003074 <xTaskResumeAll+0x124>)
 8002fd8:	441a      	add	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	f7ff fc59 	bl	8002898 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fea:	4b23      	ldr	r3, [pc, #140]	; (8003078 <xTaskResumeAll+0x128>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d302      	bcc.n	8002ffa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <xTaskResumeAll+0x12c>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	; (800306c <xTaskResumeAll+0x11c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1cc      	bne.n	8002f9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003008:	f000 fa22 	bl	8003450 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800300c:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <xTaskResumeAll+0x130>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003018:	f000 f846 	bl	80030a8 <xTaskIncrementTick>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003022:	4b16      	ldr	r3, [pc, #88]	; (800307c <xTaskResumeAll+0x12c>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3b01      	subs	r3, #1
 800302c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f1      	bne.n	8003018 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003034:	4b12      	ldr	r3, [pc, #72]	; (8003080 <xTaskResumeAll+0x130>)
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <xTaskResumeAll+0x12c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003042:	2301      	movs	r3, #1
 8003044:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003046:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <xTaskResumeAll+0x134>)
 8003048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003056:	f000 fbdd 	bl	8003814 <vPortExitCritical>

	return xAlreadyYielded;
 800305a:	68bb      	ldr	r3, [r7, #8]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000500 	.word	0x20000500
 8003068:	200004d8 	.word	0x200004d8
 800306c:	20000498 	.word	0x20000498
 8003070:	200004e0 	.word	0x200004e0
 8003074:	200003dc 	.word	0x200003dc
 8003078:	200003d8 	.word	0x200003d8
 800307c:	200004ec 	.word	0x200004ec
 8003080:	200004e8 	.word	0x200004e8
 8003084:	e000ed04 	.word	0xe000ed04

08003088 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800308e:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <xTaskGetTickCount+0x1c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003094:	687b      	ldr	r3, [r7, #4]
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	200004dc 	.word	0x200004dc

080030a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030b2:	4b4e      	ldr	r3, [pc, #312]	; (80031ec <xTaskIncrementTick+0x144>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f040 808e 	bne.w	80031d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80030bc:	4b4c      	ldr	r3, [pc, #304]	; (80031f0 <xTaskIncrementTick+0x148>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80030c4:	4a4a      	ldr	r2, [pc, #296]	; (80031f0 <xTaskIncrementTick+0x148>)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d120      	bne.n	8003112 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80030d0:	4b48      	ldr	r3, [pc, #288]	; (80031f4 <xTaskIncrementTick+0x14c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80030da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030de:	f383 8811 	msr	BASEPRI, r3
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	603b      	str	r3, [r7, #0]
}
 80030ec:	bf00      	nop
 80030ee:	e7fe      	b.n	80030ee <xTaskIncrementTick+0x46>
 80030f0:	4b40      	ldr	r3, [pc, #256]	; (80031f4 <xTaskIncrementTick+0x14c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	4b40      	ldr	r3, [pc, #256]	; (80031f8 <xTaskIncrementTick+0x150>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a3e      	ldr	r2, [pc, #248]	; (80031f4 <xTaskIncrementTick+0x14c>)
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	4a3e      	ldr	r2, [pc, #248]	; (80031f8 <xTaskIncrementTick+0x150>)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	4b3d      	ldr	r3, [pc, #244]	; (80031fc <xTaskIncrementTick+0x154>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3301      	adds	r3, #1
 800310a:	4a3c      	ldr	r2, [pc, #240]	; (80031fc <xTaskIncrementTick+0x154>)
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	f000 f99f 	bl	8003450 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003112:	4b3b      	ldr	r3, [pc, #236]	; (8003200 <xTaskIncrementTick+0x158>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	429a      	cmp	r2, r3
 800311a:	d348      	bcc.n	80031ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800311c:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <xTaskIncrementTick+0x14c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d104      	bne.n	8003130 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003126:	4b36      	ldr	r3, [pc, #216]	; (8003200 <xTaskIncrementTick+0x158>)
 8003128:	f04f 32ff 	mov.w	r2, #4294967295
 800312c:	601a      	str	r2, [r3, #0]
					break;
 800312e:	e03e      	b.n	80031ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003130:	4b30      	ldr	r3, [pc, #192]	; (80031f4 <xTaskIncrementTick+0x14c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	429a      	cmp	r2, r3
 8003146:	d203      	bcs.n	8003150 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003148:	4a2d      	ldr	r2, [pc, #180]	; (8003200 <xTaskIncrementTick+0x158>)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800314e:	e02e      	b.n	80031ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	3304      	adds	r3, #4
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fbfc 	bl	8002952 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	2b00      	cmp	r3, #0
 8003160:	d004      	beq.n	800316c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	3318      	adds	r3, #24
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fbf3 	bl	8002952 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	2201      	movs	r2, #1
 8003172:	409a      	lsls	r2, r3
 8003174:	4b23      	ldr	r3, [pc, #140]	; (8003204 <xTaskIncrementTick+0x15c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	4a22      	ldr	r2, [pc, #136]	; (8003204 <xTaskIncrementTick+0x15c>)
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4a1f      	ldr	r2, [pc, #124]	; (8003208 <xTaskIncrementTick+0x160>)
 800318c:	441a      	add	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	3304      	adds	r3, #4
 8003192:	4619      	mov	r1, r3
 8003194:	4610      	mov	r0, r2
 8003196:	f7ff fb7f 	bl	8002898 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319e:	4b1b      	ldr	r3, [pc, #108]	; (800320c <xTaskIncrementTick+0x164>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d3b9      	bcc.n	800311c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80031a8:	2301      	movs	r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031ac:	e7b6      	b.n	800311c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031ae:	4b17      	ldr	r3, [pc, #92]	; (800320c <xTaskIncrementTick+0x164>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b4:	4914      	ldr	r1, [pc, #80]	; (8003208 <xTaskIncrementTick+0x160>)
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d901      	bls.n	80031ca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80031c6:	2301      	movs	r3, #1
 80031c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <xTaskIncrementTick+0x168>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80031d2:	2301      	movs	r3, #1
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	e004      	b.n	80031e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <xTaskIncrementTick+0x16c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3301      	adds	r3, #1
 80031de:	4a0d      	ldr	r2, [pc, #52]	; (8003214 <xTaskIncrementTick+0x16c>)
 80031e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80031e2:	697b      	ldr	r3, [r7, #20]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20000500 	.word	0x20000500
 80031f0:	200004dc 	.word	0x200004dc
 80031f4:	20000490 	.word	0x20000490
 80031f8:	20000494 	.word	0x20000494
 80031fc:	200004f0 	.word	0x200004f0
 8003200:	200004f8 	.word	0x200004f8
 8003204:	200004e0 	.word	0x200004e0
 8003208:	200003dc 	.word	0x200003dc
 800320c:	200003d8 	.word	0x200003d8
 8003210:	200004ec 	.word	0x200004ec
 8003214:	200004e8 	.word	0x200004e8

08003218 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800321e:	4b29      	ldr	r3, [pc, #164]	; (80032c4 <vTaskSwitchContext+0xac>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003226:	4b28      	ldr	r3, [pc, #160]	; (80032c8 <vTaskSwitchContext+0xb0>)
 8003228:	2201      	movs	r2, #1
 800322a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800322c:	e044      	b.n	80032b8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800322e:	4b26      	ldr	r3, [pc, #152]	; (80032c8 <vTaskSwitchContext+0xb0>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003234:	4b25      	ldr	r3, [pc, #148]	; (80032cc <vTaskSwitchContext+0xb4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	fab3 f383 	clz	r3, r3
 8003240:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003242:	7afb      	ldrb	r3, [r7, #11]
 8003244:	f1c3 031f 	rsb	r3, r3, #31
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	4921      	ldr	r1, [pc, #132]	; (80032d0 <vTaskSwitchContext+0xb8>)
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10a      	bne.n	8003274 <vTaskSwitchContext+0x5c>
	__asm volatile
 800325e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003262:	f383 8811 	msr	BASEPRI, r3
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	607b      	str	r3, [r7, #4]
}
 8003270:	bf00      	nop
 8003272:	e7fe      	b.n	8003272 <vTaskSwitchContext+0x5a>
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <vTaskSwitchContext+0xb8>)
 8003280:	4413      	add	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	3308      	adds	r3, #8
 8003296:	429a      	cmp	r2, r3
 8003298:	d104      	bne.n	80032a4 <vTaskSwitchContext+0x8c>
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	605a      	str	r2, [r3, #4]
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <vTaskSwitchContext+0xbc>)
 80032ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80032ae:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <vTaskSwitchContext+0xbc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	334c      	adds	r3, #76	; 0x4c
 80032b4:	4a08      	ldr	r2, [pc, #32]	; (80032d8 <vTaskSwitchContext+0xc0>)
 80032b6:	6013      	str	r3, [r2, #0]
}
 80032b8:	bf00      	nop
 80032ba:	371c      	adds	r7, #28
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	20000500 	.word	0x20000500
 80032c8:	200004ec 	.word	0x200004ec
 80032cc:	200004e0 	.word	0x200004e0
 80032d0:	200003dc 	.word	0x200003dc
 80032d4:	200003d8 	.word	0x200003d8
 80032d8:	20000010 	.word	0x20000010

080032dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80032e4:	f000 f852 	bl	800338c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <prvIdleTask+0x28>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d9f9      	bls.n	80032e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <prvIdleTask+0x2c>)
 80032f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	f3bf 8f4f 	dsb	sy
 80032fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003300:	e7f0      	b.n	80032e4 <prvIdleTask+0x8>
 8003302:	bf00      	nop
 8003304:	200003dc 	.word	0x200003dc
 8003308:	e000ed04 	.word	0xe000ed04

0800330c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003312:	2300      	movs	r3, #0
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	e00c      	b.n	8003332 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <prvInitialiseTaskLists+0x60>)
 8003324:	4413      	add	r3, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fa89 	bl	800283e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3301      	adds	r3, #1
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b06      	cmp	r3, #6
 8003336:	d9ef      	bls.n	8003318 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003338:	480d      	ldr	r0, [pc, #52]	; (8003370 <prvInitialiseTaskLists+0x64>)
 800333a:	f7ff fa80 	bl	800283e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800333e:	480d      	ldr	r0, [pc, #52]	; (8003374 <prvInitialiseTaskLists+0x68>)
 8003340:	f7ff fa7d 	bl	800283e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003344:	480c      	ldr	r0, [pc, #48]	; (8003378 <prvInitialiseTaskLists+0x6c>)
 8003346:	f7ff fa7a 	bl	800283e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800334a:	480c      	ldr	r0, [pc, #48]	; (800337c <prvInitialiseTaskLists+0x70>)
 800334c:	f7ff fa77 	bl	800283e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003350:	480b      	ldr	r0, [pc, #44]	; (8003380 <prvInitialiseTaskLists+0x74>)
 8003352:	f7ff fa74 	bl	800283e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <prvInitialiseTaskLists+0x78>)
 8003358:	4a05      	ldr	r2, [pc, #20]	; (8003370 <prvInitialiseTaskLists+0x64>)
 800335a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <prvInitialiseTaskLists+0x7c>)
 800335e:	4a05      	ldr	r2, [pc, #20]	; (8003374 <prvInitialiseTaskLists+0x68>)
 8003360:	601a      	str	r2, [r3, #0]
}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	200003dc 	.word	0x200003dc
 8003370:	20000468 	.word	0x20000468
 8003374:	2000047c 	.word	0x2000047c
 8003378:	20000498 	.word	0x20000498
 800337c:	200004ac 	.word	0x200004ac
 8003380:	200004c4 	.word	0x200004c4
 8003384:	20000490 	.word	0x20000490
 8003388:	20000494 	.word	0x20000494

0800338c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003392:	e019      	b.n	80033c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003394:	f000 fa0e 	bl	80037b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003398:	4b10      	ldr	r3, [pc, #64]	; (80033dc <prvCheckTasksWaitingTermination+0x50>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fad4 	bl	8002952 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80033aa:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <prvCheckTasksWaitingTermination+0x54>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	4a0b      	ldr	r2, [pc, #44]	; (80033e0 <prvCheckTasksWaitingTermination+0x54>)
 80033b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <prvCheckTasksWaitingTermination+0x58>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <prvCheckTasksWaitingTermination+0x58>)
 80033bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80033be:	f000 fa29 	bl	8003814 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f810 	bl	80033e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <prvCheckTasksWaitingTermination+0x58>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e1      	bne.n	8003394 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	200004ac 	.word	0x200004ac
 80033e0:	200004d8 	.word	0x200004d8
 80033e4:	200004c0 	.word	0x200004c0

080033e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	334c      	adds	r3, #76	; 0x4c
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fce5 	bl	8003dc4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d108      	bne.n	8003416 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fb81 	bl	8003b10 <vPortFree>
				vPortFree( pxTCB );
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fb7e 	bl	8003b10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003414:	e018      	b.n	8003448 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800341c:	2b01      	cmp	r3, #1
 800341e:	d103      	bne.n	8003428 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fb75 	bl	8003b10 <vPortFree>
	}
 8003426:	e00f      	b.n	8003448 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800342e:	2b02      	cmp	r3, #2
 8003430:	d00a      	beq.n	8003448 <prvDeleteTCB+0x60>
	__asm volatile
 8003432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	60fb      	str	r3, [r7, #12]
}
 8003444:	bf00      	nop
 8003446:	e7fe      	b.n	8003446 <prvDeleteTCB+0x5e>
	}
 8003448:	bf00      	nop
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003456:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <prvResetNextTaskUnblockTime+0x38>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d104      	bne.n	800346a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003460:	4b0a      	ldr	r3, [pc, #40]	; (800348c <prvResetNextTaskUnblockTime+0x3c>)
 8003462:	f04f 32ff 	mov.w	r2, #4294967295
 8003466:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003468:	e008      	b.n	800347c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800346a:	4b07      	ldr	r3, [pc, #28]	; (8003488 <prvResetNextTaskUnblockTime+0x38>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4a04      	ldr	r2, [pc, #16]	; (800348c <prvResetNextTaskUnblockTime+0x3c>)
 800347a:	6013      	str	r3, [r2, #0]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	20000490 	.word	0x20000490
 800348c:	200004f8 	.word	0x200004f8

08003490 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800349a:	4b29      	ldr	r3, [pc, #164]	; (8003540 <prvAddCurrentTaskToDelayedList+0xb0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034a0:	4b28      	ldr	r3, [pc, #160]	; (8003544 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3304      	adds	r3, #4
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fa53 	bl	8002952 <uxListRemove>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10b      	bne.n	80034ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	2201      	movs	r2, #1
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43da      	mvns	r2, r3
 80034c0:	4b21      	ldr	r3, [pc, #132]	; (8003548 <prvAddCurrentTaskToDelayedList+0xb8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4013      	ands	r3, r2
 80034c6:	4a20      	ldr	r2, [pc, #128]	; (8003548 <prvAddCurrentTaskToDelayedList+0xb8>)
 80034c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d10a      	bne.n	80034e8 <prvAddCurrentTaskToDelayedList+0x58>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034d8:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3304      	adds	r3, #4
 80034de:	4619      	mov	r1, r3
 80034e0:	481a      	ldr	r0, [pc, #104]	; (800354c <prvAddCurrentTaskToDelayedList+0xbc>)
 80034e2:	f7ff f9d9 	bl	8002898 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80034e6:	e026      	b.n	8003536 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4413      	add	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034f0:	4b14      	ldr	r3, [pc, #80]	; (8003544 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d209      	bcs.n	8003514 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3304      	adds	r3, #4
 800350a:	4619      	mov	r1, r3
 800350c:	4610      	mov	r0, r2
 800350e:	f7ff f9e7 	bl	80028e0 <vListInsert>
}
 8003512:	e010      	b.n	8003536 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003514:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <prvAddCurrentTaskToDelayedList+0xb4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3304      	adds	r3, #4
 800351e:	4619      	mov	r1, r3
 8003520:	4610      	mov	r0, r2
 8003522:	f7ff f9dd 	bl	80028e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003526:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	429a      	cmp	r2, r3
 800352e:	d202      	bcs.n	8003536 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003530:	4a09      	ldr	r2, [pc, #36]	; (8003558 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	6013      	str	r3, [r2, #0]
}
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	200004dc 	.word	0x200004dc
 8003544:	200003d8 	.word	0x200003d8
 8003548:	200004e0 	.word	0x200004e0
 800354c:	200004c4 	.word	0x200004c4
 8003550:	20000494 	.word	0x20000494
 8003554:	20000490 	.word	0x20000490
 8003558:	200004f8 	.word	0x200004f8

0800355c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	3b04      	subs	r3, #4
 800356c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3b04      	subs	r3, #4
 800357a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f023 0201 	bic.w	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	3b04      	subs	r3, #4
 800358a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800358c:	4a0c      	ldr	r2, [pc, #48]	; (80035c0 <pxPortInitialiseStack+0x64>)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3b14      	subs	r3, #20
 8003596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	3b04      	subs	r3, #4
 80035a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f06f 0202 	mvn.w	r2, #2
 80035aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3b20      	subs	r3, #32
 80035b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80035b2:	68fb      	ldr	r3, [r7, #12]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	080035c5 	.word	0x080035c5

080035c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <prvTaskExitError+0x54>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d6:	d00a      	beq.n	80035ee <prvTaskExitError+0x2a>
	__asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	60fb      	str	r3, [r7, #12]
}
 80035ea:	bf00      	nop
 80035ec:	e7fe      	b.n	80035ec <prvTaskExitError+0x28>
	__asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	60bb      	str	r3, [r7, #8]
}
 8003600:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003602:	bf00      	nop
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0fc      	beq.n	8003604 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800360a:	bf00      	nop
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	2000000c 	.word	0x2000000c
 800361c:	00000000 	.word	0x00000000

08003620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003620:	4b07      	ldr	r3, [pc, #28]	; (8003640 <pxCurrentTCBConst2>)
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	6808      	ldr	r0, [r1, #0]
 8003626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362a:	f380 8809 	msr	PSP, r0
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f04f 0000 	mov.w	r0, #0
 8003636:	f380 8811 	msr	BASEPRI, r0
 800363a:	4770      	bx	lr
 800363c:	f3af 8000 	nop.w

08003640 <pxCurrentTCBConst2>:
 8003640:	200003d8 	.word	0x200003d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop

08003648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003648:	4808      	ldr	r0, [pc, #32]	; (800366c <prvPortStartFirstTask+0x24>)
 800364a:	6800      	ldr	r0, [r0, #0]
 800364c:	6800      	ldr	r0, [r0, #0]
 800364e:	f380 8808 	msr	MSP, r0
 8003652:	f04f 0000 	mov.w	r0, #0
 8003656:	f380 8814 	msr	CONTROL, r0
 800365a:	b662      	cpsie	i
 800365c:	b661      	cpsie	f
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	df00      	svc	0
 8003668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800366a:	bf00      	nop
 800366c:	e000ed08 	.word	0xe000ed08

08003670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003676:	4b46      	ldr	r3, [pc, #280]	; (8003790 <xPortStartScheduler+0x120>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a46      	ldr	r2, [pc, #280]	; (8003794 <xPortStartScheduler+0x124>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d10a      	bne.n	8003696 <xPortStartScheduler+0x26>
	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	613b      	str	r3, [r7, #16]
}
 8003692:	bf00      	nop
 8003694:	e7fe      	b.n	8003694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003696:	4b3e      	ldr	r3, [pc, #248]	; (8003790 <xPortStartScheduler+0x120>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a3f      	ldr	r2, [pc, #252]	; (8003798 <xPortStartScheduler+0x128>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d10a      	bne.n	80036b6 <xPortStartScheduler+0x46>
	__asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	60fb      	str	r3, [r7, #12]
}
 80036b2:	bf00      	nop
 80036b4:	e7fe      	b.n	80036b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80036b6:	4b39      	ldr	r3, [pc, #228]	; (800379c <xPortStartScheduler+0x12c>)
 80036b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	22ff      	movs	r2, #255	; 0xff
 80036c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <xPortStartScheduler+0x130>)
 80036dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80036de:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <xPortStartScheduler+0x134>)
 80036e0:	2207      	movs	r2, #7
 80036e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036e4:	e009      	b.n	80036fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80036e6:	4b2f      	ldr	r3, [pc, #188]	; (80037a4 <xPortStartScheduler+0x134>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	4a2d      	ldr	r2, [pc, #180]	; (80037a4 <xPortStartScheduler+0x134>)
 80036ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003702:	2b80      	cmp	r3, #128	; 0x80
 8003704:	d0ef      	beq.n	80036e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003706:	4b27      	ldr	r3, [pc, #156]	; (80037a4 <xPortStartScheduler+0x134>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f1c3 0307 	rsb	r3, r3, #7
 800370e:	2b04      	cmp	r3, #4
 8003710:	d00a      	beq.n	8003728 <xPortStartScheduler+0xb8>
	__asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	60bb      	str	r3, [r7, #8]
}
 8003724:	bf00      	nop
 8003726:	e7fe      	b.n	8003726 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003728:	4b1e      	ldr	r3, [pc, #120]	; (80037a4 <xPortStartScheduler+0x134>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	021b      	lsls	r3, r3, #8
 800372e:	4a1d      	ldr	r2, [pc, #116]	; (80037a4 <xPortStartScheduler+0x134>)
 8003730:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003732:	4b1c      	ldr	r3, [pc, #112]	; (80037a4 <xPortStartScheduler+0x134>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800373a:	4a1a      	ldr	r2, [pc, #104]	; (80037a4 <xPortStartScheduler+0x134>)
 800373c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003746:	4b18      	ldr	r3, [pc, #96]	; (80037a8 <xPortStartScheduler+0x138>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a17      	ldr	r2, [pc, #92]	; (80037a8 <xPortStartScheduler+0x138>)
 800374c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <xPortStartScheduler+0x138>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <xPortStartScheduler+0x138>)
 8003758:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800375c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800375e:	f000 f8dd 	bl	800391c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003762:	4b12      	ldr	r3, [pc, #72]	; (80037ac <xPortStartScheduler+0x13c>)
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003768:	f000 f8fc 	bl	8003964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800376c:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <xPortStartScheduler+0x140>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a0f      	ldr	r2, [pc, #60]	; (80037b0 <xPortStartScheduler+0x140>)
 8003772:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003776:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003778:	f7ff ff66 	bl	8003648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800377c:	f7ff fd4c 	bl	8003218 <vTaskSwitchContext>
	prvTaskExitError();
 8003780:	f7ff ff20 	bl	80035c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	e000ed00 	.word	0xe000ed00
 8003794:	410fc271 	.word	0x410fc271
 8003798:	410fc270 	.word	0x410fc270
 800379c:	e000e400 	.word	0xe000e400
 80037a0:	20000504 	.word	0x20000504
 80037a4:	20000508 	.word	0x20000508
 80037a8:	e000ed20 	.word	0xe000ed20
 80037ac:	2000000c 	.word	0x2000000c
 80037b0:	e000ef34 	.word	0xe000ef34

080037b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
	__asm volatile
 80037ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037be:	f383 8811 	msr	BASEPRI, r3
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	607b      	str	r3, [r7, #4]
}
 80037cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80037ce:	4b0f      	ldr	r3, [pc, #60]	; (800380c <vPortEnterCritical+0x58>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3301      	adds	r3, #1
 80037d4:	4a0d      	ldr	r2, [pc, #52]	; (800380c <vPortEnterCritical+0x58>)
 80037d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <vPortEnterCritical+0x58>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d10f      	bne.n	8003800 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <vPortEnterCritical+0x5c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <vPortEnterCritical+0x4c>
	__asm volatile
 80037ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	603b      	str	r3, [r7, #0]
}
 80037fc:	bf00      	nop
 80037fe:	e7fe      	b.n	80037fe <vPortEnterCritical+0x4a>
	}
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	2000000c 	.word	0x2000000c
 8003810:	e000ed04 	.word	0xe000ed04

08003814 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800381a:	4b12      	ldr	r3, [pc, #72]	; (8003864 <vPortExitCritical+0x50>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10a      	bne.n	8003838 <vPortExitCritical+0x24>
	__asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	607b      	str	r3, [r7, #4]
}
 8003834:	bf00      	nop
 8003836:	e7fe      	b.n	8003836 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <vPortExitCritical+0x50>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3b01      	subs	r3, #1
 800383e:	4a09      	ldr	r2, [pc, #36]	; (8003864 <vPortExitCritical+0x50>)
 8003840:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003842:	4b08      	ldr	r3, [pc, #32]	; (8003864 <vPortExitCritical+0x50>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d105      	bne.n	8003856 <vPortExitCritical+0x42>
 800384a:	2300      	movs	r3, #0
 800384c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003854:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	2000000c 	.word	0x2000000c
	...

08003870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003870:	f3ef 8009 	mrs	r0, PSP
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <pxCurrentTCBConst>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	f01e 0f10 	tst.w	lr, #16
 8003880:	bf08      	it	eq
 8003882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800388a:	6010      	str	r0, [r2, #0]
 800388c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003894:	f380 8811 	msr	BASEPRI, r0
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f7ff fcba 	bl	8003218 <vTaskSwitchContext>
 80038a4:	f04f 0000 	mov.w	r0, #0
 80038a8:	f380 8811 	msr	BASEPRI, r0
 80038ac:	bc09      	pop	{r0, r3}
 80038ae:	6819      	ldr	r1, [r3, #0]
 80038b0:	6808      	ldr	r0, [r1, #0]
 80038b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b6:	f01e 0f10 	tst.w	lr, #16
 80038ba:	bf08      	it	eq
 80038bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80038c0:	f380 8809 	msr	PSP, r0
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	f3af 8000 	nop.w

080038d0 <pxCurrentTCBConst>:
 80038d0:	200003d8 	.word	0x200003d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop

080038d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
	__asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	607b      	str	r3, [r7, #4]
}
 80038f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80038f2:	f7ff fbd9 	bl	80030a8 <xTaskIncrementTick>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <SysTick_Handler+0x40>)
 80038fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	2300      	movs	r3, #0
 8003906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	f383 8811 	msr	BASEPRI, r3
}
 800390e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	e000ed04 	.word	0xe000ed04

0800391c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <vPortSetupTimerInterrupt+0x34>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <vPortSetupTimerInterrupt+0x38>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <vPortSetupTimerInterrupt+0x3c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0a      	ldr	r2, [pc, #40]	; (800395c <vPortSetupTimerInterrupt+0x40>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	099b      	lsrs	r3, r3, #6
 8003938:	4a09      	ldr	r2, [pc, #36]	; (8003960 <vPortSetupTimerInterrupt+0x44>)
 800393a:	3b01      	subs	r3, #1
 800393c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800393e:	4b04      	ldr	r3, [pc, #16]	; (8003950 <vPortSetupTimerInterrupt+0x34>)
 8003940:	2207      	movs	r2, #7
 8003942:	601a      	str	r2, [r3, #0]
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000e010 	.word	0xe000e010
 8003954:	e000e018 	.word	0xe000e018
 8003958:	20000000 	.word	0x20000000
 800395c:	10624dd3 	.word	0x10624dd3
 8003960:	e000e014 	.word	0xe000e014

08003964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003964:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003974 <vPortEnableVFP+0x10>
 8003968:	6801      	ldr	r1, [r0, #0]
 800396a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800396e:	6001      	str	r1, [r0, #0]
 8003970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003972:	bf00      	nop
 8003974:	e000ed88 	.word	0xe000ed88

08003978 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	; 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003980:	2300      	movs	r3, #0
 8003982:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003984:	f7ff fad6 	bl	8002f34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003988:	4b5b      	ldr	r3, [pc, #364]	; (8003af8 <pvPortMalloc+0x180>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003990:	f000 f920 	bl	8003bd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003994:	4b59      	ldr	r3, [pc, #356]	; (8003afc <pvPortMalloc+0x184>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4013      	ands	r3, r2
 800399c:	2b00      	cmp	r3, #0
 800399e:	f040 8093 	bne.w	8003ac8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01d      	beq.n	80039e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80039a8:	2208      	movs	r2, #8
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4413      	add	r3, r2
 80039ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d014      	beq.n	80039e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f023 0307 	bic.w	r3, r3, #7
 80039c0:	3308      	adds	r3, #8
 80039c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <pvPortMalloc+0x6c>
	__asm volatile
 80039ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	617b      	str	r3, [r7, #20]
}
 80039e0:	bf00      	nop
 80039e2:	e7fe      	b.n	80039e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d06e      	beq.n	8003ac8 <pvPortMalloc+0x150>
 80039ea:	4b45      	ldr	r3, [pc, #276]	; (8003b00 <pvPortMalloc+0x188>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d869      	bhi.n	8003ac8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80039f4:	4b43      	ldr	r3, [pc, #268]	; (8003b04 <pvPortMalloc+0x18c>)
 80039f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80039f8:	4b42      	ldr	r3, [pc, #264]	; (8003b04 <pvPortMalloc+0x18c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039fe:	e004      	b.n	8003a0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d903      	bls.n	8003a1c <pvPortMalloc+0xa4>
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f1      	bne.n	8003a00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003a1c:	4b36      	ldr	r3, [pc, #216]	; (8003af8 <pvPortMalloc+0x180>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d050      	beq.n	8003ac8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	4413      	add	r3, r2
 8003a2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	1ad2      	subs	r2, r2, r3
 8003a40:	2308      	movs	r3, #8
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d91f      	bls.n	8003a88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <pvPortMalloc+0xf8>
	__asm volatile
 8003a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	613b      	str	r3, [r7, #16]
}
 8003a6c:	bf00      	nop
 8003a6e:	e7fe      	b.n	8003a6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	1ad2      	subs	r2, r2, r3
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a82:	69b8      	ldr	r0, [r7, #24]
 8003a84:	f000 f908 	bl	8003c98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a88:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <pvPortMalloc+0x188>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	4a1b      	ldr	r2, [pc, #108]	; (8003b00 <pvPortMalloc+0x188>)
 8003a94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a96:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <pvPortMalloc+0x188>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <pvPortMalloc+0x190>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d203      	bcs.n	8003aaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003aa2:	4b17      	ldr	r3, [pc, #92]	; (8003b00 <pvPortMalloc+0x188>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a18      	ldr	r2, [pc, #96]	; (8003b08 <pvPortMalloc+0x190>)
 8003aa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	4b13      	ldr	r3, [pc, #76]	; (8003afc <pvPortMalloc+0x184>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <pvPortMalloc+0x194>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	4a11      	ldr	r2, [pc, #68]	; (8003b0c <pvPortMalloc+0x194>)
 8003ac6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003ac8:	f7ff fa42 	bl	8002f50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <pvPortMalloc+0x174>
	__asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	60fb      	str	r3, [r7, #12]
}
 8003ae8:	bf00      	nop
 8003aea:	e7fe      	b.n	8003aea <pvPortMalloc+0x172>
	return pvReturn;
 8003aec:	69fb      	ldr	r3, [r7, #28]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3728      	adds	r7, #40	; 0x28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20004114 	.word	0x20004114
 8003afc:	20004128 	.word	0x20004128
 8003b00:	20004118 	.word	0x20004118
 8003b04:	2000410c 	.word	0x2000410c
 8003b08:	2000411c 	.word	0x2000411c
 8003b0c:	20004120 	.word	0x20004120

08003b10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d04d      	beq.n	8003bbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003b22:	2308      	movs	r3, #8
 8003b24:	425b      	negs	r3, r3
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4413      	add	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	4b24      	ldr	r3, [pc, #144]	; (8003bc8 <vPortFree+0xb8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10a      	bne.n	8003b54 <vPortFree+0x44>
	__asm volatile
 8003b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	60fb      	str	r3, [r7, #12]
}
 8003b50:	bf00      	nop
 8003b52:	e7fe      	b.n	8003b52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <vPortFree+0x62>
	__asm volatile
 8003b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	60bb      	str	r3, [r7, #8]
}
 8003b6e:	bf00      	nop
 8003b70:	e7fe      	b.n	8003b70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <vPortFree+0xb8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01e      	beq.n	8003bbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d11a      	bne.n	8003bbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <vPortFree+0xb8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	43db      	mvns	r3, r3
 8003b92:	401a      	ands	r2, r3
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b98:	f7ff f9cc 	bl	8002f34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <vPortFree+0xbc>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <vPortFree+0xbc>)
 8003ba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003baa:	6938      	ldr	r0, [r7, #16]
 8003bac:	f000 f874 	bl	8003c98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003bb0:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <vPortFree+0xc0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	4a06      	ldr	r2, [pc, #24]	; (8003bd0 <vPortFree+0xc0>)
 8003bb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003bba:	f7ff f9c9 	bl	8002f50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003bbe:	bf00      	nop
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20004128 	.word	0x20004128
 8003bcc:	20004118 	.word	0x20004118
 8003bd0:	20004124 	.word	0x20004124

08003bd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003bda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003bde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003be0:	4b27      	ldr	r3, [pc, #156]	; (8003c80 <prvHeapInit+0xac>)
 8003be2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00c      	beq.n	8003c08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3307      	adds	r3, #7
 8003bf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0307 	bic.w	r3, r3, #7
 8003bfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	4a1f      	ldr	r2, [pc, #124]	; (8003c80 <prvHeapInit+0xac>)
 8003c04:	4413      	add	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c0c:	4a1d      	ldr	r2, [pc, #116]	; (8003c84 <prvHeapInit+0xb0>)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003c12:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <prvHeapInit+0xb0>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003c20:	2208      	movs	r2, #8
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0307 	bic.w	r3, r3, #7
 8003c2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4a15      	ldr	r2, [pc, #84]	; (8003c88 <prvHeapInit+0xb4>)
 8003c34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003c36:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <prvHeapInit+0xb4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003c3e:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <prvHeapInit+0xb4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	1ad2      	subs	r2, r2, r3
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c54:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <prvHeapInit+0xb4>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <prvHeapInit+0xb8>)
 8003c62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	4a09      	ldr	r2, [pc, #36]	; (8003c90 <prvHeapInit+0xbc>)
 8003c6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c6c:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <prvHeapInit+0xc0>)
 8003c6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003c72:	601a      	str	r2, [r3, #0]
}
 8003c74:	bf00      	nop
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	2000050c 	.word	0x2000050c
 8003c84:	2000410c 	.word	0x2000410c
 8003c88:	20004114 	.word	0x20004114
 8003c8c:	2000411c 	.word	0x2000411c
 8003c90:	20004118 	.word	0x20004118
 8003c94:	20004128 	.word	0x20004128

08003c98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ca0:	4b28      	ldr	r3, [pc, #160]	; (8003d44 <prvInsertBlockIntoFreeList+0xac>)
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	e002      	b.n	8003cac <prvInsertBlockIntoFreeList+0x14>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d8f7      	bhi.n	8003ca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d108      	bne.n	8003cda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	441a      	add	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	441a      	add	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d118      	bne.n	8003d20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <prvInsertBlockIntoFreeList+0xb0>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d00d      	beq.n	8003d16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	441a      	add	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	e008      	b.n	8003d28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003d16:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <prvInsertBlockIntoFreeList+0xb0>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	e003      	b.n	8003d28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d002      	beq.n	8003d36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d36:	bf00      	nop
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	2000410c 	.word	0x2000410c
 8003d48:	20004114 	.word	0x20004114

08003d4c <__libc_init_array>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	4d0d      	ldr	r5, [pc, #52]	; (8003d84 <__libc_init_array+0x38>)
 8003d50:	4c0d      	ldr	r4, [pc, #52]	; (8003d88 <__libc_init_array+0x3c>)
 8003d52:	1b64      	subs	r4, r4, r5
 8003d54:	10a4      	asrs	r4, r4, #2
 8003d56:	2600      	movs	r6, #0
 8003d58:	42a6      	cmp	r6, r4
 8003d5a:	d109      	bne.n	8003d70 <__libc_init_array+0x24>
 8003d5c:	4d0b      	ldr	r5, [pc, #44]	; (8003d8c <__libc_init_array+0x40>)
 8003d5e:	4c0c      	ldr	r4, [pc, #48]	; (8003d90 <__libc_init_array+0x44>)
 8003d60:	f000 f8e4 	bl	8003f2c <_init>
 8003d64:	1b64      	subs	r4, r4, r5
 8003d66:	10a4      	asrs	r4, r4, #2
 8003d68:	2600      	movs	r6, #0
 8003d6a:	42a6      	cmp	r6, r4
 8003d6c:	d105      	bne.n	8003d7a <__libc_init_array+0x2e>
 8003d6e:	bd70      	pop	{r4, r5, r6, pc}
 8003d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d74:	4798      	blx	r3
 8003d76:	3601      	adds	r6, #1
 8003d78:	e7ee      	b.n	8003d58 <__libc_init_array+0xc>
 8003d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d7e:	4798      	blx	r3
 8003d80:	3601      	adds	r6, #1
 8003d82:	e7f2      	b.n	8003d6a <__libc_init_array+0x1e>
 8003d84:	08004074 	.word	0x08004074
 8003d88:	08004074 	.word	0x08004074
 8003d8c:	08004074 	.word	0x08004074
 8003d90:	08004078 	.word	0x08004078

08003d94 <__retarget_lock_acquire_recursive>:
 8003d94:	4770      	bx	lr

08003d96 <__retarget_lock_release_recursive>:
 8003d96:	4770      	bx	lr

08003d98 <memset>:
 8003d98:	4402      	add	r2, r0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d100      	bne.n	8003da2 <memset+0xa>
 8003da0:	4770      	bx	lr
 8003da2:	f803 1b01 	strb.w	r1, [r3], #1
 8003da6:	e7f9      	b.n	8003d9c <memset+0x4>

08003da8 <cleanup_glue>:
 8003da8:	b538      	push	{r3, r4, r5, lr}
 8003daa:	460c      	mov	r4, r1
 8003dac:	6809      	ldr	r1, [r1, #0]
 8003dae:	4605      	mov	r5, r0
 8003db0:	b109      	cbz	r1, 8003db6 <cleanup_glue+0xe>
 8003db2:	f7ff fff9 	bl	8003da8 <cleanup_glue>
 8003db6:	4621      	mov	r1, r4
 8003db8:	4628      	mov	r0, r5
 8003dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dbe:	f000 b869 	b.w	8003e94 <_free_r>
	...

08003dc4 <_reclaim_reent>:
 8003dc4:	4b2c      	ldr	r3, [pc, #176]	; (8003e78 <_reclaim_reent+0xb4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4283      	cmp	r3, r0
 8003dca:	b570      	push	{r4, r5, r6, lr}
 8003dcc:	4604      	mov	r4, r0
 8003dce:	d051      	beq.n	8003e74 <_reclaim_reent+0xb0>
 8003dd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003dd2:	b143      	cbz	r3, 8003de6 <_reclaim_reent+0x22>
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d14a      	bne.n	8003e70 <_reclaim_reent+0xac>
 8003dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ddc:	6819      	ldr	r1, [r3, #0]
 8003dde:	b111      	cbz	r1, 8003de6 <_reclaim_reent+0x22>
 8003de0:	4620      	mov	r0, r4
 8003de2:	f000 f857 	bl	8003e94 <_free_r>
 8003de6:	6961      	ldr	r1, [r4, #20]
 8003de8:	b111      	cbz	r1, 8003df0 <_reclaim_reent+0x2c>
 8003dea:	4620      	mov	r0, r4
 8003dec:	f000 f852 	bl	8003e94 <_free_r>
 8003df0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003df2:	b111      	cbz	r1, 8003dfa <_reclaim_reent+0x36>
 8003df4:	4620      	mov	r0, r4
 8003df6:	f000 f84d 	bl	8003e94 <_free_r>
 8003dfa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003dfc:	b111      	cbz	r1, 8003e04 <_reclaim_reent+0x40>
 8003dfe:	4620      	mov	r0, r4
 8003e00:	f000 f848 	bl	8003e94 <_free_r>
 8003e04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003e06:	b111      	cbz	r1, 8003e0e <_reclaim_reent+0x4a>
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f000 f843 	bl	8003e94 <_free_r>
 8003e0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003e10:	b111      	cbz	r1, 8003e18 <_reclaim_reent+0x54>
 8003e12:	4620      	mov	r0, r4
 8003e14:	f000 f83e 	bl	8003e94 <_free_r>
 8003e18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003e1a:	b111      	cbz	r1, 8003e22 <_reclaim_reent+0x5e>
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f000 f839 	bl	8003e94 <_free_r>
 8003e22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003e24:	b111      	cbz	r1, 8003e2c <_reclaim_reent+0x68>
 8003e26:	4620      	mov	r0, r4
 8003e28:	f000 f834 	bl	8003e94 <_free_r>
 8003e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e2e:	b111      	cbz	r1, 8003e36 <_reclaim_reent+0x72>
 8003e30:	4620      	mov	r0, r4
 8003e32:	f000 f82f 	bl	8003e94 <_free_r>
 8003e36:	69a3      	ldr	r3, [r4, #24]
 8003e38:	b1e3      	cbz	r3, 8003e74 <_reclaim_reent+0xb0>
 8003e3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	4798      	blx	r3
 8003e40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003e42:	b1b9      	cbz	r1, 8003e74 <_reclaim_reent+0xb0>
 8003e44:	4620      	mov	r0, r4
 8003e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003e4a:	f7ff bfad 	b.w	8003da8 <cleanup_glue>
 8003e4e:	5949      	ldr	r1, [r1, r5]
 8003e50:	b941      	cbnz	r1, 8003e64 <_reclaim_reent+0xa0>
 8003e52:	3504      	adds	r5, #4
 8003e54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e56:	2d80      	cmp	r5, #128	; 0x80
 8003e58:	68d9      	ldr	r1, [r3, #12]
 8003e5a:	d1f8      	bne.n	8003e4e <_reclaim_reent+0x8a>
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f000 f819 	bl	8003e94 <_free_r>
 8003e62:	e7ba      	b.n	8003dda <_reclaim_reent+0x16>
 8003e64:	680e      	ldr	r6, [r1, #0]
 8003e66:	4620      	mov	r0, r4
 8003e68:	f000 f814 	bl	8003e94 <_free_r>
 8003e6c:	4631      	mov	r1, r6
 8003e6e:	e7ef      	b.n	8003e50 <_reclaim_reent+0x8c>
 8003e70:	2500      	movs	r5, #0
 8003e72:	e7ef      	b.n	8003e54 <_reclaim_reent+0x90>
 8003e74:	bd70      	pop	{r4, r5, r6, pc}
 8003e76:	bf00      	nop
 8003e78:	20000010 	.word	0x20000010

08003e7c <__malloc_lock>:
 8003e7c:	4801      	ldr	r0, [pc, #4]	; (8003e84 <__malloc_lock+0x8>)
 8003e7e:	f7ff bf89 	b.w	8003d94 <__retarget_lock_acquire_recursive>
 8003e82:	bf00      	nop
 8003e84:	2000412c 	.word	0x2000412c

08003e88 <__malloc_unlock>:
 8003e88:	4801      	ldr	r0, [pc, #4]	; (8003e90 <__malloc_unlock+0x8>)
 8003e8a:	f7ff bf84 	b.w	8003d96 <__retarget_lock_release_recursive>
 8003e8e:	bf00      	nop
 8003e90:	2000412c 	.word	0x2000412c

08003e94 <_free_r>:
 8003e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e96:	2900      	cmp	r1, #0
 8003e98:	d044      	beq.n	8003f24 <_free_r+0x90>
 8003e9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e9e:	9001      	str	r0, [sp, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f1a1 0404 	sub.w	r4, r1, #4
 8003ea6:	bfb8      	it	lt
 8003ea8:	18e4      	addlt	r4, r4, r3
 8003eaa:	f7ff ffe7 	bl	8003e7c <__malloc_lock>
 8003eae:	4a1e      	ldr	r2, [pc, #120]	; (8003f28 <_free_r+0x94>)
 8003eb0:	9801      	ldr	r0, [sp, #4]
 8003eb2:	6813      	ldr	r3, [r2, #0]
 8003eb4:	b933      	cbnz	r3, 8003ec4 <_free_r+0x30>
 8003eb6:	6063      	str	r3, [r4, #4]
 8003eb8:	6014      	str	r4, [r2, #0]
 8003eba:	b003      	add	sp, #12
 8003ebc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ec0:	f7ff bfe2 	b.w	8003e88 <__malloc_unlock>
 8003ec4:	42a3      	cmp	r3, r4
 8003ec6:	d908      	bls.n	8003eda <_free_r+0x46>
 8003ec8:	6825      	ldr	r5, [r4, #0]
 8003eca:	1961      	adds	r1, r4, r5
 8003ecc:	428b      	cmp	r3, r1
 8003ece:	bf01      	itttt	eq
 8003ed0:	6819      	ldreq	r1, [r3, #0]
 8003ed2:	685b      	ldreq	r3, [r3, #4]
 8003ed4:	1949      	addeq	r1, r1, r5
 8003ed6:	6021      	streq	r1, [r4, #0]
 8003ed8:	e7ed      	b.n	8003eb6 <_free_r+0x22>
 8003eda:	461a      	mov	r2, r3
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	b10b      	cbz	r3, 8003ee4 <_free_r+0x50>
 8003ee0:	42a3      	cmp	r3, r4
 8003ee2:	d9fa      	bls.n	8003eda <_free_r+0x46>
 8003ee4:	6811      	ldr	r1, [r2, #0]
 8003ee6:	1855      	adds	r5, r2, r1
 8003ee8:	42a5      	cmp	r5, r4
 8003eea:	d10b      	bne.n	8003f04 <_free_r+0x70>
 8003eec:	6824      	ldr	r4, [r4, #0]
 8003eee:	4421      	add	r1, r4
 8003ef0:	1854      	adds	r4, r2, r1
 8003ef2:	42a3      	cmp	r3, r4
 8003ef4:	6011      	str	r1, [r2, #0]
 8003ef6:	d1e0      	bne.n	8003eba <_free_r+0x26>
 8003ef8:	681c      	ldr	r4, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	6053      	str	r3, [r2, #4]
 8003efe:	4421      	add	r1, r4
 8003f00:	6011      	str	r1, [r2, #0]
 8003f02:	e7da      	b.n	8003eba <_free_r+0x26>
 8003f04:	d902      	bls.n	8003f0c <_free_r+0x78>
 8003f06:	230c      	movs	r3, #12
 8003f08:	6003      	str	r3, [r0, #0]
 8003f0a:	e7d6      	b.n	8003eba <_free_r+0x26>
 8003f0c:	6825      	ldr	r5, [r4, #0]
 8003f0e:	1961      	adds	r1, r4, r5
 8003f10:	428b      	cmp	r3, r1
 8003f12:	bf04      	itt	eq
 8003f14:	6819      	ldreq	r1, [r3, #0]
 8003f16:	685b      	ldreq	r3, [r3, #4]
 8003f18:	6063      	str	r3, [r4, #4]
 8003f1a:	bf04      	itt	eq
 8003f1c:	1949      	addeq	r1, r1, r5
 8003f1e:	6021      	streq	r1, [r4, #0]
 8003f20:	6054      	str	r4, [r2, #4]
 8003f22:	e7ca      	b.n	8003eba <_free_r+0x26>
 8003f24:	b003      	add	sp, #12
 8003f26:	bd30      	pop	{r4, r5, pc}
 8003f28:	20004130 	.word	0x20004130

08003f2c <_init>:
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	bf00      	nop
 8003f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f32:	bc08      	pop	{r3}
 8003f34:	469e      	mov	lr, r3
 8003f36:	4770      	bx	lr

08003f38 <_fini>:
 8003f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3a:	bf00      	nop
 8003f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3e:	bc08      	pop	{r3}
 8003f40:	469e      	mov	lr, r3
 8003f42:	4770      	bx	lr
