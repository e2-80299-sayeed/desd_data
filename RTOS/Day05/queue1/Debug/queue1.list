
queue1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080060cc  080060cc  000160cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006230  08006230  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006230  08006230  00016230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006238  08006238  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800623c  0800623c  0001623c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000041f8  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004264  20004264  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014ee3  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003081  00000000  00000000  00034fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001228  00000000  00000000  00038048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e16  00000000  00000000  00039270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023ae9  00000000  00000000  0003a086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013d6e  00000000  00000000  0005db6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5855  00000000  00000000  000718dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005668  00000000  00000000  00147134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0014c79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060b4 	.word	0x080060b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080060b4 	.word	0x080060b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <vApplicationGetIdleTaskMemory+0x2c>)
 800057c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <vApplicationGetIdleTaskMemory+0x30>)
 8000582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000088 	.word	0x20000088
 800059c:	20000128 	.word	0x20000128

080005a0 <vPeriodicTask>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vPeriodicTask(void *pvParam)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	uint32_t delay = (uint32_t)pvParam;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	60fb      	str	r3, [r7, #12]
	TickType_t xTickCout = xTaskGetTickCount();
 80005ac:	f003 fb60 	bl	8003c70 <xTaskGetTickCount>
 80005b0:	4603      	mov	r3, r0
 80005b2:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <vPeriodicTask+0x2c>)
 80005ba:	f000 ff20 	bl	80013fe <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xTickCout ,delay / portTICK_RATE_MS);
 80005be:	f107 0308 	add.w	r3, r7, #8
 80005c2:	68f9      	ldr	r1, [r7, #12]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f003 f98d 	bl	80038e4 <vTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005ca:	e7f3      	b.n	80005b4 <vPeriodicTask+0x14>
 80005cc:	40020c00 	.word	0x40020c00

080005d0 <vSenderTask>:
	}
	vTaskDelete(NULL);
}

void vSenderTask(void *pvParam)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	; 0x30
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	uint32_t rand_no;
	char msg[20];

	TickType_t xTickCount = xTaskGetTickCount();
 80005d8:	f003 fb4a 	bl	8003c70 <xTaskGetTickCount>
 80005dc:	4603      	mov	r3, r0
 80005de:	60fb      	str	r3, [r7, #12]
	while(1){

		portENTER_CRITICAL();
 80005e0:	f004 f888 	bl	80046f4 <vPortEnterCritical>
		for(int i = 1; i <=5; i++)
 80005e4:	2301      	movs	r3, #1
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005e8:	e02d      	b.n	8000646 <vSenderTask+0x76>
		{
			rand_no = rand();
 80005ea:	f004 fb4f 	bl	8004c8c <rand>
 80005ee:	4603      	mov	r3, r0
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
			rand_no = rand_no % 100;
 80005f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005f4:	4b19      	ldr	r3, [pc, #100]	; (800065c <vSenderTask+0x8c>)
 80005f6:	fba3 1302 	umull	r1, r3, r3, r2
 80005fa:	095b      	lsrs	r3, r3, #5
 80005fc:	2164      	movs	r1, #100	; 0x64
 80005fe:	fb01 f303 	mul.w	r3, r1, r3
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
		xQueueSendToBack(xQueue, &rand_no, portMAX_DELAY);
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <vSenderTask+0x90>)
 8000608:	6818      	ldr	r0, [r3, #0]
 800060a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800060e:	2300      	movs	r3, #0
 8000610:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000614:	f002 fc3e 	bl	8002e94 <xQueueGenericSend>
		uint32_t count = sprintf(msg, "rand_no[i] : %ld\r\n", rand_no);
 8000618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	4911      	ldr	r1, [pc, #68]	; (8000664 <vSenderTask+0x94>)
 8000620:	4618      	mov	r0, r3
 8000622:	f004 fc33 	bl	8004e8c <siprintf>
 8000626:	4603      	mov	r3, r0
 8000628:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, count, HAL_MAX_DELAY);
 800062a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800062c:	b29a      	uxth	r2, r3
 800062e:	f107 0110 	add.w	r1, r7, #16
 8000632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000636:	480c      	ldr	r0, [pc, #48]	; (8000668 <vSenderTask+0x98>)
 8000638:	f001 fec1 	bl	80023be <HAL_UART_Transmit>
		portEXIT_CRITICAL();
 800063c:	f004 f88a 	bl	8004754 <vPortExitCritical>
		for(int i = 1; i <=5; i++)
 8000640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000642:	3301      	adds	r3, #1
 8000644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000648:	2b05      	cmp	r3, #5
 800064a:	ddce      	ble.n	80005ea <vSenderTask+0x1a>
		}
		vTaskDelayUntil(&xTickCount, 5000 / portTICK_RATE_MS);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	f241 3188 	movw	r1, #5000	; 0x1388
 8000654:	4618      	mov	r0, r3
 8000656:	f003 f945 	bl	80038e4 <vTaskDelayUntil>
		portENTER_CRITICAL();
 800065a:	e7c1      	b.n	80005e0 <vSenderTask+0x10>
 800065c:	51eb851f 	.word	0x51eb851f
 8000660:	20000370 	.word	0x20000370
 8000664:	080060cc 	.word	0x080060cc
 8000668:	20000328 	.word	0x20000328

0800066c <vReceiverTask>:
	}
		vTaskDelete(NULL);
}

void vReceiverTask(void *pvParam)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b092      	sub	sp, #72	; 0x48
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	uint32_t rn1;
	uint32_t rn[5];
	uint32_t max=0;
 8000674:	2300      	movs	r3, #0
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
	char msg[20];
	TickType_t xTickCount = xTaskGetTickCount();
 8000678:	f003 fafa 	bl	8003c70 <xTaskGetTickCount>
 800067c:	4603      	mov	r3, r0
 800067e:	60fb      	str	r3, [r7, #12]
	while((xQueueReceive(xQueue, &rn1, portMAX_DELAY)) == pdPASS)
 8000680:	e062      	b.n	8000748 <vReceiverTask+0xdc>
	{

		portENTER_CRITICAL();
 8000682:	f004 f837 	bl	80046f4 <vPortEnterCritical>
		for(int i = 0 ; i < 5; i++)
 8000686:	2300      	movs	r3, #0
 8000688:	643b      	str	r3, [r7, #64]	; 0x40
 800068a:	e009      	b.n	80006a0 <vReceiverTask+0x34>
				rn[i] = rn1;
 800068c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800068e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	3348      	adds	r3, #72	; 0x48
 8000694:	443b      	add	r3, r7
 8000696:	f843 2c24 	str.w	r2, [r3, #-36]
		for(int i = 0 ; i < 5; i++)
 800069a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800069c:	3301      	adds	r3, #1
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
 80006a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006a2:	2b04      	cmp	r3, #4
 80006a4:	ddf2      	ble.n	800068c <vReceiverTask+0x20>

		if(rn[0]>rn[1] && rn[0]>rn[2] &&  rn[0]>rn[3] && rn[0]>rn[4])
 80006a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d90e      	bls.n	80006cc <vReceiverTask+0x60>
 80006ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d90a      	bls.n	80006cc <vReceiverTask+0x60>
 80006b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d906      	bls.n	80006cc <vReceiverTask+0x60>
 80006be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d902      	bls.n	80006cc <vReceiverTask+0x60>
					  max = rn[0];
 80006c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
 80006ca:	e022      	b.n	8000712 <vReceiverTask+0xa6>

					 else
					  if(rn[1]>rn[2] &&  rn[1]>rn[3] && rn[1]>rn[4])
 80006cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d90a      	bls.n	80006ea <vReceiverTask+0x7e>
 80006d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006d8:	429a      	cmp	r2, r3
 80006da:	d906      	bls.n	80006ea <vReceiverTask+0x7e>
 80006dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d902      	bls.n	80006ea <vReceiverTask+0x7e>
						  max = rn[1];
 80006e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e6:	647b      	str	r3, [r7, #68]	; 0x44
 80006e8:	e013      	b.n	8000712 <vReceiverTask+0xa6>

					 else
					  if(rn[2]>rn[3] && rn[2]>rn[4])
 80006ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d906      	bls.n	8000700 <vReceiverTask+0x94>
 80006f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d902      	bls.n	8000700 <vReceiverTask+0x94>
						  max = rn[2];
 80006fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006fc:	647b      	str	r3, [r7, #68]	; 0x44
 80006fe:	e008      	b.n	8000712 <vReceiverTask+0xa6>

					 else
					  if(rn[3]>rn[4])
 8000700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000704:	429a      	cmp	r2, r3
 8000706:	d902      	bls.n	800070e <vReceiverTask+0xa2>
						  max = rn[3];
 8000708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
 800070c:	e001      	b.n	8000712 <vReceiverTask+0xa6>

					 else
						 max = rn[4];
 800070e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000710:	647b      	str	r3, [r7, #68]	; 0x44


		uint32_t count = sprintf(msg, "Max : %ld\r\n", max);
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000718:	4915      	ldr	r1, [pc, #84]	; (8000770 <vReceiverTask+0x104>)
 800071a:	4618      	mov	r0, r3
 800071c:	f004 fbb6 	bl	8004e8c <siprintf>
 8000720:	4603      	mov	r3, r0
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, count, HAL_MAX_DELAY);
 8000724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000726:	b29a      	uxth	r2, r3
 8000728:	f107 0110 	add.w	r1, r7, #16
 800072c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000730:	4810      	ldr	r0, [pc, #64]	; (8000774 <vReceiverTask+0x108>)
 8000732:	f001 fe44 	bl	80023be <HAL_UART_Transmit>
		portEXIT_CRITICAL();
 8000736:	f004 f80d 	bl	8004754 <vPortExitCritical>
		vTaskDelayUntil(&xTickCount, 2000 / portTICK_RATE_MS);
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000742:	4618      	mov	r0, r3
 8000744:	f003 f8ce 	bl	80038e4 <vTaskDelayUntil>
	while((xQueueReceive(xQueue, &rn1, portMAX_DELAY)) == pdPASS)
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <vReceiverTask+0x10c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000754:	4618      	mov	r0, r3
 8000756:	f002 fc9b 	bl	8003090 <xQueueReceive>
 800075a:	4603      	mov	r3, r0
 800075c:	2b01      	cmp	r3, #1
 800075e:	d090      	beq.n	8000682 <vReceiverTask+0x16>
	}
	vTaskDelete(NULL);
 8000760:	2000      	movs	r0, #0
 8000762:	f003 f82f 	bl	80037c4 <vTaskDelete>
}
 8000766:	bf00      	nop
 8000768:	3748      	adds	r7, #72	; 0x48
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	080060e0 	.word	0x080060e0
 8000774:	20000328 	.word	0x20000328
 8000778:	20000370 	.word	0x20000370

0800077c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800077c:	b5b0      	push	{r4, r5, r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000782:	f000 fb63 	bl	8000e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000786:	f000 f851 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 f8e3 	bl	8000954 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800078e:	f000 f8b7 	bl	8000900 <MX_USART2_UART_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  xQueue = xQueueCreate(5, 20);
 8000792:	2200      	movs	r2, #0
 8000794:	2114      	movs	r1, #20
 8000796:	2005      	movs	r0, #5
 8000798:	f002 fb22 	bl	8002de0 <xQueueGenericCreate>
 800079c:	4603      	mov	r3, r0
 800079e:	4a1a      	ldr	r2, [pc, #104]	; (8000808 <main+0x8c>)
 80007a0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <main+0x90>)
 80007a4:	1d3c      	adds	r4, r7, #4
 80007a6:	461d      	mov	r5, r3
 80007a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 f994 	bl	8002ae6 <osThreadCreate>
 80007be:	4603      	mov	r3, r0
 80007c0:	4a13      	ldr	r2, [pc, #76]	; (8000810 <main+0x94>)
 80007c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(vSenderTask, "Sender", 128, NULL, 6, NULL);
 80007c4:	2300      	movs	r3, #0
 80007c6:	9301      	str	r3, [sp, #4]
 80007c8:	2306      	movs	r3, #6
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2300      	movs	r3, #0
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	4910      	ldr	r1, [pc, #64]	; (8000814 <main+0x98>)
 80007d2:	4811      	ldr	r0, [pc, #68]	; (8000818 <main+0x9c>)
 80007d4:	f002 fea9 	bl	800352a <xTaskCreate>
  xTaskCreate(vReceiverTask, "Receiver", 128, NULL,3, NULL);
 80007d8:	2300      	movs	r3, #0
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	2303      	movs	r3, #3
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2300      	movs	r3, #0
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	490d      	ldr	r1, [pc, #52]	; (800081c <main+0xa0>)
 80007e6:	480e      	ldr	r0, [pc, #56]	; (8000820 <main+0xa4>)
 80007e8:	f002 fe9f 	bl	800352a <xTaskCreate>
  xTaskCreate(vPeriodicTask, "Task1", 128, (void *)1000, 2,NULL);
 80007ec:	2300      	movs	r3, #0
 80007ee:	9301      	str	r3, [sp, #4]
 80007f0:	2302      	movs	r3, #2
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	490a      	ldr	r1, [pc, #40]	; (8000824 <main+0xa8>)
 80007fc:	480a      	ldr	r0, [pc, #40]	; (8000828 <main+0xac>)
 80007fe:	f002 fe94 	bl	800352a <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000802:	f002 f969 	bl	8002ad8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000806:	e7fe      	b.n	8000806 <main+0x8a>
 8000808:	20000370 	.word	0x20000370
 800080c:	08006114 	.word	0x08006114
 8000810:	2000036c 	.word	0x2000036c
 8000814:	080060ec 	.word	0x080060ec
 8000818:	080005d1 	.word	0x080005d1
 800081c:	080060f4 	.word	0x080060f4
 8000820:	0800066d 	.word	0x0800066d
 8000824:	08006100 	.word	0x08006100
 8000828:	080005a1 	.word	0x080005a1

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b094      	sub	sp, #80	; 0x50
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 0320 	add.w	r3, r7, #32
 8000836:	2230      	movs	r2, #48	; 0x30
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f004 fb89 	bl	8004f52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <SystemClock_Config+0xcc>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	4a27      	ldr	r2, [pc, #156]	; (80008f8 <SystemClock_Config+0xcc>)
 800085a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <SystemClock_Config+0xcc>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <SystemClock_Config+0xd0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a21      	ldr	r2, [pc, #132]	; (80008fc <SystemClock_Config+0xd0>)
 8000876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <SystemClock_Config+0xd0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000888:	2301      	movs	r3, #1
 800088a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800088c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000892:	2302      	movs	r3, #2
 8000894:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000896:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800089a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800089c:	2308      	movs	r3, #8
 800089e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008aa:	2307      	movs	r3, #7
 80008ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ae:	f107 0320 	add.w	r3, r7, #32
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fdbe 	bl	8001434 <HAL_RCC_OscConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008be:	f000 f8b5 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c2:	230f      	movs	r3, #15
 80008c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c6:	2302      	movs	r3, #2
 80008c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	2105      	movs	r1, #5
 80008e0:	4618      	mov	r0, r3
 80008e2:	f001 f81f 	bl	8001924 <HAL_RCC_ClockConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008ec:	f000 f89e 	bl	8000a2c <Error_Handler>
  }
}
 80008f0:	bf00      	nop
 80008f2:	3750      	adds	r7, #80	; 0x50
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40007000 	.word	0x40007000

08000900 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <MX_USART2_UART_Init+0x50>)
 8000908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000938:	f001 fcf4 	bl	8002324 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000942:	f000 f873 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000328 	.word	0x20000328
 8000950:	40004400 	.word	0x40004400

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <MX_GPIO_Init+0x9c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a1f      	ldr	r2, [pc, #124]	; (80009f0 <MX_GPIO_Init+0x9c>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_GPIO_Init+0x9c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_GPIO_Init+0x9c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a18      	ldr	r2, [pc, #96]	; (80009f0 <MX_GPIO_Init+0x9c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_GPIO_Init+0x9c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_GPIO_Init+0x9c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <MX_GPIO_Init+0x9c>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_GPIO_Init+0x9c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c4:	480b      	ldr	r0, [pc, #44]	; (80009f4 <MX_GPIO_Init+0xa0>)
 80009c6:	f000 fd01 	bl	80013cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4619      	mov	r1, r3
 80009e2:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_GPIO_Init+0xa0>)
 80009e4:	f000 fb56 	bl	8001094 <HAL_GPIO_Init>

}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020c00 	.word	0x40020c00

080009f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a00:	2001      	movs	r0, #1
 8000a02:	f002 f8bc 	bl	8002b7e <osDelay>
 8000a06:	e7fb      	b.n	8000a00 <StartDefaultTask+0x8>

08000a08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a1a:	f000 fa39 	bl	8000e90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40010000 	.word	0x40010000

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_MspInit+0x54>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <HAL_MspInit+0x54>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_MspInit+0x54>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_MspInit+0x54>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_MspInit+0x54>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_MspInit+0x54>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	210f      	movs	r1, #15
 8000a7a:	f06f 0001 	mvn.w	r0, #1
 8000a7e:	f000 fadf 	bl	8001040 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <HAL_UART_MspInit+0x84>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d12b      	bne.n	8000b0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_UART_MspInit+0x88>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <HAL_UART_MspInit+0x88>)
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_UART_MspInit+0x88>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_UART_MspInit+0x88>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <HAL_UART_MspInit+0x88>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_UART_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aea:	230c      	movs	r3, #12
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afa:	2307      	movs	r3, #7
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <HAL_UART_MspInit+0x8c>)
 8000b06:	f000 fac5 	bl	8001094 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	; 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40004400 	.word	0x40004400
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020000 	.word	0x40020000

08000b20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08c      	sub	sp, #48	; 0x30
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <HAL_InitTick+0xd4>)
 8000b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b38:	4a2e      	ldr	r2, [pc, #184]	; (8000bf4 <HAL_InitTick+0xd4>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b40:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <HAL_InitTick+0xd4>)
 8000b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b4c:	f107 020c 	add.w	r2, r7, #12
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 f904 	bl	8001d64 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b5c:	f001 f8ee 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8000b60:	4603      	mov	r3, r0
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b68:	4a23      	ldr	r2, [pc, #140]	; (8000bf8 <HAL_InitTick+0xd8>)
 8000b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6e:	0c9b      	lsrs	r3, r3, #18
 8000b70:	3b01      	subs	r3, #1
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <HAL_InitTick+0xdc>)
 8000b76:	4a22      	ldr	r2, [pc, #136]	; (8000c00 <HAL_InitTick+0xe0>)
 8000b78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b7a:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <HAL_InitTick+0xdc>)
 8000b7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b82:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <HAL_InitTick+0xdc>)
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <HAL_InitTick+0xdc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <HAL_InitTick+0xdc>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b94:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <HAL_InitTick+0xdc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b9a:	4818      	ldr	r0, [pc, #96]	; (8000bfc <HAL_InitTick+0xdc>)
 8000b9c:	f001 f914 	bl	8001dc8 <HAL_TIM_Base_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d11b      	bne.n	8000be6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bae:	4813      	ldr	r0, [pc, #76]	; (8000bfc <HAL_InitTick+0xdc>)
 8000bb0:	f001 f964 	bl	8001e7c <HAL_TIM_Base_Start_IT>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000bba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d111      	bne.n	8000be6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bc2:	2019      	movs	r0, #25
 8000bc4:	f000 fa58 	bl	8001078 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b0f      	cmp	r3, #15
 8000bcc:	d808      	bhi.n	8000be0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	2019      	movs	r0, #25
 8000bd4:	f000 fa34 	bl	8001040 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_InitTick+0xe4>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	e002      	b.n	8000be6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000be6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3730      	adds	r7, #48	; 0x30
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	431bde83 	.word	0x431bde83
 8000bfc:	20000374 	.word	0x20000374
 8000c00:	40010000 	.word	0x40010000
 8000c04:	20000004 	.word	0x20000004

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c3a:	f001 f98f 	bl	8001f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000374 	.word	0x20000374

08000c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
	return 1;
 8000c4c:	2301      	movs	r3, #1
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_kill>:

int _kill(int pid, int sig)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c62:	f004 fa1b 	bl	800509c <__errno>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2216      	movs	r2, #22
 8000c6a:	601a      	str	r2, [r3, #0]
	return -1;
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_exit>:

void _exit (int status)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ffe7 	bl	8000c58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c8a:	e7fe      	b.n	8000c8a <_exit+0x12>

08000c8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	e00a      	b.n	8000cb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c9e:	f3af 8000 	nop.w
 8000ca2:	4601      	mov	r1, r0
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	60ba      	str	r2, [r7, #8]
 8000caa:	b2ca      	uxtb	r2, r1
 8000cac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbf0      	blt.n	8000c9e <_read+0x12>
	}

return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	e009      	b.n	8000cec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	60ba      	str	r2, [r7, #8]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbf1      	blt.n	8000cd8 <_write+0x12>
	}
	return len;
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_close>:

int _close(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
	return -1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d26:	605a      	str	r2, [r3, #4]
	return 0;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_isatty>:

int _isatty(int file)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
	return 0;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <_sbrk+0x5c>)
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <_sbrk+0x60>)
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <_sbrk+0x64>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <_sbrk+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d207      	bcs.n	8000da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d98:	f004 f980 	bl	800509c <__errno>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	220c      	movs	r2, #12
 8000da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000da6:	e009      	b.n	8000dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <_sbrk+0x64>)
 8000db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20020000 	.word	0x20020000
 8000dc8:	00000400 	.word	0x00000400
 8000dcc:	200003bc 	.word	0x200003bc
 8000dd0:	20004268 	.word	0x20004268

08000dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dfe:	490e      	ldr	r1, [pc, #56]	; (8000e38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e00:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e14:	4c0b      	ldr	r4, [pc, #44]	; (8000e44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e22:	f7ff ffd7 	bl	8000dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e26:	f004 f93f 	bl	80050a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2a:	f7ff fca7 	bl	800077c <main>
  bx  lr    
 8000e2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e3c:	08006240 	.word	0x08006240
  ldr r2, =_sbss
 8000e40:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e44:	20004264 	.word	0x20004264

08000e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC_IRQHandler>
	...

08000e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <HAL_Init+0x40>)
 8000e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_Init+0x40>)
 8000e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_Init+0x40>)
 8000e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f000 f8d8 	bl	800102a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7a:	200f      	movs	r0, #15
 8000e7c:	f7ff fe50 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff fdda 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023c00 	.word	0x40023c00

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	200003c0 	.word	0x200003c0

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200003c0 	.word	0x200003c0

08000ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eec:	4013      	ands	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f02:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	60d3      	str	r3, [r2, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <__NVIC_GetPriorityGrouping+0x18>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	f003 0307 	and.w	r3, r3, #7
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	db0b      	blt.n	8000f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f003 021f 	and.w	r2, r3, #31
 8000f4c:	4907      	ldr	r1, [pc, #28]	; (8000f6c <__NVIC_EnableIRQ+0x38>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	095b      	lsrs	r3, r3, #5
 8000f54:	2001      	movs	r0, #1
 8000f56:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
         );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ff4c 	bl	8000ed0 <__NVIC_SetPriorityGrouping>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001052:	f7ff ff61 	bl	8000f18 <__NVIC_GetPriorityGrouping>
 8001056:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	68b9      	ldr	r1, [r7, #8]
 800105c:	6978      	ldr	r0, [r7, #20]
 800105e:	f7ff ffb1 	bl	8000fc4 <NVIC_EncodePriority>
 8001062:	4602      	mov	r2, r0
 8001064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001068:	4611      	mov	r1, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff80 	bl	8000f70 <__NVIC_SetPriority>
}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff54 	bl	8000f34 <__NVIC_EnableIRQ>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	e16b      	b.n	8001388 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b0:	2201      	movs	r2, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f040 815a 	bne.w	8001382 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d005      	beq.n	80010e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d130      	bne.n	8001148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	091b      	lsrs	r3, r3, #4
 8001132:	f003 0201 	and.w	r2, r3, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b03      	cmp	r3, #3
 8001152:	d017      	beq.n	8001184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d123      	bne.n	80011d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	08da      	lsrs	r2, r3, #3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	69b9      	ldr	r1, [r7, #24]
 80011d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0203 	and.w	r2, r3, #3
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 80b4 	beq.w	8001382 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b60      	ldr	r3, [pc, #384]	; (80013a0 <HAL_GPIO_Init+0x30c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	4a5f      	ldr	r2, [pc, #380]	; (80013a0 <HAL_GPIO_Init+0x30c>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001228:	6453      	str	r3, [r2, #68]	; 0x44
 800122a:	4b5d      	ldr	r3, [pc, #372]	; (80013a0 <HAL_GPIO_Init+0x30c>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001236:	4a5b      	ldr	r2, [pc, #364]	; (80013a4 <HAL_GPIO_Init+0x310>)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	3302      	adds	r3, #2
 800123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	220f      	movs	r2, #15
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a52      	ldr	r2, [pc, #328]	; (80013a8 <HAL_GPIO_Init+0x314>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d02b      	beq.n	80012ba <HAL_GPIO_Init+0x226>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a51      	ldr	r2, [pc, #324]	; (80013ac <HAL_GPIO_Init+0x318>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d025      	beq.n	80012b6 <HAL_GPIO_Init+0x222>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a50      	ldr	r2, [pc, #320]	; (80013b0 <HAL_GPIO_Init+0x31c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d01f      	beq.n	80012b2 <HAL_GPIO_Init+0x21e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4f      	ldr	r2, [pc, #316]	; (80013b4 <HAL_GPIO_Init+0x320>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d019      	beq.n	80012ae <HAL_GPIO_Init+0x21a>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4e      	ldr	r2, [pc, #312]	; (80013b8 <HAL_GPIO_Init+0x324>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_GPIO_Init+0x216>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4d      	ldr	r2, [pc, #308]	; (80013bc <HAL_GPIO_Init+0x328>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d00d      	beq.n	80012a6 <HAL_GPIO_Init+0x212>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4c      	ldr	r2, [pc, #304]	; (80013c0 <HAL_GPIO_Init+0x32c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d007      	beq.n	80012a2 <HAL_GPIO_Init+0x20e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4b      	ldr	r2, [pc, #300]	; (80013c4 <HAL_GPIO_Init+0x330>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d101      	bne.n	800129e <HAL_GPIO_Init+0x20a>
 800129a:	2307      	movs	r3, #7
 800129c:	e00e      	b.n	80012bc <HAL_GPIO_Init+0x228>
 800129e:	2308      	movs	r3, #8
 80012a0:	e00c      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012a2:	2306      	movs	r3, #6
 80012a4:	e00a      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012a6:	2305      	movs	r3, #5
 80012a8:	e008      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012aa:	2304      	movs	r3, #4
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012ae:	2303      	movs	r3, #3
 80012b0:	e004      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x228>
 80012ba:	2300      	movs	r3, #0
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	f002 0203 	and.w	r2, r2, #3
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012cc:	4935      	ldr	r1, [pc, #212]	; (80013a4 <HAL_GPIO_Init+0x310>)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012da:	4b3b      	ldr	r3, [pc, #236]	; (80013c8 <HAL_GPIO_Init+0x334>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <HAL_GPIO_Init+0x334>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001304:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <HAL_GPIO_Init+0x334>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001328:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <HAL_GPIO_Init+0x334>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <HAL_GPIO_Init+0x334>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001352:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <HAL_GPIO_Init+0x334>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_GPIO_Init+0x334>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800137c:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <HAL_GPIO_Init+0x334>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3301      	adds	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	2b0f      	cmp	r3, #15
 800138c:	f67f ae90 	bls.w	80010b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40013800 	.word	0x40013800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40021400 	.word	0x40021400
 80013c0:	40021800 	.word	0x40021800
 80013c4:	40021c00 	.word	0x40021c00
 80013c8:	40013c00 	.word	0x40013c00

080013cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	807b      	strh	r3, [r7, #2]
 80013d8:	4613      	mov	r3, r2
 80013da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e8:	e003      	b.n	80013f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	041a      	lsls	r2, r3, #16
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	619a      	str	r2, [r3, #24]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013fe:	b480      	push	{r7}
 8001400:	b085      	sub	sp, #20
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001410:	887a      	ldrh	r2, [r7, #2]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4013      	ands	r3, r2
 8001416:	041a      	lsls	r2, r3, #16
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43d9      	mvns	r1, r3
 800141c:	887b      	ldrh	r3, [r7, #2]
 800141e:	400b      	ands	r3, r1
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	619a      	str	r2, [r3, #24]
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e267      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d075      	beq.n	800153e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001452:	4b88      	ldr	r3, [pc, #544]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b04      	cmp	r3, #4
 800145c:	d00c      	beq.n	8001478 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145e:	4b85      	ldr	r3, [pc, #532]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001466:	2b08      	cmp	r3, #8
 8001468:	d112      	bne.n	8001490 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146a:	4b82      	ldr	r3, [pc, #520]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001476:	d10b      	bne.n	8001490 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001478:	4b7e      	ldr	r3, [pc, #504]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d05b      	beq.n	800153c <HAL_RCC_OscConfig+0x108>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d157      	bne.n	800153c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e242      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001498:	d106      	bne.n	80014a8 <HAL_RCC_OscConfig+0x74>
 800149a:	4b76      	ldr	r3, [pc, #472]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a75      	ldr	r2, [pc, #468]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e01d      	b.n	80014e4 <HAL_RCC_OscConfig+0xb0>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0x98>
 80014b2:	4b70      	ldr	r3, [pc, #448]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6f      	ldr	r2, [pc, #444]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b6d      	ldr	r3, [pc, #436]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a6c      	ldr	r2, [pc, #432]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e00b      	b.n	80014e4 <HAL_RCC_OscConfig+0xb0>
 80014cc:	4b69      	ldr	r3, [pc, #420]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a68      	ldr	r2, [pc, #416]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b66      	ldr	r3, [pc, #408]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a65      	ldr	r2, [pc, #404]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80014de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d013      	beq.n	8001514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fce4 	bl	8000eb8 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fce0 	bl	8000eb8 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e207      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	4b5b      	ldr	r3, [pc, #364]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0xc0>
 8001512:	e014      	b.n	800153e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fcd0 	bl	8000eb8 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fccc 	bl	8000eb8 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e1f3      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	4b51      	ldr	r3, [pc, #324]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0xe8>
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d063      	beq.n	8001612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800154a:	4b4a      	ldr	r3, [pc, #296]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00b      	beq.n	800156e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001556:	4b47      	ldr	r3, [pc, #284]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800155e:	2b08      	cmp	r3, #8
 8001560:	d11c      	bne.n	800159c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001562:	4b44      	ldr	r3, [pc, #272]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d116      	bne.n	800159c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	4b41      	ldr	r3, [pc, #260]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <HAL_RCC_OscConfig+0x152>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d001      	beq.n	8001586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e1c7      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001586:	4b3b      	ldr	r3, [pc, #236]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4937      	ldr	r1, [pc, #220]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	e03a      	b.n	8001612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a4:	4b34      	ldr	r3, [pc, #208]	; (8001678 <HAL_RCC_OscConfig+0x244>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015aa:	f7ff fc85 	bl	8000eb8 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff fc81 	bl	8000eb8 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e1a8      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c4:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d0:	4b28      	ldr	r3, [pc, #160]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4925      	ldr	r1, [pc, #148]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	e015      	b.n	8001612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e6:	4b24      	ldr	r3, [pc, #144]	; (8001678 <HAL_RCC_OscConfig+0x244>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fc64 	bl	8000eb8 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff fc60 	bl	8000eb8 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e187      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d036      	beq.n	800168c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d016      	beq.n	8001654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_RCC_OscConfig+0x248>)
 8001628:	2201      	movs	r2, #1
 800162a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162c:	f7ff fc44 	bl	8000eb8 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001634:	f7ff fc40 	bl	8000eb8 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e167      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_RCC_OscConfig+0x240>)
 8001648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x200>
 8001652:	e01b      	b.n	800168c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_RCC_OscConfig+0x248>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165a:	f7ff fc2d 	bl	8000eb8 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001660:	e00e      	b.n	8001680 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001662:	f7ff fc29 	bl	8000eb8 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d907      	bls.n	8001680 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e150      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
 8001674:	40023800 	.word	0x40023800
 8001678:	42470000 	.word	0x42470000
 800167c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001680:	4b88      	ldr	r3, [pc, #544]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1ea      	bne.n	8001662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 8097 	beq.w	80017c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169e:	4b81      	ldr	r3, [pc, #516]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10f      	bne.n	80016ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b7d      	ldr	r3, [pc, #500]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a7c      	ldr	r2, [pc, #496]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c6:	2301      	movs	r3, #1
 80016c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ca:	4b77      	ldr	r3, [pc, #476]	; (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d118      	bne.n	8001708 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d6:	4b74      	ldr	r3, [pc, #464]	; (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a73      	ldr	r2, [pc, #460]	; (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e2:	f7ff fbe9 	bl	8000eb8 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ea:	f7ff fbe5 	bl	8000eb8 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e10c      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fc:	4b6a      	ldr	r3, [pc, #424]	; (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d106      	bne.n	800171e <HAL_RCC_OscConfig+0x2ea>
 8001710:	4b64      	ldr	r3, [pc, #400]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001714:	4a63      	ldr	r2, [pc, #396]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6713      	str	r3, [r2, #112]	; 0x70
 800171c:	e01c      	b.n	8001758 <HAL_RCC_OscConfig+0x324>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b05      	cmp	r3, #5
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0x30c>
 8001726:	4b5f      	ldr	r3, [pc, #380]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	4a5e      	ldr	r2, [pc, #376]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6713      	str	r3, [r2, #112]	; 0x70
 8001732:	4b5c      	ldr	r3, [pc, #368]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001736:	4a5b      	ldr	r2, [pc, #364]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6713      	str	r3, [r2, #112]	; 0x70
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0x324>
 8001740:	4b58      	ldr	r3, [pc, #352]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001744:	4a57      	ldr	r2, [pc, #348]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	6713      	str	r3, [r2, #112]	; 0x70
 800174c:	4b55      	ldr	r3, [pc, #340]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001750:	4a54      	ldr	r2, [pc, #336]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001752:	f023 0304 	bic.w	r3, r3, #4
 8001756:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d015      	beq.n	800178c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff fbaa 	bl	8000eb8 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001766:	e00a      	b.n	800177e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f7ff fba6 	bl	8000eb8 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e0cb      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177e:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0ee      	beq.n	8001768 <HAL_RCC_OscConfig+0x334>
 800178a:	e014      	b.n	80017b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178c:	f7ff fb94 	bl	8000eb8 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001792:	e00a      	b.n	80017aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f7ff fb90 	bl	8000eb8 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e0b5      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017aa:	4b3e      	ldr	r3, [pc, #248]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ee      	bne.n	8001794 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017bc:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	4a38      	ldr	r2, [pc, #224]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80a1 	beq.w	8001914 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017d2:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d05c      	beq.n	8001898 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d141      	bne.n	800186a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	4b31      	ldr	r3, [pc, #196]	; (80018ac <HAL_RCC_OscConfig+0x478>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fb64 	bl	8000eb8 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff fb60 	bl	8000eb8 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e087      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	019b      	lsls	r3, r3, #6
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	3b01      	subs	r3, #1
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	061b      	lsls	r3, r3, #24
 8001836:	491b      	ldr	r1, [pc, #108]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <HAL_RCC_OscConfig+0x478>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7ff fb39 	bl	8000eb8 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184a:	f7ff fb35 	bl	8000eb8 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e05c      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x416>
 8001868:	e054      	b.n	8001914 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_RCC_OscConfig+0x478>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fb22 	bl	8000eb8 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff fb1e 	bl	8000eb8 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e045      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_RCC_OscConfig+0x470>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x444>
 8001896:	e03d      	b.n	8001914 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d107      	bne.n	80018b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e038      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40007000 	.word	0x40007000
 80018ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_RCC_OscConfig+0x4ec>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d028      	beq.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d121      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d11a      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018e0:	4013      	ands	r3, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d111      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	085b      	lsrs	r3, r3, #1
 80018f8:	3b01      	subs	r3, #1
 80018fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800

08001924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0cc      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001938:	4b68      	ldr	r3, [pc, #416]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d90c      	bls.n	8001960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4b65      	ldr	r3, [pc, #404]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b63      	ldr	r3, [pc, #396]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0b8      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d020      	beq.n	80019ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001978:	4b59      	ldr	r3, [pc, #356]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a58      	ldr	r2, [pc, #352]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001982:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001990:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4a52      	ldr	r2, [pc, #328]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800199a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800199c:	4b50      	ldr	r3, [pc, #320]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	494d      	ldr	r1, [pc, #308]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d044      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d107      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	4b47      	ldr	r3, [pc, #284]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d119      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e07f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d003      	beq.n	80019e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e2:	4b3f      	ldr	r3, [pc, #252]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e06f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f2:	4b3b      	ldr	r3, [pc, #236]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e067      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a02:	4b37      	ldr	r3, [pc, #220]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f023 0203 	bic.w	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4934      	ldr	r1, [pc, #208]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a14:	f7ff fa50 	bl	8000eb8 <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1c:	f7ff fa4c 	bl	8000eb8 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e04f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 020c 	and.w	r2, r3, #12
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1eb      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a44:	4b25      	ldr	r3, [pc, #148]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d20c      	bcs.n	8001a6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e032      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4916      	ldr	r1, [pc, #88]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d009      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	490e      	ldr	r1, [pc, #56]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aaa:	f000 f821 	bl	8001af0 <HAL_RCC_GetSysClockFreq>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	490a      	ldr	r1, [pc, #40]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	5ccb      	ldrb	r3, [r1, r3]
 8001abe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac2:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_RCC_ClockConfig+0x1c8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff f828 	bl	8000b20 <HAL_InitTick>

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023c00 	.word	0x40023c00
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	08006138 	.word	0x08006138
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	20000004 	.word	0x20000004

08001af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af4:	b094      	sub	sp, #80	; 0x50
 8001af6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	647b      	str	r3, [r7, #68]	; 0x44
 8001afc:	2300      	movs	r3, #0
 8001afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b00:	2300      	movs	r3, #0
 8001b02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b08:	4b79      	ldr	r3, [pc, #484]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d00d      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x40>
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	f200 80e1 	bhi.w	8001cdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x34>
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d003      	beq.n	8001b2a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b22:	e0db      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b24:	4b73      	ldr	r3, [pc, #460]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b26:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b28:	e0db      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b2a:	4b73      	ldr	r3, [pc, #460]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b2e:	e0d8      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b30:	4b6f      	ldr	r3, [pc, #444]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b38:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b3a:	4b6d      	ldr	r3, [pc, #436]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d063      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b46:	4b6a      	ldr	r3, [pc, #424]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	099b      	lsrs	r3, r3, #6
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b62:	4622      	mov	r2, r4
 8001b64:	462b      	mov	r3, r5
 8001b66:	f04f 0000 	mov.w	r0, #0
 8001b6a:	f04f 0100 	mov.w	r1, #0
 8001b6e:	0159      	lsls	r1, r3, #5
 8001b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b74:	0150      	lsls	r0, r2, #5
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	1a51      	subs	r1, r2, r1
 8001b7e:	6139      	str	r1, [r7, #16]
 8001b80:	4629      	mov	r1, r5
 8001b82:	eb63 0301 	sbc.w	r3, r3, r1
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b94:	4659      	mov	r1, fp
 8001b96:	018b      	lsls	r3, r1, #6
 8001b98:	4651      	mov	r1, sl
 8001b9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b9e:	4651      	mov	r1, sl
 8001ba0:	018a      	lsls	r2, r1, #6
 8001ba2:	4651      	mov	r1, sl
 8001ba4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ba8:	4659      	mov	r1, fp
 8001baa:	eb63 0901 	sbc.w	r9, r3, r1
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bc2:	4690      	mov	r8, r2
 8001bc4:	4699      	mov	r9, r3
 8001bc6:	4623      	mov	r3, r4
 8001bc8:	eb18 0303 	adds.w	r3, r8, r3
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	462b      	mov	r3, r5
 8001bd0:	eb49 0303 	adc.w	r3, r9, r3
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001be2:	4629      	mov	r1, r5
 8001be4:	024b      	lsls	r3, r1, #9
 8001be6:	4621      	mov	r1, r4
 8001be8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bec:	4621      	mov	r1, r4
 8001bee:	024a      	lsls	r2, r1, #9
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c00:	f7fe fb36 	bl	8000270 <__aeabi_uldivmod>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4613      	mov	r3, r2
 8001c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c0c:	e058      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0e:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	099b      	lsrs	r3, r3, #6
 8001c14:	2200      	movs	r2, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	4611      	mov	r1, r2
 8001c1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c1e:	623b      	str	r3, [r7, #32]
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
 8001c24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c28:	4642      	mov	r2, r8
 8001c2a:	464b      	mov	r3, r9
 8001c2c:	f04f 0000 	mov.w	r0, #0
 8001c30:	f04f 0100 	mov.w	r1, #0
 8001c34:	0159      	lsls	r1, r3, #5
 8001c36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c3a:	0150      	lsls	r0, r2, #5
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4641      	mov	r1, r8
 8001c42:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c46:	4649      	mov	r1, r9
 8001c48:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c60:	ebb2 040a 	subs.w	r4, r2, sl
 8001c64:	eb63 050b 	sbc.w	r5, r3, fp
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	00eb      	lsls	r3, r5, #3
 8001c72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c76:	00e2      	lsls	r2, r4, #3
 8001c78:	4614      	mov	r4, r2
 8001c7a:	461d      	mov	r5, r3
 8001c7c:	4643      	mov	r3, r8
 8001c7e:	18e3      	adds	r3, r4, r3
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	464b      	mov	r3, r9
 8001c84:	eb45 0303 	adc.w	r3, r5, r3
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c96:	4629      	mov	r1, r5
 8001c98:	028b      	lsls	r3, r1, #10
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	028a      	lsls	r2, r1, #10
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001caa:	2200      	movs	r2, #0
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	61fa      	str	r2, [r7, #28]
 8001cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cb4:	f7fe fadc 	bl	8000270 <__aeabi_uldivmod>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	0c1b      	lsrs	r3, r3, #16
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cda:	e002      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3750      	adds	r7, #80	; 0x50
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	00f42400 	.word	0x00f42400
 8001cf8:	007a1200 	.word	0x007a1200

08001cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000000 	.word	0x20000000

08001d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d18:	f7ff fff0 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0a9b      	lsrs	r3, r3, #10
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4903      	ldr	r1, [pc, #12]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	08006148 	.word	0x08006148

08001d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d40:	f7ff ffdc 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0b5b      	lsrs	r3, r3, #13
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4903      	ldr	r1, [pc, #12]	; (8001d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	08006148 	.word	0x08006148

08001d64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	220f      	movs	r2, #15
 8001d72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 0203 	and.w	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	08db      	lsrs	r3, r3, #3
 8001d9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <HAL_RCC_GetClockConfig+0x60>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0207 	and.w	r2, r3, #7
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	601a      	str	r2, [r3, #0]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40023c00 	.word	0x40023c00

08001dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e041      	b.n	8001e5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f839 	bl	8001e66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3304      	adds	r3, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	4610      	mov	r0, r2
 8001e08:	f000 f9d8 	bl	80021bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d001      	beq.n	8001e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e04e      	b.n	8001f32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <HAL_TIM_Base_Start_IT+0xc4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d022      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0x80>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebe:	d01d      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0x80>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1f      	ldr	r2, [pc, #124]	; (8001f44 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d018      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0x80>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a1e      	ldr	r2, [pc, #120]	; (8001f48 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d013      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0x80>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <HAL_TIM_Base_Start_IT+0xd0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00e      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0x80>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a1b      	ldr	r2, [pc, #108]	; (8001f50 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d009      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0x80>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a19      	ldr	r2, [pc, #100]	; (8001f54 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d004      	beq.n	8001efc <HAL_TIM_Base_Start_IT+0x80>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a18      	ldr	r2, [pc, #96]	; (8001f58 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d111      	bne.n	8001f20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d010      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0201 	orr.w	r2, r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f1e:	e007      	b.n	8001f30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40010000 	.word	0x40010000
 8001f44:	40000400 	.word	0x40000400
 8001f48:	40000800 	.word	0x40000800
 8001f4c:	40000c00 	.word	0x40000c00
 8001f50:	40010400 	.word	0x40010400
 8001f54:	40014000 	.word	0x40014000
 8001f58:	40001800 	.word	0x40001800

08001f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d122      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d11b      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0202 	mvn.w	r2, #2
 8001f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f8ee 	bl	8002180 <HAL_TIM_IC_CaptureCallback>
 8001fa4:	e005      	b.n	8001fb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f8e0 	bl	800216c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f8f1 	bl	8002194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d122      	bne.n	800200c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d11b      	bne.n	800200c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0204 	mvn.w	r2, #4
 8001fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f8c4 	bl	8002180 <HAL_TIM_IC_CaptureCallback>
 8001ff8:	e005      	b.n	8002006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f8b6 	bl	800216c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f8c7 	bl	8002194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b08      	cmp	r3, #8
 8002018:	d122      	bne.n	8002060 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b08      	cmp	r3, #8
 8002026:	d11b      	bne.n	8002060 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0208 	mvn.w	r2, #8
 8002030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2204      	movs	r2, #4
 8002036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f89a 	bl	8002180 <HAL_TIM_IC_CaptureCallback>
 800204c:	e005      	b.n	800205a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f88c 	bl	800216c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f89d 	bl	8002194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b10      	cmp	r3, #16
 800206c:	d122      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b10      	cmp	r3, #16
 800207a:	d11b      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0210 	mvn.w	r2, #16
 8002084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2208      	movs	r2, #8
 800208a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f870 	bl	8002180 <HAL_TIM_IC_CaptureCallback>
 80020a0:	e005      	b.n	80020ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f862 	bl	800216c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f873 	bl	8002194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d10e      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d107      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0201 	mvn.w	r2, #1
 80020d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7fe fc94 	bl	8000a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ea:	2b80      	cmp	r3, #128	; 0x80
 80020ec:	d10e      	bne.n	800210c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f8:	2b80      	cmp	r3, #128	; 0x80
 80020fa:	d107      	bne.n	800210c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f902 	bl	8002310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	2b40      	cmp	r3, #64	; 0x40
 8002118:	d10e      	bne.n	8002138 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002124:	2b40      	cmp	r3, #64	; 0x40
 8002126:	d107      	bne.n	8002138 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f838 	bl	80021a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	2b20      	cmp	r3, #32
 8002144:	d10e      	bne.n	8002164 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b20      	cmp	r3, #32
 8002152:	d107      	bne.n	8002164 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0220 	mvn.w	r2, #32
 800215c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f8cc 	bl	80022fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a40      	ldr	r2, [pc, #256]	; (80022d0 <TIM_Base_SetConfig+0x114>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d013      	beq.n	80021fc <TIM_Base_SetConfig+0x40>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021da:	d00f      	beq.n	80021fc <TIM_Base_SetConfig+0x40>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a3d      	ldr	r2, [pc, #244]	; (80022d4 <TIM_Base_SetConfig+0x118>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d00b      	beq.n	80021fc <TIM_Base_SetConfig+0x40>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a3c      	ldr	r2, [pc, #240]	; (80022d8 <TIM_Base_SetConfig+0x11c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d007      	beq.n	80021fc <TIM_Base_SetConfig+0x40>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a3b      	ldr	r2, [pc, #236]	; (80022dc <TIM_Base_SetConfig+0x120>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d003      	beq.n	80021fc <TIM_Base_SetConfig+0x40>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a3a      	ldr	r2, [pc, #232]	; (80022e0 <TIM_Base_SetConfig+0x124>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d108      	bne.n	800220e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a2f      	ldr	r2, [pc, #188]	; (80022d0 <TIM_Base_SetConfig+0x114>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d02b      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800221c:	d027      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a2c      	ldr	r2, [pc, #176]	; (80022d4 <TIM_Base_SetConfig+0x118>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d023      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a2b      	ldr	r2, [pc, #172]	; (80022d8 <TIM_Base_SetConfig+0x11c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01f      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a2a      	ldr	r2, [pc, #168]	; (80022dc <TIM_Base_SetConfig+0x120>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d01b      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a29      	ldr	r2, [pc, #164]	; (80022e0 <TIM_Base_SetConfig+0x124>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d017      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a28      	ldr	r2, [pc, #160]	; (80022e4 <TIM_Base_SetConfig+0x128>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d013      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a27      	ldr	r2, [pc, #156]	; (80022e8 <TIM_Base_SetConfig+0x12c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00f      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a26      	ldr	r2, [pc, #152]	; (80022ec <TIM_Base_SetConfig+0x130>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00b      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a25      	ldr	r2, [pc, #148]	; (80022f0 <TIM_Base_SetConfig+0x134>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d007      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a24      	ldr	r2, [pc, #144]	; (80022f4 <TIM_Base_SetConfig+0x138>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d003      	beq.n	800226e <TIM_Base_SetConfig+0xb2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a23      	ldr	r2, [pc, #140]	; (80022f8 <TIM_Base_SetConfig+0x13c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d108      	bne.n	8002280 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	4313      	orrs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <TIM_Base_SetConfig+0x114>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d003      	beq.n	80022b4 <TIM_Base_SetConfig+0xf8>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a0c      	ldr	r2, [pc, #48]	; (80022e0 <TIM_Base_SetConfig+0x124>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d103      	bne.n	80022bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	615a      	str	r2, [r3, #20]
}
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40010000 	.word	0x40010000
 80022d4:	40000400 	.word	0x40000400
 80022d8:	40000800 	.word	0x40000800
 80022dc:	40000c00 	.word	0x40000c00
 80022e0:	40010400 	.word	0x40010400
 80022e4:	40014000 	.word	0x40014000
 80022e8:	40014400 	.word	0x40014400
 80022ec:	40014800 	.word	0x40014800
 80022f0:	40001800 	.word	0x40001800
 80022f4:	40001c00 	.word	0x40001c00
 80022f8:	40002000 	.word	0x40002000

080022fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e03f      	b.n	80023b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe fba0 	bl	8000a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2224      	movs	r2, #36	; 0x24
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002366:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f929 	bl	80025c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800237c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695a      	ldr	r2, [r3, #20]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800238c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800239c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b08a      	sub	sp, #40	; 0x28
 80023c2:	af02      	add	r7, sp, #8
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	4613      	mov	r3, r2
 80023cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b20      	cmp	r3, #32
 80023dc:	d17c      	bne.n	80024d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_UART_Transmit+0x2c>
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e075      	b.n	80024da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_UART_Transmit+0x3e>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e06e      	b.n	80024da <HAL_UART_Transmit+0x11c>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2221      	movs	r2, #33	; 0x21
 800240e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002412:	f7fe fd51 	bl	8000eb8 <HAL_GetTick>
 8002416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	88fa      	ldrh	r2, [r7, #6]
 800241c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	88fa      	ldrh	r2, [r7, #6]
 8002422:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800242c:	d108      	bne.n	8002440 <HAL_UART_Transmit+0x82>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d104      	bne.n	8002440 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	e003      	b.n	8002448 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002444:	2300      	movs	r3, #0
 8002446:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002450:	e02a      	b.n	80024a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2200      	movs	r2, #0
 800245a:	2180      	movs	r1, #128	; 0x80
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 f840 	bl	80024e2 <UART_WaitOnFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e036      	b.n	80024da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10b      	bne.n	800248a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002480:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	3302      	adds	r3, #2
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	e007      	b.n	800249a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	3301      	adds	r3, #1
 8002498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1cf      	bne.n	8002452 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2200      	movs	r2, #0
 80024ba:	2140      	movs	r1, #64	; 0x40
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f810 	bl	80024e2 <UART_WaitOnFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e006      	b.n	80024da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e000      	b.n	80024da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024d8:	2302      	movs	r3, #2
  }
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3720      	adds	r7, #32
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b090      	sub	sp, #64	; 0x40
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	603b      	str	r3, [r7, #0]
 80024ee:	4613      	mov	r3, r2
 80024f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f2:	e050      	b.n	8002596 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024fa:	d04c      	beq.n	8002596 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <UART_WaitOnFlagUntilTimeout+0x30>
 8002502:	f7fe fcd9 	bl	8000eb8 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800250e:	429a      	cmp	r2, r3
 8002510:	d241      	bcs.n	8002596 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	330c      	adds	r3, #12
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	e853 3f00 	ldrex	r3, [r3]
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	330c      	adds	r3, #12
 8002530:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002532:	637a      	str	r2, [r7, #52]	; 0x34
 8002534:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002536:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002538:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800253a:	e841 2300 	strex	r3, r2, [r1]
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1e5      	bne.n	8002512 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	3314      	adds	r3, #20
 800254c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	e853 3f00 	ldrex	r3, [r3]
 8002554:	613b      	str	r3, [r7, #16]
   return(result);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f023 0301 	bic.w	r3, r3, #1
 800255c:	63bb      	str	r3, [r7, #56]	; 0x38
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	3314      	adds	r3, #20
 8002564:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002566:	623a      	str	r2, [r7, #32]
 8002568:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256a:	69f9      	ldr	r1, [r7, #28]
 800256c:	6a3a      	ldr	r2, [r7, #32]
 800256e:	e841 2300 	strex	r3, r2, [r1]
 8002572:	61bb      	str	r3, [r7, #24]
   return(result);
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1e5      	bne.n	8002546 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e00f      	b.n	80025b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4013      	ands	r3, r2
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	bf0c      	ite	eq
 80025a6:	2301      	moveq	r3, #1
 80025a8:	2300      	movne	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d09f      	beq.n	80024f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3740      	adds	r7, #64	; 0x40
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025c4:	b0c0      	sub	sp, #256	; 0x100
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025dc:	68d9      	ldr	r1, [r3, #12]
 80025de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	ea40 0301 	orr.w	r3, r0, r1
 80025e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	431a      	orrs	r2, r3
 8002600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002618:	f021 010c 	bic.w	r1, r1, #12
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002626:	430b      	orrs	r3, r1
 8002628:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800262a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263a:	6999      	ldr	r1, [r3, #24]
 800263c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	ea40 0301 	orr.w	r3, r0, r1
 8002646:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4b8f      	ldr	r3, [pc, #572]	; (800288c <UART_SetConfig+0x2cc>)
 8002650:	429a      	cmp	r2, r3
 8002652:	d005      	beq.n	8002660 <UART_SetConfig+0xa0>
 8002654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4b8d      	ldr	r3, [pc, #564]	; (8002890 <UART_SetConfig+0x2d0>)
 800265c:	429a      	cmp	r2, r3
 800265e:	d104      	bne.n	800266a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002660:	f7ff fb6c 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8002664:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002668:	e003      	b.n	8002672 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800266a:	f7ff fb53 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 800266e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800267c:	f040 810c 	bne.w	8002898 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002684:	2200      	movs	r2, #0
 8002686:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800268a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800268e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002692:	4622      	mov	r2, r4
 8002694:	462b      	mov	r3, r5
 8002696:	1891      	adds	r1, r2, r2
 8002698:	65b9      	str	r1, [r7, #88]	; 0x58
 800269a:	415b      	adcs	r3, r3
 800269c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800269e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026a2:	4621      	mov	r1, r4
 80026a4:	eb12 0801 	adds.w	r8, r2, r1
 80026a8:	4629      	mov	r1, r5
 80026aa:	eb43 0901 	adc.w	r9, r3, r1
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026c2:	4690      	mov	r8, r2
 80026c4:	4699      	mov	r9, r3
 80026c6:	4623      	mov	r3, r4
 80026c8:	eb18 0303 	adds.w	r3, r8, r3
 80026cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026d0:	462b      	mov	r3, r5
 80026d2:	eb49 0303 	adc.w	r3, r9, r3
 80026d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80026ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80026ee:	460b      	mov	r3, r1
 80026f0:	18db      	adds	r3, r3, r3
 80026f2:	653b      	str	r3, [r7, #80]	; 0x50
 80026f4:	4613      	mov	r3, r2
 80026f6:	eb42 0303 	adc.w	r3, r2, r3
 80026fa:	657b      	str	r3, [r7, #84]	; 0x54
 80026fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002700:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002704:	f7fd fdb4 	bl	8000270 <__aeabi_uldivmod>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4b61      	ldr	r3, [pc, #388]	; (8002894 <UART_SetConfig+0x2d4>)
 800270e:	fba3 2302 	umull	r2, r3, r3, r2
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	011c      	lsls	r4, r3, #4
 8002716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800271a:	2200      	movs	r2, #0
 800271c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002720:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002724:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002728:	4642      	mov	r2, r8
 800272a:	464b      	mov	r3, r9
 800272c:	1891      	adds	r1, r2, r2
 800272e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002730:	415b      	adcs	r3, r3
 8002732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002734:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002738:	4641      	mov	r1, r8
 800273a:	eb12 0a01 	adds.w	sl, r2, r1
 800273e:	4649      	mov	r1, r9
 8002740:	eb43 0b01 	adc.w	fp, r3, r1
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002750:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002754:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002758:	4692      	mov	sl, r2
 800275a:	469b      	mov	fp, r3
 800275c:	4643      	mov	r3, r8
 800275e:	eb1a 0303 	adds.w	r3, sl, r3
 8002762:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002766:	464b      	mov	r3, r9
 8002768:	eb4b 0303 	adc.w	r3, fp, r3
 800276c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800277c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002780:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002784:	460b      	mov	r3, r1
 8002786:	18db      	adds	r3, r3, r3
 8002788:	643b      	str	r3, [r7, #64]	; 0x40
 800278a:	4613      	mov	r3, r2
 800278c:	eb42 0303 	adc.w	r3, r2, r3
 8002790:	647b      	str	r3, [r7, #68]	; 0x44
 8002792:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002796:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800279a:	f7fd fd69 	bl	8000270 <__aeabi_uldivmod>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4611      	mov	r1, r2
 80027a4:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <UART_SetConfig+0x2d4>)
 80027a6:	fba3 2301 	umull	r2, r3, r3, r1
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	2264      	movs	r2, #100	; 0x64
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	1acb      	subs	r3, r1, r3
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027ba:	4b36      	ldr	r3, [pc, #216]	; (8002894 <UART_SetConfig+0x2d4>)
 80027bc:	fba3 2302 	umull	r2, r3, r3, r2
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027c8:	441c      	add	r4, r3
 80027ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027ce:	2200      	movs	r2, #0
 80027d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027dc:	4642      	mov	r2, r8
 80027de:	464b      	mov	r3, r9
 80027e0:	1891      	adds	r1, r2, r2
 80027e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80027e4:	415b      	adcs	r3, r3
 80027e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027ec:	4641      	mov	r1, r8
 80027ee:	1851      	adds	r1, r2, r1
 80027f0:	6339      	str	r1, [r7, #48]	; 0x30
 80027f2:	4649      	mov	r1, r9
 80027f4:	414b      	adcs	r3, r1
 80027f6:	637b      	str	r3, [r7, #52]	; 0x34
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002804:	4659      	mov	r1, fp
 8002806:	00cb      	lsls	r3, r1, #3
 8002808:	4651      	mov	r1, sl
 800280a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800280e:	4651      	mov	r1, sl
 8002810:	00ca      	lsls	r2, r1, #3
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	4603      	mov	r3, r0
 8002818:	4642      	mov	r2, r8
 800281a:	189b      	adds	r3, r3, r2
 800281c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002820:	464b      	mov	r3, r9
 8002822:	460a      	mov	r2, r1
 8002824:	eb42 0303 	adc.w	r3, r2, r3
 8002828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800282c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002838:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800283c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002840:	460b      	mov	r3, r1
 8002842:	18db      	adds	r3, r3, r3
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
 8002846:	4613      	mov	r3, r2
 8002848:	eb42 0303 	adc.w	r3, r2, r3
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800284e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002852:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002856:	f7fd fd0b 	bl	8000270 <__aeabi_uldivmod>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <UART_SetConfig+0x2d4>)
 8002860:	fba3 1302 	umull	r1, r3, r3, r2
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	2164      	movs	r1, #100	; 0x64
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	3332      	adds	r3, #50	; 0x32
 8002872:	4a08      	ldr	r2, [pc, #32]	; (8002894 <UART_SetConfig+0x2d4>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	f003 0207 	and.w	r2, r3, #7
 800287e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4422      	add	r2, r4
 8002886:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002888:	e106      	b.n	8002a98 <UART_SetConfig+0x4d8>
 800288a:	bf00      	nop
 800288c:	40011000 	.word	0x40011000
 8002890:	40011400 	.word	0x40011400
 8002894:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800289c:	2200      	movs	r2, #0
 800289e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80028aa:	4642      	mov	r2, r8
 80028ac:	464b      	mov	r3, r9
 80028ae:	1891      	adds	r1, r2, r2
 80028b0:	6239      	str	r1, [r7, #32]
 80028b2:	415b      	adcs	r3, r3
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028ba:	4641      	mov	r1, r8
 80028bc:	1854      	adds	r4, r2, r1
 80028be:	4649      	mov	r1, r9
 80028c0:	eb43 0501 	adc.w	r5, r3, r1
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	00eb      	lsls	r3, r5, #3
 80028ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028d2:	00e2      	lsls	r2, r4, #3
 80028d4:	4614      	mov	r4, r2
 80028d6:	461d      	mov	r5, r3
 80028d8:	4643      	mov	r3, r8
 80028da:	18e3      	adds	r3, r4, r3
 80028dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028e0:	464b      	mov	r3, r9
 80028e2:	eb45 0303 	adc.w	r3, r5, r3
 80028e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002906:	4629      	mov	r1, r5
 8002908:	008b      	lsls	r3, r1, #2
 800290a:	4621      	mov	r1, r4
 800290c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002910:	4621      	mov	r1, r4
 8002912:	008a      	lsls	r2, r1, #2
 8002914:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002918:	f7fd fcaa 	bl	8000270 <__aeabi_uldivmod>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4b60      	ldr	r3, [pc, #384]	; (8002aa4 <UART_SetConfig+0x4e4>)
 8002922:	fba3 2302 	umull	r2, r3, r3, r2
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	011c      	lsls	r4, r3, #4
 800292a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800292e:	2200      	movs	r2, #0
 8002930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002934:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002938:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800293c:	4642      	mov	r2, r8
 800293e:	464b      	mov	r3, r9
 8002940:	1891      	adds	r1, r2, r2
 8002942:	61b9      	str	r1, [r7, #24]
 8002944:	415b      	adcs	r3, r3
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800294c:	4641      	mov	r1, r8
 800294e:	1851      	adds	r1, r2, r1
 8002950:	6139      	str	r1, [r7, #16]
 8002952:	4649      	mov	r1, r9
 8002954:	414b      	adcs	r3, r1
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002964:	4659      	mov	r1, fp
 8002966:	00cb      	lsls	r3, r1, #3
 8002968:	4651      	mov	r1, sl
 800296a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800296e:	4651      	mov	r1, sl
 8002970:	00ca      	lsls	r2, r1, #3
 8002972:	4610      	mov	r0, r2
 8002974:	4619      	mov	r1, r3
 8002976:	4603      	mov	r3, r0
 8002978:	4642      	mov	r2, r8
 800297a:	189b      	adds	r3, r3, r2
 800297c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002980:	464b      	mov	r3, r9
 8002982:	460a      	mov	r2, r1
 8002984:	eb42 0303 	adc.w	r3, r2, r3
 8002988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800298c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	67bb      	str	r3, [r7, #120]	; 0x78
 8002996:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80029a4:	4649      	mov	r1, r9
 80029a6:	008b      	lsls	r3, r1, #2
 80029a8:	4641      	mov	r1, r8
 80029aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ae:	4641      	mov	r1, r8
 80029b0:	008a      	lsls	r2, r1, #2
 80029b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029b6:	f7fd fc5b 	bl	8000270 <__aeabi_uldivmod>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4611      	mov	r1, r2
 80029c0:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <UART_SetConfig+0x4e4>)
 80029c2:	fba3 2301 	umull	r2, r3, r3, r1
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2264      	movs	r2, #100	; 0x64
 80029ca:	fb02 f303 	mul.w	r3, r2, r3
 80029ce:	1acb      	subs	r3, r1, r3
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	3332      	adds	r3, #50	; 0x32
 80029d4:	4a33      	ldr	r2, [pc, #204]	; (8002aa4 <UART_SetConfig+0x4e4>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029e0:	441c      	add	r4, r3
 80029e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029e6:	2200      	movs	r2, #0
 80029e8:	673b      	str	r3, [r7, #112]	; 0x70
 80029ea:	677a      	str	r2, [r7, #116]	; 0x74
 80029ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80029f0:	4642      	mov	r2, r8
 80029f2:	464b      	mov	r3, r9
 80029f4:	1891      	adds	r1, r2, r2
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	415b      	adcs	r3, r3
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a00:	4641      	mov	r1, r8
 8002a02:	1851      	adds	r1, r2, r1
 8002a04:	6039      	str	r1, [r7, #0]
 8002a06:	4649      	mov	r1, r9
 8002a08:	414b      	adcs	r3, r1
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a18:	4659      	mov	r1, fp
 8002a1a:	00cb      	lsls	r3, r1, #3
 8002a1c:	4651      	mov	r1, sl
 8002a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a22:	4651      	mov	r1, sl
 8002a24:	00ca      	lsls	r2, r1, #3
 8002a26:	4610      	mov	r0, r2
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4642      	mov	r2, r8
 8002a2e:	189b      	adds	r3, r3, r2
 8002a30:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a32:	464b      	mov	r3, r9
 8002a34:	460a      	mov	r2, r1
 8002a36:	eb42 0303 	adc.w	r3, r2, r3
 8002a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	663b      	str	r3, [r7, #96]	; 0x60
 8002a46:	667a      	str	r2, [r7, #100]	; 0x64
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a54:	4649      	mov	r1, r9
 8002a56:	008b      	lsls	r3, r1, #2
 8002a58:	4641      	mov	r1, r8
 8002a5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a5e:	4641      	mov	r1, r8
 8002a60:	008a      	lsls	r2, r1, #2
 8002a62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a66:	f7fd fc03 	bl	8000270 <__aeabi_uldivmod>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <UART_SetConfig+0x4e4>)
 8002a70:	fba3 1302 	umull	r1, r3, r3, r2
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	2164      	movs	r1, #100	; 0x64
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	3332      	adds	r3, #50	; 0x32
 8002a82:	4a08      	ldr	r2, [pc, #32]	; (8002aa4 <UART_SetConfig+0x4e4>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	f003 020f 	and.w	r2, r3, #15
 8002a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4422      	add	r2, r4
 8002a96:	609a      	str	r2, [r3, #8]
}
 8002a98:	bf00      	nop
 8002a9a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa4:	51eb851f 	.word	0x51eb851f

08002aa8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aba:	2b84      	cmp	r3, #132	; 0x84
 8002abc:	d005      	beq.n	8002aca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002abe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3303      	adds	r3, #3
 8002ac8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002adc:	f000 ffb4 	bl	8003a48 <vTaskStartScheduler>
  
  return osOK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002ae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae8:	b089      	sub	sp, #36	; 0x24
 8002aea:	af04      	add	r7, sp, #16
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d020      	beq.n	8002b3a <osThreadCreate+0x54>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d01c      	beq.n	8002b3a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685c      	ldr	r4, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691e      	ldr	r6, [r3, #16]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff ffc8 	bl	8002aa8 <makeFreeRtosPriority>
 8002b18:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b22:	9202      	str	r2, [sp, #8]
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	9100      	str	r1, [sp, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	4632      	mov	r2, r6
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f000 fc9e 	bl	8003470 <xTaskCreateStatic>
 8002b34:	4603      	mov	r3, r0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	e01c      	b.n	8002b74 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685c      	ldr	r4, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b46:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff ffaa 	bl	8002aa8 <makeFreeRtosPriority>
 8002b54:	4602      	mov	r2, r0
 8002b56:	f107 030c 	add.w	r3, r7, #12
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	9200      	str	r2, [sp, #0]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	4632      	mov	r2, r6
 8002b62:	4629      	mov	r1, r5
 8002b64:	4620      	mov	r0, r4
 8002b66:	f000 fce0 	bl	800352a <xTaskCreate>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d001      	beq.n	8002b74 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e000      	b.n	8002b76 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002b74:	68fb      	ldr	r3, [r7, #12]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b7e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b084      	sub	sp, #16
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <osDelay+0x16>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	e000      	b.n	8002b96 <osDelay+0x18>
 8002b94:	2301      	movs	r3, #1
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 ff22 	bl	80039e0 <vTaskDelay>
  
  return osOK;
 8002b9c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f103 0208 	add.w	r2, r3, #8
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bbe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f103 0208 	add.w	r2, r3, #8
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f103 0208 	add.w	r2, r3, #8
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	601a      	str	r2, [r3, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c5e:	d103      	bne.n	8002c68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	e00c      	b.n	8002c82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	e002      	b.n	8002c76 <vListInsert+0x2e>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d2f6      	bcs.n	8002c70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	601a      	str	r2, [r3, #0]
}
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b085      	sub	sp, #20
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6892      	ldr	r2, [r2, #8]
 8002cd0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6852      	ldr	r2, [r2, #4]
 8002cda:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d103      	bne.n	8002cee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	1e5a      	subs	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d36:	bf00      	nop
 8002d38:	e7fe      	b.n	8002d38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d3a:	f001 fcdb 	bl	80046f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	68f9      	ldr	r1, [r7, #12]
 8002d48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	441a      	add	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	68f9      	ldr	r1, [r7, #12]
 8002d6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	441a      	add	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	22ff      	movs	r2, #255	; 0xff
 8002d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	22ff      	movs	r2, #255	; 0xff
 8002d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d114      	bne.n	8002dba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01a      	beq.n	8002dce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	3310      	adds	r3, #16
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f001 f8b5 	bl	8003f0c <xTaskRemoveFromEventList>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d012      	beq.n	8002dce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <xQueueGenericReset+0xcc>)
 8002daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	e009      	b.n	8002dce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	3310      	adds	r3, #16
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fef1 	bl	8002ba6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	3324      	adds	r3, #36	; 0x24
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff feec 	bl	8002ba6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002dce:	f001 fcc1 	bl	8004754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002dd2:	2301      	movs	r3, #1
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	e000ed04 	.word	0xe000ed04

08002de0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	; 0x28
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	4613      	mov	r3, r2
 8002dec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10a      	bne.n	8002e0a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	613b      	str	r3, [r7, #16]
}
 8002e06:	bf00      	nop
 8002e08:	e7fe      	b.n	8002e08 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	3348      	adds	r3, #72	; 0x48
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f001 fd4d 	bl	80048b8 <pvPortMalloc>
 8002e1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d011      	beq.n	8002e4a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	3348      	adds	r3, #72	; 0x48
 8002e2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e38:	79fa      	ldrb	r2, [r7, #7]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f805 	bl	8002e54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e4a:	69bb      	ldr	r3, [r7, #24]
	}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d103      	bne.n	8002e70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	e002      	b.n	8002e76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e82:	2101      	movs	r1, #1
 8002e84:	69b8      	ldr	r0, [r7, #24]
 8002e86:	f7ff ff43 	bl	8002d10 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08e      	sub	sp, #56	; 0x38
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10a      	bne.n	8002ec6 <xQueueGenericSend+0x32>
	__asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ec2:	bf00      	nop
 8002ec4:	e7fe      	b.n	8002ec4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d103      	bne.n	8002ed4 <xQueueGenericSend+0x40>
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <xQueueGenericSend+0x44>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <xQueueGenericSend+0x46>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10a      	bne.n	8002ef4 <xQueueGenericSend+0x60>
	__asm volatile
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ef0:	bf00      	nop
 8002ef2:	e7fe      	b.n	8002ef2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d103      	bne.n	8002f02 <xQueueGenericSend+0x6e>
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <xQueueGenericSend+0x72>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <xQueueGenericSend+0x74>
 8002f06:	2300      	movs	r3, #0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10a      	bne.n	8002f22 <xQueueGenericSend+0x8e>
	__asm volatile
 8002f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	623b      	str	r3, [r7, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	e7fe      	b.n	8002f20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f22:	f001 f9b3 	bl	800428c <xTaskGetSchedulerState>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <xQueueGenericSend+0x9e>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <xQueueGenericSend+0xa2>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <xQueueGenericSend+0xa4>
 8002f36:	2300      	movs	r3, #0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10a      	bne.n	8002f52 <xQueueGenericSend+0xbe>
	__asm volatile
 8002f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	61fb      	str	r3, [r7, #28]
}
 8002f4e:	bf00      	nop
 8002f50:	e7fe      	b.n	8002f50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f52:	f001 fbcf 	bl	80046f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d302      	bcc.n	8002f68 <xQueueGenericSend+0xd4>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d129      	bne.n	8002fbc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	68b9      	ldr	r1, [r7, #8]
 8002f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f6e:	f000 f96f 	bl	8003250 <prvCopyDataToQueue>
 8002f72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d010      	beq.n	8002f9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	3324      	adds	r3, #36	; 0x24
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 ffc3 	bl	8003f0c <xTaskRemoveFromEventList>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d013      	beq.n	8002fb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f8c:	4b3f      	ldr	r3, [pc, #252]	; (800308c <xQueueGenericSend+0x1f8>)
 8002f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	e00a      	b.n	8002fb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d007      	beq.n	8002fb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fa4:	4b39      	ldr	r3, [pc, #228]	; (800308c <xQueueGenericSend+0x1f8>)
 8002fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002fb4:	f001 fbce 	bl	8004754 <vPortExitCritical>
				return pdPASS;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e063      	b.n	8003084 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fc2:	f001 fbc7 	bl	8004754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e05c      	b.n	8003084 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d106      	bne.n	8002fde <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fd0:	f107 0314 	add.w	r3, r7, #20
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fffb 	bl	8003fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fde:	f001 fbb9 	bl	8004754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fe2:	f000 fd9b 	bl	8003b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fe6:	f001 fb85 	bl	80046f4 <vPortEnterCritical>
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ff0:	b25b      	sxtb	r3, r3
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ff6:	d103      	bne.n	8003000 <xQueueGenericSend+0x16c>
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003006:	b25b      	sxtb	r3, r3
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800300c:	d103      	bne.n	8003016 <xQueueGenericSend+0x182>
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003016:	f001 fb9d 	bl	8004754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800301a:	1d3a      	adds	r2, r7, #4
 800301c:	f107 0314 	add.w	r3, r7, #20
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f000 ffea 	bl	8003ffc <xTaskCheckForTimeOut>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d124      	bne.n	8003078 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800302e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003030:	f000 fa06 	bl	8003440 <prvIsQueueFull>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d018      	beq.n	800306c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	3310      	adds	r3, #16
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f000 ff3e 	bl	8003ec4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800304a:	f000 f991 	bl	8003370 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800304e:	f000 fd73 	bl	8003b38 <xTaskResumeAll>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	f47f af7c 	bne.w	8002f52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800305a:	4b0c      	ldr	r3, [pc, #48]	; (800308c <xQueueGenericSend+0x1f8>)
 800305c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	e772      	b.n	8002f52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800306c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800306e:	f000 f97f 	bl	8003370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003072:	f000 fd61 	bl	8003b38 <xTaskResumeAll>
 8003076:	e76c      	b.n	8002f52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800307a:	f000 f979 	bl	8003370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800307e:	f000 fd5b 	bl	8003b38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003082:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003084:	4618      	mov	r0, r3
 8003086:	3738      	adds	r7, #56	; 0x38
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	e000ed04 	.word	0xe000ed04

08003090 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08c      	sub	sp, #48	; 0x30
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800309c:	2300      	movs	r3, #0
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10a      	bne.n	80030c0 <xQueueReceive+0x30>
	__asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	623b      	str	r3, [r7, #32]
}
 80030bc:	bf00      	nop
 80030be:	e7fe      	b.n	80030be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <xQueueReceive+0x3e>
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <xQueueReceive+0x42>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <xQueueReceive+0x44>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10a      	bne.n	80030ee <xQueueReceive+0x5e>
	__asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	61fb      	str	r3, [r7, #28]
}
 80030ea:	bf00      	nop
 80030ec:	e7fe      	b.n	80030ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030ee:	f001 f8cd 	bl	800428c <xTaskGetSchedulerState>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d102      	bne.n	80030fe <xQueueReceive+0x6e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <xQueueReceive+0x72>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <xQueueReceive+0x74>
 8003102:	2300      	movs	r3, #0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10a      	bne.n	800311e <xQueueReceive+0x8e>
	__asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	61bb      	str	r3, [r7, #24]
}
 800311a:	bf00      	nop
 800311c:	e7fe      	b.n	800311c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800311e:	f001 fae9 	bl	80046f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01f      	beq.n	800316e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003132:	f000 f8f7 	bl	8003324 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	1e5a      	subs	r2, r3, #1
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00f      	beq.n	8003166 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	3310      	adds	r3, #16
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fede 	bl	8003f0c <xTaskRemoveFromEventList>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003156:	4b3d      	ldr	r3, [pc, #244]	; (800324c <xQueueReceive+0x1bc>)
 8003158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003166:	f001 faf5 	bl	8004754 <vPortExitCritical>
				return pdPASS;
 800316a:	2301      	movs	r3, #1
 800316c:	e069      	b.n	8003242 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d103      	bne.n	800317c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003174:	f001 faee 	bl	8004754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003178:	2300      	movs	r3, #0
 800317a:	e062      	b.n	8003242 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003182:	f107 0310 	add.w	r3, r7, #16
 8003186:	4618      	mov	r0, r3
 8003188:	f000 ff22 	bl	8003fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800318c:	2301      	movs	r3, #1
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003190:	f001 fae0 	bl	8004754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003194:	f000 fcc2 	bl	8003b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003198:	f001 faac 	bl	80046f4 <vPortEnterCritical>
 800319c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031a2:	b25b      	sxtb	r3, r3
 80031a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031a8:	d103      	bne.n	80031b2 <xQueueReceive+0x122>
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031b8:	b25b      	sxtb	r3, r3
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031be:	d103      	bne.n	80031c8 <xQueueReceive+0x138>
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031c8:	f001 fac4 	bl	8004754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031cc:	1d3a      	adds	r2, r7, #4
 80031ce:	f107 0310 	add.w	r3, r7, #16
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 ff11 	bl	8003ffc <xTaskCheckForTimeOut>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d123      	bne.n	8003228 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031e2:	f000 f917 	bl	8003414 <prvIsQueueEmpty>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d017      	beq.n	800321c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ee:	3324      	adds	r3, #36	; 0x24
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	4611      	mov	r1, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fe65 	bl	8003ec4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031fc:	f000 f8b8 	bl	8003370 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003200:	f000 fc9a 	bl	8003b38 <xTaskResumeAll>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d189      	bne.n	800311e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <xQueueReceive+0x1bc>)
 800320c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	e780      	b.n	800311e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800321c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800321e:	f000 f8a7 	bl	8003370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003222:	f000 fc89 	bl	8003b38 <xTaskResumeAll>
 8003226:	e77a      	b.n	800311e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800322a:	f000 f8a1 	bl	8003370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800322e:	f000 fc83 	bl	8003b38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003234:	f000 f8ee 	bl	8003414 <prvIsQueueEmpty>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	f43f af6f 	beq.w	800311e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003240:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003242:	4618      	mov	r0, r3
 8003244:	3730      	adds	r7, #48	; 0x30
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	e000ed04 	.word	0xe000ed04

08003250 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003264:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10d      	bne.n	800328a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d14d      	bne.n	8003312 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	4618      	mov	r0, r3
 800327c:	f001 f824 	bl	80042c8 <xTaskPriorityDisinherit>
 8003280:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	e043      	b.n	8003312 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d119      	bne.n	80032c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6858      	ldr	r0, [r3, #4]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	461a      	mov	r2, r3
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	f001 ff2b 	bl	80050f6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	441a      	add	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d32b      	bcc.n	8003312 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	e026      	b.n	8003312 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	68d8      	ldr	r0, [r3, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	461a      	mov	r2, r3
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	f001 ff11 	bl	80050f6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	425b      	negs	r3, r3
 80032de:	441a      	add	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d207      	bcs.n	8003300 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	425b      	negs	r3, r3
 80032fa:	441a      	add	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d105      	bne.n	8003312 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	3b01      	subs	r3, #1
 8003310:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800331a:	697b      	ldr	r3, [r7, #20]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d018      	beq.n	8003368 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	441a      	add	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	429a      	cmp	r2, r3
 800334e:	d303      	bcc.n	8003358 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68d9      	ldr	r1, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	461a      	mov	r2, r3
 8003362:	6838      	ldr	r0, [r7, #0]
 8003364:	f001 fec7 	bl	80050f6 <memcpy>
	}
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003378:	f001 f9bc 	bl	80046f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003382:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003384:	e011      	b.n	80033aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	2b00      	cmp	r3, #0
 800338c:	d012      	beq.n	80033b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3324      	adds	r3, #36	; 0x24
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fdba 	bl	8003f0c <xTaskRemoveFromEventList>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800339e:	f000 fe8f 	bl	80040c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	dce9      	bgt.n	8003386 <prvUnlockQueue+0x16>
 80033b2:	e000      	b.n	80033b6 <prvUnlockQueue+0x46>
					break;
 80033b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	22ff      	movs	r2, #255	; 0xff
 80033ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80033be:	f001 f9c9 	bl	8004754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033c2:	f001 f997 	bl	80046f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033ce:	e011      	b.n	80033f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d012      	beq.n	80033fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3310      	adds	r3, #16
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fd95 	bl	8003f0c <xTaskRemoveFromEventList>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033e8:	f000 fe6a 	bl	80040c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033ec:	7bbb      	ldrb	r3, [r7, #14]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	dce9      	bgt.n	80033d0 <prvUnlockQueue+0x60>
 80033fc:	e000      	b.n	8003400 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	22ff      	movs	r2, #255	; 0xff
 8003404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003408:	f001 f9a4 	bl	8004754 <vPortExitCritical>
}
 800340c:	bf00      	nop
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800341c:	f001 f96a 	bl	80046f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	2b00      	cmp	r3, #0
 8003426:	d102      	bne.n	800342e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003428:	2301      	movs	r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e001      	b.n	8003432 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003432:	f001 f98f 	bl	8004754 <vPortExitCritical>

	return xReturn;
 8003436:	68fb      	ldr	r3, [r7, #12]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003448:	f001 f954 	bl	80046f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003454:	429a      	cmp	r2, r3
 8003456:	d102      	bne.n	800345e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003458:	2301      	movs	r3, #1
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	e001      	b.n	8003462 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003462:	f001 f977 	bl	8004754 <vPortExitCritical>

	return xReturn;
 8003466:	68fb      	ldr	r3, [r7, #12]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08e      	sub	sp, #56	; 0x38
 8003474:	af04      	add	r7, sp, #16
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800347e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10a      	bne.n	800349a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	623b      	str	r3, [r7, #32]
}
 8003496:	bf00      	nop
 8003498:	e7fe      	b.n	8003498 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800349a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	61fb      	str	r3, [r7, #28]
}
 80034b2:	bf00      	nop
 80034b4:	e7fe      	b.n	80034b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034b6:	23a0      	movs	r3, #160	; 0xa0
 80034b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	2ba0      	cmp	r3, #160	; 0xa0
 80034be:	d00a      	beq.n	80034d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	61bb      	str	r3, [r7, #24]
}
 80034d2:	bf00      	nop
 80034d4:	e7fe      	b.n	80034d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80034d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80034d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01e      	beq.n	800351c <xTaskCreateStatic+0xac>
 80034de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01b      	beq.n	800351c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	2202      	movs	r2, #2
 80034f2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034f6:	2300      	movs	r3, #0
 80034f8:	9303      	str	r3, [sp, #12]
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	9302      	str	r3, [sp, #8]
 80034fe:	f107 0314 	add.w	r3, r7, #20
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f850 	bl	80035b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003516:	f000 f8eb 	bl	80036f0 <prvAddNewTaskToReadyList>
 800351a:	e001      	b.n	8003520 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003520:	697b      	ldr	r3, [r7, #20]
	}
 8003522:	4618      	mov	r0, r3
 8003524:	3728      	adds	r7, #40	; 0x28
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800352a:	b580      	push	{r7, lr}
 800352c:	b08c      	sub	sp, #48	; 0x30
 800352e:	af04      	add	r7, sp, #16
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	4613      	mov	r3, r2
 8003538:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4618      	mov	r0, r3
 8003540:	f001 f9ba 	bl	80048b8 <pvPortMalloc>
 8003544:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00e      	beq.n	800356a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800354c:	20a0      	movs	r0, #160	; 0xa0
 800354e:	f001 f9b3 	bl	80048b8 <pvPortMalloc>
 8003552:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
 8003560:	e005      	b.n	800356e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003562:	6978      	ldr	r0, [r7, #20]
 8003564:	f001 fa74 	bl	8004a50 <vPortFree>
 8003568:	e001      	b.n	800356e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d017      	beq.n	80035a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800357c:	88fa      	ldrh	r2, [r7, #6]
 800357e:	2300      	movs	r3, #0
 8003580:	9303      	str	r3, [sp, #12]
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	9302      	str	r3, [sp, #8]
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f80e 	bl	80035b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003598:	69f8      	ldr	r0, [r7, #28]
 800359a:	f000 f8a9 	bl	80036f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800359e:	2301      	movs	r3, #1
 80035a0:	61bb      	str	r3, [r7, #24]
 80035a2:	e002      	b.n	80035aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035aa:	69bb      	ldr	r3, [r7, #24]
	}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3720      	adds	r7, #32
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035cc:	3b01      	subs	r3, #1
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	f023 0307 	bic.w	r3, r3, #7
 80035da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <prvInitialiseNewTask+0x48>
	__asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	617b      	str	r3, [r7, #20]
}
 80035f8:	bf00      	nop
 80035fa:	e7fe      	b.n	80035fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d01f      	beq.n	8003642 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	e012      	b.n	800362e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	4413      	add	r3, r2
 800360e:	7819      	ldrb	r1, [r3, #0]
 8003610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	4413      	add	r3, r2
 8003616:	3334      	adds	r3, #52	; 0x34
 8003618:	460a      	mov	r2, r1
 800361a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	4413      	add	r3, r2
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d006      	beq.n	8003636 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	3301      	adds	r3, #1
 800362c:	61fb      	str	r3, [r7, #28]
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	2b0f      	cmp	r3, #15
 8003632:	d9e9      	bls.n	8003608 <prvInitialiseNewTask+0x54>
 8003634:	e000      	b.n	8003638 <prvInitialiseNewTask+0x84>
			{
				break;
 8003636:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003640:	e003      	b.n	800364a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364c:	2b06      	cmp	r3, #6
 800364e:	d901      	bls.n	8003654 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003650:	2306      	movs	r3, #6
 8003652:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003658:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800365e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003662:	2200      	movs	r2, #0
 8003664:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	3304      	adds	r3, #4
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fabb 	bl	8002be6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003672:	3318      	adds	r3, #24
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fab6 	bl	8002be6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800367e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003682:	f1c3 0207 	rsb	r2, r3, #7
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800368e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003692:	2200      	movs	r2, #0
 8003694:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	2200      	movs	r2, #0
 800369c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	334c      	adds	r3, #76	; 0x4c
 80036a4:	224c      	movs	r2, #76	; 0x4c
 80036a6:	2100      	movs	r1, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f001 fc52 	bl	8004f52 <memset>
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	4a0c      	ldr	r2, [pc, #48]	; (80036e4 <prvInitialiseNewTask+0x130>)
 80036b2:	651a      	str	r2, [r3, #80]	; 0x50
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	4a0c      	ldr	r2, [pc, #48]	; (80036e8 <prvInitialiseNewTask+0x134>)
 80036b8:	655a      	str	r2, [r3, #84]	; 0x54
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	4a0b      	ldr	r2, [pc, #44]	; (80036ec <prvInitialiseNewTask+0x138>)
 80036be:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	68f9      	ldr	r1, [r7, #12]
 80036c4:	69b8      	ldr	r0, [r7, #24]
 80036c6:	f000 feeb 	bl	80044a0 <pxPortInitialiseStack>
 80036ca:	4602      	mov	r2, r0
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80036d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036dc:	bf00      	nop
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20004118 	.word	0x20004118
 80036e8:	20004180 	.word	0x20004180
 80036ec:	200041e8 	.word	0x200041e8

080036f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036f8:	f000 fffc 	bl	80046f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036fc:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <prvAddNewTaskToReadyList+0xb8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3301      	adds	r3, #1
 8003702:	4a29      	ldr	r2, [pc, #164]	; (80037a8 <prvAddNewTaskToReadyList+0xb8>)
 8003704:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003706:	4b29      	ldr	r3, [pc, #164]	; (80037ac <prvAddNewTaskToReadyList+0xbc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800370e:	4a27      	ldr	r2, [pc, #156]	; (80037ac <prvAddNewTaskToReadyList+0xbc>)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003714:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <prvAddNewTaskToReadyList+0xb8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d110      	bne.n	800373e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800371c:	f000 fcf4 	bl	8004108 <prvInitialiseTaskLists>
 8003720:	e00d      	b.n	800373e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003722:	4b23      	ldr	r3, [pc, #140]	; (80037b0 <prvAddNewTaskToReadyList+0xc0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800372a:	4b20      	ldr	r3, [pc, #128]	; (80037ac <prvAddNewTaskToReadyList+0xbc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	429a      	cmp	r2, r3
 8003736:	d802      	bhi.n	800373e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003738:	4a1c      	ldr	r2, [pc, #112]	; (80037ac <prvAddNewTaskToReadyList+0xbc>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800373e:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <prvAddNewTaskToReadyList+0xc4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3301      	adds	r3, #1
 8003744:	4a1b      	ldr	r2, [pc, #108]	; (80037b4 <prvAddNewTaskToReadyList+0xc4>)
 8003746:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	2201      	movs	r2, #1
 800374e:	409a      	lsls	r2, r3
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <prvAddNewTaskToReadyList+0xc8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4313      	orrs	r3, r2
 8003756:	4a18      	ldr	r2, [pc, #96]	; (80037b8 <prvAddNewTaskToReadyList+0xc8>)
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4a15      	ldr	r2, [pc, #84]	; (80037bc <prvAddNewTaskToReadyList+0xcc>)
 8003768:	441a      	add	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3304      	adds	r3, #4
 800376e:	4619      	mov	r1, r3
 8003770:	4610      	mov	r0, r2
 8003772:	f7ff fa45 	bl	8002c00 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003776:	f000 ffed 	bl	8004754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800377a:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <prvAddNewTaskToReadyList+0xc0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00e      	beq.n	80037a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003782:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <prvAddNewTaskToReadyList+0xbc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	429a      	cmp	r2, r3
 800378e:	d207      	bcs.n	80037a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <prvAddNewTaskToReadyList+0xd0>)
 8003792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	200004c4 	.word	0x200004c4
 80037ac:	200003c4 	.word	0x200003c4
 80037b0:	200004d0 	.word	0x200004d0
 80037b4:	200004e0 	.word	0x200004e0
 80037b8:	200004cc 	.word	0x200004cc
 80037bc:	200003c8 	.word	0x200003c8
 80037c0:	e000ed04 	.word	0xe000ed04

080037c4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80037cc:	f000 ff92 	bl	80046f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <vTaskDelete+0x18>
 80037d6:	4b39      	ldr	r3, [pc, #228]	; (80038bc <vTaskDelete+0xf8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	e000      	b.n	80037de <vTaskDelete+0x1a>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	3304      	adds	r3, #4
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff fa68 	bl	8002cba <uxListRemove>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d115      	bne.n	800381c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f4:	4932      	ldr	r1, [pc, #200]	; (80038c0 <vTaskDelete+0xfc>)
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10a      	bne.n	800381c <vTaskDelete+0x58>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	2201      	movs	r2, #1
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43da      	mvns	r2, r3
 8003812:	4b2c      	ldr	r3, [pc, #176]	; (80038c4 <vTaskDelete+0x100>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4013      	ands	r3, r2
 8003818:	4a2a      	ldr	r2, [pc, #168]	; (80038c4 <vTaskDelete+0x100>)
 800381a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	3318      	adds	r3, #24
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff fa46 	bl	8002cba <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800382e:	4b26      	ldr	r3, [pc, #152]	; (80038c8 <vTaskDelete+0x104>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3301      	adds	r3, #1
 8003834:	4a24      	ldr	r2, [pc, #144]	; (80038c8 <vTaskDelete+0x104>)
 8003836:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003838:	4b20      	ldr	r3, [pc, #128]	; (80038bc <vTaskDelete+0xf8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	429a      	cmp	r2, r3
 8003840:	d10b      	bne.n	800385a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3304      	adds	r3, #4
 8003846:	4619      	mov	r1, r3
 8003848:	4820      	ldr	r0, [pc, #128]	; (80038cc <vTaskDelete+0x108>)
 800384a:	f7ff f9d9 	bl	8002c00 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800384e:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <vTaskDelete+0x10c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3301      	adds	r3, #1
 8003854:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <vTaskDelete+0x10c>)
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	e009      	b.n	800386e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800385a:	4b1e      	ldr	r3, [pc, #120]	; (80038d4 <vTaskDelete+0x110>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3b01      	subs	r3, #1
 8003860:	4a1c      	ldr	r2, [pc, #112]	; (80038d4 <vTaskDelete+0x110>)
 8003862:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fcbd 	bl	80041e4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800386a:	f000 fcef 	bl	800424c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800386e:	f000 ff71 	bl	8004754 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003872:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <vTaskDelete+0x114>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d01b      	beq.n	80038b2 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <vTaskDelete+0xf8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	429a      	cmp	r2, r3
 8003882:	d116      	bne.n	80038b2 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003884:	4b15      	ldr	r3, [pc, #84]	; (80038dc <vTaskDelete+0x118>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <vTaskDelete+0xde>
	__asm volatile
 800388c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003890:	f383 8811 	msr	BASEPRI, r3
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	60bb      	str	r3, [r7, #8]
}
 800389e:	bf00      	nop
 80038a0:	e7fe      	b.n	80038a0 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80038a2:	4b0f      	ldr	r3, [pc, #60]	; (80038e0 <vTaskDelete+0x11c>)
 80038a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038b2:	bf00      	nop
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	200003c4 	.word	0x200003c4
 80038c0:	200003c8 	.word	0x200003c8
 80038c4:	200004cc 	.word	0x200004cc
 80038c8:	200004e0 	.word	0x200004e0
 80038cc:	20000498 	.word	0x20000498
 80038d0:	200004ac 	.word	0x200004ac
 80038d4:	200004c4 	.word	0x200004c4
 80038d8:	200004d0 	.word	0x200004d0
 80038dc:	200004ec 	.word	0x200004ec
 80038e0:	e000ed04 	.word	0xe000ed04

080038e4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08a      	sub	sp, #40	; 0x28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <vTaskDelayUntil+0x2a>
	__asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	617b      	str	r3, [r7, #20]
}
 800390a:	bf00      	nop
 800390c:	e7fe      	b.n	800390c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10a      	bne.n	800392a <vTaskDelayUntil+0x46>
	__asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	613b      	str	r3, [r7, #16]
}
 8003926:	bf00      	nop
 8003928:	e7fe      	b.n	8003928 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800392a:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <vTaskDelayUntil+0xf0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <vTaskDelayUntil+0x64>
	__asm volatile
 8003932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	60fb      	str	r3, [r7, #12]
}
 8003944:	bf00      	nop
 8003946:	e7fe      	b.n	8003946 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8003948:	f000 f8e8 	bl	8003b1c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800394c:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <vTaskDelayUntil+0xf4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	4413      	add	r3, r2
 800395a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6a3a      	ldr	r2, [r7, #32]
 8003962:	429a      	cmp	r2, r3
 8003964:	d20b      	bcs.n	800397e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	429a      	cmp	r2, r3
 800396e:	d211      	bcs.n	8003994 <vTaskDelayUntil+0xb0>
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	429a      	cmp	r2, r3
 8003976:	d90d      	bls.n	8003994 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003978:	2301      	movs	r3, #1
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
 800397c:	e00a      	b.n	8003994 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	429a      	cmp	r2, r3
 8003986:	d303      	bcc.n	8003990 <vTaskDelayUntil+0xac>
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	429a      	cmp	r2, r3
 800398e:	d901      	bls.n	8003994 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003990:	2301      	movs	r3, #1
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	2b00      	cmp	r3, #0
 800399e:	d006      	beq.n	80039ae <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80039a0:	69fa      	ldr	r2, [r7, #28]
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2100      	movs	r1, #0
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 fd13 	bl	80043d4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80039ae:	f000 f8c3 	bl	8003b38 <xTaskResumeAll>
 80039b2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d107      	bne.n	80039ca <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <vTaskDelayUntil+0xf8>)
 80039bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039ca:	bf00      	nop
 80039cc:	3728      	adds	r7, #40	; 0x28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	200004ec 	.word	0x200004ec
 80039d8:	200004c8 	.word	0x200004c8
 80039dc:	e000ed04 	.word	0xe000ed04

080039e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d017      	beq.n	8003a22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039f2:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <vTaskDelay+0x60>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <vTaskDelay+0x30>
	__asm volatile
 80039fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	60bb      	str	r3, [r7, #8]
}
 8003a0c:	bf00      	nop
 8003a0e:	e7fe      	b.n	8003a0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a10:	f000 f884 	bl	8003b1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a14:	2100      	movs	r1, #0
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fcdc 	bl	80043d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a1c:	f000 f88c 	bl	8003b38 <xTaskResumeAll>
 8003a20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d107      	bne.n	8003a38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <vTaskDelay+0x64>)
 8003a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	200004ec 	.word	0x200004ec
 8003a44:	e000ed04 	.word	0xe000ed04

08003a48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	; 0x28
 8003a4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a56:	463a      	mov	r2, r7
 8003a58:	1d39      	adds	r1, r7, #4
 8003a5a:	f107 0308 	add.w	r3, r7, #8
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fc fd84 	bl	800056c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a64:	6839      	ldr	r1, [r7, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	9202      	str	r2, [sp, #8]
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	2300      	movs	r3, #0
 8003a74:	460a      	mov	r2, r1
 8003a76:	4921      	ldr	r1, [pc, #132]	; (8003afc <vTaskStartScheduler+0xb4>)
 8003a78:	4821      	ldr	r0, [pc, #132]	; (8003b00 <vTaskStartScheduler+0xb8>)
 8003a7a:	f7ff fcf9 	bl	8003470 <xTaskCreateStatic>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4a20      	ldr	r2, [pc, #128]	; (8003b04 <vTaskStartScheduler+0xbc>)
 8003a82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a84:	4b1f      	ldr	r3, [pc, #124]	; (8003b04 <vTaskStartScheduler+0xbc>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e001      	b.n	8003a96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d11b      	bne.n	8003ad4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	613b      	str	r3, [r7, #16]
}
 8003aae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ab0:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <vTaskStartScheduler+0xc0>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	334c      	adds	r3, #76	; 0x4c
 8003ab6:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <vTaskStartScheduler+0xc4>)
 8003ab8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <vTaskStartScheduler+0xc8>)
 8003abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ac0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ac2:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <vTaskStartScheduler+0xcc>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ac8:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <vTaskStartScheduler+0xd0>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ace:	f000 fd6f 	bl	80045b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ad2:	e00e      	b.n	8003af2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ada:	d10a      	bne.n	8003af2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	60fb      	str	r3, [r7, #12]
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <vTaskStartScheduler+0xa8>
}
 8003af2:	bf00      	nop
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	08006130 	.word	0x08006130
 8003b00:	080040d9 	.word	0x080040d9
 8003b04:	200004e8 	.word	0x200004e8
 8003b08:	200003c4 	.word	0x200003c4
 8003b0c:	20000068 	.word	0x20000068
 8003b10:	200004e4 	.word	0x200004e4
 8003b14:	200004d0 	.word	0x200004d0
 8003b18:	200004c8 	.word	0x200004c8

08003b1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b20:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <vTaskSuspendAll+0x18>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3301      	adds	r3, #1
 8003b26:	4a03      	ldr	r2, [pc, #12]	; (8003b34 <vTaskSuspendAll+0x18>)
 8003b28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b2a:	bf00      	nop
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	200004ec 	.word	0x200004ec

08003b38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b46:	4b41      	ldr	r3, [pc, #260]	; (8003c4c <xTaskResumeAll+0x114>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	603b      	str	r3, [r7, #0]
}
 8003b60:	bf00      	nop
 8003b62:	e7fe      	b.n	8003b62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b64:	f000 fdc6 	bl	80046f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b68:	4b38      	ldr	r3, [pc, #224]	; (8003c4c <xTaskResumeAll+0x114>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	4a37      	ldr	r2, [pc, #220]	; (8003c4c <xTaskResumeAll+0x114>)
 8003b70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b72:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <xTaskResumeAll+0x114>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d161      	bne.n	8003c3e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b7a:	4b35      	ldr	r3, [pc, #212]	; (8003c50 <xTaskResumeAll+0x118>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d05d      	beq.n	8003c3e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b82:	e02e      	b.n	8003be2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b84:	4b33      	ldr	r3, [pc, #204]	; (8003c54 <xTaskResumeAll+0x11c>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3318      	adds	r3, #24
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff f892 	bl	8002cba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff f88d 	bl	8002cba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <xTaskResumeAll+0x120>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	4a2a      	ldr	r2, [pc, #168]	; (8003c58 <xTaskResumeAll+0x120>)
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <xTaskResumeAll+0x124>)
 8003bc0:	441a      	add	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4610      	mov	r0, r2
 8003bca:	f7ff f819 	bl	8002c00 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd2:	4b23      	ldr	r3, [pc, #140]	; (8003c60 <xTaskResumeAll+0x128>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d302      	bcc.n	8003be2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003bdc:	4b21      	ldr	r3, [pc, #132]	; (8003c64 <xTaskResumeAll+0x12c>)
 8003bde:	2201      	movs	r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003be2:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <xTaskResumeAll+0x11c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1cc      	bne.n	8003b84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003bf0:	f000 fb2c 	bl	800424c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bf4:	4b1c      	ldr	r3, [pc, #112]	; (8003c68 <xTaskResumeAll+0x130>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d010      	beq.n	8003c22 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c00:	f000 f846 	bl	8003c90 <xTaskIncrementTick>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003c0a:	4b16      	ldr	r3, [pc, #88]	; (8003c64 <xTaskResumeAll+0x12c>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f1      	bne.n	8003c00 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003c1c:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <xTaskResumeAll+0x130>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <xTaskResumeAll+0x12c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c2e:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <xTaskResumeAll+0x134>)
 8003c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c3e:	f000 fd89 	bl	8004754 <vPortExitCritical>

	return xAlreadyYielded;
 8003c42:	68bb      	ldr	r3, [r7, #8]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	200004ec 	.word	0x200004ec
 8003c50:	200004c4 	.word	0x200004c4
 8003c54:	20000484 	.word	0x20000484
 8003c58:	200004cc 	.word	0x200004cc
 8003c5c:	200003c8 	.word	0x200003c8
 8003c60:	200003c4 	.word	0x200003c4
 8003c64:	200004d8 	.word	0x200004d8
 8003c68:	200004d4 	.word	0x200004d4
 8003c6c:	e000ed04 	.word	0xe000ed04

08003c70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <xTaskGetTickCount+0x1c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c7c:	687b      	ldr	r3, [r7, #4]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	200004c8 	.word	0x200004c8

08003c90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c9a:	4b4e      	ldr	r3, [pc, #312]	; (8003dd4 <xTaskIncrementTick+0x144>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f040 808e 	bne.w	8003dc0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ca4:	4b4c      	ldr	r3, [pc, #304]	; (8003dd8 <xTaskIncrementTick+0x148>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003cac:	4a4a      	ldr	r2, [pc, #296]	; (8003dd8 <xTaskIncrementTick+0x148>)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d120      	bne.n	8003cfa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003cb8:	4b48      	ldr	r3, [pc, #288]	; (8003ddc <xTaskIncrementTick+0x14c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	603b      	str	r3, [r7, #0]
}
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <xTaskIncrementTick+0x46>
 8003cd8:	4b40      	ldr	r3, [pc, #256]	; (8003ddc <xTaskIncrementTick+0x14c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	4b40      	ldr	r3, [pc, #256]	; (8003de0 <xTaskIncrementTick+0x150>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a3e      	ldr	r2, [pc, #248]	; (8003ddc <xTaskIncrementTick+0x14c>)
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	4a3e      	ldr	r2, [pc, #248]	; (8003de0 <xTaskIncrementTick+0x150>)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	4b3d      	ldr	r3, [pc, #244]	; (8003de4 <xTaskIncrementTick+0x154>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	4a3c      	ldr	r2, [pc, #240]	; (8003de4 <xTaskIncrementTick+0x154>)
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	f000 faa9 	bl	800424c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cfa:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <xTaskIncrementTick+0x158>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d348      	bcc.n	8003d96 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d04:	4b35      	ldr	r3, [pc, #212]	; (8003ddc <xTaskIncrementTick+0x14c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d104      	bne.n	8003d18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d0e:	4b36      	ldr	r3, [pc, #216]	; (8003de8 <xTaskIncrementTick+0x158>)
 8003d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d14:	601a      	str	r2, [r3, #0]
					break;
 8003d16:	e03e      	b.n	8003d96 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d18:	4b30      	ldr	r3, [pc, #192]	; (8003ddc <xTaskIncrementTick+0x14c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d203      	bcs.n	8003d38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d30:	4a2d      	ldr	r2, [pc, #180]	; (8003de8 <xTaskIncrementTick+0x158>)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d36:	e02e      	b.n	8003d96 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fe ffbc 	bl	8002cba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d004      	beq.n	8003d54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	3318      	adds	r3, #24
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe ffb3 	bl	8002cba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	2201      	movs	r2, #1
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	4b23      	ldr	r3, [pc, #140]	; (8003dec <xTaskIncrementTick+0x15c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	4a22      	ldr	r2, [pc, #136]	; (8003dec <xTaskIncrementTick+0x15c>)
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4a1f      	ldr	r2, [pc, #124]	; (8003df0 <xTaskIncrementTick+0x160>)
 8003d74:	441a      	add	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	f7fe ff3f 	bl	8002c00 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d86:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <xTaskIncrementTick+0x164>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d3b9      	bcc.n	8003d04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d90:	2301      	movs	r3, #1
 8003d92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d94:	e7b6      	b.n	8003d04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d96:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <xTaskIncrementTick+0x164>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	4914      	ldr	r1, [pc, #80]	; (8003df0 <xTaskIncrementTick+0x160>)
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d901      	bls.n	8003db2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003dae:	2301      	movs	r3, #1
 8003db0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003db2:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <xTaskIncrementTick+0x168>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	e004      	b.n	8003dca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003dc0:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <xTaskIncrementTick+0x16c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	4a0d      	ldr	r2, [pc, #52]	; (8003dfc <xTaskIncrementTick+0x16c>)
 8003dc8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003dca:	697b      	ldr	r3, [r7, #20]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	200004ec 	.word	0x200004ec
 8003dd8:	200004c8 	.word	0x200004c8
 8003ddc:	2000047c 	.word	0x2000047c
 8003de0:	20000480 	.word	0x20000480
 8003de4:	200004dc 	.word	0x200004dc
 8003de8:	200004e4 	.word	0x200004e4
 8003dec:	200004cc 	.word	0x200004cc
 8003df0:	200003c8 	.word	0x200003c8
 8003df4:	200003c4 	.word	0x200003c4
 8003df8:	200004d8 	.word	0x200004d8
 8003dfc:	200004d4 	.word	0x200004d4

08003e00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e06:	4b29      	ldr	r3, [pc, #164]	; (8003eac <vTaskSwitchContext+0xac>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e0e:	4b28      	ldr	r3, [pc, #160]	; (8003eb0 <vTaskSwitchContext+0xb0>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e14:	e044      	b.n	8003ea0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003e16:	4b26      	ldr	r3, [pc, #152]	; (8003eb0 <vTaskSwitchContext+0xb0>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e1c:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <vTaskSwitchContext+0xb4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	fab3 f383 	clz	r3, r3
 8003e28:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003e2a:	7afb      	ldrb	r3, [r7, #11]
 8003e2c:	f1c3 031f 	rsb	r3, r3, #31
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	4921      	ldr	r1, [pc, #132]	; (8003eb8 <vTaskSwitchContext+0xb8>)
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	607b      	str	r3, [r7, #4]
}
 8003e58:	bf00      	nop
 8003e5a:	e7fe      	b.n	8003e5a <vTaskSwitchContext+0x5a>
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4a14      	ldr	r2, [pc, #80]	; (8003eb8 <vTaskSwitchContext+0xb8>)
 8003e68:	4413      	add	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	3308      	adds	r3, #8
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d104      	bne.n	8003e8c <vTaskSwitchContext+0x8c>
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	4a0a      	ldr	r2, [pc, #40]	; (8003ebc <vTaskSwitchContext+0xbc>)
 8003e94:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e96:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <vTaskSwitchContext+0xbc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	334c      	adds	r3, #76	; 0x4c
 8003e9c:	4a08      	ldr	r2, [pc, #32]	; (8003ec0 <vTaskSwitchContext+0xc0>)
 8003e9e:	6013      	str	r3, [r2, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	200004ec 	.word	0x200004ec
 8003eb0:	200004d8 	.word	0x200004d8
 8003eb4:	200004cc 	.word	0x200004cc
 8003eb8:	200003c8 	.word	0x200003c8
 8003ebc:	200003c4 	.word	0x200003c4
 8003ec0:	20000068 	.word	0x20000068

08003ec4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	60fb      	str	r3, [r7, #12]
}
 8003ee6:	bf00      	nop
 8003ee8:	e7fe      	b.n	8003ee8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <vTaskPlaceOnEventList+0x44>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3318      	adds	r3, #24
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fe fea8 	bl	8002c48 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ef8:	2101      	movs	r1, #1
 8003efa:	6838      	ldr	r0, [r7, #0]
 8003efc:	f000 fa6a 	bl	80043d4 <prvAddCurrentTaskToDelayedList>
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	200003c4 	.word	0x200003c4

08003f0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10a      	bne.n	8003f38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	60fb      	str	r3, [r7, #12]
}
 8003f34:	bf00      	nop
 8003f36:	e7fe      	b.n	8003f36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	3318      	adds	r3, #24
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe febc 	bl	8002cba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f42:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <xTaskRemoveFromEventList+0xac>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d11c      	bne.n	8003f84 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe feb3 	bl	8002cba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	2201      	movs	r2, #1
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <xTaskRemoveFromEventList+0xb0>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	4a16      	ldr	r2, [pc, #88]	; (8003fbc <xTaskRemoveFromEventList+0xb0>)
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4a13      	ldr	r2, [pc, #76]	; (8003fc0 <xTaskRemoveFromEventList+0xb4>)
 8003f74:	441a      	add	r2, r3
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	f7fe fe3f 	bl	8002c00 <vListInsertEnd>
 8003f82:	e005      	b.n	8003f90 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	3318      	adds	r3, #24
 8003f88:	4619      	mov	r1, r3
 8003f8a:	480e      	ldr	r0, [pc, #56]	; (8003fc4 <xTaskRemoveFromEventList+0xb8>)
 8003f8c:	f7fe fe38 	bl	8002c00 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f94:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <xTaskRemoveFromEventList+0xbc>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d905      	bls.n	8003faa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <xTaskRemoveFromEventList+0xc0>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e001      	b.n	8003fae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003fae:	697b      	ldr	r3, [r7, #20]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	200004ec 	.word	0x200004ec
 8003fbc:	200004cc 	.word	0x200004cc
 8003fc0:	200003c8 	.word	0x200003c8
 8003fc4:	20000484 	.word	0x20000484
 8003fc8:	200003c4 	.word	0x200003c4
 8003fcc:	200004d8 	.word	0x200004d8

08003fd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fd8:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <vTaskInternalSetTimeOutState+0x24>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <vTaskInternalSetTimeOutState+0x28>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	605a      	str	r2, [r3, #4]
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	200004dc 	.word	0x200004dc
 8003ff8:	200004c8 	.word	0x200004c8

08003ffc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	613b      	str	r3, [r7, #16]
}
 800401e:	bf00      	nop
 8004020:	e7fe      	b.n	8004020 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10a      	bne.n	800403e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	60fb      	str	r3, [r7, #12]
}
 800403a:	bf00      	nop
 800403c:	e7fe      	b.n	800403c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800403e:	f000 fb59 	bl	80046f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004042:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <xTaskCheckForTimeOut+0xbc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800405a:	d102      	bne.n	8004062 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	e023      	b.n	80040aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4b15      	ldr	r3, [pc, #84]	; (80040bc <xTaskCheckForTimeOut+0xc0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d007      	beq.n	800407e <xTaskCheckForTimeOut+0x82>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	429a      	cmp	r2, r3
 8004076:	d302      	bcc.n	800407e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004078:	2301      	movs	r3, #1
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	e015      	b.n	80040aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	429a      	cmp	r2, r3
 8004086:	d20b      	bcs.n	80040a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	1ad2      	subs	r2, r2, r3
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff ff9b 	bl	8003fd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	e004      	b.n	80040aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040a6:	2301      	movs	r3, #1
 80040a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040aa:	f000 fb53 	bl	8004754 <vPortExitCritical>

	return xReturn;
 80040ae:	69fb      	ldr	r3, [r7, #28]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3720      	adds	r7, #32
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	200004c8 	.word	0x200004c8
 80040bc:	200004dc 	.word	0x200004dc

080040c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040c4:	4b03      	ldr	r3, [pc, #12]	; (80040d4 <vTaskMissedYield+0x14>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
}
 80040ca:	bf00      	nop
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	200004d8 	.word	0x200004d8

080040d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040e0:	f000 f852 	bl	8004188 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040e4:	4b06      	ldr	r3, [pc, #24]	; (8004100 <prvIdleTask+0x28>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d9f9      	bls.n	80040e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <prvIdleTask+0x2c>)
 80040ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040fc:	e7f0      	b.n	80040e0 <prvIdleTask+0x8>
 80040fe:	bf00      	nop
 8004100:	200003c8 	.word	0x200003c8
 8004104:	e000ed04 	.word	0xe000ed04

08004108 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800410e:	2300      	movs	r3, #0
 8004110:	607b      	str	r3, [r7, #4]
 8004112:	e00c      	b.n	800412e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4a12      	ldr	r2, [pc, #72]	; (8004168 <prvInitialiseTaskLists+0x60>)
 8004120:	4413      	add	r3, r2
 8004122:	4618      	mov	r0, r3
 8004124:	f7fe fd3f 	bl	8002ba6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3301      	adds	r3, #1
 800412c:	607b      	str	r3, [r7, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b06      	cmp	r3, #6
 8004132:	d9ef      	bls.n	8004114 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004134:	480d      	ldr	r0, [pc, #52]	; (800416c <prvInitialiseTaskLists+0x64>)
 8004136:	f7fe fd36 	bl	8002ba6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800413a:	480d      	ldr	r0, [pc, #52]	; (8004170 <prvInitialiseTaskLists+0x68>)
 800413c:	f7fe fd33 	bl	8002ba6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004140:	480c      	ldr	r0, [pc, #48]	; (8004174 <prvInitialiseTaskLists+0x6c>)
 8004142:	f7fe fd30 	bl	8002ba6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004146:	480c      	ldr	r0, [pc, #48]	; (8004178 <prvInitialiseTaskLists+0x70>)
 8004148:	f7fe fd2d 	bl	8002ba6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800414c:	480b      	ldr	r0, [pc, #44]	; (800417c <prvInitialiseTaskLists+0x74>)
 800414e:	f7fe fd2a 	bl	8002ba6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <prvInitialiseTaskLists+0x78>)
 8004154:	4a05      	ldr	r2, [pc, #20]	; (800416c <prvInitialiseTaskLists+0x64>)
 8004156:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004158:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <prvInitialiseTaskLists+0x7c>)
 800415a:	4a05      	ldr	r2, [pc, #20]	; (8004170 <prvInitialiseTaskLists+0x68>)
 800415c:	601a      	str	r2, [r3, #0]
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	200003c8 	.word	0x200003c8
 800416c:	20000454 	.word	0x20000454
 8004170:	20000468 	.word	0x20000468
 8004174:	20000484 	.word	0x20000484
 8004178:	20000498 	.word	0x20000498
 800417c:	200004b0 	.word	0x200004b0
 8004180:	2000047c 	.word	0x2000047c
 8004184:	20000480 	.word	0x20000480

08004188 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800418e:	e019      	b.n	80041c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004190:	f000 fab0 	bl	80046f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004194:	4b10      	ldr	r3, [pc, #64]	; (80041d8 <prvCheckTasksWaitingTermination+0x50>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3304      	adds	r3, #4
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fe fd8a 	bl	8002cba <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041a6:	4b0d      	ldr	r3, [pc, #52]	; (80041dc <prvCheckTasksWaitingTermination+0x54>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	4a0b      	ldr	r2, [pc, #44]	; (80041dc <prvCheckTasksWaitingTermination+0x54>)
 80041ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <prvCheckTasksWaitingTermination+0x58>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	4a0a      	ldr	r2, [pc, #40]	; (80041e0 <prvCheckTasksWaitingTermination+0x58>)
 80041b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041ba:	f000 facb 	bl	8004754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f810 	bl	80041e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041c4:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <prvCheckTasksWaitingTermination+0x58>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e1      	bne.n	8004190 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000498 	.word	0x20000498
 80041dc:	200004c4 	.word	0x200004c4
 80041e0:	200004ac 	.word	0x200004ac

080041e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	334c      	adds	r3, #76	; 0x4c
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fec7 	bl	8004f84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d108      	bne.n	8004212 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fc23 	bl	8004a50 <vPortFree>
				vPortFree( pxTCB );
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fc20 	bl	8004a50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004210:	e018      	b.n	8004244 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004218:	2b01      	cmp	r3, #1
 800421a:	d103      	bne.n	8004224 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fc17 	bl	8004a50 <vPortFree>
	}
 8004222:	e00f      	b.n	8004244 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800422a:	2b02      	cmp	r3, #2
 800422c:	d00a      	beq.n	8004244 <prvDeleteTCB+0x60>
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	60fb      	str	r3, [r7, #12]
}
 8004240:	bf00      	nop
 8004242:	e7fe      	b.n	8004242 <prvDeleteTCB+0x5e>
	}
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004252:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <prvResetNextTaskUnblockTime+0x38>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d104      	bne.n	8004266 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800425c:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <prvResetNextTaskUnblockTime+0x3c>)
 800425e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004262:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004264:	e008      	b.n	8004278 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004266:	4b07      	ldr	r3, [pc, #28]	; (8004284 <prvResetNextTaskUnblockTime+0x38>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	4a04      	ldr	r2, [pc, #16]	; (8004288 <prvResetNextTaskUnblockTime+0x3c>)
 8004276:	6013      	str	r3, [r2, #0]
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	2000047c 	.word	0x2000047c
 8004288:	200004e4 	.word	0x200004e4

0800428c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <xTaskGetSchedulerState+0x34>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d102      	bne.n	80042a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800429a:	2301      	movs	r3, #1
 800429c:	607b      	str	r3, [r7, #4]
 800429e:	e008      	b.n	80042b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042a0:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <xTaskGetSchedulerState+0x38>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d102      	bne.n	80042ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042a8:	2302      	movs	r3, #2
 80042aa:	607b      	str	r3, [r7, #4]
 80042ac:	e001      	b.n	80042b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042ae:	2300      	movs	r3, #0
 80042b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042b2:	687b      	ldr	r3, [r7, #4]
	}
 80042b4:	4618      	mov	r0, r3
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	200004d0 	.word	0x200004d0
 80042c4:	200004ec 	.word	0x200004ec

080042c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d06e      	beq.n	80043bc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80042de:	4b3a      	ldr	r3, [pc, #232]	; (80043c8 <xTaskPriorityDisinherit+0x100>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d00a      	beq.n	80042fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	60fb      	str	r3, [r7, #12]
}
 80042fa:	bf00      	nop
 80042fc:	e7fe      	b.n	80042fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	60bb      	str	r3, [r7, #8]
}
 8004318:	bf00      	nop
 800431a:	e7fe      	b.n	800431a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004320:	1e5a      	subs	r2, r3, #1
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	429a      	cmp	r2, r3
 8004330:	d044      	beq.n	80043bc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004336:	2b00      	cmp	r3, #0
 8004338:	d140      	bne.n	80043bc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	3304      	adds	r3, #4
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe fcbb 	bl	8002cba <uxListRemove>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d115      	bne.n	8004376 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434e:	491f      	ldr	r1, [pc, #124]	; (80043cc <xTaskPriorityDisinherit+0x104>)
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10a      	bne.n	8004376 <xTaskPriorityDisinherit+0xae>
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	2201      	movs	r2, #1
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	43da      	mvns	r2, r3
 800436c:	4b18      	ldr	r3, [pc, #96]	; (80043d0 <xTaskPriorityDisinherit+0x108>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4013      	ands	r3, r2
 8004372:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <xTaskPriorityDisinherit+0x108>)
 8004374:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	f1c3 0207 	rsb	r2, r3, #7
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	2201      	movs	r2, #1
 8004390:	409a      	lsls	r2, r3
 8004392:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <xTaskPriorityDisinherit+0x108>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4313      	orrs	r3, r2
 8004398:	4a0d      	ldr	r2, [pc, #52]	; (80043d0 <xTaskPriorityDisinherit+0x108>)
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4a08      	ldr	r2, [pc, #32]	; (80043cc <xTaskPriorityDisinherit+0x104>)
 80043aa:	441a      	add	r2, r3
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f7fe fc24 	bl	8002c00 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043b8:	2301      	movs	r3, #1
 80043ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043bc:	697b      	ldr	r3, [r7, #20]
	}
 80043be:	4618      	mov	r0, r3
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	200003c4 	.word	0x200003c4
 80043cc:	200003c8 	.word	0x200003c8
 80043d0:	200004cc 	.word	0x200004cc

080043d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043de:	4b29      	ldr	r3, [pc, #164]	; (8004484 <prvAddCurrentTaskToDelayedList+0xb0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043e4:	4b28      	ldr	r3, [pc, #160]	; (8004488 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3304      	adds	r3, #4
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe fc65 	bl	8002cba <uxListRemove>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10b      	bne.n	800440e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80043f6:	4b24      	ldr	r3, [pc, #144]	; (8004488 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	2201      	movs	r2, #1
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43da      	mvns	r2, r3
 8004404:	4b21      	ldr	r3, [pc, #132]	; (800448c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4013      	ands	r3, r2
 800440a:	4a20      	ldr	r2, [pc, #128]	; (800448c <prvAddCurrentTaskToDelayedList+0xb8>)
 800440c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004414:	d10a      	bne.n	800442c <prvAddCurrentTaskToDelayedList+0x58>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d007      	beq.n	800442c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800441c:	4b1a      	ldr	r3, [pc, #104]	; (8004488 <prvAddCurrentTaskToDelayedList+0xb4>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3304      	adds	r3, #4
 8004422:	4619      	mov	r1, r3
 8004424:	481a      	ldr	r0, [pc, #104]	; (8004490 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004426:	f7fe fbeb 	bl	8002c00 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800442a:	e026      	b.n	800447a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4413      	add	r3, r2
 8004432:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004434:	4b14      	ldr	r3, [pc, #80]	; (8004488 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	429a      	cmp	r2, r3
 8004442:	d209      	bcs.n	8004458 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004444:	4b13      	ldr	r3, [pc, #76]	; (8004494 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <prvAddCurrentTaskToDelayedList+0xb4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3304      	adds	r3, #4
 800444e:	4619      	mov	r1, r3
 8004450:	4610      	mov	r0, r2
 8004452:	f7fe fbf9 	bl	8002c48 <vListInsert>
}
 8004456:	e010      	b.n	800447a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004458:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <prvAddCurrentTaskToDelayedList+0xc4>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <prvAddCurrentTaskToDelayedList+0xb4>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3304      	adds	r3, #4
 8004462:	4619      	mov	r1, r3
 8004464:	4610      	mov	r0, r2
 8004466:	f7fe fbef 	bl	8002c48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800446a:	4b0c      	ldr	r3, [pc, #48]	; (800449c <prvAddCurrentTaskToDelayedList+0xc8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	429a      	cmp	r2, r3
 8004472:	d202      	bcs.n	800447a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004474:	4a09      	ldr	r2, [pc, #36]	; (800449c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	6013      	str	r3, [r2, #0]
}
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	200004c8 	.word	0x200004c8
 8004488:	200003c4 	.word	0x200003c4
 800448c:	200004cc 	.word	0x200004cc
 8004490:	200004b0 	.word	0x200004b0
 8004494:	20000480 	.word	0x20000480
 8004498:	2000047c 	.word	0x2000047c
 800449c:	200004e4 	.word	0x200004e4

080044a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3b04      	subs	r3, #4
 80044b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	3b04      	subs	r3, #4
 80044be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f023 0201 	bic.w	r2, r3, #1
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	3b04      	subs	r3, #4
 80044ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044d0:	4a0c      	ldr	r2, [pc, #48]	; (8004504 <pxPortInitialiseStack+0x64>)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3b14      	subs	r3, #20
 80044da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3b04      	subs	r3, #4
 80044e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f06f 0202 	mvn.w	r2, #2
 80044ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3b20      	subs	r3, #32
 80044f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044f6:	68fb      	ldr	r3, [r7, #12]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	08004509 	.word	0x08004509

08004508 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004512:	4b12      	ldr	r3, [pc, #72]	; (800455c <prvTaskExitError+0x54>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800451a:	d00a      	beq.n	8004532 <prvTaskExitError+0x2a>
	__asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	60fb      	str	r3, [r7, #12]
}
 800452e:	bf00      	nop
 8004530:	e7fe      	b.n	8004530 <prvTaskExitError+0x28>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	60bb      	str	r3, [r7, #8]
}
 8004544:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004546:	bf00      	nop
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0fc      	beq.n	8004548 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800454e:	bf00      	nop
 8004550:	bf00      	nop
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	2000000c 	.word	0x2000000c

08004560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004560:	4b07      	ldr	r3, [pc, #28]	; (8004580 <pxCurrentTCBConst2>)
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	6808      	ldr	r0, [r1, #0]
 8004566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456a:	f380 8809 	msr	PSP, r0
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	f380 8811 	msr	BASEPRI, r0
 800457a:	4770      	bx	lr
 800457c:	f3af 8000 	nop.w

08004580 <pxCurrentTCBConst2>:
 8004580:	200003c4 	.word	0x200003c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop

08004588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004588:	4808      	ldr	r0, [pc, #32]	; (80045ac <prvPortStartFirstTask+0x24>)
 800458a:	6800      	ldr	r0, [r0, #0]
 800458c:	6800      	ldr	r0, [r0, #0]
 800458e:	f380 8808 	msr	MSP, r0
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f380 8814 	msr	CONTROL, r0
 800459a:	b662      	cpsie	i
 800459c:	b661      	cpsie	f
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	df00      	svc	0
 80045a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045aa:	bf00      	nop
 80045ac:	e000ed08 	.word	0xe000ed08

080045b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045b6:	4b46      	ldr	r3, [pc, #280]	; (80046d0 <xPortStartScheduler+0x120>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a46      	ldr	r2, [pc, #280]	; (80046d4 <xPortStartScheduler+0x124>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d10a      	bne.n	80045d6 <xPortStartScheduler+0x26>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	613b      	str	r3, [r7, #16]
}
 80045d2:	bf00      	nop
 80045d4:	e7fe      	b.n	80045d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045d6:	4b3e      	ldr	r3, [pc, #248]	; (80046d0 <xPortStartScheduler+0x120>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a3f      	ldr	r2, [pc, #252]	; (80046d8 <xPortStartScheduler+0x128>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d10a      	bne.n	80045f6 <xPortStartScheduler+0x46>
	__asm volatile
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	60fb      	str	r3, [r7, #12]
}
 80045f2:	bf00      	nop
 80045f4:	e7fe      	b.n	80045f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045f6:	4b39      	ldr	r3, [pc, #228]	; (80046dc <xPortStartScheduler+0x12c>)
 80045f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	22ff      	movs	r2, #255	; 0xff
 8004606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004610:	78fb      	ldrb	r3, [r7, #3]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004618:	b2da      	uxtb	r2, r3
 800461a:	4b31      	ldr	r3, [pc, #196]	; (80046e0 <xPortStartScheduler+0x130>)
 800461c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800461e:	4b31      	ldr	r3, [pc, #196]	; (80046e4 <xPortStartScheduler+0x134>)
 8004620:	2207      	movs	r2, #7
 8004622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004624:	e009      	b.n	800463a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004626:	4b2f      	ldr	r3, [pc, #188]	; (80046e4 <xPortStartScheduler+0x134>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3b01      	subs	r3, #1
 800462c:	4a2d      	ldr	r2, [pc, #180]	; (80046e4 <xPortStartScheduler+0x134>)
 800462e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	b2db      	uxtb	r3, r3
 8004638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004642:	2b80      	cmp	r3, #128	; 0x80
 8004644:	d0ef      	beq.n	8004626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004646:	4b27      	ldr	r3, [pc, #156]	; (80046e4 <xPortStartScheduler+0x134>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f1c3 0307 	rsb	r3, r3, #7
 800464e:	2b04      	cmp	r3, #4
 8004650:	d00a      	beq.n	8004668 <xPortStartScheduler+0xb8>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	60bb      	str	r3, [r7, #8]
}
 8004664:	bf00      	nop
 8004666:	e7fe      	b.n	8004666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004668:	4b1e      	ldr	r3, [pc, #120]	; (80046e4 <xPortStartScheduler+0x134>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	4a1d      	ldr	r2, [pc, #116]	; (80046e4 <xPortStartScheduler+0x134>)
 8004670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004672:	4b1c      	ldr	r3, [pc, #112]	; (80046e4 <xPortStartScheduler+0x134>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800467a:	4a1a      	ldr	r2, [pc, #104]	; (80046e4 <xPortStartScheduler+0x134>)
 800467c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	b2da      	uxtb	r2, r3
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004686:	4b18      	ldr	r3, [pc, #96]	; (80046e8 <xPortStartScheduler+0x138>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a17      	ldr	r2, [pc, #92]	; (80046e8 <xPortStartScheduler+0x138>)
 800468c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004692:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <xPortStartScheduler+0x138>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <xPortStartScheduler+0x138>)
 8004698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800469c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800469e:	f000 f8dd 	bl	800485c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80046a2:	4b12      	ldr	r3, [pc, #72]	; (80046ec <xPortStartScheduler+0x13c>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80046a8:	f000 f8fc 	bl	80048a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046ac:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <xPortStartScheduler+0x140>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a0f      	ldr	r2, [pc, #60]	; (80046f0 <xPortStartScheduler+0x140>)
 80046b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80046b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80046b8:	f7ff ff66 	bl	8004588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80046bc:	f7ff fba0 	bl	8003e00 <vTaskSwitchContext>
	prvTaskExitError();
 80046c0:	f7ff ff22 	bl	8004508 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	e000ed00 	.word	0xe000ed00
 80046d4:	410fc271 	.word	0x410fc271
 80046d8:	410fc270 	.word	0x410fc270
 80046dc:	e000e400 	.word	0xe000e400
 80046e0:	200004f0 	.word	0x200004f0
 80046e4:	200004f4 	.word	0x200004f4
 80046e8:	e000ed20 	.word	0xe000ed20
 80046ec:	2000000c 	.word	0x2000000c
 80046f0:	e000ef34 	.word	0xe000ef34

080046f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	607b      	str	r3, [r7, #4]
}
 800470c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800470e:	4b0f      	ldr	r3, [pc, #60]	; (800474c <vPortEnterCritical+0x58>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3301      	adds	r3, #1
 8004714:	4a0d      	ldr	r2, [pc, #52]	; (800474c <vPortEnterCritical+0x58>)
 8004716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004718:	4b0c      	ldr	r3, [pc, #48]	; (800474c <vPortEnterCritical+0x58>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d10f      	bne.n	8004740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004720:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <vPortEnterCritical+0x5c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <vPortEnterCritical+0x4c>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	603b      	str	r3, [r7, #0]
}
 800473c:	bf00      	nop
 800473e:	e7fe      	b.n	800473e <vPortEnterCritical+0x4a>
	}
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	2000000c 	.word	0x2000000c
 8004750:	e000ed04 	.word	0xe000ed04

08004754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800475a:	4b12      	ldr	r3, [pc, #72]	; (80047a4 <vPortExitCritical+0x50>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10a      	bne.n	8004778 <vPortExitCritical+0x24>
	__asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	607b      	str	r3, [r7, #4]
}
 8004774:	bf00      	nop
 8004776:	e7fe      	b.n	8004776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004778:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <vPortExitCritical+0x50>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3b01      	subs	r3, #1
 800477e:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <vPortExitCritical+0x50>)
 8004780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004782:	4b08      	ldr	r3, [pc, #32]	; (80047a4 <vPortExitCritical+0x50>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d105      	bne.n	8004796 <vPortExitCritical+0x42>
 800478a:	2300      	movs	r3, #0
 800478c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	2000000c 	.word	0x2000000c
	...

080047b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80047b0:	f3ef 8009 	mrs	r0, PSP
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	4b15      	ldr	r3, [pc, #84]	; (8004810 <pxCurrentTCBConst>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	f01e 0f10 	tst.w	lr, #16
 80047c0:	bf08      	it	eq
 80047c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ca:	6010      	str	r0, [r2, #0]
 80047cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047d4:	f380 8811 	msr	BASEPRI, r0
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f7ff fb0e 	bl	8003e00 <vTaskSwitchContext>
 80047e4:	f04f 0000 	mov.w	r0, #0
 80047e8:	f380 8811 	msr	BASEPRI, r0
 80047ec:	bc09      	pop	{r0, r3}
 80047ee:	6819      	ldr	r1, [r3, #0]
 80047f0:	6808      	ldr	r0, [r1, #0]
 80047f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f6:	f01e 0f10 	tst.w	lr, #16
 80047fa:	bf08      	it	eq
 80047fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004800:	f380 8809 	msr	PSP, r0
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	f3af 8000 	nop.w

08004810 <pxCurrentTCBConst>:
 8004810:	200003c4 	.word	0x200003c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop

08004818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
	__asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	607b      	str	r3, [r7, #4]
}
 8004830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004832:	f7ff fa2d 	bl	8003c90 <xTaskIncrementTick>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800483c:	4b06      	ldr	r3, [pc, #24]	; (8004858 <SysTick_Handler+0x40>)
 800483e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	2300      	movs	r3, #0
 8004846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	f383 8811 	msr	BASEPRI, r3
}
 800484e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004850:	bf00      	nop
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <vPortSetupTimerInterrupt+0x34>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <vPortSetupTimerInterrupt+0x38>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800486c:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <vPortSetupTimerInterrupt+0x3c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a0a      	ldr	r2, [pc, #40]	; (800489c <vPortSetupTimerInterrupt+0x40>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	099b      	lsrs	r3, r3, #6
 8004878:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <vPortSetupTimerInterrupt+0x44>)
 800487a:	3b01      	subs	r3, #1
 800487c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800487e:	4b04      	ldr	r3, [pc, #16]	; (8004890 <vPortSetupTimerInterrupt+0x34>)
 8004880:	2207      	movs	r2, #7
 8004882:	601a      	str	r2, [r3, #0]
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	e000e010 	.word	0xe000e010
 8004894:	e000e018 	.word	0xe000e018
 8004898:	20000000 	.word	0x20000000
 800489c:	10624dd3 	.word	0x10624dd3
 80048a0:	e000e014 	.word	0xe000e014

080048a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80048a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048b4 <vPortEnableVFP+0x10>
 80048a8:	6801      	ldr	r1, [r0, #0]
 80048aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048ae:	6001      	str	r1, [r0, #0]
 80048b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80048b2:	bf00      	nop
 80048b4:	e000ed88 	.word	0xe000ed88

080048b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08a      	sub	sp, #40	; 0x28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048c0:	2300      	movs	r3, #0
 80048c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80048c4:	f7ff f92a 	bl	8003b1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048c8:	4b5b      	ldr	r3, [pc, #364]	; (8004a38 <pvPortMalloc+0x180>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048d0:	f000 f920 	bl	8004b14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048d4:	4b59      	ldr	r3, [pc, #356]	; (8004a3c <pvPortMalloc+0x184>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f040 8093 	bne.w	8004a08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01d      	beq.n	8004924 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80048e8:	2208      	movs	r2, #8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4413      	add	r3, r2
 80048ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d014      	beq.n	8004924 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f023 0307 	bic.w	r3, r3, #7
 8004900:	3308      	adds	r3, #8
 8004902:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <pvPortMalloc+0x6c>
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	617b      	str	r3, [r7, #20]
}
 8004920:	bf00      	nop
 8004922:	e7fe      	b.n	8004922 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d06e      	beq.n	8004a08 <pvPortMalloc+0x150>
 800492a:	4b45      	ldr	r3, [pc, #276]	; (8004a40 <pvPortMalloc+0x188>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	429a      	cmp	r2, r3
 8004932:	d869      	bhi.n	8004a08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004934:	4b43      	ldr	r3, [pc, #268]	; (8004a44 <pvPortMalloc+0x18c>)
 8004936:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004938:	4b42      	ldr	r3, [pc, #264]	; (8004a44 <pvPortMalloc+0x18c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800493e:	e004      	b.n	800494a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	429a      	cmp	r2, r3
 8004952:	d903      	bls.n	800495c <pvPortMalloc+0xa4>
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f1      	bne.n	8004940 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800495c:	4b36      	ldr	r3, [pc, #216]	; (8004a38 <pvPortMalloc+0x180>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004962:	429a      	cmp	r2, r3
 8004964:	d050      	beq.n	8004a08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2208      	movs	r2, #8
 800496c:	4413      	add	r3, r2
 800496e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	1ad2      	subs	r2, r2, r3
 8004980:	2308      	movs	r3, #8
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	429a      	cmp	r2, r3
 8004986:	d91f      	bls.n	80049c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <pvPortMalloc+0xf8>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	613b      	str	r3, [r7, #16]
}
 80049ac:	bf00      	nop
 80049ae:	e7fe      	b.n	80049ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	1ad2      	subs	r2, r2, r3
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049c2:	69b8      	ldr	r0, [r7, #24]
 80049c4:	f000 f908 	bl	8004bd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049c8:	4b1d      	ldr	r3, [pc, #116]	; (8004a40 <pvPortMalloc+0x188>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	4a1b      	ldr	r2, [pc, #108]	; (8004a40 <pvPortMalloc+0x188>)
 80049d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049d6:	4b1a      	ldr	r3, [pc, #104]	; (8004a40 <pvPortMalloc+0x188>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <pvPortMalloc+0x190>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d203      	bcs.n	80049ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049e2:	4b17      	ldr	r3, [pc, #92]	; (8004a40 <pvPortMalloc+0x188>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a18      	ldr	r2, [pc, #96]	; (8004a48 <pvPortMalloc+0x190>)
 80049e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	4b13      	ldr	r3, [pc, #76]	; (8004a3c <pvPortMalloc+0x184>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80049fe:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <pvPortMalloc+0x194>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3301      	adds	r3, #1
 8004a04:	4a11      	ldr	r2, [pc, #68]	; (8004a4c <pvPortMalloc+0x194>)
 8004a06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a08:	f7ff f896 	bl	8003b38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <pvPortMalloc+0x174>
	__asm volatile
 8004a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	60fb      	str	r3, [r7, #12]
}
 8004a28:	bf00      	nop
 8004a2a:	e7fe      	b.n	8004a2a <pvPortMalloc+0x172>
	return pvReturn;
 8004a2c:	69fb      	ldr	r3, [r7, #28]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3728      	adds	r7, #40	; 0x28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20004100 	.word	0x20004100
 8004a3c:	20004114 	.word	0x20004114
 8004a40:	20004104 	.word	0x20004104
 8004a44:	200040f8 	.word	0x200040f8
 8004a48:	20004108 	.word	0x20004108
 8004a4c:	2000410c 	.word	0x2000410c

08004a50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d04d      	beq.n	8004afe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a62:	2308      	movs	r3, #8
 8004a64:	425b      	negs	r3, r3
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4413      	add	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	4b24      	ldr	r3, [pc, #144]	; (8004b08 <vPortFree+0xb8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10a      	bne.n	8004a94 <vPortFree+0x44>
	__asm volatile
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	60fb      	str	r3, [r7, #12]
}
 8004a90:	bf00      	nop
 8004a92:	e7fe      	b.n	8004a92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <vPortFree+0x62>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	60bb      	str	r3, [r7, #8]
}
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <vPortFree+0xb8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01e      	beq.n	8004afe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d11a      	bne.n	8004afe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <vPortFree+0xb8>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	401a      	ands	r2, r3
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ad8:	f7ff f820 	bl	8003b1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <vPortFree+0xbc>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	4a09      	ldr	r2, [pc, #36]	; (8004b0c <vPortFree+0xbc>)
 8004ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004aea:	6938      	ldr	r0, [r7, #16]
 8004aec:	f000 f874 	bl	8004bd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004af0:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <vPortFree+0xc0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3301      	adds	r3, #1
 8004af6:	4a06      	ldr	r2, [pc, #24]	; (8004b10 <vPortFree+0xc0>)
 8004af8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004afa:	f7ff f81d 	bl	8003b38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004afe:	bf00      	nop
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20004114 	.word	0x20004114
 8004b0c:	20004104 	.word	0x20004104
 8004b10:	20004110 	.word	0x20004110

08004b14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004b1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b20:	4b27      	ldr	r3, [pc, #156]	; (8004bc0 <prvHeapInit+0xac>)
 8004b22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00c      	beq.n	8004b48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3307      	adds	r3, #7
 8004b32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0307 	bic.w	r3, r3, #7
 8004b3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	4a1f      	ldr	r2, [pc, #124]	; (8004bc0 <prvHeapInit+0xac>)
 8004b44:	4413      	add	r3, r2
 8004b46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b4c:	4a1d      	ldr	r2, [pc, #116]	; (8004bc4 <prvHeapInit+0xb0>)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b52:	4b1c      	ldr	r3, [pc, #112]	; (8004bc4 <prvHeapInit+0xb0>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b60:	2208      	movs	r2, #8
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0307 	bic.w	r3, r3, #7
 8004b6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4a15      	ldr	r2, [pc, #84]	; (8004bc8 <prvHeapInit+0xb4>)
 8004b74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b76:	4b14      	ldr	r3, [pc, #80]	; (8004bc8 <prvHeapInit+0xb4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b7e:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <prvHeapInit+0xb4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	1ad2      	subs	r2, r2, r3
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b94:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <prvHeapInit+0xb4>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4a0a      	ldr	r2, [pc, #40]	; (8004bcc <prvHeapInit+0xb8>)
 8004ba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <prvHeapInit+0xbc>)
 8004baa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004bac:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <prvHeapInit+0xc0>)
 8004bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004bb2:	601a      	str	r2, [r3, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	200004f8 	.word	0x200004f8
 8004bc4:	200040f8 	.word	0x200040f8
 8004bc8:	20004100 	.word	0x20004100
 8004bcc:	20004108 	.word	0x20004108
 8004bd0:	20004104 	.word	0x20004104
 8004bd4:	20004114 	.word	0x20004114

08004bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004be0:	4b28      	ldr	r3, [pc, #160]	; (8004c84 <prvInsertBlockIntoFreeList+0xac>)
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	e002      	b.n	8004bec <prvInsertBlockIntoFreeList+0x14>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d8f7      	bhi.n	8004be6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	4413      	add	r3, r2
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d108      	bne.n	8004c1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	441a      	add	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	441a      	add	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d118      	bne.n	8004c60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	4b15      	ldr	r3, [pc, #84]	; (8004c88 <prvInsertBlockIntoFreeList+0xb0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d00d      	beq.n	8004c56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	441a      	add	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	e008      	b.n	8004c68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c56:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <prvInsertBlockIntoFreeList+0xb0>)
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	e003      	b.n	8004c68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d002      	beq.n	8004c76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c76:	bf00      	nop
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	200040f8 	.word	0x200040f8
 8004c88:	20004100 	.word	0x20004100

08004c8c <rand>:
 8004c8c:	4b16      	ldr	r3, [pc, #88]	; (8004ce8 <rand+0x5c>)
 8004c8e:	b510      	push	{r4, lr}
 8004c90:	681c      	ldr	r4, [r3, #0]
 8004c92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c94:	b9b3      	cbnz	r3, 8004cc4 <rand+0x38>
 8004c96:	2018      	movs	r0, #24
 8004c98:	f000 faa6 	bl	80051e8 <malloc>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	6320      	str	r0, [r4, #48]	; 0x30
 8004ca0:	b920      	cbnz	r0, 8004cac <rand+0x20>
 8004ca2:	4b12      	ldr	r3, [pc, #72]	; (8004cec <rand+0x60>)
 8004ca4:	4812      	ldr	r0, [pc, #72]	; (8004cf0 <rand+0x64>)
 8004ca6:	2152      	movs	r1, #82	; 0x52
 8004ca8:	f000 fa34 	bl	8005114 <__assert_func>
 8004cac:	4911      	ldr	r1, [pc, #68]	; (8004cf4 <rand+0x68>)
 8004cae:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <rand+0x6c>)
 8004cb0:	e9c0 1300 	strd	r1, r3, [r0]
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <rand+0x70>)
 8004cb6:	6083      	str	r3, [r0, #8]
 8004cb8:	230b      	movs	r3, #11
 8004cba:	8183      	strh	r3, [r0, #12]
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004cc4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004cc6:	480e      	ldr	r0, [pc, #56]	; (8004d00 <rand+0x74>)
 8004cc8:	690b      	ldr	r3, [r1, #16]
 8004cca:	694c      	ldr	r4, [r1, #20]
 8004ccc:	4a0d      	ldr	r2, [pc, #52]	; (8004d04 <rand+0x78>)
 8004cce:	4358      	muls	r0, r3
 8004cd0:	fb02 0004 	mla	r0, r2, r4, r0
 8004cd4:	fba3 3202 	umull	r3, r2, r3, r2
 8004cd8:	3301      	adds	r3, #1
 8004cda:	eb40 0002 	adc.w	r0, r0, r2
 8004cde:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004ce2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004ce6:	bd10      	pop	{r4, pc}
 8004ce8:	20000068 	.word	0x20000068
 8004cec:	08006150 	.word	0x08006150
 8004cf0:	08006167 	.word	0x08006167
 8004cf4:	abcd330e 	.word	0xabcd330e
 8004cf8:	e66d1234 	.word	0xe66d1234
 8004cfc:	0005deec 	.word	0x0005deec
 8004d00:	5851f42d 	.word	0x5851f42d
 8004d04:	4c957f2d 	.word	0x4c957f2d

08004d08 <std>:
 8004d08:	2300      	movs	r3, #0
 8004d0a:	b510      	push	{r4, lr}
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d16:	6083      	str	r3, [r0, #8]
 8004d18:	8181      	strh	r1, [r0, #12]
 8004d1a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d1c:	81c2      	strh	r2, [r0, #14]
 8004d1e:	6183      	str	r3, [r0, #24]
 8004d20:	4619      	mov	r1, r3
 8004d22:	2208      	movs	r2, #8
 8004d24:	305c      	adds	r0, #92	; 0x5c
 8004d26:	f000 f914 	bl	8004f52 <memset>
 8004d2a:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <std+0x58>)
 8004d2c:	6263      	str	r3, [r4, #36]	; 0x24
 8004d2e:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <std+0x5c>)
 8004d30:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d32:	4b0d      	ldr	r3, [pc, #52]	; (8004d68 <std+0x60>)
 8004d34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d36:	4b0d      	ldr	r3, [pc, #52]	; (8004d6c <std+0x64>)
 8004d38:	6323      	str	r3, [r4, #48]	; 0x30
 8004d3a:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <std+0x68>)
 8004d3c:	6224      	str	r4, [r4, #32]
 8004d3e:	429c      	cmp	r4, r3
 8004d40:	d006      	beq.n	8004d50 <std+0x48>
 8004d42:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004d46:	4294      	cmp	r4, r2
 8004d48:	d002      	beq.n	8004d50 <std+0x48>
 8004d4a:	33d0      	adds	r3, #208	; 0xd0
 8004d4c:	429c      	cmp	r4, r3
 8004d4e:	d105      	bne.n	8004d5c <std+0x54>
 8004d50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d58:	f000 b9ca 	b.w	80050f0 <__retarget_lock_init_recursive>
 8004d5c:	bd10      	pop	{r4, pc}
 8004d5e:	bf00      	nop
 8004d60:	08004ecd 	.word	0x08004ecd
 8004d64:	08004eef 	.word	0x08004eef
 8004d68:	08004f27 	.word	0x08004f27
 8004d6c:	08004f4b 	.word	0x08004f4b
 8004d70:	20004118 	.word	0x20004118

08004d74 <stdio_exit_handler>:
 8004d74:	4a02      	ldr	r2, [pc, #8]	; (8004d80 <stdio_exit_handler+0xc>)
 8004d76:	4903      	ldr	r1, [pc, #12]	; (8004d84 <stdio_exit_handler+0x10>)
 8004d78:	4803      	ldr	r0, [pc, #12]	; (8004d88 <stdio_exit_handler+0x14>)
 8004d7a:	f000 b869 	b.w	8004e50 <_fwalk_sglue>
 8004d7e:	bf00      	nop
 8004d80:	20000010 	.word	0x20000010
 8004d84:	08005a2d 	.word	0x08005a2d
 8004d88:	2000001c 	.word	0x2000001c

08004d8c <cleanup_stdio>:
 8004d8c:	6841      	ldr	r1, [r0, #4]
 8004d8e:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <cleanup_stdio+0x34>)
 8004d90:	4299      	cmp	r1, r3
 8004d92:	b510      	push	{r4, lr}
 8004d94:	4604      	mov	r4, r0
 8004d96:	d001      	beq.n	8004d9c <cleanup_stdio+0x10>
 8004d98:	f000 fe48 	bl	8005a2c <_fflush_r>
 8004d9c:	68a1      	ldr	r1, [r4, #8]
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <cleanup_stdio+0x38>)
 8004da0:	4299      	cmp	r1, r3
 8004da2:	d002      	beq.n	8004daa <cleanup_stdio+0x1e>
 8004da4:	4620      	mov	r0, r4
 8004da6:	f000 fe41 	bl	8005a2c <_fflush_r>
 8004daa:	68e1      	ldr	r1, [r4, #12]
 8004dac:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <cleanup_stdio+0x3c>)
 8004dae:	4299      	cmp	r1, r3
 8004db0:	d004      	beq.n	8004dbc <cleanup_stdio+0x30>
 8004db2:	4620      	mov	r0, r4
 8004db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004db8:	f000 be38 	b.w	8005a2c <_fflush_r>
 8004dbc:	bd10      	pop	{r4, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20004118 	.word	0x20004118
 8004dc4:	20004180 	.word	0x20004180
 8004dc8:	200041e8 	.word	0x200041e8

08004dcc <global_stdio_init.part.0>:
 8004dcc:	b510      	push	{r4, lr}
 8004dce:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <global_stdio_init.part.0+0x30>)
 8004dd0:	4c0b      	ldr	r4, [pc, #44]	; (8004e00 <global_stdio_init.part.0+0x34>)
 8004dd2:	4a0c      	ldr	r2, [pc, #48]	; (8004e04 <global_stdio_init.part.0+0x38>)
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	2200      	movs	r2, #0
 8004dda:	2104      	movs	r1, #4
 8004ddc:	f7ff ff94 	bl	8004d08 <std>
 8004de0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004de4:	2201      	movs	r2, #1
 8004de6:	2109      	movs	r1, #9
 8004de8:	f7ff ff8e 	bl	8004d08 <std>
 8004dec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004df0:	2202      	movs	r2, #2
 8004df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df6:	2112      	movs	r1, #18
 8004df8:	f7ff bf86 	b.w	8004d08 <std>
 8004dfc:	20004250 	.word	0x20004250
 8004e00:	20004118 	.word	0x20004118
 8004e04:	08004d75 	.word	0x08004d75

08004e08 <__sfp_lock_acquire>:
 8004e08:	4801      	ldr	r0, [pc, #4]	; (8004e10 <__sfp_lock_acquire+0x8>)
 8004e0a:	f000 b972 	b.w	80050f2 <__retarget_lock_acquire_recursive>
 8004e0e:	bf00      	nop
 8004e10:	20004259 	.word	0x20004259

08004e14 <__sfp_lock_release>:
 8004e14:	4801      	ldr	r0, [pc, #4]	; (8004e1c <__sfp_lock_release+0x8>)
 8004e16:	f000 b96d 	b.w	80050f4 <__retarget_lock_release_recursive>
 8004e1a:	bf00      	nop
 8004e1c:	20004259 	.word	0x20004259

08004e20 <__sinit>:
 8004e20:	b510      	push	{r4, lr}
 8004e22:	4604      	mov	r4, r0
 8004e24:	f7ff fff0 	bl	8004e08 <__sfp_lock_acquire>
 8004e28:	6a23      	ldr	r3, [r4, #32]
 8004e2a:	b11b      	cbz	r3, 8004e34 <__sinit+0x14>
 8004e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e30:	f7ff bff0 	b.w	8004e14 <__sfp_lock_release>
 8004e34:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <__sinit+0x28>)
 8004e36:	6223      	str	r3, [r4, #32]
 8004e38:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <__sinit+0x2c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1f5      	bne.n	8004e2c <__sinit+0xc>
 8004e40:	f7ff ffc4 	bl	8004dcc <global_stdio_init.part.0>
 8004e44:	e7f2      	b.n	8004e2c <__sinit+0xc>
 8004e46:	bf00      	nop
 8004e48:	08004d8d 	.word	0x08004d8d
 8004e4c:	20004250 	.word	0x20004250

08004e50 <_fwalk_sglue>:
 8004e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e54:	4607      	mov	r7, r0
 8004e56:	4688      	mov	r8, r1
 8004e58:	4614      	mov	r4, r2
 8004e5a:	2600      	movs	r6, #0
 8004e5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e60:	f1b9 0901 	subs.w	r9, r9, #1
 8004e64:	d505      	bpl.n	8004e72 <_fwalk_sglue+0x22>
 8004e66:	6824      	ldr	r4, [r4, #0]
 8004e68:	2c00      	cmp	r4, #0
 8004e6a:	d1f7      	bne.n	8004e5c <_fwalk_sglue+0xc>
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e72:	89ab      	ldrh	r3, [r5, #12]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d907      	bls.n	8004e88 <_fwalk_sglue+0x38>
 8004e78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	d003      	beq.n	8004e88 <_fwalk_sglue+0x38>
 8004e80:	4629      	mov	r1, r5
 8004e82:	4638      	mov	r0, r7
 8004e84:	47c0      	blx	r8
 8004e86:	4306      	orrs	r6, r0
 8004e88:	3568      	adds	r5, #104	; 0x68
 8004e8a:	e7e9      	b.n	8004e60 <_fwalk_sglue+0x10>

08004e8c <siprintf>:
 8004e8c:	b40e      	push	{r1, r2, r3}
 8004e8e:	b500      	push	{lr}
 8004e90:	b09c      	sub	sp, #112	; 0x70
 8004e92:	ab1d      	add	r3, sp, #116	; 0x74
 8004e94:	9002      	str	r0, [sp, #8]
 8004e96:	9006      	str	r0, [sp, #24]
 8004e98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e9c:	4809      	ldr	r0, [pc, #36]	; (8004ec4 <siprintf+0x38>)
 8004e9e:	9107      	str	r1, [sp, #28]
 8004ea0:	9104      	str	r1, [sp, #16]
 8004ea2:	4909      	ldr	r1, [pc, #36]	; (8004ec8 <siprintf+0x3c>)
 8004ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ea8:	9105      	str	r1, [sp, #20]
 8004eaa:	6800      	ldr	r0, [r0, #0]
 8004eac:	9301      	str	r3, [sp, #4]
 8004eae:	a902      	add	r1, sp, #8
 8004eb0:	f000 faa8 	bl	8005404 <_svfiprintf_r>
 8004eb4:	9b02      	ldr	r3, [sp, #8]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	b01c      	add	sp, #112	; 0x70
 8004ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ec0:	b003      	add	sp, #12
 8004ec2:	4770      	bx	lr
 8004ec4:	20000068 	.word	0x20000068
 8004ec8:	ffff0208 	.word	0xffff0208

08004ecc <__sread>:
 8004ecc:	b510      	push	{r4, lr}
 8004ece:	460c      	mov	r4, r1
 8004ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed4:	f000 f8be 	bl	8005054 <_read_r>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	bfab      	itete	ge
 8004edc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ede:	89a3      	ldrhlt	r3, [r4, #12]
 8004ee0:	181b      	addge	r3, r3, r0
 8004ee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ee6:	bfac      	ite	ge
 8004ee8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004eea:	81a3      	strhlt	r3, [r4, #12]
 8004eec:	bd10      	pop	{r4, pc}

08004eee <__swrite>:
 8004eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef2:	461f      	mov	r7, r3
 8004ef4:	898b      	ldrh	r3, [r1, #12]
 8004ef6:	05db      	lsls	r3, r3, #23
 8004ef8:	4605      	mov	r5, r0
 8004efa:	460c      	mov	r4, r1
 8004efc:	4616      	mov	r6, r2
 8004efe:	d505      	bpl.n	8004f0c <__swrite+0x1e>
 8004f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f04:	2302      	movs	r3, #2
 8004f06:	2200      	movs	r2, #0
 8004f08:	f000 f892 	bl	8005030 <_lseek_r>
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f16:	81a3      	strh	r3, [r4, #12]
 8004f18:	4632      	mov	r2, r6
 8004f1a:	463b      	mov	r3, r7
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f22:	f000 b8a9 	b.w	8005078 <_write_r>

08004f26 <__sseek>:
 8004f26:	b510      	push	{r4, lr}
 8004f28:	460c      	mov	r4, r1
 8004f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f2e:	f000 f87f 	bl	8005030 <_lseek_r>
 8004f32:	1c43      	adds	r3, r0, #1
 8004f34:	89a3      	ldrh	r3, [r4, #12]
 8004f36:	bf15      	itete	ne
 8004f38:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f42:	81a3      	strheq	r3, [r4, #12]
 8004f44:	bf18      	it	ne
 8004f46:	81a3      	strhne	r3, [r4, #12]
 8004f48:	bd10      	pop	{r4, pc}

08004f4a <__sclose>:
 8004f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f4e:	f000 b809 	b.w	8004f64 <_close_r>

08004f52 <memset>:
 8004f52:	4402      	add	r2, r0
 8004f54:	4603      	mov	r3, r0
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d100      	bne.n	8004f5c <memset+0xa>
 8004f5a:	4770      	bx	lr
 8004f5c:	f803 1b01 	strb.w	r1, [r3], #1
 8004f60:	e7f9      	b.n	8004f56 <memset+0x4>
	...

08004f64 <_close_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	4d06      	ldr	r5, [pc, #24]	; (8004f80 <_close_r+0x1c>)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	4608      	mov	r0, r1
 8004f6e:	602b      	str	r3, [r5, #0]
 8004f70:	f7fb fec5 	bl	8000cfe <_close>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d102      	bne.n	8004f7e <_close_r+0x1a>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	b103      	cbz	r3, 8004f7e <_close_r+0x1a>
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	20004254 	.word	0x20004254

08004f84 <_reclaim_reent>:
 8004f84:	4b29      	ldr	r3, [pc, #164]	; (800502c <_reclaim_reent+0xa8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4283      	cmp	r3, r0
 8004f8a:	b570      	push	{r4, r5, r6, lr}
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	d04b      	beq.n	8005028 <_reclaim_reent+0xa4>
 8004f90:	69c3      	ldr	r3, [r0, #28]
 8004f92:	b143      	cbz	r3, 8004fa6 <_reclaim_reent+0x22>
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d144      	bne.n	8005024 <_reclaim_reent+0xa0>
 8004f9a:	69e3      	ldr	r3, [r4, #28]
 8004f9c:	6819      	ldr	r1, [r3, #0]
 8004f9e:	b111      	cbz	r1, 8004fa6 <_reclaim_reent+0x22>
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f000 f8d5 	bl	8005150 <_free_r>
 8004fa6:	6961      	ldr	r1, [r4, #20]
 8004fa8:	b111      	cbz	r1, 8004fb0 <_reclaim_reent+0x2c>
 8004faa:	4620      	mov	r0, r4
 8004fac:	f000 f8d0 	bl	8005150 <_free_r>
 8004fb0:	69e1      	ldr	r1, [r4, #28]
 8004fb2:	b111      	cbz	r1, 8004fba <_reclaim_reent+0x36>
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f000 f8cb 	bl	8005150 <_free_r>
 8004fba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004fbc:	b111      	cbz	r1, 8004fc4 <_reclaim_reent+0x40>
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	f000 f8c6 	bl	8005150 <_free_r>
 8004fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fc6:	b111      	cbz	r1, 8004fce <_reclaim_reent+0x4a>
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f000 f8c1 	bl	8005150 <_free_r>
 8004fce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004fd0:	b111      	cbz	r1, 8004fd8 <_reclaim_reent+0x54>
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f000 f8bc 	bl	8005150 <_free_r>
 8004fd8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004fda:	b111      	cbz	r1, 8004fe2 <_reclaim_reent+0x5e>
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f000 f8b7 	bl	8005150 <_free_r>
 8004fe2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004fe4:	b111      	cbz	r1, 8004fec <_reclaim_reent+0x68>
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f000 f8b2 	bl	8005150 <_free_r>
 8004fec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004fee:	b111      	cbz	r1, 8004ff6 <_reclaim_reent+0x72>
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f000 f8ad 	bl	8005150 <_free_r>
 8004ff6:	6a23      	ldr	r3, [r4, #32]
 8004ff8:	b1b3      	cbz	r3, 8005028 <_reclaim_reent+0xa4>
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005000:	4718      	bx	r3
 8005002:	5949      	ldr	r1, [r1, r5]
 8005004:	b941      	cbnz	r1, 8005018 <_reclaim_reent+0x94>
 8005006:	3504      	adds	r5, #4
 8005008:	69e3      	ldr	r3, [r4, #28]
 800500a:	2d80      	cmp	r5, #128	; 0x80
 800500c:	68d9      	ldr	r1, [r3, #12]
 800500e:	d1f8      	bne.n	8005002 <_reclaim_reent+0x7e>
 8005010:	4620      	mov	r0, r4
 8005012:	f000 f89d 	bl	8005150 <_free_r>
 8005016:	e7c0      	b.n	8004f9a <_reclaim_reent+0x16>
 8005018:	680e      	ldr	r6, [r1, #0]
 800501a:	4620      	mov	r0, r4
 800501c:	f000 f898 	bl	8005150 <_free_r>
 8005020:	4631      	mov	r1, r6
 8005022:	e7ef      	b.n	8005004 <_reclaim_reent+0x80>
 8005024:	2500      	movs	r5, #0
 8005026:	e7ef      	b.n	8005008 <_reclaim_reent+0x84>
 8005028:	bd70      	pop	{r4, r5, r6, pc}
 800502a:	bf00      	nop
 800502c:	20000068 	.word	0x20000068

08005030 <_lseek_r>:
 8005030:	b538      	push	{r3, r4, r5, lr}
 8005032:	4d07      	ldr	r5, [pc, #28]	; (8005050 <_lseek_r+0x20>)
 8005034:	4604      	mov	r4, r0
 8005036:	4608      	mov	r0, r1
 8005038:	4611      	mov	r1, r2
 800503a:	2200      	movs	r2, #0
 800503c:	602a      	str	r2, [r5, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	f7fb fe84 	bl	8000d4c <_lseek>
 8005044:	1c43      	adds	r3, r0, #1
 8005046:	d102      	bne.n	800504e <_lseek_r+0x1e>
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	b103      	cbz	r3, 800504e <_lseek_r+0x1e>
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	bd38      	pop	{r3, r4, r5, pc}
 8005050:	20004254 	.word	0x20004254

08005054 <_read_r>:
 8005054:	b538      	push	{r3, r4, r5, lr}
 8005056:	4d07      	ldr	r5, [pc, #28]	; (8005074 <_read_r+0x20>)
 8005058:	4604      	mov	r4, r0
 800505a:	4608      	mov	r0, r1
 800505c:	4611      	mov	r1, r2
 800505e:	2200      	movs	r2, #0
 8005060:	602a      	str	r2, [r5, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	f7fb fe12 	bl	8000c8c <_read>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d102      	bne.n	8005072 <_read_r+0x1e>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	b103      	cbz	r3, 8005072 <_read_r+0x1e>
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	bd38      	pop	{r3, r4, r5, pc}
 8005074:	20004254 	.word	0x20004254

08005078 <_write_r>:
 8005078:	b538      	push	{r3, r4, r5, lr}
 800507a:	4d07      	ldr	r5, [pc, #28]	; (8005098 <_write_r+0x20>)
 800507c:	4604      	mov	r4, r0
 800507e:	4608      	mov	r0, r1
 8005080:	4611      	mov	r1, r2
 8005082:	2200      	movs	r2, #0
 8005084:	602a      	str	r2, [r5, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	f7fb fe1d 	bl	8000cc6 <_write>
 800508c:	1c43      	adds	r3, r0, #1
 800508e:	d102      	bne.n	8005096 <_write_r+0x1e>
 8005090:	682b      	ldr	r3, [r5, #0]
 8005092:	b103      	cbz	r3, 8005096 <_write_r+0x1e>
 8005094:	6023      	str	r3, [r4, #0]
 8005096:	bd38      	pop	{r3, r4, r5, pc}
 8005098:	20004254 	.word	0x20004254

0800509c <__errno>:
 800509c:	4b01      	ldr	r3, [pc, #4]	; (80050a4 <__errno+0x8>)
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	20000068 	.word	0x20000068

080050a8 <__libc_init_array>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	4d0d      	ldr	r5, [pc, #52]	; (80050e0 <__libc_init_array+0x38>)
 80050ac:	4c0d      	ldr	r4, [pc, #52]	; (80050e4 <__libc_init_array+0x3c>)
 80050ae:	1b64      	subs	r4, r4, r5
 80050b0:	10a4      	asrs	r4, r4, #2
 80050b2:	2600      	movs	r6, #0
 80050b4:	42a6      	cmp	r6, r4
 80050b6:	d109      	bne.n	80050cc <__libc_init_array+0x24>
 80050b8:	4d0b      	ldr	r5, [pc, #44]	; (80050e8 <__libc_init_array+0x40>)
 80050ba:	4c0c      	ldr	r4, [pc, #48]	; (80050ec <__libc_init_array+0x44>)
 80050bc:	f000 fffa 	bl	80060b4 <_init>
 80050c0:	1b64      	subs	r4, r4, r5
 80050c2:	10a4      	asrs	r4, r4, #2
 80050c4:	2600      	movs	r6, #0
 80050c6:	42a6      	cmp	r6, r4
 80050c8:	d105      	bne.n	80050d6 <__libc_init_array+0x2e>
 80050ca:	bd70      	pop	{r4, r5, r6, pc}
 80050cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d0:	4798      	blx	r3
 80050d2:	3601      	adds	r6, #1
 80050d4:	e7ee      	b.n	80050b4 <__libc_init_array+0xc>
 80050d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050da:	4798      	blx	r3
 80050dc:	3601      	adds	r6, #1
 80050de:	e7f2      	b.n	80050c6 <__libc_init_array+0x1e>
 80050e0:	08006238 	.word	0x08006238
 80050e4:	08006238 	.word	0x08006238
 80050e8:	08006238 	.word	0x08006238
 80050ec:	0800623c 	.word	0x0800623c

080050f0 <__retarget_lock_init_recursive>:
 80050f0:	4770      	bx	lr

080050f2 <__retarget_lock_acquire_recursive>:
 80050f2:	4770      	bx	lr

080050f4 <__retarget_lock_release_recursive>:
 80050f4:	4770      	bx	lr

080050f6 <memcpy>:
 80050f6:	440a      	add	r2, r1
 80050f8:	4291      	cmp	r1, r2
 80050fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80050fe:	d100      	bne.n	8005102 <memcpy+0xc>
 8005100:	4770      	bx	lr
 8005102:	b510      	push	{r4, lr}
 8005104:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005108:	f803 4f01 	strb.w	r4, [r3, #1]!
 800510c:	4291      	cmp	r1, r2
 800510e:	d1f9      	bne.n	8005104 <memcpy+0xe>
 8005110:	bd10      	pop	{r4, pc}
	...

08005114 <__assert_func>:
 8005114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005116:	4614      	mov	r4, r2
 8005118:	461a      	mov	r2, r3
 800511a:	4b09      	ldr	r3, [pc, #36]	; (8005140 <__assert_func+0x2c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4605      	mov	r5, r0
 8005120:	68d8      	ldr	r0, [r3, #12]
 8005122:	b14c      	cbz	r4, 8005138 <__assert_func+0x24>
 8005124:	4b07      	ldr	r3, [pc, #28]	; (8005144 <__assert_func+0x30>)
 8005126:	9100      	str	r1, [sp, #0]
 8005128:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800512c:	4906      	ldr	r1, [pc, #24]	; (8005148 <__assert_func+0x34>)
 800512e:	462b      	mov	r3, r5
 8005130:	f000 fca4 	bl	8005a7c <fiprintf>
 8005134:	f000 fcde 	bl	8005af4 <abort>
 8005138:	4b04      	ldr	r3, [pc, #16]	; (800514c <__assert_func+0x38>)
 800513a:	461c      	mov	r4, r3
 800513c:	e7f3      	b.n	8005126 <__assert_func+0x12>
 800513e:	bf00      	nop
 8005140:	20000068 	.word	0x20000068
 8005144:	080061bf 	.word	0x080061bf
 8005148:	080061cc 	.word	0x080061cc
 800514c:	080061fa 	.word	0x080061fa

08005150 <_free_r>:
 8005150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005152:	2900      	cmp	r1, #0
 8005154:	d044      	beq.n	80051e0 <_free_r+0x90>
 8005156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800515a:	9001      	str	r0, [sp, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	f1a1 0404 	sub.w	r4, r1, #4
 8005162:	bfb8      	it	lt
 8005164:	18e4      	addlt	r4, r4, r3
 8005166:	f000 f8e7 	bl	8005338 <__malloc_lock>
 800516a:	4a1e      	ldr	r2, [pc, #120]	; (80051e4 <_free_r+0x94>)
 800516c:	9801      	ldr	r0, [sp, #4]
 800516e:	6813      	ldr	r3, [r2, #0]
 8005170:	b933      	cbnz	r3, 8005180 <_free_r+0x30>
 8005172:	6063      	str	r3, [r4, #4]
 8005174:	6014      	str	r4, [r2, #0]
 8005176:	b003      	add	sp, #12
 8005178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800517c:	f000 b8e2 	b.w	8005344 <__malloc_unlock>
 8005180:	42a3      	cmp	r3, r4
 8005182:	d908      	bls.n	8005196 <_free_r+0x46>
 8005184:	6825      	ldr	r5, [r4, #0]
 8005186:	1961      	adds	r1, r4, r5
 8005188:	428b      	cmp	r3, r1
 800518a:	bf01      	itttt	eq
 800518c:	6819      	ldreq	r1, [r3, #0]
 800518e:	685b      	ldreq	r3, [r3, #4]
 8005190:	1949      	addeq	r1, r1, r5
 8005192:	6021      	streq	r1, [r4, #0]
 8005194:	e7ed      	b.n	8005172 <_free_r+0x22>
 8005196:	461a      	mov	r2, r3
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	b10b      	cbz	r3, 80051a0 <_free_r+0x50>
 800519c:	42a3      	cmp	r3, r4
 800519e:	d9fa      	bls.n	8005196 <_free_r+0x46>
 80051a0:	6811      	ldr	r1, [r2, #0]
 80051a2:	1855      	adds	r5, r2, r1
 80051a4:	42a5      	cmp	r5, r4
 80051a6:	d10b      	bne.n	80051c0 <_free_r+0x70>
 80051a8:	6824      	ldr	r4, [r4, #0]
 80051aa:	4421      	add	r1, r4
 80051ac:	1854      	adds	r4, r2, r1
 80051ae:	42a3      	cmp	r3, r4
 80051b0:	6011      	str	r1, [r2, #0]
 80051b2:	d1e0      	bne.n	8005176 <_free_r+0x26>
 80051b4:	681c      	ldr	r4, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	6053      	str	r3, [r2, #4]
 80051ba:	440c      	add	r4, r1
 80051bc:	6014      	str	r4, [r2, #0]
 80051be:	e7da      	b.n	8005176 <_free_r+0x26>
 80051c0:	d902      	bls.n	80051c8 <_free_r+0x78>
 80051c2:	230c      	movs	r3, #12
 80051c4:	6003      	str	r3, [r0, #0]
 80051c6:	e7d6      	b.n	8005176 <_free_r+0x26>
 80051c8:	6825      	ldr	r5, [r4, #0]
 80051ca:	1961      	adds	r1, r4, r5
 80051cc:	428b      	cmp	r3, r1
 80051ce:	bf04      	itt	eq
 80051d0:	6819      	ldreq	r1, [r3, #0]
 80051d2:	685b      	ldreq	r3, [r3, #4]
 80051d4:	6063      	str	r3, [r4, #4]
 80051d6:	bf04      	itt	eq
 80051d8:	1949      	addeq	r1, r1, r5
 80051da:	6021      	streq	r1, [r4, #0]
 80051dc:	6054      	str	r4, [r2, #4]
 80051de:	e7ca      	b.n	8005176 <_free_r+0x26>
 80051e0:	b003      	add	sp, #12
 80051e2:	bd30      	pop	{r4, r5, pc}
 80051e4:	2000425c 	.word	0x2000425c

080051e8 <malloc>:
 80051e8:	4b02      	ldr	r3, [pc, #8]	; (80051f4 <malloc+0xc>)
 80051ea:	4601      	mov	r1, r0
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	f000 b823 	b.w	8005238 <_malloc_r>
 80051f2:	bf00      	nop
 80051f4:	20000068 	.word	0x20000068

080051f8 <sbrk_aligned>:
 80051f8:	b570      	push	{r4, r5, r6, lr}
 80051fa:	4e0e      	ldr	r6, [pc, #56]	; (8005234 <sbrk_aligned+0x3c>)
 80051fc:	460c      	mov	r4, r1
 80051fe:	6831      	ldr	r1, [r6, #0]
 8005200:	4605      	mov	r5, r0
 8005202:	b911      	cbnz	r1, 800520a <sbrk_aligned+0x12>
 8005204:	f000 fc66 	bl	8005ad4 <_sbrk_r>
 8005208:	6030      	str	r0, [r6, #0]
 800520a:	4621      	mov	r1, r4
 800520c:	4628      	mov	r0, r5
 800520e:	f000 fc61 	bl	8005ad4 <_sbrk_r>
 8005212:	1c43      	adds	r3, r0, #1
 8005214:	d00a      	beq.n	800522c <sbrk_aligned+0x34>
 8005216:	1cc4      	adds	r4, r0, #3
 8005218:	f024 0403 	bic.w	r4, r4, #3
 800521c:	42a0      	cmp	r0, r4
 800521e:	d007      	beq.n	8005230 <sbrk_aligned+0x38>
 8005220:	1a21      	subs	r1, r4, r0
 8005222:	4628      	mov	r0, r5
 8005224:	f000 fc56 	bl	8005ad4 <_sbrk_r>
 8005228:	3001      	adds	r0, #1
 800522a:	d101      	bne.n	8005230 <sbrk_aligned+0x38>
 800522c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005230:	4620      	mov	r0, r4
 8005232:	bd70      	pop	{r4, r5, r6, pc}
 8005234:	20004260 	.word	0x20004260

08005238 <_malloc_r>:
 8005238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800523c:	1ccd      	adds	r5, r1, #3
 800523e:	f025 0503 	bic.w	r5, r5, #3
 8005242:	3508      	adds	r5, #8
 8005244:	2d0c      	cmp	r5, #12
 8005246:	bf38      	it	cc
 8005248:	250c      	movcc	r5, #12
 800524a:	2d00      	cmp	r5, #0
 800524c:	4607      	mov	r7, r0
 800524e:	db01      	blt.n	8005254 <_malloc_r+0x1c>
 8005250:	42a9      	cmp	r1, r5
 8005252:	d905      	bls.n	8005260 <_malloc_r+0x28>
 8005254:	230c      	movs	r3, #12
 8005256:	603b      	str	r3, [r7, #0]
 8005258:	2600      	movs	r6, #0
 800525a:	4630      	mov	r0, r6
 800525c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005260:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005334 <_malloc_r+0xfc>
 8005264:	f000 f868 	bl	8005338 <__malloc_lock>
 8005268:	f8d8 3000 	ldr.w	r3, [r8]
 800526c:	461c      	mov	r4, r3
 800526e:	bb5c      	cbnz	r4, 80052c8 <_malloc_r+0x90>
 8005270:	4629      	mov	r1, r5
 8005272:	4638      	mov	r0, r7
 8005274:	f7ff ffc0 	bl	80051f8 <sbrk_aligned>
 8005278:	1c43      	adds	r3, r0, #1
 800527a:	4604      	mov	r4, r0
 800527c:	d155      	bne.n	800532a <_malloc_r+0xf2>
 800527e:	f8d8 4000 	ldr.w	r4, [r8]
 8005282:	4626      	mov	r6, r4
 8005284:	2e00      	cmp	r6, #0
 8005286:	d145      	bne.n	8005314 <_malloc_r+0xdc>
 8005288:	2c00      	cmp	r4, #0
 800528a:	d048      	beq.n	800531e <_malloc_r+0xe6>
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	4631      	mov	r1, r6
 8005290:	4638      	mov	r0, r7
 8005292:	eb04 0903 	add.w	r9, r4, r3
 8005296:	f000 fc1d 	bl	8005ad4 <_sbrk_r>
 800529a:	4581      	cmp	r9, r0
 800529c:	d13f      	bne.n	800531e <_malloc_r+0xe6>
 800529e:	6821      	ldr	r1, [r4, #0]
 80052a0:	1a6d      	subs	r5, r5, r1
 80052a2:	4629      	mov	r1, r5
 80052a4:	4638      	mov	r0, r7
 80052a6:	f7ff ffa7 	bl	80051f8 <sbrk_aligned>
 80052aa:	3001      	adds	r0, #1
 80052ac:	d037      	beq.n	800531e <_malloc_r+0xe6>
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	442b      	add	r3, r5
 80052b2:	6023      	str	r3, [r4, #0]
 80052b4:	f8d8 3000 	ldr.w	r3, [r8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d038      	beq.n	800532e <_malloc_r+0xf6>
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	42a2      	cmp	r2, r4
 80052c0:	d12b      	bne.n	800531a <_malloc_r+0xe2>
 80052c2:	2200      	movs	r2, #0
 80052c4:	605a      	str	r2, [r3, #4]
 80052c6:	e00f      	b.n	80052e8 <_malloc_r+0xb0>
 80052c8:	6822      	ldr	r2, [r4, #0]
 80052ca:	1b52      	subs	r2, r2, r5
 80052cc:	d41f      	bmi.n	800530e <_malloc_r+0xd6>
 80052ce:	2a0b      	cmp	r2, #11
 80052d0:	d917      	bls.n	8005302 <_malloc_r+0xca>
 80052d2:	1961      	adds	r1, r4, r5
 80052d4:	42a3      	cmp	r3, r4
 80052d6:	6025      	str	r5, [r4, #0]
 80052d8:	bf18      	it	ne
 80052da:	6059      	strne	r1, [r3, #4]
 80052dc:	6863      	ldr	r3, [r4, #4]
 80052de:	bf08      	it	eq
 80052e0:	f8c8 1000 	streq.w	r1, [r8]
 80052e4:	5162      	str	r2, [r4, r5]
 80052e6:	604b      	str	r3, [r1, #4]
 80052e8:	4638      	mov	r0, r7
 80052ea:	f104 060b 	add.w	r6, r4, #11
 80052ee:	f000 f829 	bl	8005344 <__malloc_unlock>
 80052f2:	f026 0607 	bic.w	r6, r6, #7
 80052f6:	1d23      	adds	r3, r4, #4
 80052f8:	1af2      	subs	r2, r6, r3
 80052fa:	d0ae      	beq.n	800525a <_malloc_r+0x22>
 80052fc:	1b9b      	subs	r3, r3, r6
 80052fe:	50a3      	str	r3, [r4, r2]
 8005300:	e7ab      	b.n	800525a <_malloc_r+0x22>
 8005302:	42a3      	cmp	r3, r4
 8005304:	6862      	ldr	r2, [r4, #4]
 8005306:	d1dd      	bne.n	80052c4 <_malloc_r+0x8c>
 8005308:	f8c8 2000 	str.w	r2, [r8]
 800530c:	e7ec      	b.n	80052e8 <_malloc_r+0xb0>
 800530e:	4623      	mov	r3, r4
 8005310:	6864      	ldr	r4, [r4, #4]
 8005312:	e7ac      	b.n	800526e <_malloc_r+0x36>
 8005314:	4634      	mov	r4, r6
 8005316:	6876      	ldr	r6, [r6, #4]
 8005318:	e7b4      	b.n	8005284 <_malloc_r+0x4c>
 800531a:	4613      	mov	r3, r2
 800531c:	e7cc      	b.n	80052b8 <_malloc_r+0x80>
 800531e:	230c      	movs	r3, #12
 8005320:	603b      	str	r3, [r7, #0]
 8005322:	4638      	mov	r0, r7
 8005324:	f000 f80e 	bl	8005344 <__malloc_unlock>
 8005328:	e797      	b.n	800525a <_malloc_r+0x22>
 800532a:	6025      	str	r5, [r4, #0]
 800532c:	e7dc      	b.n	80052e8 <_malloc_r+0xb0>
 800532e:	605b      	str	r3, [r3, #4]
 8005330:	deff      	udf	#255	; 0xff
 8005332:	bf00      	nop
 8005334:	2000425c 	.word	0x2000425c

08005338 <__malloc_lock>:
 8005338:	4801      	ldr	r0, [pc, #4]	; (8005340 <__malloc_lock+0x8>)
 800533a:	f7ff beda 	b.w	80050f2 <__retarget_lock_acquire_recursive>
 800533e:	bf00      	nop
 8005340:	20004258 	.word	0x20004258

08005344 <__malloc_unlock>:
 8005344:	4801      	ldr	r0, [pc, #4]	; (800534c <__malloc_unlock+0x8>)
 8005346:	f7ff bed5 	b.w	80050f4 <__retarget_lock_release_recursive>
 800534a:	bf00      	nop
 800534c:	20004258 	.word	0x20004258

08005350 <__ssputs_r>:
 8005350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005354:	688e      	ldr	r6, [r1, #8]
 8005356:	461f      	mov	r7, r3
 8005358:	42be      	cmp	r6, r7
 800535a:	680b      	ldr	r3, [r1, #0]
 800535c:	4682      	mov	sl, r0
 800535e:	460c      	mov	r4, r1
 8005360:	4690      	mov	r8, r2
 8005362:	d82c      	bhi.n	80053be <__ssputs_r+0x6e>
 8005364:	898a      	ldrh	r2, [r1, #12]
 8005366:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800536a:	d026      	beq.n	80053ba <__ssputs_r+0x6a>
 800536c:	6965      	ldr	r5, [r4, #20]
 800536e:	6909      	ldr	r1, [r1, #16]
 8005370:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005374:	eba3 0901 	sub.w	r9, r3, r1
 8005378:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800537c:	1c7b      	adds	r3, r7, #1
 800537e:	444b      	add	r3, r9
 8005380:	106d      	asrs	r5, r5, #1
 8005382:	429d      	cmp	r5, r3
 8005384:	bf38      	it	cc
 8005386:	461d      	movcc	r5, r3
 8005388:	0553      	lsls	r3, r2, #21
 800538a:	d527      	bpl.n	80053dc <__ssputs_r+0x8c>
 800538c:	4629      	mov	r1, r5
 800538e:	f7ff ff53 	bl	8005238 <_malloc_r>
 8005392:	4606      	mov	r6, r0
 8005394:	b360      	cbz	r0, 80053f0 <__ssputs_r+0xa0>
 8005396:	6921      	ldr	r1, [r4, #16]
 8005398:	464a      	mov	r2, r9
 800539a:	f7ff feac 	bl	80050f6 <memcpy>
 800539e:	89a3      	ldrh	r3, [r4, #12]
 80053a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a8:	81a3      	strh	r3, [r4, #12]
 80053aa:	6126      	str	r6, [r4, #16]
 80053ac:	6165      	str	r5, [r4, #20]
 80053ae:	444e      	add	r6, r9
 80053b0:	eba5 0509 	sub.w	r5, r5, r9
 80053b4:	6026      	str	r6, [r4, #0]
 80053b6:	60a5      	str	r5, [r4, #8]
 80053b8:	463e      	mov	r6, r7
 80053ba:	42be      	cmp	r6, r7
 80053bc:	d900      	bls.n	80053c0 <__ssputs_r+0x70>
 80053be:	463e      	mov	r6, r7
 80053c0:	6820      	ldr	r0, [r4, #0]
 80053c2:	4632      	mov	r2, r6
 80053c4:	4641      	mov	r1, r8
 80053c6:	f000 fb6b 	bl	8005aa0 <memmove>
 80053ca:	68a3      	ldr	r3, [r4, #8]
 80053cc:	1b9b      	subs	r3, r3, r6
 80053ce:	60a3      	str	r3, [r4, #8]
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	4433      	add	r3, r6
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	2000      	movs	r0, #0
 80053d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053dc:	462a      	mov	r2, r5
 80053de:	f000 fb90 	bl	8005b02 <_realloc_r>
 80053e2:	4606      	mov	r6, r0
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d1e0      	bne.n	80053aa <__ssputs_r+0x5a>
 80053e8:	6921      	ldr	r1, [r4, #16]
 80053ea:	4650      	mov	r0, sl
 80053ec:	f7ff feb0 	bl	8005150 <_free_r>
 80053f0:	230c      	movs	r3, #12
 80053f2:	f8ca 3000 	str.w	r3, [sl]
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053fc:	81a3      	strh	r3, [r4, #12]
 80053fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005402:	e7e9      	b.n	80053d8 <__ssputs_r+0x88>

08005404 <_svfiprintf_r>:
 8005404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005408:	4698      	mov	r8, r3
 800540a:	898b      	ldrh	r3, [r1, #12]
 800540c:	061b      	lsls	r3, r3, #24
 800540e:	b09d      	sub	sp, #116	; 0x74
 8005410:	4607      	mov	r7, r0
 8005412:	460d      	mov	r5, r1
 8005414:	4614      	mov	r4, r2
 8005416:	d50e      	bpl.n	8005436 <_svfiprintf_r+0x32>
 8005418:	690b      	ldr	r3, [r1, #16]
 800541a:	b963      	cbnz	r3, 8005436 <_svfiprintf_r+0x32>
 800541c:	2140      	movs	r1, #64	; 0x40
 800541e:	f7ff ff0b 	bl	8005238 <_malloc_r>
 8005422:	6028      	str	r0, [r5, #0]
 8005424:	6128      	str	r0, [r5, #16]
 8005426:	b920      	cbnz	r0, 8005432 <_svfiprintf_r+0x2e>
 8005428:	230c      	movs	r3, #12
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005430:	e0d0      	b.n	80055d4 <_svfiprintf_r+0x1d0>
 8005432:	2340      	movs	r3, #64	; 0x40
 8005434:	616b      	str	r3, [r5, #20]
 8005436:	2300      	movs	r3, #0
 8005438:	9309      	str	r3, [sp, #36]	; 0x24
 800543a:	2320      	movs	r3, #32
 800543c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005440:	f8cd 800c 	str.w	r8, [sp, #12]
 8005444:	2330      	movs	r3, #48	; 0x30
 8005446:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80055ec <_svfiprintf_r+0x1e8>
 800544a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800544e:	f04f 0901 	mov.w	r9, #1
 8005452:	4623      	mov	r3, r4
 8005454:	469a      	mov	sl, r3
 8005456:	f813 2b01 	ldrb.w	r2, [r3], #1
 800545a:	b10a      	cbz	r2, 8005460 <_svfiprintf_r+0x5c>
 800545c:	2a25      	cmp	r2, #37	; 0x25
 800545e:	d1f9      	bne.n	8005454 <_svfiprintf_r+0x50>
 8005460:	ebba 0b04 	subs.w	fp, sl, r4
 8005464:	d00b      	beq.n	800547e <_svfiprintf_r+0x7a>
 8005466:	465b      	mov	r3, fp
 8005468:	4622      	mov	r2, r4
 800546a:	4629      	mov	r1, r5
 800546c:	4638      	mov	r0, r7
 800546e:	f7ff ff6f 	bl	8005350 <__ssputs_r>
 8005472:	3001      	adds	r0, #1
 8005474:	f000 80a9 	beq.w	80055ca <_svfiprintf_r+0x1c6>
 8005478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800547a:	445a      	add	r2, fp
 800547c:	9209      	str	r2, [sp, #36]	; 0x24
 800547e:	f89a 3000 	ldrb.w	r3, [sl]
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 80a1 	beq.w	80055ca <_svfiprintf_r+0x1c6>
 8005488:	2300      	movs	r3, #0
 800548a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800548e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005492:	f10a 0a01 	add.w	sl, sl, #1
 8005496:	9304      	str	r3, [sp, #16]
 8005498:	9307      	str	r3, [sp, #28]
 800549a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800549e:	931a      	str	r3, [sp, #104]	; 0x68
 80054a0:	4654      	mov	r4, sl
 80054a2:	2205      	movs	r2, #5
 80054a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a8:	4850      	ldr	r0, [pc, #320]	; (80055ec <_svfiprintf_r+0x1e8>)
 80054aa:	f7fa fe91 	bl	80001d0 <memchr>
 80054ae:	9a04      	ldr	r2, [sp, #16]
 80054b0:	b9d8      	cbnz	r0, 80054ea <_svfiprintf_r+0xe6>
 80054b2:	06d0      	lsls	r0, r2, #27
 80054b4:	bf44      	itt	mi
 80054b6:	2320      	movmi	r3, #32
 80054b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054bc:	0711      	lsls	r1, r2, #28
 80054be:	bf44      	itt	mi
 80054c0:	232b      	movmi	r3, #43	; 0x2b
 80054c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054c6:	f89a 3000 	ldrb.w	r3, [sl]
 80054ca:	2b2a      	cmp	r3, #42	; 0x2a
 80054cc:	d015      	beq.n	80054fa <_svfiprintf_r+0xf6>
 80054ce:	9a07      	ldr	r2, [sp, #28]
 80054d0:	4654      	mov	r4, sl
 80054d2:	2000      	movs	r0, #0
 80054d4:	f04f 0c0a 	mov.w	ip, #10
 80054d8:	4621      	mov	r1, r4
 80054da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054de:	3b30      	subs	r3, #48	; 0x30
 80054e0:	2b09      	cmp	r3, #9
 80054e2:	d94d      	bls.n	8005580 <_svfiprintf_r+0x17c>
 80054e4:	b1b0      	cbz	r0, 8005514 <_svfiprintf_r+0x110>
 80054e6:	9207      	str	r2, [sp, #28]
 80054e8:	e014      	b.n	8005514 <_svfiprintf_r+0x110>
 80054ea:	eba0 0308 	sub.w	r3, r0, r8
 80054ee:	fa09 f303 	lsl.w	r3, r9, r3
 80054f2:	4313      	orrs	r3, r2
 80054f4:	9304      	str	r3, [sp, #16]
 80054f6:	46a2      	mov	sl, r4
 80054f8:	e7d2      	b.n	80054a0 <_svfiprintf_r+0x9c>
 80054fa:	9b03      	ldr	r3, [sp, #12]
 80054fc:	1d19      	adds	r1, r3, #4
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	9103      	str	r1, [sp, #12]
 8005502:	2b00      	cmp	r3, #0
 8005504:	bfbb      	ittet	lt
 8005506:	425b      	neglt	r3, r3
 8005508:	f042 0202 	orrlt.w	r2, r2, #2
 800550c:	9307      	strge	r3, [sp, #28]
 800550e:	9307      	strlt	r3, [sp, #28]
 8005510:	bfb8      	it	lt
 8005512:	9204      	strlt	r2, [sp, #16]
 8005514:	7823      	ldrb	r3, [r4, #0]
 8005516:	2b2e      	cmp	r3, #46	; 0x2e
 8005518:	d10c      	bne.n	8005534 <_svfiprintf_r+0x130>
 800551a:	7863      	ldrb	r3, [r4, #1]
 800551c:	2b2a      	cmp	r3, #42	; 0x2a
 800551e:	d134      	bne.n	800558a <_svfiprintf_r+0x186>
 8005520:	9b03      	ldr	r3, [sp, #12]
 8005522:	1d1a      	adds	r2, r3, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	9203      	str	r2, [sp, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	bfb8      	it	lt
 800552c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005530:	3402      	adds	r4, #2
 8005532:	9305      	str	r3, [sp, #20]
 8005534:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80055fc <_svfiprintf_r+0x1f8>
 8005538:	7821      	ldrb	r1, [r4, #0]
 800553a:	2203      	movs	r2, #3
 800553c:	4650      	mov	r0, sl
 800553e:	f7fa fe47 	bl	80001d0 <memchr>
 8005542:	b138      	cbz	r0, 8005554 <_svfiprintf_r+0x150>
 8005544:	9b04      	ldr	r3, [sp, #16]
 8005546:	eba0 000a 	sub.w	r0, r0, sl
 800554a:	2240      	movs	r2, #64	; 0x40
 800554c:	4082      	lsls	r2, r0
 800554e:	4313      	orrs	r3, r2
 8005550:	3401      	adds	r4, #1
 8005552:	9304      	str	r3, [sp, #16]
 8005554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005558:	4825      	ldr	r0, [pc, #148]	; (80055f0 <_svfiprintf_r+0x1ec>)
 800555a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800555e:	2206      	movs	r2, #6
 8005560:	f7fa fe36 	bl	80001d0 <memchr>
 8005564:	2800      	cmp	r0, #0
 8005566:	d038      	beq.n	80055da <_svfiprintf_r+0x1d6>
 8005568:	4b22      	ldr	r3, [pc, #136]	; (80055f4 <_svfiprintf_r+0x1f0>)
 800556a:	bb1b      	cbnz	r3, 80055b4 <_svfiprintf_r+0x1b0>
 800556c:	9b03      	ldr	r3, [sp, #12]
 800556e:	3307      	adds	r3, #7
 8005570:	f023 0307 	bic.w	r3, r3, #7
 8005574:	3308      	adds	r3, #8
 8005576:	9303      	str	r3, [sp, #12]
 8005578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800557a:	4433      	add	r3, r6
 800557c:	9309      	str	r3, [sp, #36]	; 0x24
 800557e:	e768      	b.n	8005452 <_svfiprintf_r+0x4e>
 8005580:	fb0c 3202 	mla	r2, ip, r2, r3
 8005584:	460c      	mov	r4, r1
 8005586:	2001      	movs	r0, #1
 8005588:	e7a6      	b.n	80054d8 <_svfiprintf_r+0xd4>
 800558a:	2300      	movs	r3, #0
 800558c:	3401      	adds	r4, #1
 800558e:	9305      	str	r3, [sp, #20]
 8005590:	4619      	mov	r1, r3
 8005592:	f04f 0c0a 	mov.w	ip, #10
 8005596:	4620      	mov	r0, r4
 8005598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800559c:	3a30      	subs	r2, #48	; 0x30
 800559e:	2a09      	cmp	r2, #9
 80055a0:	d903      	bls.n	80055aa <_svfiprintf_r+0x1a6>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0c6      	beq.n	8005534 <_svfiprintf_r+0x130>
 80055a6:	9105      	str	r1, [sp, #20]
 80055a8:	e7c4      	b.n	8005534 <_svfiprintf_r+0x130>
 80055aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80055ae:	4604      	mov	r4, r0
 80055b0:	2301      	movs	r3, #1
 80055b2:	e7f0      	b.n	8005596 <_svfiprintf_r+0x192>
 80055b4:	ab03      	add	r3, sp, #12
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	462a      	mov	r2, r5
 80055ba:	4b0f      	ldr	r3, [pc, #60]	; (80055f8 <_svfiprintf_r+0x1f4>)
 80055bc:	a904      	add	r1, sp, #16
 80055be:	4638      	mov	r0, r7
 80055c0:	f3af 8000 	nop.w
 80055c4:	1c42      	adds	r2, r0, #1
 80055c6:	4606      	mov	r6, r0
 80055c8:	d1d6      	bne.n	8005578 <_svfiprintf_r+0x174>
 80055ca:	89ab      	ldrh	r3, [r5, #12]
 80055cc:	065b      	lsls	r3, r3, #25
 80055ce:	f53f af2d 	bmi.w	800542c <_svfiprintf_r+0x28>
 80055d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055d4:	b01d      	add	sp, #116	; 0x74
 80055d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055da:	ab03      	add	r3, sp, #12
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	462a      	mov	r2, r5
 80055e0:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <_svfiprintf_r+0x1f4>)
 80055e2:	a904      	add	r1, sp, #16
 80055e4:	4638      	mov	r0, r7
 80055e6:	f000 f879 	bl	80056dc <_printf_i>
 80055ea:	e7eb      	b.n	80055c4 <_svfiprintf_r+0x1c0>
 80055ec:	080061fb 	.word	0x080061fb
 80055f0:	08006205 	.word	0x08006205
 80055f4:	00000000 	.word	0x00000000
 80055f8:	08005351 	.word	0x08005351
 80055fc:	08006201 	.word	0x08006201

08005600 <_printf_common>:
 8005600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005604:	4616      	mov	r6, r2
 8005606:	4699      	mov	r9, r3
 8005608:	688a      	ldr	r2, [r1, #8]
 800560a:	690b      	ldr	r3, [r1, #16]
 800560c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005610:	4293      	cmp	r3, r2
 8005612:	bfb8      	it	lt
 8005614:	4613      	movlt	r3, r2
 8005616:	6033      	str	r3, [r6, #0]
 8005618:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800561c:	4607      	mov	r7, r0
 800561e:	460c      	mov	r4, r1
 8005620:	b10a      	cbz	r2, 8005626 <_printf_common+0x26>
 8005622:	3301      	adds	r3, #1
 8005624:	6033      	str	r3, [r6, #0]
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	0699      	lsls	r1, r3, #26
 800562a:	bf42      	ittt	mi
 800562c:	6833      	ldrmi	r3, [r6, #0]
 800562e:	3302      	addmi	r3, #2
 8005630:	6033      	strmi	r3, [r6, #0]
 8005632:	6825      	ldr	r5, [r4, #0]
 8005634:	f015 0506 	ands.w	r5, r5, #6
 8005638:	d106      	bne.n	8005648 <_printf_common+0x48>
 800563a:	f104 0a19 	add.w	sl, r4, #25
 800563e:	68e3      	ldr	r3, [r4, #12]
 8005640:	6832      	ldr	r2, [r6, #0]
 8005642:	1a9b      	subs	r3, r3, r2
 8005644:	42ab      	cmp	r3, r5
 8005646:	dc26      	bgt.n	8005696 <_printf_common+0x96>
 8005648:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800564c:	1e13      	subs	r3, r2, #0
 800564e:	6822      	ldr	r2, [r4, #0]
 8005650:	bf18      	it	ne
 8005652:	2301      	movne	r3, #1
 8005654:	0692      	lsls	r2, r2, #26
 8005656:	d42b      	bmi.n	80056b0 <_printf_common+0xb0>
 8005658:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800565c:	4649      	mov	r1, r9
 800565e:	4638      	mov	r0, r7
 8005660:	47c0      	blx	r8
 8005662:	3001      	adds	r0, #1
 8005664:	d01e      	beq.n	80056a4 <_printf_common+0xa4>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	6922      	ldr	r2, [r4, #16]
 800566a:	f003 0306 	and.w	r3, r3, #6
 800566e:	2b04      	cmp	r3, #4
 8005670:	bf02      	ittt	eq
 8005672:	68e5      	ldreq	r5, [r4, #12]
 8005674:	6833      	ldreq	r3, [r6, #0]
 8005676:	1aed      	subeq	r5, r5, r3
 8005678:	68a3      	ldr	r3, [r4, #8]
 800567a:	bf0c      	ite	eq
 800567c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005680:	2500      	movne	r5, #0
 8005682:	4293      	cmp	r3, r2
 8005684:	bfc4      	itt	gt
 8005686:	1a9b      	subgt	r3, r3, r2
 8005688:	18ed      	addgt	r5, r5, r3
 800568a:	2600      	movs	r6, #0
 800568c:	341a      	adds	r4, #26
 800568e:	42b5      	cmp	r5, r6
 8005690:	d11a      	bne.n	80056c8 <_printf_common+0xc8>
 8005692:	2000      	movs	r0, #0
 8005694:	e008      	b.n	80056a8 <_printf_common+0xa8>
 8005696:	2301      	movs	r3, #1
 8005698:	4652      	mov	r2, sl
 800569a:	4649      	mov	r1, r9
 800569c:	4638      	mov	r0, r7
 800569e:	47c0      	blx	r8
 80056a0:	3001      	adds	r0, #1
 80056a2:	d103      	bne.n	80056ac <_printf_common+0xac>
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ac:	3501      	adds	r5, #1
 80056ae:	e7c6      	b.n	800563e <_printf_common+0x3e>
 80056b0:	18e1      	adds	r1, r4, r3
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	2030      	movs	r0, #48	; 0x30
 80056b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056ba:	4422      	add	r2, r4
 80056bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056c4:	3302      	adds	r3, #2
 80056c6:	e7c7      	b.n	8005658 <_printf_common+0x58>
 80056c8:	2301      	movs	r3, #1
 80056ca:	4622      	mov	r2, r4
 80056cc:	4649      	mov	r1, r9
 80056ce:	4638      	mov	r0, r7
 80056d0:	47c0      	blx	r8
 80056d2:	3001      	adds	r0, #1
 80056d4:	d0e6      	beq.n	80056a4 <_printf_common+0xa4>
 80056d6:	3601      	adds	r6, #1
 80056d8:	e7d9      	b.n	800568e <_printf_common+0x8e>
	...

080056dc <_printf_i>:
 80056dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056e0:	7e0f      	ldrb	r7, [r1, #24]
 80056e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056e4:	2f78      	cmp	r7, #120	; 0x78
 80056e6:	4691      	mov	r9, r2
 80056e8:	4680      	mov	r8, r0
 80056ea:	460c      	mov	r4, r1
 80056ec:	469a      	mov	sl, r3
 80056ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056f2:	d807      	bhi.n	8005704 <_printf_i+0x28>
 80056f4:	2f62      	cmp	r7, #98	; 0x62
 80056f6:	d80a      	bhi.n	800570e <_printf_i+0x32>
 80056f8:	2f00      	cmp	r7, #0
 80056fa:	f000 80d4 	beq.w	80058a6 <_printf_i+0x1ca>
 80056fe:	2f58      	cmp	r7, #88	; 0x58
 8005700:	f000 80c0 	beq.w	8005884 <_printf_i+0x1a8>
 8005704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005708:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800570c:	e03a      	b.n	8005784 <_printf_i+0xa8>
 800570e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005712:	2b15      	cmp	r3, #21
 8005714:	d8f6      	bhi.n	8005704 <_printf_i+0x28>
 8005716:	a101      	add	r1, pc, #4	; (adr r1, 800571c <_printf_i+0x40>)
 8005718:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800571c:	08005775 	.word	0x08005775
 8005720:	08005789 	.word	0x08005789
 8005724:	08005705 	.word	0x08005705
 8005728:	08005705 	.word	0x08005705
 800572c:	08005705 	.word	0x08005705
 8005730:	08005705 	.word	0x08005705
 8005734:	08005789 	.word	0x08005789
 8005738:	08005705 	.word	0x08005705
 800573c:	08005705 	.word	0x08005705
 8005740:	08005705 	.word	0x08005705
 8005744:	08005705 	.word	0x08005705
 8005748:	0800588d 	.word	0x0800588d
 800574c:	080057b5 	.word	0x080057b5
 8005750:	08005847 	.word	0x08005847
 8005754:	08005705 	.word	0x08005705
 8005758:	08005705 	.word	0x08005705
 800575c:	080058af 	.word	0x080058af
 8005760:	08005705 	.word	0x08005705
 8005764:	080057b5 	.word	0x080057b5
 8005768:	08005705 	.word	0x08005705
 800576c:	08005705 	.word	0x08005705
 8005770:	0800584f 	.word	0x0800584f
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	1d1a      	adds	r2, r3, #4
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	602a      	str	r2, [r5, #0]
 800577c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005784:	2301      	movs	r3, #1
 8005786:	e09f      	b.n	80058c8 <_printf_i+0x1ec>
 8005788:	6820      	ldr	r0, [r4, #0]
 800578a:	682b      	ldr	r3, [r5, #0]
 800578c:	0607      	lsls	r7, r0, #24
 800578e:	f103 0104 	add.w	r1, r3, #4
 8005792:	6029      	str	r1, [r5, #0]
 8005794:	d501      	bpl.n	800579a <_printf_i+0xbe>
 8005796:	681e      	ldr	r6, [r3, #0]
 8005798:	e003      	b.n	80057a2 <_printf_i+0xc6>
 800579a:	0646      	lsls	r6, r0, #25
 800579c:	d5fb      	bpl.n	8005796 <_printf_i+0xba>
 800579e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80057a2:	2e00      	cmp	r6, #0
 80057a4:	da03      	bge.n	80057ae <_printf_i+0xd2>
 80057a6:	232d      	movs	r3, #45	; 0x2d
 80057a8:	4276      	negs	r6, r6
 80057aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ae:	485a      	ldr	r0, [pc, #360]	; (8005918 <_printf_i+0x23c>)
 80057b0:	230a      	movs	r3, #10
 80057b2:	e012      	b.n	80057da <_printf_i+0xfe>
 80057b4:	682b      	ldr	r3, [r5, #0]
 80057b6:	6820      	ldr	r0, [r4, #0]
 80057b8:	1d19      	adds	r1, r3, #4
 80057ba:	6029      	str	r1, [r5, #0]
 80057bc:	0605      	lsls	r5, r0, #24
 80057be:	d501      	bpl.n	80057c4 <_printf_i+0xe8>
 80057c0:	681e      	ldr	r6, [r3, #0]
 80057c2:	e002      	b.n	80057ca <_printf_i+0xee>
 80057c4:	0641      	lsls	r1, r0, #25
 80057c6:	d5fb      	bpl.n	80057c0 <_printf_i+0xe4>
 80057c8:	881e      	ldrh	r6, [r3, #0]
 80057ca:	4853      	ldr	r0, [pc, #332]	; (8005918 <_printf_i+0x23c>)
 80057cc:	2f6f      	cmp	r7, #111	; 0x6f
 80057ce:	bf0c      	ite	eq
 80057d0:	2308      	moveq	r3, #8
 80057d2:	230a      	movne	r3, #10
 80057d4:	2100      	movs	r1, #0
 80057d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057da:	6865      	ldr	r5, [r4, #4]
 80057dc:	60a5      	str	r5, [r4, #8]
 80057de:	2d00      	cmp	r5, #0
 80057e0:	bfa2      	ittt	ge
 80057e2:	6821      	ldrge	r1, [r4, #0]
 80057e4:	f021 0104 	bicge.w	r1, r1, #4
 80057e8:	6021      	strge	r1, [r4, #0]
 80057ea:	b90e      	cbnz	r6, 80057f0 <_printf_i+0x114>
 80057ec:	2d00      	cmp	r5, #0
 80057ee:	d04b      	beq.n	8005888 <_printf_i+0x1ac>
 80057f0:	4615      	mov	r5, r2
 80057f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80057f6:	fb03 6711 	mls	r7, r3, r1, r6
 80057fa:	5dc7      	ldrb	r7, [r0, r7]
 80057fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005800:	4637      	mov	r7, r6
 8005802:	42bb      	cmp	r3, r7
 8005804:	460e      	mov	r6, r1
 8005806:	d9f4      	bls.n	80057f2 <_printf_i+0x116>
 8005808:	2b08      	cmp	r3, #8
 800580a:	d10b      	bne.n	8005824 <_printf_i+0x148>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	07de      	lsls	r6, r3, #31
 8005810:	d508      	bpl.n	8005824 <_printf_i+0x148>
 8005812:	6923      	ldr	r3, [r4, #16]
 8005814:	6861      	ldr	r1, [r4, #4]
 8005816:	4299      	cmp	r1, r3
 8005818:	bfde      	ittt	le
 800581a:	2330      	movle	r3, #48	; 0x30
 800581c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005820:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005824:	1b52      	subs	r2, r2, r5
 8005826:	6122      	str	r2, [r4, #16]
 8005828:	f8cd a000 	str.w	sl, [sp]
 800582c:	464b      	mov	r3, r9
 800582e:	aa03      	add	r2, sp, #12
 8005830:	4621      	mov	r1, r4
 8005832:	4640      	mov	r0, r8
 8005834:	f7ff fee4 	bl	8005600 <_printf_common>
 8005838:	3001      	adds	r0, #1
 800583a:	d14a      	bne.n	80058d2 <_printf_i+0x1f6>
 800583c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005840:	b004      	add	sp, #16
 8005842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	f043 0320 	orr.w	r3, r3, #32
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	4833      	ldr	r0, [pc, #204]	; (800591c <_printf_i+0x240>)
 8005850:	2778      	movs	r7, #120	; 0x78
 8005852:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	6829      	ldr	r1, [r5, #0]
 800585a:	061f      	lsls	r7, r3, #24
 800585c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005860:	d402      	bmi.n	8005868 <_printf_i+0x18c>
 8005862:	065f      	lsls	r7, r3, #25
 8005864:	bf48      	it	mi
 8005866:	b2b6      	uxthmi	r6, r6
 8005868:	07df      	lsls	r7, r3, #31
 800586a:	bf48      	it	mi
 800586c:	f043 0320 	orrmi.w	r3, r3, #32
 8005870:	6029      	str	r1, [r5, #0]
 8005872:	bf48      	it	mi
 8005874:	6023      	strmi	r3, [r4, #0]
 8005876:	b91e      	cbnz	r6, 8005880 <_printf_i+0x1a4>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	f023 0320 	bic.w	r3, r3, #32
 800587e:	6023      	str	r3, [r4, #0]
 8005880:	2310      	movs	r3, #16
 8005882:	e7a7      	b.n	80057d4 <_printf_i+0xf8>
 8005884:	4824      	ldr	r0, [pc, #144]	; (8005918 <_printf_i+0x23c>)
 8005886:	e7e4      	b.n	8005852 <_printf_i+0x176>
 8005888:	4615      	mov	r5, r2
 800588a:	e7bd      	b.n	8005808 <_printf_i+0x12c>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	6826      	ldr	r6, [r4, #0]
 8005890:	6961      	ldr	r1, [r4, #20]
 8005892:	1d18      	adds	r0, r3, #4
 8005894:	6028      	str	r0, [r5, #0]
 8005896:	0635      	lsls	r5, r6, #24
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	d501      	bpl.n	80058a0 <_printf_i+0x1c4>
 800589c:	6019      	str	r1, [r3, #0]
 800589e:	e002      	b.n	80058a6 <_printf_i+0x1ca>
 80058a0:	0670      	lsls	r0, r6, #25
 80058a2:	d5fb      	bpl.n	800589c <_printf_i+0x1c0>
 80058a4:	8019      	strh	r1, [r3, #0]
 80058a6:	2300      	movs	r3, #0
 80058a8:	6123      	str	r3, [r4, #16]
 80058aa:	4615      	mov	r5, r2
 80058ac:	e7bc      	b.n	8005828 <_printf_i+0x14c>
 80058ae:	682b      	ldr	r3, [r5, #0]
 80058b0:	1d1a      	adds	r2, r3, #4
 80058b2:	602a      	str	r2, [r5, #0]
 80058b4:	681d      	ldr	r5, [r3, #0]
 80058b6:	6862      	ldr	r2, [r4, #4]
 80058b8:	2100      	movs	r1, #0
 80058ba:	4628      	mov	r0, r5
 80058bc:	f7fa fc88 	bl	80001d0 <memchr>
 80058c0:	b108      	cbz	r0, 80058c6 <_printf_i+0x1ea>
 80058c2:	1b40      	subs	r0, r0, r5
 80058c4:	6060      	str	r0, [r4, #4]
 80058c6:	6863      	ldr	r3, [r4, #4]
 80058c8:	6123      	str	r3, [r4, #16]
 80058ca:	2300      	movs	r3, #0
 80058cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058d0:	e7aa      	b.n	8005828 <_printf_i+0x14c>
 80058d2:	6923      	ldr	r3, [r4, #16]
 80058d4:	462a      	mov	r2, r5
 80058d6:	4649      	mov	r1, r9
 80058d8:	4640      	mov	r0, r8
 80058da:	47d0      	blx	sl
 80058dc:	3001      	adds	r0, #1
 80058de:	d0ad      	beq.n	800583c <_printf_i+0x160>
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	079b      	lsls	r3, r3, #30
 80058e4:	d413      	bmi.n	800590e <_printf_i+0x232>
 80058e6:	68e0      	ldr	r0, [r4, #12]
 80058e8:	9b03      	ldr	r3, [sp, #12]
 80058ea:	4298      	cmp	r0, r3
 80058ec:	bfb8      	it	lt
 80058ee:	4618      	movlt	r0, r3
 80058f0:	e7a6      	b.n	8005840 <_printf_i+0x164>
 80058f2:	2301      	movs	r3, #1
 80058f4:	4632      	mov	r2, r6
 80058f6:	4649      	mov	r1, r9
 80058f8:	4640      	mov	r0, r8
 80058fa:	47d0      	blx	sl
 80058fc:	3001      	adds	r0, #1
 80058fe:	d09d      	beq.n	800583c <_printf_i+0x160>
 8005900:	3501      	adds	r5, #1
 8005902:	68e3      	ldr	r3, [r4, #12]
 8005904:	9903      	ldr	r1, [sp, #12]
 8005906:	1a5b      	subs	r3, r3, r1
 8005908:	42ab      	cmp	r3, r5
 800590a:	dcf2      	bgt.n	80058f2 <_printf_i+0x216>
 800590c:	e7eb      	b.n	80058e6 <_printf_i+0x20a>
 800590e:	2500      	movs	r5, #0
 8005910:	f104 0619 	add.w	r6, r4, #25
 8005914:	e7f5      	b.n	8005902 <_printf_i+0x226>
 8005916:	bf00      	nop
 8005918:	0800620c 	.word	0x0800620c
 800591c:	0800621d 	.word	0x0800621d

08005920 <__sflush_r>:
 8005920:	898a      	ldrh	r2, [r1, #12]
 8005922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005926:	4605      	mov	r5, r0
 8005928:	0710      	lsls	r0, r2, #28
 800592a:	460c      	mov	r4, r1
 800592c:	d458      	bmi.n	80059e0 <__sflush_r+0xc0>
 800592e:	684b      	ldr	r3, [r1, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	dc05      	bgt.n	8005940 <__sflush_r+0x20>
 8005934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	dc02      	bgt.n	8005940 <__sflush_r+0x20>
 800593a:	2000      	movs	r0, #0
 800593c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005942:	2e00      	cmp	r6, #0
 8005944:	d0f9      	beq.n	800593a <__sflush_r+0x1a>
 8005946:	2300      	movs	r3, #0
 8005948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800594c:	682f      	ldr	r7, [r5, #0]
 800594e:	6a21      	ldr	r1, [r4, #32]
 8005950:	602b      	str	r3, [r5, #0]
 8005952:	d032      	beq.n	80059ba <__sflush_r+0x9a>
 8005954:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	075a      	lsls	r2, r3, #29
 800595a:	d505      	bpl.n	8005968 <__sflush_r+0x48>
 800595c:	6863      	ldr	r3, [r4, #4]
 800595e:	1ac0      	subs	r0, r0, r3
 8005960:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005962:	b10b      	cbz	r3, 8005968 <__sflush_r+0x48>
 8005964:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005966:	1ac0      	subs	r0, r0, r3
 8005968:	2300      	movs	r3, #0
 800596a:	4602      	mov	r2, r0
 800596c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800596e:	6a21      	ldr	r1, [r4, #32]
 8005970:	4628      	mov	r0, r5
 8005972:	47b0      	blx	r6
 8005974:	1c43      	adds	r3, r0, #1
 8005976:	89a3      	ldrh	r3, [r4, #12]
 8005978:	d106      	bne.n	8005988 <__sflush_r+0x68>
 800597a:	6829      	ldr	r1, [r5, #0]
 800597c:	291d      	cmp	r1, #29
 800597e:	d82b      	bhi.n	80059d8 <__sflush_r+0xb8>
 8005980:	4a29      	ldr	r2, [pc, #164]	; (8005a28 <__sflush_r+0x108>)
 8005982:	410a      	asrs	r2, r1
 8005984:	07d6      	lsls	r6, r2, #31
 8005986:	d427      	bmi.n	80059d8 <__sflush_r+0xb8>
 8005988:	2200      	movs	r2, #0
 800598a:	6062      	str	r2, [r4, #4]
 800598c:	04d9      	lsls	r1, r3, #19
 800598e:	6922      	ldr	r2, [r4, #16]
 8005990:	6022      	str	r2, [r4, #0]
 8005992:	d504      	bpl.n	800599e <__sflush_r+0x7e>
 8005994:	1c42      	adds	r2, r0, #1
 8005996:	d101      	bne.n	800599c <__sflush_r+0x7c>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	b903      	cbnz	r3, 800599e <__sflush_r+0x7e>
 800599c:	6560      	str	r0, [r4, #84]	; 0x54
 800599e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059a0:	602f      	str	r7, [r5, #0]
 80059a2:	2900      	cmp	r1, #0
 80059a4:	d0c9      	beq.n	800593a <__sflush_r+0x1a>
 80059a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059aa:	4299      	cmp	r1, r3
 80059ac:	d002      	beq.n	80059b4 <__sflush_r+0x94>
 80059ae:	4628      	mov	r0, r5
 80059b0:	f7ff fbce 	bl	8005150 <_free_r>
 80059b4:	2000      	movs	r0, #0
 80059b6:	6360      	str	r0, [r4, #52]	; 0x34
 80059b8:	e7c0      	b.n	800593c <__sflush_r+0x1c>
 80059ba:	2301      	movs	r3, #1
 80059bc:	4628      	mov	r0, r5
 80059be:	47b0      	blx	r6
 80059c0:	1c41      	adds	r1, r0, #1
 80059c2:	d1c8      	bne.n	8005956 <__sflush_r+0x36>
 80059c4:	682b      	ldr	r3, [r5, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0c5      	beq.n	8005956 <__sflush_r+0x36>
 80059ca:	2b1d      	cmp	r3, #29
 80059cc:	d001      	beq.n	80059d2 <__sflush_r+0xb2>
 80059ce:	2b16      	cmp	r3, #22
 80059d0:	d101      	bne.n	80059d6 <__sflush_r+0xb6>
 80059d2:	602f      	str	r7, [r5, #0]
 80059d4:	e7b1      	b.n	800593a <__sflush_r+0x1a>
 80059d6:	89a3      	ldrh	r3, [r4, #12]
 80059d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059dc:	81a3      	strh	r3, [r4, #12]
 80059de:	e7ad      	b.n	800593c <__sflush_r+0x1c>
 80059e0:	690f      	ldr	r7, [r1, #16]
 80059e2:	2f00      	cmp	r7, #0
 80059e4:	d0a9      	beq.n	800593a <__sflush_r+0x1a>
 80059e6:	0793      	lsls	r3, r2, #30
 80059e8:	680e      	ldr	r6, [r1, #0]
 80059ea:	bf08      	it	eq
 80059ec:	694b      	ldreq	r3, [r1, #20]
 80059ee:	600f      	str	r7, [r1, #0]
 80059f0:	bf18      	it	ne
 80059f2:	2300      	movne	r3, #0
 80059f4:	eba6 0807 	sub.w	r8, r6, r7
 80059f8:	608b      	str	r3, [r1, #8]
 80059fa:	f1b8 0f00 	cmp.w	r8, #0
 80059fe:	dd9c      	ble.n	800593a <__sflush_r+0x1a>
 8005a00:	6a21      	ldr	r1, [r4, #32]
 8005a02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a04:	4643      	mov	r3, r8
 8005a06:	463a      	mov	r2, r7
 8005a08:	4628      	mov	r0, r5
 8005a0a:	47b0      	blx	r6
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	dc06      	bgt.n	8005a1e <__sflush_r+0xfe>
 8005a10:	89a3      	ldrh	r3, [r4, #12]
 8005a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a16:	81a3      	strh	r3, [r4, #12]
 8005a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a1c:	e78e      	b.n	800593c <__sflush_r+0x1c>
 8005a1e:	4407      	add	r7, r0
 8005a20:	eba8 0800 	sub.w	r8, r8, r0
 8005a24:	e7e9      	b.n	80059fa <__sflush_r+0xda>
 8005a26:	bf00      	nop
 8005a28:	dfbffffe 	.word	0xdfbffffe

08005a2c <_fflush_r>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	690b      	ldr	r3, [r1, #16]
 8005a30:	4605      	mov	r5, r0
 8005a32:	460c      	mov	r4, r1
 8005a34:	b913      	cbnz	r3, 8005a3c <_fflush_r+0x10>
 8005a36:	2500      	movs	r5, #0
 8005a38:	4628      	mov	r0, r5
 8005a3a:	bd38      	pop	{r3, r4, r5, pc}
 8005a3c:	b118      	cbz	r0, 8005a46 <_fflush_r+0x1a>
 8005a3e:	6a03      	ldr	r3, [r0, #32]
 8005a40:	b90b      	cbnz	r3, 8005a46 <_fflush_r+0x1a>
 8005a42:	f7ff f9ed 	bl	8004e20 <__sinit>
 8005a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0f3      	beq.n	8005a36 <_fflush_r+0xa>
 8005a4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a50:	07d0      	lsls	r0, r2, #31
 8005a52:	d404      	bmi.n	8005a5e <_fflush_r+0x32>
 8005a54:	0599      	lsls	r1, r3, #22
 8005a56:	d402      	bmi.n	8005a5e <_fflush_r+0x32>
 8005a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a5a:	f7ff fb4a 	bl	80050f2 <__retarget_lock_acquire_recursive>
 8005a5e:	4628      	mov	r0, r5
 8005a60:	4621      	mov	r1, r4
 8005a62:	f7ff ff5d 	bl	8005920 <__sflush_r>
 8005a66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a68:	07da      	lsls	r2, r3, #31
 8005a6a:	4605      	mov	r5, r0
 8005a6c:	d4e4      	bmi.n	8005a38 <_fflush_r+0xc>
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	059b      	lsls	r3, r3, #22
 8005a72:	d4e1      	bmi.n	8005a38 <_fflush_r+0xc>
 8005a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a76:	f7ff fb3d 	bl	80050f4 <__retarget_lock_release_recursive>
 8005a7a:	e7dd      	b.n	8005a38 <_fflush_r+0xc>

08005a7c <fiprintf>:
 8005a7c:	b40e      	push	{r1, r2, r3}
 8005a7e:	b503      	push	{r0, r1, lr}
 8005a80:	4601      	mov	r1, r0
 8005a82:	ab03      	add	r3, sp, #12
 8005a84:	4805      	ldr	r0, [pc, #20]	; (8005a9c <fiprintf+0x20>)
 8005a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a8a:	6800      	ldr	r0, [r0, #0]
 8005a8c:	9301      	str	r3, [sp, #4]
 8005a8e:	f000 f891 	bl	8005bb4 <_vfiprintf_r>
 8005a92:	b002      	add	sp, #8
 8005a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a98:	b003      	add	sp, #12
 8005a9a:	4770      	bx	lr
 8005a9c:	20000068 	.word	0x20000068

08005aa0 <memmove>:
 8005aa0:	4288      	cmp	r0, r1
 8005aa2:	b510      	push	{r4, lr}
 8005aa4:	eb01 0402 	add.w	r4, r1, r2
 8005aa8:	d902      	bls.n	8005ab0 <memmove+0x10>
 8005aaa:	4284      	cmp	r4, r0
 8005aac:	4623      	mov	r3, r4
 8005aae:	d807      	bhi.n	8005ac0 <memmove+0x20>
 8005ab0:	1e43      	subs	r3, r0, #1
 8005ab2:	42a1      	cmp	r1, r4
 8005ab4:	d008      	beq.n	8005ac8 <memmove+0x28>
 8005ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005abe:	e7f8      	b.n	8005ab2 <memmove+0x12>
 8005ac0:	4402      	add	r2, r0
 8005ac2:	4601      	mov	r1, r0
 8005ac4:	428a      	cmp	r2, r1
 8005ac6:	d100      	bne.n	8005aca <memmove+0x2a>
 8005ac8:	bd10      	pop	{r4, pc}
 8005aca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ad2:	e7f7      	b.n	8005ac4 <memmove+0x24>

08005ad4 <_sbrk_r>:
 8005ad4:	b538      	push	{r3, r4, r5, lr}
 8005ad6:	4d06      	ldr	r5, [pc, #24]	; (8005af0 <_sbrk_r+0x1c>)
 8005ad8:	2300      	movs	r3, #0
 8005ada:	4604      	mov	r4, r0
 8005adc:	4608      	mov	r0, r1
 8005ade:	602b      	str	r3, [r5, #0]
 8005ae0:	f7fb f942 	bl	8000d68 <_sbrk>
 8005ae4:	1c43      	adds	r3, r0, #1
 8005ae6:	d102      	bne.n	8005aee <_sbrk_r+0x1a>
 8005ae8:	682b      	ldr	r3, [r5, #0]
 8005aea:	b103      	cbz	r3, 8005aee <_sbrk_r+0x1a>
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	bd38      	pop	{r3, r4, r5, pc}
 8005af0:	20004254 	.word	0x20004254

08005af4 <abort>:
 8005af4:	b508      	push	{r3, lr}
 8005af6:	2006      	movs	r0, #6
 8005af8:	f000 fa34 	bl	8005f64 <raise>
 8005afc:	2001      	movs	r0, #1
 8005afe:	f7fb f8bb 	bl	8000c78 <_exit>

08005b02 <_realloc_r>:
 8005b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b06:	4680      	mov	r8, r0
 8005b08:	4614      	mov	r4, r2
 8005b0a:	460e      	mov	r6, r1
 8005b0c:	b921      	cbnz	r1, 8005b18 <_realloc_r+0x16>
 8005b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b12:	4611      	mov	r1, r2
 8005b14:	f7ff bb90 	b.w	8005238 <_malloc_r>
 8005b18:	b92a      	cbnz	r2, 8005b26 <_realloc_r+0x24>
 8005b1a:	f7ff fb19 	bl	8005150 <_free_r>
 8005b1e:	4625      	mov	r5, r4
 8005b20:	4628      	mov	r0, r5
 8005b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b26:	f000 fa39 	bl	8005f9c <_malloc_usable_size_r>
 8005b2a:	4284      	cmp	r4, r0
 8005b2c:	4607      	mov	r7, r0
 8005b2e:	d802      	bhi.n	8005b36 <_realloc_r+0x34>
 8005b30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b34:	d812      	bhi.n	8005b5c <_realloc_r+0x5a>
 8005b36:	4621      	mov	r1, r4
 8005b38:	4640      	mov	r0, r8
 8005b3a:	f7ff fb7d 	bl	8005238 <_malloc_r>
 8005b3e:	4605      	mov	r5, r0
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d0ed      	beq.n	8005b20 <_realloc_r+0x1e>
 8005b44:	42bc      	cmp	r4, r7
 8005b46:	4622      	mov	r2, r4
 8005b48:	4631      	mov	r1, r6
 8005b4a:	bf28      	it	cs
 8005b4c:	463a      	movcs	r2, r7
 8005b4e:	f7ff fad2 	bl	80050f6 <memcpy>
 8005b52:	4631      	mov	r1, r6
 8005b54:	4640      	mov	r0, r8
 8005b56:	f7ff fafb 	bl	8005150 <_free_r>
 8005b5a:	e7e1      	b.n	8005b20 <_realloc_r+0x1e>
 8005b5c:	4635      	mov	r5, r6
 8005b5e:	e7df      	b.n	8005b20 <_realloc_r+0x1e>

08005b60 <__sfputc_r>:
 8005b60:	6893      	ldr	r3, [r2, #8]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	b410      	push	{r4}
 8005b68:	6093      	str	r3, [r2, #8]
 8005b6a:	da08      	bge.n	8005b7e <__sfputc_r+0x1e>
 8005b6c:	6994      	ldr	r4, [r2, #24]
 8005b6e:	42a3      	cmp	r3, r4
 8005b70:	db01      	blt.n	8005b76 <__sfputc_r+0x16>
 8005b72:	290a      	cmp	r1, #10
 8005b74:	d103      	bne.n	8005b7e <__sfputc_r+0x1e>
 8005b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b7a:	f000 b935 	b.w	8005de8 <__swbuf_r>
 8005b7e:	6813      	ldr	r3, [r2, #0]
 8005b80:	1c58      	adds	r0, r3, #1
 8005b82:	6010      	str	r0, [r2, #0]
 8005b84:	7019      	strb	r1, [r3, #0]
 8005b86:	4608      	mov	r0, r1
 8005b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <__sfputs_r>:
 8005b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b90:	4606      	mov	r6, r0
 8005b92:	460f      	mov	r7, r1
 8005b94:	4614      	mov	r4, r2
 8005b96:	18d5      	adds	r5, r2, r3
 8005b98:	42ac      	cmp	r4, r5
 8005b9a:	d101      	bne.n	8005ba0 <__sfputs_r+0x12>
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	e007      	b.n	8005bb0 <__sfputs_r+0x22>
 8005ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba4:	463a      	mov	r2, r7
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f7ff ffda 	bl	8005b60 <__sfputc_r>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d1f3      	bne.n	8005b98 <__sfputs_r+0xa>
 8005bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bb4 <_vfiprintf_r>:
 8005bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb8:	460d      	mov	r5, r1
 8005bba:	b09d      	sub	sp, #116	; 0x74
 8005bbc:	4614      	mov	r4, r2
 8005bbe:	4698      	mov	r8, r3
 8005bc0:	4606      	mov	r6, r0
 8005bc2:	b118      	cbz	r0, 8005bcc <_vfiprintf_r+0x18>
 8005bc4:	6a03      	ldr	r3, [r0, #32]
 8005bc6:	b90b      	cbnz	r3, 8005bcc <_vfiprintf_r+0x18>
 8005bc8:	f7ff f92a 	bl	8004e20 <__sinit>
 8005bcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bce:	07d9      	lsls	r1, r3, #31
 8005bd0:	d405      	bmi.n	8005bde <_vfiprintf_r+0x2a>
 8005bd2:	89ab      	ldrh	r3, [r5, #12]
 8005bd4:	059a      	lsls	r2, r3, #22
 8005bd6:	d402      	bmi.n	8005bde <_vfiprintf_r+0x2a>
 8005bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bda:	f7ff fa8a 	bl	80050f2 <__retarget_lock_acquire_recursive>
 8005bde:	89ab      	ldrh	r3, [r5, #12]
 8005be0:	071b      	lsls	r3, r3, #28
 8005be2:	d501      	bpl.n	8005be8 <_vfiprintf_r+0x34>
 8005be4:	692b      	ldr	r3, [r5, #16]
 8005be6:	b99b      	cbnz	r3, 8005c10 <_vfiprintf_r+0x5c>
 8005be8:	4629      	mov	r1, r5
 8005bea:	4630      	mov	r0, r6
 8005bec:	f000 f93a 	bl	8005e64 <__swsetup_r>
 8005bf0:	b170      	cbz	r0, 8005c10 <_vfiprintf_r+0x5c>
 8005bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bf4:	07dc      	lsls	r4, r3, #31
 8005bf6:	d504      	bpl.n	8005c02 <_vfiprintf_r+0x4e>
 8005bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bfc:	b01d      	add	sp, #116	; 0x74
 8005bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c02:	89ab      	ldrh	r3, [r5, #12]
 8005c04:	0598      	lsls	r0, r3, #22
 8005c06:	d4f7      	bmi.n	8005bf8 <_vfiprintf_r+0x44>
 8005c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c0a:	f7ff fa73 	bl	80050f4 <__retarget_lock_release_recursive>
 8005c0e:	e7f3      	b.n	8005bf8 <_vfiprintf_r+0x44>
 8005c10:	2300      	movs	r3, #0
 8005c12:	9309      	str	r3, [sp, #36]	; 0x24
 8005c14:	2320      	movs	r3, #32
 8005c16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c1e:	2330      	movs	r3, #48	; 0x30
 8005c20:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005dd4 <_vfiprintf_r+0x220>
 8005c24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c28:	f04f 0901 	mov.w	r9, #1
 8005c2c:	4623      	mov	r3, r4
 8005c2e:	469a      	mov	sl, r3
 8005c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c34:	b10a      	cbz	r2, 8005c3a <_vfiprintf_r+0x86>
 8005c36:	2a25      	cmp	r2, #37	; 0x25
 8005c38:	d1f9      	bne.n	8005c2e <_vfiprintf_r+0x7a>
 8005c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8005c3e:	d00b      	beq.n	8005c58 <_vfiprintf_r+0xa4>
 8005c40:	465b      	mov	r3, fp
 8005c42:	4622      	mov	r2, r4
 8005c44:	4629      	mov	r1, r5
 8005c46:	4630      	mov	r0, r6
 8005c48:	f7ff ffa1 	bl	8005b8e <__sfputs_r>
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	f000 80a9 	beq.w	8005da4 <_vfiprintf_r+0x1f0>
 8005c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c54:	445a      	add	r2, fp
 8005c56:	9209      	str	r2, [sp, #36]	; 0x24
 8005c58:	f89a 3000 	ldrb.w	r3, [sl]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 80a1 	beq.w	8005da4 <_vfiprintf_r+0x1f0>
 8005c62:	2300      	movs	r3, #0
 8005c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c6c:	f10a 0a01 	add.w	sl, sl, #1
 8005c70:	9304      	str	r3, [sp, #16]
 8005c72:	9307      	str	r3, [sp, #28]
 8005c74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c78:	931a      	str	r3, [sp, #104]	; 0x68
 8005c7a:	4654      	mov	r4, sl
 8005c7c:	2205      	movs	r2, #5
 8005c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c82:	4854      	ldr	r0, [pc, #336]	; (8005dd4 <_vfiprintf_r+0x220>)
 8005c84:	f7fa faa4 	bl	80001d0 <memchr>
 8005c88:	9a04      	ldr	r2, [sp, #16]
 8005c8a:	b9d8      	cbnz	r0, 8005cc4 <_vfiprintf_r+0x110>
 8005c8c:	06d1      	lsls	r1, r2, #27
 8005c8e:	bf44      	itt	mi
 8005c90:	2320      	movmi	r3, #32
 8005c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c96:	0713      	lsls	r3, r2, #28
 8005c98:	bf44      	itt	mi
 8005c9a:	232b      	movmi	r3, #43	; 0x2b
 8005c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ca6:	d015      	beq.n	8005cd4 <_vfiprintf_r+0x120>
 8005ca8:	9a07      	ldr	r2, [sp, #28]
 8005caa:	4654      	mov	r4, sl
 8005cac:	2000      	movs	r0, #0
 8005cae:	f04f 0c0a 	mov.w	ip, #10
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cb8:	3b30      	subs	r3, #48	; 0x30
 8005cba:	2b09      	cmp	r3, #9
 8005cbc:	d94d      	bls.n	8005d5a <_vfiprintf_r+0x1a6>
 8005cbe:	b1b0      	cbz	r0, 8005cee <_vfiprintf_r+0x13a>
 8005cc0:	9207      	str	r2, [sp, #28]
 8005cc2:	e014      	b.n	8005cee <_vfiprintf_r+0x13a>
 8005cc4:	eba0 0308 	sub.w	r3, r0, r8
 8005cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	9304      	str	r3, [sp, #16]
 8005cd0:	46a2      	mov	sl, r4
 8005cd2:	e7d2      	b.n	8005c7a <_vfiprintf_r+0xc6>
 8005cd4:	9b03      	ldr	r3, [sp, #12]
 8005cd6:	1d19      	adds	r1, r3, #4
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	9103      	str	r1, [sp, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	bfbb      	ittet	lt
 8005ce0:	425b      	neglt	r3, r3
 8005ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8005ce6:	9307      	strge	r3, [sp, #28]
 8005ce8:	9307      	strlt	r3, [sp, #28]
 8005cea:	bfb8      	it	lt
 8005cec:	9204      	strlt	r2, [sp, #16]
 8005cee:	7823      	ldrb	r3, [r4, #0]
 8005cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8005cf2:	d10c      	bne.n	8005d0e <_vfiprintf_r+0x15a>
 8005cf4:	7863      	ldrb	r3, [r4, #1]
 8005cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8005cf8:	d134      	bne.n	8005d64 <_vfiprintf_r+0x1b0>
 8005cfa:	9b03      	ldr	r3, [sp, #12]
 8005cfc:	1d1a      	adds	r2, r3, #4
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	9203      	str	r2, [sp, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	bfb8      	it	lt
 8005d06:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d0a:	3402      	adds	r4, #2
 8005d0c:	9305      	str	r3, [sp, #20]
 8005d0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005de4 <_vfiprintf_r+0x230>
 8005d12:	7821      	ldrb	r1, [r4, #0]
 8005d14:	2203      	movs	r2, #3
 8005d16:	4650      	mov	r0, sl
 8005d18:	f7fa fa5a 	bl	80001d0 <memchr>
 8005d1c:	b138      	cbz	r0, 8005d2e <_vfiprintf_r+0x17a>
 8005d1e:	9b04      	ldr	r3, [sp, #16]
 8005d20:	eba0 000a 	sub.w	r0, r0, sl
 8005d24:	2240      	movs	r2, #64	; 0x40
 8005d26:	4082      	lsls	r2, r0
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	3401      	adds	r4, #1
 8005d2c:	9304      	str	r3, [sp, #16]
 8005d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d32:	4829      	ldr	r0, [pc, #164]	; (8005dd8 <_vfiprintf_r+0x224>)
 8005d34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d38:	2206      	movs	r2, #6
 8005d3a:	f7fa fa49 	bl	80001d0 <memchr>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	d03f      	beq.n	8005dc2 <_vfiprintf_r+0x20e>
 8005d42:	4b26      	ldr	r3, [pc, #152]	; (8005ddc <_vfiprintf_r+0x228>)
 8005d44:	bb1b      	cbnz	r3, 8005d8e <_vfiprintf_r+0x1da>
 8005d46:	9b03      	ldr	r3, [sp, #12]
 8005d48:	3307      	adds	r3, #7
 8005d4a:	f023 0307 	bic.w	r3, r3, #7
 8005d4e:	3308      	adds	r3, #8
 8005d50:	9303      	str	r3, [sp, #12]
 8005d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d54:	443b      	add	r3, r7
 8005d56:	9309      	str	r3, [sp, #36]	; 0x24
 8005d58:	e768      	b.n	8005c2c <_vfiprintf_r+0x78>
 8005d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d5e:	460c      	mov	r4, r1
 8005d60:	2001      	movs	r0, #1
 8005d62:	e7a6      	b.n	8005cb2 <_vfiprintf_r+0xfe>
 8005d64:	2300      	movs	r3, #0
 8005d66:	3401      	adds	r4, #1
 8005d68:	9305      	str	r3, [sp, #20]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	f04f 0c0a 	mov.w	ip, #10
 8005d70:	4620      	mov	r0, r4
 8005d72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d76:	3a30      	subs	r2, #48	; 0x30
 8005d78:	2a09      	cmp	r2, #9
 8005d7a:	d903      	bls.n	8005d84 <_vfiprintf_r+0x1d0>
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d0c6      	beq.n	8005d0e <_vfiprintf_r+0x15a>
 8005d80:	9105      	str	r1, [sp, #20]
 8005d82:	e7c4      	b.n	8005d0e <_vfiprintf_r+0x15a>
 8005d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d88:	4604      	mov	r4, r0
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e7f0      	b.n	8005d70 <_vfiprintf_r+0x1bc>
 8005d8e:	ab03      	add	r3, sp, #12
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	462a      	mov	r2, r5
 8005d94:	4b12      	ldr	r3, [pc, #72]	; (8005de0 <_vfiprintf_r+0x22c>)
 8005d96:	a904      	add	r1, sp, #16
 8005d98:	4630      	mov	r0, r6
 8005d9a:	f3af 8000 	nop.w
 8005d9e:	4607      	mov	r7, r0
 8005da0:	1c78      	adds	r0, r7, #1
 8005da2:	d1d6      	bne.n	8005d52 <_vfiprintf_r+0x19e>
 8005da4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005da6:	07d9      	lsls	r1, r3, #31
 8005da8:	d405      	bmi.n	8005db6 <_vfiprintf_r+0x202>
 8005daa:	89ab      	ldrh	r3, [r5, #12]
 8005dac:	059a      	lsls	r2, r3, #22
 8005dae:	d402      	bmi.n	8005db6 <_vfiprintf_r+0x202>
 8005db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005db2:	f7ff f99f 	bl	80050f4 <__retarget_lock_release_recursive>
 8005db6:	89ab      	ldrh	r3, [r5, #12]
 8005db8:	065b      	lsls	r3, r3, #25
 8005dba:	f53f af1d 	bmi.w	8005bf8 <_vfiprintf_r+0x44>
 8005dbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dc0:	e71c      	b.n	8005bfc <_vfiprintf_r+0x48>
 8005dc2:	ab03      	add	r3, sp, #12
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	462a      	mov	r2, r5
 8005dc8:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <_vfiprintf_r+0x22c>)
 8005dca:	a904      	add	r1, sp, #16
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f7ff fc85 	bl	80056dc <_printf_i>
 8005dd2:	e7e4      	b.n	8005d9e <_vfiprintf_r+0x1ea>
 8005dd4:	080061fb 	.word	0x080061fb
 8005dd8:	08006205 	.word	0x08006205
 8005ddc:	00000000 	.word	0x00000000
 8005de0:	08005b8f 	.word	0x08005b8f
 8005de4:	08006201 	.word	0x08006201

08005de8 <__swbuf_r>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	460e      	mov	r6, r1
 8005dec:	4614      	mov	r4, r2
 8005dee:	4605      	mov	r5, r0
 8005df0:	b118      	cbz	r0, 8005dfa <__swbuf_r+0x12>
 8005df2:	6a03      	ldr	r3, [r0, #32]
 8005df4:	b90b      	cbnz	r3, 8005dfa <__swbuf_r+0x12>
 8005df6:	f7ff f813 	bl	8004e20 <__sinit>
 8005dfa:	69a3      	ldr	r3, [r4, #24]
 8005dfc:	60a3      	str	r3, [r4, #8]
 8005dfe:	89a3      	ldrh	r3, [r4, #12]
 8005e00:	071a      	lsls	r2, r3, #28
 8005e02:	d525      	bpl.n	8005e50 <__swbuf_r+0x68>
 8005e04:	6923      	ldr	r3, [r4, #16]
 8005e06:	b31b      	cbz	r3, 8005e50 <__swbuf_r+0x68>
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	6922      	ldr	r2, [r4, #16]
 8005e0c:	1a98      	subs	r0, r3, r2
 8005e0e:	6963      	ldr	r3, [r4, #20]
 8005e10:	b2f6      	uxtb	r6, r6
 8005e12:	4283      	cmp	r3, r0
 8005e14:	4637      	mov	r7, r6
 8005e16:	dc04      	bgt.n	8005e22 <__swbuf_r+0x3a>
 8005e18:	4621      	mov	r1, r4
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	f7ff fe06 	bl	8005a2c <_fflush_r>
 8005e20:	b9e0      	cbnz	r0, 8005e5c <__swbuf_r+0x74>
 8005e22:	68a3      	ldr	r3, [r4, #8]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	60a3      	str	r3, [r4, #8]
 8005e28:	6823      	ldr	r3, [r4, #0]
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	6022      	str	r2, [r4, #0]
 8005e2e:	701e      	strb	r6, [r3, #0]
 8005e30:	6962      	ldr	r2, [r4, #20]
 8005e32:	1c43      	adds	r3, r0, #1
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d004      	beq.n	8005e42 <__swbuf_r+0x5a>
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	07db      	lsls	r3, r3, #31
 8005e3c:	d506      	bpl.n	8005e4c <__swbuf_r+0x64>
 8005e3e:	2e0a      	cmp	r6, #10
 8005e40:	d104      	bne.n	8005e4c <__swbuf_r+0x64>
 8005e42:	4621      	mov	r1, r4
 8005e44:	4628      	mov	r0, r5
 8005e46:	f7ff fdf1 	bl	8005a2c <_fflush_r>
 8005e4a:	b938      	cbnz	r0, 8005e5c <__swbuf_r+0x74>
 8005e4c:	4638      	mov	r0, r7
 8005e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e50:	4621      	mov	r1, r4
 8005e52:	4628      	mov	r0, r5
 8005e54:	f000 f806 	bl	8005e64 <__swsetup_r>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d0d5      	beq.n	8005e08 <__swbuf_r+0x20>
 8005e5c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005e60:	e7f4      	b.n	8005e4c <__swbuf_r+0x64>
	...

08005e64 <__swsetup_r>:
 8005e64:	b538      	push	{r3, r4, r5, lr}
 8005e66:	4b2a      	ldr	r3, [pc, #168]	; (8005f10 <__swsetup_r+0xac>)
 8005e68:	4605      	mov	r5, r0
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	b118      	cbz	r0, 8005e78 <__swsetup_r+0x14>
 8005e70:	6a03      	ldr	r3, [r0, #32]
 8005e72:	b90b      	cbnz	r3, 8005e78 <__swsetup_r+0x14>
 8005e74:	f7fe ffd4 	bl	8004e20 <__sinit>
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e7e:	0718      	lsls	r0, r3, #28
 8005e80:	d422      	bmi.n	8005ec8 <__swsetup_r+0x64>
 8005e82:	06d9      	lsls	r1, r3, #27
 8005e84:	d407      	bmi.n	8005e96 <__swsetup_r+0x32>
 8005e86:	2309      	movs	r3, #9
 8005e88:	602b      	str	r3, [r5, #0]
 8005e8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e8e:	81a3      	strh	r3, [r4, #12]
 8005e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e94:	e034      	b.n	8005f00 <__swsetup_r+0x9c>
 8005e96:	0758      	lsls	r0, r3, #29
 8005e98:	d512      	bpl.n	8005ec0 <__swsetup_r+0x5c>
 8005e9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e9c:	b141      	cbz	r1, 8005eb0 <__swsetup_r+0x4c>
 8005e9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ea2:	4299      	cmp	r1, r3
 8005ea4:	d002      	beq.n	8005eac <__swsetup_r+0x48>
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f7ff f952 	bl	8005150 <_free_r>
 8005eac:	2300      	movs	r3, #0
 8005eae:	6363      	str	r3, [r4, #52]	; 0x34
 8005eb0:	89a3      	ldrh	r3, [r4, #12]
 8005eb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005eb6:	81a3      	strh	r3, [r4, #12]
 8005eb8:	2300      	movs	r3, #0
 8005eba:	6063      	str	r3, [r4, #4]
 8005ebc:	6923      	ldr	r3, [r4, #16]
 8005ebe:	6023      	str	r3, [r4, #0]
 8005ec0:	89a3      	ldrh	r3, [r4, #12]
 8005ec2:	f043 0308 	orr.w	r3, r3, #8
 8005ec6:	81a3      	strh	r3, [r4, #12]
 8005ec8:	6923      	ldr	r3, [r4, #16]
 8005eca:	b94b      	cbnz	r3, 8005ee0 <__swsetup_r+0x7c>
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed6:	d003      	beq.n	8005ee0 <__swsetup_r+0x7c>
 8005ed8:	4621      	mov	r1, r4
 8005eda:	4628      	mov	r0, r5
 8005edc:	f000 f88c 	bl	8005ff8 <__smakebuf_r>
 8005ee0:	89a0      	ldrh	r0, [r4, #12]
 8005ee2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ee6:	f010 0301 	ands.w	r3, r0, #1
 8005eea:	d00a      	beq.n	8005f02 <__swsetup_r+0x9e>
 8005eec:	2300      	movs	r3, #0
 8005eee:	60a3      	str	r3, [r4, #8]
 8005ef0:	6963      	ldr	r3, [r4, #20]
 8005ef2:	425b      	negs	r3, r3
 8005ef4:	61a3      	str	r3, [r4, #24]
 8005ef6:	6923      	ldr	r3, [r4, #16]
 8005ef8:	b943      	cbnz	r3, 8005f0c <__swsetup_r+0xa8>
 8005efa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005efe:	d1c4      	bne.n	8005e8a <__swsetup_r+0x26>
 8005f00:	bd38      	pop	{r3, r4, r5, pc}
 8005f02:	0781      	lsls	r1, r0, #30
 8005f04:	bf58      	it	pl
 8005f06:	6963      	ldrpl	r3, [r4, #20]
 8005f08:	60a3      	str	r3, [r4, #8]
 8005f0a:	e7f4      	b.n	8005ef6 <__swsetup_r+0x92>
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	e7f7      	b.n	8005f00 <__swsetup_r+0x9c>
 8005f10:	20000068 	.word	0x20000068

08005f14 <_raise_r>:
 8005f14:	291f      	cmp	r1, #31
 8005f16:	b538      	push	{r3, r4, r5, lr}
 8005f18:	4604      	mov	r4, r0
 8005f1a:	460d      	mov	r5, r1
 8005f1c:	d904      	bls.n	8005f28 <_raise_r+0x14>
 8005f1e:	2316      	movs	r3, #22
 8005f20:	6003      	str	r3, [r0, #0]
 8005f22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f26:	bd38      	pop	{r3, r4, r5, pc}
 8005f28:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005f2a:	b112      	cbz	r2, 8005f32 <_raise_r+0x1e>
 8005f2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f30:	b94b      	cbnz	r3, 8005f46 <_raise_r+0x32>
 8005f32:	4620      	mov	r0, r4
 8005f34:	f000 f830 	bl	8005f98 <_getpid_r>
 8005f38:	462a      	mov	r2, r5
 8005f3a:	4601      	mov	r1, r0
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f42:	f000 b817 	b.w	8005f74 <_kill_r>
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d00a      	beq.n	8005f60 <_raise_r+0x4c>
 8005f4a:	1c59      	adds	r1, r3, #1
 8005f4c:	d103      	bne.n	8005f56 <_raise_r+0x42>
 8005f4e:	2316      	movs	r3, #22
 8005f50:	6003      	str	r3, [r0, #0]
 8005f52:	2001      	movs	r0, #1
 8005f54:	e7e7      	b.n	8005f26 <_raise_r+0x12>
 8005f56:	2400      	movs	r4, #0
 8005f58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	4798      	blx	r3
 8005f60:	2000      	movs	r0, #0
 8005f62:	e7e0      	b.n	8005f26 <_raise_r+0x12>

08005f64 <raise>:
 8005f64:	4b02      	ldr	r3, [pc, #8]	; (8005f70 <raise+0xc>)
 8005f66:	4601      	mov	r1, r0
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	f7ff bfd3 	b.w	8005f14 <_raise_r>
 8005f6e:	bf00      	nop
 8005f70:	20000068 	.word	0x20000068

08005f74 <_kill_r>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	4d07      	ldr	r5, [pc, #28]	; (8005f94 <_kill_r+0x20>)
 8005f78:	2300      	movs	r3, #0
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	4611      	mov	r1, r2
 8005f80:	602b      	str	r3, [r5, #0]
 8005f82:	f7fa fe69 	bl	8000c58 <_kill>
 8005f86:	1c43      	adds	r3, r0, #1
 8005f88:	d102      	bne.n	8005f90 <_kill_r+0x1c>
 8005f8a:	682b      	ldr	r3, [r5, #0]
 8005f8c:	b103      	cbz	r3, 8005f90 <_kill_r+0x1c>
 8005f8e:	6023      	str	r3, [r4, #0]
 8005f90:	bd38      	pop	{r3, r4, r5, pc}
 8005f92:	bf00      	nop
 8005f94:	20004254 	.word	0x20004254

08005f98 <_getpid_r>:
 8005f98:	f7fa be56 	b.w	8000c48 <_getpid>

08005f9c <_malloc_usable_size_r>:
 8005f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fa0:	1f18      	subs	r0, r3, #4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	bfbc      	itt	lt
 8005fa6:	580b      	ldrlt	r3, [r1, r0]
 8005fa8:	18c0      	addlt	r0, r0, r3
 8005faa:	4770      	bx	lr

08005fac <__swhatbuf_r>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	460c      	mov	r4, r1
 8005fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb4:	2900      	cmp	r1, #0
 8005fb6:	b096      	sub	sp, #88	; 0x58
 8005fb8:	4615      	mov	r5, r2
 8005fba:	461e      	mov	r6, r3
 8005fbc:	da0d      	bge.n	8005fda <__swhatbuf_r+0x2e>
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005fc4:	f04f 0100 	mov.w	r1, #0
 8005fc8:	bf0c      	ite	eq
 8005fca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005fce:	2340      	movne	r3, #64	; 0x40
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	6031      	str	r1, [r6, #0]
 8005fd4:	602b      	str	r3, [r5, #0]
 8005fd6:	b016      	add	sp, #88	; 0x58
 8005fd8:	bd70      	pop	{r4, r5, r6, pc}
 8005fda:	466a      	mov	r2, sp
 8005fdc:	f000 f848 	bl	8006070 <_fstat_r>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	dbec      	blt.n	8005fbe <__swhatbuf_r+0x12>
 8005fe4:	9901      	ldr	r1, [sp, #4]
 8005fe6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005fea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005fee:	4259      	negs	r1, r3
 8005ff0:	4159      	adcs	r1, r3
 8005ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff6:	e7eb      	b.n	8005fd0 <__swhatbuf_r+0x24>

08005ff8 <__smakebuf_r>:
 8005ff8:	898b      	ldrh	r3, [r1, #12]
 8005ffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ffc:	079d      	lsls	r5, r3, #30
 8005ffe:	4606      	mov	r6, r0
 8006000:	460c      	mov	r4, r1
 8006002:	d507      	bpl.n	8006014 <__smakebuf_r+0x1c>
 8006004:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	6123      	str	r3, [r4, #16]
 800600c:	2301      	movs	r3, #1
 800600e:	6163      	str	r3, [r4, #20]
 8006010:	b002      	add	sp, #8
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	ab01      	add	r3, sp, #4
 8006016:	466a      	mov	r2, sp
 8006018:	f7ff ffc8 	bl	8005fac <__swhatbuf_r>
 800601c:	9900      	ldr	r1, [sp, #0]
 800601e:	4605      	mov	r5, r0
 8006020:	4630      	mov	r0, r6
 8006022:	f7ff f909 	bl	8005238 <_malloc_r>
 8006026:	b948      	cbnz	r0, 800603c <__smakebuf_r+0x44>
 8006028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800602c:	059a      	lsls	r2, r3, #22
 800602e:	d4ef      	bmi.n	8006010 <__smakebuf_r+0x18>
 8006030:	f023 0303 	bic.w	r3, r3, #3
 8006034:	f043 0302 	orr.w	r3, r3, #2
 8006038:	81a3      	strh	r3, [r4, #12]
 800603a:	e7e3      	b.n	8006004 <__smakebuf_r+0xc>
 800603c:	89a3      	ldrh	r3, [r4, #12]
 800603e:	6020      	str	r0, [r4, #0]
 8006040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006044:	81a3      	strh	r3, [r4, #12]
 8006046:	9b00      	ldr	r3, [sp, #0]
 8006048:	6163      	str	r3, [r4, #20]
 800604a:	9b01      	ldr	r3, [sp, #4]
 800604c:	6120      	str	r0, [r4, #16]
 800604e:	b15b      	cbz	r3, 8006068 <__smakebuf_r+0x70>
 8006050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006054:	4630      	mov	r0, r6
 8006056:	f000 f81d 	bl	8006094 <_isatty_r>
 800605a:	b128      	cbz	r0, 8006068 <__smakebuf_r+0x70>
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	f023 0303 	bic.w	r3, r3, #3
 8006062:	f043 0301 	orr.w	r3, r3, #1
 8006066:	81a3      	strh	r3, [r4, #12]
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	431d      	orrs	r5, r3
 800606c:	81a5      	strh	r5, [r4, #12]
 800606e:	e7cf      	b.n	8006010 <__smakebuf_r+0x18>

08006070 <_fstat_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4d07      	ldr	r5, [pc, #28]	; (8006090 <_fstat_r+0x20>)
 8006074:	2300      	movs	r3, #0
 8006076:	4604      	mov	r4, r0
 8006078:	4608      	mov	r0, r1
 800607a:	4611      	mov	r1, r2
 800607c:	602b      	str	r3, [r5, #0]
 800607e:	f7fa fe4a 	bl	8000d16 <_fstat>
 8006082:	1c43      	adds	r3, r0, #1
 8006084:	d102      	bne.n	800608c <_fstat_r+0x1c>
 8006086:	682b      	ldr	r3, [r5, #0]
 8006088:	b103      	cbz	r3, 800608c <_fstat_r+0x1c>
 800608a:	6023      	str	r3, [r4, #0]
 800608c:	bd38      	pop	{r3, r4, r5, pc}
 800608e:	bf00      	nop
 8006090:	20004254 	.word	0x20004254

08006094 <_isatty_r>:
 8006094:	b538      	push	{r3, r4, r5, lr}
 8006096:	4d06      	ldr	r5, [pc, #24]	; (80060b0 <_isatty_r+0x1c>)
 8006098:	2300      	movs	r3, #0
 800609a:	4604      	mov	r4, r0
 800609c:	4608      	mov	r0, r1
 800609e:	602b      	str	r3, [r5, #0]
 80060a0:	f7fa fe49 	bl	8000d36 <_isatty>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	d102      	bne.n	80060ae <_isatty_r+0x1a>
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	b103      	cbz	r3, 80060ae <_isatty_r+0x1a>
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	bd38      	pop	{r3, r4, r5, pc}
 80060b0:	20004254 	.word	0x20004254

080060b4 <_init>:
 80060b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b6:	bf00      	nop
 80060b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ba:	bc08      	pop	{r3}
 80060bc:	469e      	mov	lr, r3
 80060be:	4770      	bx	lr

080060c0 <_fini>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	bf00      	nop
 80060c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c6:	bc08      	pop	{r3}
 80060c8:	469e      	mov	lr, r3
 80060ca:	4770      	bx	lr
