
queue2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005ce8  08005ce8  00015ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dec  08005dec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005dec  08005dec  00015dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005df4  08005df4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005df4  08005df4  00015df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005df8  08005df8  00015df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004118  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000418c  2000418c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000169f3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003017  00000000  00000000  00036a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00039ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001150  00000000  00000000  0003ad28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002452f  00000000  00000000  0003be78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014f9d  00000000  00000000  000603a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0c48  00000000  00000000  00075344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155f8c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000525c  00000000  00000000  00155fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005cd0 	.word	0x08005cd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005cd0 	.word	0x08005cd0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <vApplicationGetIdleTaskMemory+0x30>)
 800058a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000090 	.word	0x20000090
 80005a4:	20000144 	.word	0x20000144

080005a8 <vSenderTask>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void vSenderTask(void *pvParam)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	uint32_t adcVal;

	TickType_t xTickCount = xTaskGetTickCount();
 80005b0:	f003 fe72 	bl	8004298 <xTaskGetTickCount>
 80005b4:	4603      	mov	r3, r0
 80005b6:	60bb      	str	r3, [r7, #8]
	while(1){
		HAL_ADC_Start(&hadc1);
 80005b8:	4810      	ldr	r0, [pc, #64]	; (80005fc <vSenderTask+0x54>)
 80005ba:	f000 fc15 	bl	8000de8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005be:	f04f 31ff 	mov.w	r1, #4294967295
 80005c2:	480e      	ldr	r0, [pc, #56]	; (80005fc <vSenderTask+0x54>)
 80005c4:	f000 fd15 	bl	8000ff2 <HAL_ADC_PollForConversion>
		adcVal = HAL_ADC_GetValue(&hadc1);
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <vSenderTask+0x54>)
 80005ca:	f000 fd9d 	bl	8001108 <HAL_ADC_GetValue>
 80005ce:	4603      	mov	r3, r0
 80005d0:	60fb      	str	r3, [r7, #12]
		HAL_ADC_Stop(&hadc1);
 80005d2:	480a      	ldr	r0, [pc, #40]	; (80005fc <vSenderTask+0x54>)
 80005d4:	f000 fcda 	bl	8000f8c <HAL_ADC_Stop>
		xQueueSendToBack(xQueue, &adcVal, portMAX_DELAY);
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <vSenderTask+0x58>)
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	f107 010c 	add.w	r1, r7, #12
 80005e0:	2300      	movs	r3, #0
 80005e2:	f04f 32ff 	mov.w	r2, #4294967295
 80005e6:	f002 ff69 	bl	80034bc <xQueueGenericSend>
		vTaskDelayUntil(&xTickCount, 3000 / portTICK_RATE_MS);
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fc8a 	bl	8003f0c <vTaskDelayUntil>
		HAL_ADC_Start(&hadc1);
 80005f8:	e7de      	b.n	80005b8 <vSenderTask+0x10>
 80005fa:	bf00      	nop
 80005fc:	20000344 	.word	0x20000344
 8000600:	200003d4 	.word	0x200003d4

08000604 <vReceiverTask>:
	}
	vTaskDelete(NULL);
}

void vReceiverTask(void *pvParam)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	; 0x28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	uint32_t adcVal;
	char msg[20];

	while((xQueueReceive(xQueue, &adcVal, portMAX_DELAY)) == pdPASS)
 800060c:	e015      	b.n	800063a <vReceiverTask+0x36>
	{
		portENTER_CRITICAL();
 800060e:	f004 fb89 	bl	8004d24 <vPortEnterCritical>
		uint32_t count = sprintf(msg, "ADC Value : %ld\r\n", adcVal);
 8000612:	6a3a      	ldr	r2, [r7, #32]
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	4911      	ldr	r1, [pc, #68]	; (8000660 <vReceiverTask+0x5c>)
 800061a:	4618      	mov	r0, r3
 800061c:	f004 ff9e 	bl	800555c <siprintf>
 8000620:	4603      	mov	r3, r0
 8000622:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, count, HAL_MAX_DELAY);
 8000624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000626:	b29a      	uxth	r2, r3
 8000628:	f107 010c 	add.w	r1, r7, #12
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <vReceiverTask+0x60>)
 8000632:	f002 f9d8 	bl	80029e6 <HAL_UART_Transmit>
		portEXIT_CRITICAL();
 8000636:	f004 fba5 	bl	8004d84 <vPortExitCritical>
	while((xQueueReceive(xQueue, &adcVal, portMAX_DELAY)) == pdPASS)
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <vReceiverTask+0x64>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f107 0120 	add.w	r1, r7, #32
 8000642:	f04f 32ff 	mov.w	r2, #4294967295
 8000646:	4618      	mov	r0, r3
 8000648:	f003 f836 	bl	80036b8 <xQueueReceive>
 800064c:	4603      	mov	r3, r0
 800064e:	2b01      	cmp	r3, #1
 8000650:	d0dd      	beq.n	800060e <vReceiverTask+0xa>
	}
	vTaskDelete(NULL);
 8000652:	2000      	movs	r0, #0
 8000654:	f003 fbca 	bl	8003dec <vTaskDelete>
}
 8000658:	bf00      	nop
 800065a:	3728      	adds	r7, #40	; 0x28
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	08005cf4 	.word	0x08005cf4
 8000664:	2000038c 	.word	0x2000038c
 8000668:	200003d4 	.word	0x200003d4

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000672:	f000 fb33 	bl	8000cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000676:	f000 f845 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 f929 	bl	80008d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800067e:	f000 f8fd 	bl	800087c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000682:	f000 f8a9 	bl	80007d8 <MX_ADC1_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  xQueue = xQueueCreate(5, 4);
 8000686:	2200      	movs	r2, #0
 8000688:	2104      	movs	r1, #4
 800068a:	2005      	movs	r0, #5
 800068c:	f002 febc 	bl	8003408 <xQueueGenericCreate>
 8000690:	4603      	mov	r3, r0
 8000692:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <main+0x7c>)
 8000694:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <main+0x80>)
 8000698:	1d3c      	adds	r4, r7, #4
 800069a:	461d      	mov	r5, r3
 800069c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 fd2e 	bl	800310e <osThreadCreate>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <main+0x84>)
 80006b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(vSenderTask, "Sender", 128, NULL, 5, NULL);
 80006b8:	2300      	movs	r3, #0
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	2305      	movs	r3, #5
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	490b      	ldr	r1, [pc, #44]	; (80006f4 <main+0x88>)
 80006c6:	480c      	ldr	r0, [pc, #48]	; (80006f8 <main+0x8c>)
 80006c8:	f003 fa43 	bl	8003b52 <xTaskCreate>
  xTaskCreate(vReceiverTask, "Receiver", 128, NULL, 4, NULL);
 80006cc:	2300      	movs	r3, #0
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	2304      	movs	r3, #4
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	2300      	movs	r3, #0
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	4908      	ldr	r1, [pc, #32]	; (80006fc <main+0x90>)
 80006da:	4809      	ldr	r0, [pc, #36]	; (8000700 <main+0x94>)
 80006dc:	f003 fa39 	bl	8003b52 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006e0:	f002 fd0e 	bl	8003100 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <main+0x78>
 80006e6:	bf00      	nop
 80006e8:	200003d4 	.word	0x200003d4
 80006ec:	08005d1c 	.word	0x08005d1c
 80006f0:	200003d0 	.word	0x200003d0
 80006f4:	08005d08 	.word	0x08005d08
 80006f8:	080005a9 	.word	0x080005a9
 80006fc:	08005d10 	.word	0x08005d10
 8000700:	08000605 	.word	0x08000605

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2230      	movs	r2, #48	; 0x30
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f004 fe0c 	bl	8005330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <SystemClock_Config+0xcc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a27      	ldr	r2, [pc, #156]	; (80007d0 <SystemClock_Config+0xcc>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <SystemClock_Config+0xcc>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <SystemClock_Config+0xd0>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <SystemClock_Config+0xd0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000760:	2301      	movs	r3, #1
 8000762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000778:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800077c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077e:	2302      	movs	r3, #2
 8000780:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000782:	2307      	movs	r3, #7
 8000784:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	4618      	mov	r0, r3
 800078c:	f001 f966 	bl	8001a5c <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000796:	f000 f8dd 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2302      	movs	r3, #2
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2105      	movs	r1, #5
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fbc7 	bl	8001f4c <HAL_RCC_ClockConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007c4:	f000 f8c6 	bl	8000954 <Error_Handler>
  }
}
 80007c8:	bf00      	nop
 80007ca:	3750      	adds	r7, #80	; 0x50
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007de:	463b      	mov	r3, r7
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <MX_ADC1_Init+0x98>)
 80007ec:	4a21      	ldr	r2, [pc, #132]	; (8000874 <MX_ADC1_Init+0x9c>)
 80007ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_ADC1_Init+0x98>)
 80007f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <MX_ADC1_Init+0x98>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_ADC1_Init+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_ADC1_Init+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_ADC1_Init+0x98>)
 800080c:	2200      	movs	r2, #0
 800080e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_ADC1_Init+0x98>)
 8000814:	2200      	movs	r2, #0
 8000816:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_ADC1_Init+0x98>)
 800081a:	4a17      	ldr	r2, [pc, #92]	; (8000878 <MX_ADC1_Init+0xa0>)
 800081c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_ADC1_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_ADC1_Init+0x98>)
 8000826:	2201      	movs	r2, #1
 8000828:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_ADC1_Init+0x98>)
 800082c:	2200      	movs	r2, #0
 800082e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_ADC1_Init+0x98>)
 8000834:	2201      	movs	r2, #1
 8000836:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <MX_ADC1_Init+0x98>)
 800083a:	f000 fa91 	bl	8000d60 <HAL_ADC_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000844:	f000 f886 	bl	8000954 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000848:	2300      	movs	r3, #0
 800084a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800084c:	2301      	movs	r3, #1
 800084e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000854:	463b      	mov	r3, r7
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_ADC1_Init+0x98>)
 800085a:	f000 fc63 	bl	8001124 <HAL_ADC_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000864:	f000 f876 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000344 	.word	0x20000344
 8000874:	40012000 	.word	0x40012000
 8000878:	0f000001 	.word	0x0f000001

0800087c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_USART2_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008b4:	f002 f84a 	bl	800294c <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008be:	f000 f849 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000038c 	.word	0x2000038c
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_GPIO_Init+0x4c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a0f      	ldr	r2, [pc, #60]	; (800091c <MX_GPIO_Init+0x4c>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <MX_GPIO_Init+0x4c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_GPIO_Init+0x4c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <MX_GPIO_Init+0x4c>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_GPIO_Init+0x4c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000928:	2001      	movs	r0, #1
 800092a:	f002 fc3c 	bl	80031a6 <osDelay>
 800092e:	e7fb      	b.n	8000928 <StartDefaultTask+0x8>

08000930 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a04      	ldr	r2, [pc, #16]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d101      	bne.n	8000946 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000942:	f000 f9ed 	bl	8000d20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40010000 	.word	0x40010000

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_MspInit+0x54>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <HAL_MspInit+0x54>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	6453      	str	r3, [r2, #68]	; 0x44
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <HAL_MspInit+0x54>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_MspInit+0x54>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <HAL_MspInit+0x54>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <HAL_MspInit+0x54>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	210f      	movs	r1, #15
 80009a2:	f06f 0001 	mvn.w	r0, #1
 80009a6:	f000 fe93 	bl	80016d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <HAL_ADC_MspInit+0x7c>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d127      	bne.n	8000a2a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <HAL_ADC_MspInit+0x80>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <HAL_ADC_MspInit+0x80>)
 80009e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <HAL_ADC_MspInit+0x80>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_ADC_MspInit+0x80>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <HAL_ADC_MspInit+0x80>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_ADC_MspInit+0x80>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a12:	2301      	movs	r3, #1
 8000a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a16:	2303      	movs	r3, #3
 8000a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <HAL_ADC_MspInit+0x84>)
 8000a26:	f000 fe7d 	bl	8001724 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	; 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40012000 	.word	0x40012000
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020000 	.word	0x40020000

08000a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a19      	ldr	r2, [pc, #100]	; (8000ac4 <HAL_UART_MspInit+0x84>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d12b      	bne.n	8000aba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_UART_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aaa:	2307      	movs	r3, #7
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <HAL_UART_MspInit+0x8c>)
 8000ab6:	f000 fe35 	bl	8001724 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aba:	bf00      	nop
 8000abc:	3728      	adds	r7, #40	; 0x28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000

08000ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	; 0x30
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <HAL_InitTick+0xd4>)
 8000ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae8:	4a2e      	ldr	r2, [pc, #184]	; (8000ba4 <HAL_InitTick+0xd4>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6453      	str	r3, [r2, #68]	; 0x44
 8000af0:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <HAL_InitTick+0xd4>)
 8000af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000afc:	f107 020c 	add.w	r2, r7, #12
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 fc40 	bl	800238c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b0c:	f001 fc2a 	bl	8002364 <HAL_RCC_GetPCLK2Freq>
 8000b10:	4603      	mov	r3, r0
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b18:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <HAL_InitTick+0xd8>)
 8000b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1e:	0c9b      	lsrs	r3, r3, #18
 8000b20:	3b01      	subs	r3, #1
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b24:	4b21      	ldr	r3, [pc, #132]	; (8000bac <HAL_InitTick+0xdc>)
 8000b26:	4a22      	ldr	r2, [pc, #136]	; (8000bb0 <HAL_InitTick+0xe0>)
 8000b28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b2a:	4b20      	ldr	r3, [pc, #128]	; (8000bac <HAL_InitTick+0xdc>)
 8000b2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b30:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b32:	4a1e      	ldr	r2, [pc, #120]	; (8000bac <HAL_InitTick+0xdc>)
 8000b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b36:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <HAL_InitTick+0xdc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <HAL_InitTick+0xdc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <HAL_InitTick+0xdc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b4a:	4818      	ldr	r0, [pc, #96]	; (8000bac <HAL_InitTick+0xdc>)
 8000b4c:	f001 fc50 	bl	80023f0 <HAL_TIM_Base_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d11b      	bne.n	8000b96 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b5e:	4813      	ldr	r0, [pc, #76]	; (8000bac <HAL_InitTick+0xdc>)
 8000b60:	f001 fca0 	bl	80024a4 <HAL_TIM_Base_Start_IT>
 8000b64:	4603      	mov	r3, r0
 8000b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d111      	bne.n	8000b96 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b72:	2019      	movs	r0, #25
 8000b74:	f000 fdc8 	bl	8001708 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b0f      	cmp	r3, #15
 8000b7c:	d808      	bhi.n	8000b90 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	2019      	movs	r0, #25
 8000b84:	f000 fda4 	bl	80016d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b88:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_InitTick+0xe4>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	e002      	b.n	8000b96 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3730      	adds	r7, #48	; 0x30
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	431bde83 	.word	0x431bde83
 8000bac:	200003d8 	.word	0x200003d8
 8000bb0:	40010000 	.word	0x40010000
 8000bb4:	20000004 	.word	0x20000004

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bea:	f001 fccb 	bl	8002584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200003d8 	.word	0x200003d8

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c28:	f004 fb48 	bl	80052bc <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20020000 	.word	0x20020000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	20000420 	.word	0x20000420
 8000c60:	20004190 	.word	0x20004190

08000c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c8e:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca4:	4c0b      	ldr	r4, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb2:	f7ff ffd7 	bl	8000c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f004 fb07 	bl	80052c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fcd7 	bl	800066c <main>
  bx  lr    
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ccc:	08005dfc 	.word	0x08005dfc
  ldr r2, =_sbss
 8000cd0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cd4:	2000418c 	.word	0x2000418c

08000cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>
	...

08000cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <HAL_Init+0x40>)
 8000ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <HAL_Init+0x40>)
 8000cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_Init+0x40>)
 8000cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 fcd8 	bl	80016ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	200f      	movs	r0, #15
 8000d0c:	f7ff fee0 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff fe26 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023c00 	.word	0x40023c00

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x20>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_IncTick+0x24>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000424 	.word	0x20000424

08000d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <HAL_GetTick+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000424 	.word	0x20000424

08000d60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e033      	b.n	8000dde <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d109      	bne.n	8000d92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff fe1a 	bl	80009b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d118      	bne.n	8000dd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000da6:	f023 0302 	bic.w	r3, r3, #2
 8000daa:	f043 0202 	orr.w	r2, r3, #2
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 fad8 	bl	8001368 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f023 0303 	bic.w	r3, r3, #3
 8000dc6:	f043 0201 	orr.w	r2, r3, #1
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	641a      	str	r2, [r3, #64]	; 0x40
 8000dce:	e001      	b.n	8000dd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d101      	bne.n	8000e02 <HAL_ADC_Start+0x1a>
 8000dfe:	2302      	movs	r3, #2
 8000e00:	e0b2      	b.n	8000f68 <HAL_ADC_Start+0x180>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2201      	movs	r2, #1
 8000e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d018      	beq.n	8000e4a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f042 0201 	orr.w	r2, r2, #1
 8000e26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e28:	4b52      	ldr	r3, [pc, #328]	; (8000f74 <HAL_ADC_Start+0x18c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a52      	ldr	r2, [pc, #328]	; (8000f78 <HAL_ADC_Start+0x190>)
 8000e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e32:	0c9a      	lsrs	r2, r3, #18
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e3c:	e002      	b.n	8000e44 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1f9      	bne.n	8000e3e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d17a      	bne.n	8000f4e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e60:	f023 0301 	bic.w	r3, r3, #1
 8000e64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d007      	beq.n	8000e8a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e96:	d106      	bne.n	8000ea6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9c:	f023 0206 	bic.w	r2, r3, #6
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	645a      	str	r2, [r3, #68]	; 0x44
 8000ea4:	e002      	b.n	8000eac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000eb4:	4b31      	ldr	r3, [pc, #196]	; (8000f7c <HAL_ADC_Start+0x194>)
 8000eb6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ec0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 031f 	and.w	r3, r3, #31
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d12a      	bne.n	8000f24 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a2b      	ldr	r2, [pc, #172]	; (8000f80 <HAL_ADC_Start+0x198>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d015      	beq.n	8000f04 <HAL_ADC_Start+0x11c>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a29      	ldr	r2, [pc, #164]	; (8000f84 <HAL_ADC_Start+0x19c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d105      	bne.n	8000eee <HAL_ADC_Start+0x106>
 8000ee2:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <HAL_ADC_Start+0x194>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 031f 	and.w	r3, r3, #31
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00a      	beq.n	8000f04 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a25      	ldr	r2, [pc, #148]	; (8000f88 <HAL_ADC_Start+0x1a0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d136      	bne.n	8000f66 <HAL_ADC_Start+0x17e>
 8000ef8:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <HAL_ADC_Start+0x194>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0310 	and.w	r3, r3, #16
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d130      	bne.n	8000f66 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d129      	bne.n	8000f66 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	e020      	b.n	8000f66 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <HAL_ADC_Start+0x198>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d11b      	bne.n	8000f66 <HAL_ADC_Start+0x17e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d114      	bne.n	8000f66 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	e00b      	b.n	8000f66 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f043 0210 	orr.w	r2, r3, #16
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f043 0201 	orr.w	r2, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	20000000 	.word	0x20000000
 8000f78:	431bde83 	.word	0x431bde83
 8000f7c:	40012300 	.word	0x40012300
 8000f80:	40012000 	.word	0x40012000
 8000f84:	40012100 	.word	0x40012100
 8000f88:	40012200 	.word	0x40012200

08000f8c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d101      	bne.n	8000fa2 <HAL_ADC_Stop+0x16>
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e021      	b.n	8000fe6 <HAL_ADC_Stop+0x5a>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0201 	bic.w	r2, r2, #1
 8000fb8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d109      	bne.n	8000fdc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fd0:	f023 0301 	bic.w	r3, r3, #1
 8000fd4:	f043 0201 	orr.w	r2, r3, #1
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800100a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800100e:	d113      	bne.n	8001038 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800101a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800101e:	d10b      	bne.n	8001038 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f043 0220 	orr.w	r2, r3, #32
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e063      	b.n	8001100 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001038:	f7ff fe86 	bl	8000d48 <HAL_GetTick>
 800103c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800103e:	e021      	b.n	8001084 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001046:	d01d      	beq.n	8001084 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d007      	beq.n	800105e <HAL_ADC_PollForConversion+0x6c>
 800104e:	f7ff fe7b 	bl	8000d48 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	d212      	bcs.n	8001084 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b02      	cmp	r3, #2
 800106a:	d00b      	beq.n	8001084 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f043 0204 	orr.w	r2, r3, #4
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e03d      	b.n	8001100 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b02      	cmp	r3, #2
 8001090:	d1d6      	bne.n	8001040 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f06f 0212 	mvn.w	r2, #18
 800109a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d123      	bne.n	80010fe <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d11f      	bne.n	80010fe <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d006      	beq.n	80010da <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d111      	bne.n	80010fe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d105      	bne.n	80010fe <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f043 0201 	orr.w	r2, r3, #1
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001138:	2b01      	cmp	r3, #1
 800113a:	d101      	bne.n	8001140 <HAL_ADC_ConfigChannel+0x1c>
 800113c:	2302      	movs	r3, #2
 800113e:	e105      	b.n	800134c <HAL_ADC_ConfigChannel+0x228>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b09      	cmp	r3, #9
 800114e:	d925      	bls.n	800119c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68d9      	ldr	r1, [r3, #12]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	461a      	mov	r2, r3
 800115e:	4613      	mov	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4413      	add	r3, r2
 8001164:	3b1e      	subs	r3, #30
 8001166:	2207      	movs	r2, #7
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43da      	mvns	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	400a      	ands	r2, r1
 8001174:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68d9      	ldr	r1, [r3, #12]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	b29b      	uxth	r3, r3
 8001186:	4618      	mov	r0, r3
 8001188:	4603      	mov	r3, r0
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4403      	add	r3, r0
 800118e:	3b1e      	subs	r3, #30
 8001190:	409a      	lsls	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	430a      	orrs	r2, r1
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	e022      	b.n	80011e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6919      	ldr	r1, [r3, #16]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	4613      	mov	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	2207      	movs	r2, #7
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	400a      	ands	r2, r1
 80011be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6919      	ldr	r1, [r3, #16]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	4603      	mov	r3, r0
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4403      	add	r3, r0
 80011d8:	409a      	lsls	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d824      	bhi.n	8001234 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	3b05      	subs	r3, #5
 80011fc:	221f      	movs	r2, #31
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	400a      	ands	r2, r1
 800120a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	3b05      	subs	r3, #5
 8001226:	fa00 f203 	lsl.w	r2, r0, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	430a      	orrs	r2, r1
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
 8001232:	e04c      	b.n	80012ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b0c      	cmp	r3, #12
 800123a:	d824      	bhi.n	8001286 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	3b23      	subs	r3, #35	; 0x23
 800124e:	221f      	movs	r2, #31
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43da      	mvns	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	400a      	ands	r2, r1
 800125c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4618      	mov	r0, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	3b23      	subs	r3, #35	; 0x23
 8001278:	fa00 f203 	lsl.w	r2, r0, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	631a      	str	r2, [r3, #48]	; 0x30
 8001284:	e023      	b.n	80012ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	3b41      	subs	r3, #65	; 0x41
 8001298:	221f      	movs	r2, #31
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	400a      	ands	r2, r1
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	3b41      	subs	r3, #65	; 0x41
 80012c2:	fa00 f203 	lsl.w	r2, r0, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012ce:	4b22      	ldr	r3, [pc, #136]	; (8001358 <HAL_ADC_ConfigChannel+0x234>)
 80012d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a21      	ldr	r2, [pc, #132]	; (800135c <HAL_ADC_ConfigChannel+0x238>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d109      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0x1cc>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b12      	cmp	r3, #18
 80012e2:	d105      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <HAL_ADC_ConfigChannel+0x238>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d123      	bne.n	8001342 <HAL_ADC_ConfigChannel+0x21e>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b10      	cmp	r3, #16
 8001300:	d003      	beq.n	800130a <HAL_ADC_ConfigChannel+0x1e6>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b11      	cmp	r3, #17
 8001308:	d11b      	bne.n	8001342 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b10      	cmp	r3, #16
 800131c:	d111      	bne.n	8001342 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_ADC_ConfigChannel+0x23c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a10      	ldr	r2, [pc, #64]	; (8001364 <HAL_ADC_ConfigChannel+0x240>)
 8001324:	fba2 2303 	umull	r2, r3, r2, r3
 8001328:	0c9a      	lsrs	r2, r3, #18
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001334:	e002      	b.n	800133c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	3b01      	subs	r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f9      	bne.n	8001336 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	40012300 	.word	0x40012300
 800135c:	40012000 	.word	0x40012000
 8001360:	20000000 	.word	0x20000000
 8001364:	431bde83 	.word	0x431bde83

08001368 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001370:	4b79      	ldr	r3, [pc, #484]	; (8001558 <ADC_Init+0x1f0>)
 8001372:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	431a      	orrs	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800139c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6859      	ldr	r1, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	021a      	lsls	r2, r3, #8
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6859      	ldr	r1, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6899      	ldr	r1, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	4a58      	ldr	r2, [pc, #352]	; (800155c <ADC_Init+0x1f4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d022      	beq.n	8001446 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800140e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6899      	ldr	r1, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001430:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6899      	ldr	r1, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	e00f      	b.n	8001466 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001454:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001464:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0202 	bic.w	r2, r2, #2
 8001474:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6899      	ldr	r1, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7e1b      	ldrb	r3, [r3, #24]
 8001480:	005a      	lsls	r2, r3, #1
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d01b      	beq.n	80014cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6859      	ldr	r1, [r3, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	3b01      	subs	r3, #1
 80014c0:	035a      	lsls	r2, r3, #13
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	e007      	b.n	80014dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	051a      	lsls	r2, r3, #20
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001510:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6899      	ldr	r1, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800151e:	025a      	lsls	r2, r3, #9
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001536:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6899      	ldr	r1, [r3, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	029a      	lsls	r2, r3, #10
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	430a      	orrs	r2, r1
 800154a:	609a      	str	r2, [r3, #8]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40012300 	.word	0x40012300
 800155c:	0f000001 	.word	0x0f000001

08001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0b      	blt.n	80015ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	4907      	ldr	r1, [pc, #28]	; (80015fc <__NVIC_EnableIRQ+0x38>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e100 	.word	0xe000e100

08001600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db0a      	blt.n	800162a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	490c      	ldr	r1, [pc, #48]	; (800164c <__NVIC_SetPriority+0x4c>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	440b      	add	r3, r1
 8001624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001628:	e00a      	b.n	8001640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4908      	ldr	r1, [pc, #32]	; (8001650 <__NVIC_SetPriority+0x50>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	3b04      	subs	r3, #4
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	440b      	add	r3, r1
 800163e:	761a      	strb	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f1c3 0307 	rsb	r3, r3, #7
 800166e:	2b04      	cmp	r3, #4
 8001670:	bf28      	it	cs
 8001672:	2304      	movcs	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	2b06      	cmp	r3, #6
 800167c:	d902      	bls.n	8001684 <NVIC_EncodePriority+0x30>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3b03      	subs	r3, #3
 8001682:	e000      	b.n	8001686 <NVIC_EncodePriority+0x32>
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	401a      	ands	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	4313      	orrs	r3, r2
         );
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3724      	adds	r7, #36	; 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ff4c 	bl	8001560 <__NVIC_SetPriorityGrouping>
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e2:	f7ff ff61 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 80016e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	6978      	ldr	r0, [r7, #20]
 80016ee:	f7ff ffb1 	bl	8001654 <NVIC_EncodePriority>
 80016f2:	4602      	mov	r2, r0
 80016f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff80 	bl	8001600 <__NVIC_SetPriority>
}
 8001700:	bf00      	nop
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff54 	bl	80015c4 <__NVIC_EnableIRQ>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
 800173e:	e16b      	b.n	8001a18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001740:	2201      	movs	r2, #1
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	429a      	cmp	r2, r3
 800175a:	f040 815a 	bne.w	8001a12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b01      	cmp	r3, #1
 8001768:	d005      	beq.n	8001776 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001772:	2b02      	cmp	r3, #2
 8001774:	d130      	bne.n	80017d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ac:	2201      	movs	r2, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 0201 	and.w	r2, r3, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d017      	beq.n	8001814 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d123      	bne.n	8001868 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	08da      	lsrs	r2, r3, #3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3208      	adds	r2, #8
 8001828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	220f      	movs	r2, #15
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	08da      	lsrs	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3208      	adds	r2, #8
 8001862:	69b9      	ldr	r1, [r7, #24]
 8001864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0203 	and.w	r2, r3, #3
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80b4 	beq.w	8001a12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b60      	ldr	r3, [pc, #384]	; (8001a30 <HAL_GPIO_Init+0x30c>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a5f      	ldr	r2, [pc, #380]	; (8001a30 <HAL_GPIO_Init+0x30c>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <HAL_GPIO_Init+0x30c>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018c6:	4a5b      	ldr	r2, [pc, #364]	; (8001a34 <HAL_GPIO_Init+0x310>)
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3302      	adds	r3, #2
 80018ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	220f      	movs	r2, #15
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a52      	ldr	r2, [pc, #328]	; (8001a38 <HAL_GPIO_Init+0x314>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d02b      	beq.n	800194a <HAL_GPIO_Init+0x226>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a51      	ldr	r2, [pc, #324]	; (8001a3c <HAL_GPIO_Init+0x318>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d025      	beq.n	8001946 <HAL_GPIO_Init+0x222>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a50      	ldr	r2, [pc, #320]	; (8001a40 <HAL_GPIO_Init+0x31c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d01f      	beq.n	8001942 <HAL_GPIO_Init+0x21e>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4f      	ldr	r2, [pc, #316]	; (8001a44 <HAL_GPIO_Init+0x320>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d019      	beq.n	800193e <HAL_GPIO_Init+0x21a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4e      	ldr	r2, [pc, #312]	; (8001a48 <HAL_GPIO_Init+0x324>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d013      	beq.n	800193a <HAL_GPIO_Init+0x216>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4d      	ldr	r2, [pc, #308]	; (8001a4c <HAL_GPIO_Init+0x328>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d00d      	beq.n	8001936 <HAL_GPIO_Init+0x212>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4c      	ldr	r2, [pc, #304]	; (8001a50 <HAL_GPIO_Init+0x32c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d007      	beq.n	8001932 <HAL_GPIO_Init+0x20e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4b      	ldr	r2, [pc, #300]	; (8001a54 <HAL_GPIO_Init+0x330>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d101      	bne.n	800192e <HAL_GPIO_Init+0x20a>
 800192a:	2307      	movs	r3, #7
 800192c:	e00e      	b.n	800194c <HAL_GPIO_Init+0x228>
 800192e:	2308      	movs	r3, #8
 8001930:	e00c      	b.n	800194c <HAL_GPIO_Init+0x228>
 8001932:	2306      	movs	r3, #6
 8001934:	e00a      	b.n	800194c <HAL_GPIO_Init+0x228>
 8001936:	2305      	movs	r3, #5
 8001938:	e008      	b.n	800194c <HAL_GPIO_Init+0x228>
 800193a:	2304      	movs	r3, #4
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x228>
 800193e:	2303      	movs	r3, #3
 8001940:	e004      	b.n	800194c <HAL_GPIO_Init+0x228>
 8001942:	2302      	movs	r3, #2
 8001944:	e002      	b.n	800194c <HAL_GPIO_Init+0x228>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_GPIO_Init+0x228>
 800194a:	2300      	movs	r3, #0
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	f002 0203 	and.w	r2, r2, #3
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	4093      	lsls	r3, r2
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800195c:	4935      	ldr	r1, [pc, #212]	; (8001a34 <HAL_GPIO_Init+0x310>)
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800196a:	4b3b      	ldr	r3, [pc, #236]	; (8001a58 <HAL_GPIO_Init+0x334>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800198e:	4a32      	ldr	r2, [pc, #200]	; (8001a58 <HAL_GPIO_Init+0x334>)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001994:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <HAL_GPIO_Init+0x334>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019b8:	4a27      	ldr	r2, [pc, #156]	; (8001a58 <HAL_GPIO_Init+0x334>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <HAL_GPIO_Init+0x334>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019e2:	4a1d      	ldr	r2, [pc, #116]	; (8001a58 <HAL_GPIO_Init+0x334>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <HAL_GPIO_Init+0x334>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <HAL_GPIO_Init+0x334>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3301      	adds	r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2b0f      	cmp	r3, #15
 8001a1c:	f67f ae90 	bls.w	8001740 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3724      	adds	r7, #36	; 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40013800 	.word	0x40013800
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	40020800 	.word	0x40020800
 8001a44:	40020c00 	.word	0x40020c00
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40021400 	.word	0x40021400
 8001a50:	40021800 	.word	0x40021800
 8001a54:	40021c00 	.word	0x40021c00
 8001a58:	40013c00 	.word	0x40013c00

08001a5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e267      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d075      	beq.n	8001b66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a7a:	4b88      	ldr	r3, [pc, #544]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d00c      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a86:	4b85      	ldr	r3, [pc, #532]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d112      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a92:	4b82      	ldr	r3, [pc, #520]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a9e:	d10b      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	4b7e      	ldr	r3, [pc, #504]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d05b      	beq.n	8001b64 <HAL_RCC_OscConfig+0x108>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d157      	bne.n	8001b64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e242      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac0:	d106      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x74>
 8001ac2:	4b76      	ldr	r3, [pc, #472]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a75      	ldr	r2, [pc, #468]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e01d      	b.n	8001b0c <HAL_RCC_OscConfig+0xb0>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x98>
 8001ada:	4b70      	ldr	r3, [pc, #448]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a6f      	ldr	r2, [pc, #444]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b6d      	ldr	r3, [pc, #436]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a6c      	ldr	r2, [pc, #432]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e00b      	b.n	8001b0c <HAL_RCC_OscConfig+0xb0>
 8001af4:	4b69      	ldr	r3, [pc, #420]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a68      	ldr	r2, [pc, #416]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b66      	ldr	r3, [pc, #408]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a65      	ldr	r2, [pc, #404]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d013      	beq.n	8001b3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff f918 	bl	8000d48 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b1c:	f7ff f914 	bl	8000d48 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b64      	cmp	r3, #100	; 0x64
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e207      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	4b5b      	ldr	r3, [pc, #364]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0xc0>
 8001b3a:	e014      	b.n	8001b66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f904 	bl	8000d48 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff f900 	bl	8000d48 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e1f3      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	4b51      	ldr	r3, [pc, #324]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0xe8>
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d063      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b72:	4b4a      	ldr	r3, [pc, #296]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00b      	beq.n	8001b96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b7e:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d11c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8a:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d116      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <HAL_RCC_OscConfig+0x152>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e1c7      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bae:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4937      	ldr	r1, [pc, #220]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	e03a      	b.n	8001c3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d020      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bcc:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <HAL_RCC_OscConfig+0x244>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f8b9 	bl	8000d48 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bda:	f7ff f8b5 	bl	8000d48 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e1a8      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4925      	ldr	r1, [pc, #148]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]
 8001c0c:	e015      	b.n	8001c3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0e:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_RCC_OscConfig+0x244>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff f898 	bl	8000d48 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c1c:	f7ff f894 	bl	8000d48 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e187      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d036      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d016      	beq.n	8001c7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_RCC_OscConfig+0x248>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff f878 	bl	8000d48 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c5c:	f7ff f874 	bl	8000d48 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e167      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x200>
 8001c7a:	e01b      	b.n	8001cb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_RCC_OscConfig+0x248>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c82:	f7ff f861 	bl	8000d48 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c88:	e00e      	b.n	8001ca8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c8a:	f7ff f85d 	bl	8000d48 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d907      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e150      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	42470000 	.word	0x42470000
 8001ca4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca8:	4b88      	ldr	r3, [pc, #544]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1ea      	bne.n	8001c8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8097 	beq.w	8001df0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc6:	4b81      	ldr	r3, [pc, #516]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10f      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	4b7d      	ldr	r3, [pc, #500]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a7c      	ldr	r2, [pc, #496]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b7a      	ldr	r3, [pc, #488]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	4b77      	ldr	r3, [pc, #476]	; (8001ed0 <HAL_RCC_OscConfig+0x474>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d118      	bne.n	8001d30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cfe:	4b74      	ldr	r3, [pc, #464]	; (8001ed0 <HAL_RCC_OscConfig+0x474>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a73      	ldr	r2, [pc, #460]	; (8001ed0 <HAL_RCC_OscConfig+0x474>)
 8001d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff f81d 	bl	8000d48 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d12:	f7ff f819 	bl	8000d48 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e10c      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	4b6a      	ldr	r3, [pc, #424]	; (8001ed0 <HAL_RCC_OscConfig+0x474>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d106      	bne.n	8001d46 <HAL_RCC_OscConfig+0x2ea>
 8001d38:	4b64      	ldr	r3, [pc, #400]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	4a63      	ldr	r2, [pc, #396]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6713      	str	r3, [r2, #112]	; 0x70
 8001d44:	e01c      	b.n	8001d80 <HAL_RCC_OscConfig+0x324>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x30c>
 8001d4e:	4b5f      	ldr	r3, [pc, #380]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d52:	4a5e      	ldr	r2, [pc, #376]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5a:	4b5c      	ldr	r3, [pc, #368]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5e:	4a5b      	ldr	r2, [pc, #364]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6713      	str	r3, [r2, #112]	; 0x70
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0x324>
 8001d68:	4b58      	ldr	r3, [pc, #352]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	4a57      	ldr	r2, [pc, #348]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	6713      	str	r3, [r2, #112]	; 0x70
 8001d74:	4b55      	ldr	r3, [pc, #340]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	4a54      	ldr	r2, [pc, #336]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d7a:	f023 0304 	bic.w	r3, r3, #4
 8001d7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d015      	beq.n	8001db4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7fe ffde 	bl	8000d48 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7fe ffda 	bl	8000d48 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e0cb      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da6:	4b49      	ldr	r3, [pc, #292]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0ee      	beq.n	8001d90 <HAL_RCC_OscConfig+0x334>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db4:	f7fe ffc8 	bl	8000d48 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dbc:	f7fe ffc4 	bl	8000d48 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e0b5      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1ee      	bne.n	8001dbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d105      	bne.n	8001df0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de4:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	4a38      	ldr	r2, [pc, #224]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001dea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80a1 	beq.w	8001f3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dfa:	4b34      	ldr	r3, [pc, #208]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d05c      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d141      	bne.n	8001e92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0e:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <HAL_RCC_OscConfig+0x478>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7fe ff98 	bl	8000d48 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7fe ff94 	bl	8000d48 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e087      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2e:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	019b      	lsls	r3, r3, #6
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	085b      	lsrs	r3, r3, #1
 8001e52:	3b01      	subs	r3, #1
 8001e54:	041b      	lsls	r3, r3, #16
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	491b      	ldr	r1, [pc, #108]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <HAL_RCC_OscConfig+0x478>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7fe ff6d 	bl	8000d48 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e72:	f7fe ff69 	bl	8000d48 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e05c      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x416>
 8001e90:	e054      	b.n	8001f3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_RCC_OscConfig+0x478>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7fe ff56 	bl	8000d48 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7fe ff52 	bl	8000d48 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e045      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x444>
 8001ebe:	e03d      	b.n	8001f3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d107      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e038      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40007000 	.word	0x40007000
 8001ed4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <HAL_RCC_OscConfig+0x4ec>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d028      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d121      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d11a      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f08:	4013      	ands	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d111      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1e:	085b      	lsrs	r3, r3, #1
 8001f20:	3b01      	subs	r3, #1
 8001f22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d107      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800

08001f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0cc      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f60:	4b68      	ldr	r3, [pc, #416]	; (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d90c      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6e:	4b65      	ldr	r3, [pc, #404]	; (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b63      	ldr	r3, [pc, #396]	; (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0b8      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d020      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa0:	4b59      	ldr	r3, [pc, #356]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a58      	ldr	r2, [pc, #352]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001faa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb8:	4b53      	ldr	r3, [pc, #332]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4a52      	ldr	r2, [pc, #328]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc4:	4b50      	ldr	r3, [pc, #320]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	494d      	ldr	r1, [pc, #308]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d044      	beq.n	800206c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	4b47      	ldr	r3, [pc, #284]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d119      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e07f      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d003      	beq.n	800200a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002006:	2b03      	cmp	r3, #3
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200a:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e06f      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201a:	4b3b      	ldr	r3, [pc, #236]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e067      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202a:	4b37      	ldr	r3, [pc, #220]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f023 0203 	bic.w	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4934      	ldr	r1, [pc, #208]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	4313      	orrs	r3, r2
 800203a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800203c:	f7fe fe84 	bl	8000d48 <HAL_GetTick>
 8002040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	e00a      	b.n	800205a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002044:	f7fe fe80 	bl	8000d48 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e04f      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 020c 	and.w	r2, r3, #12
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	429a      	cmp	r2, r3
 800206a:	d1eb      	bne.n	8002044 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800206c:	4b25      	ldr	r3, [pc, #148]	; (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d20c      	bcs.n	8002094 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b22      	ldr	r3, [pc, #136]	; (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e032      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4916      	ldr	r1, [pc, #88]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	490e      	ldr	r1, [pc, #56]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020d2:	f000 f821 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 80020d6:	4602      	mov	r2, r0
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	490a      	ldr	r1, [pc, #40]	; (800210c <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	5ccb      	ldrb	r3, [r1, r3]
 80020e6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ea:	4a09      	ldr	r2, [pc, #36]	; (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_RCC_ClockConfig+0x1c8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fcec 	bl	8000ad0 <HAL_InitTick>

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023c00 	.word	0x40023c00
 8002108:	40023800 	.word	0x40023800
 800210c:	08005d40 	.word	0x08005d40
 8002110:	20000000 	.word	0x20000000
 8002114:	20000004 	.word	0x20000004

08002118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800211c:	b094      	sub	sp, #80	; 0x50
 800211e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	647b      	str	r3, [r7, #68]	; 0x44
 8002124:	2300      	movs	r3, #0
 8002126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002128:	2300      	movs	r3, #0
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002130:	4b79      	ldr	r3, [pc, #484]	; (8002318 <HAL_RCC_GetSysClockFreq+0x200>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	d00d      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0x40>
 800213c:	2b08      	cmp	r3, #8
 800213e:	f200 80e1 	bhi.w	8002304 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x34>
 8002146:	2b04      	cmp	r3, #4
 8002148:	d003      	beq.n	8002152 <HAL_RCC_GetSysClockFreq+0x3a>
 800214a:	e0db      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800214c:	4b73      	ldr	r3, [pc, #460]	; (800231c <HAL_RCC_GetSysClockFreq+0x204>)
 800214e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002150:	e0db      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002152:	4b73      	ldr	r3, [pc, #460]	; (8002320 <HAL_RCC_GetSysClockFreq+0x208>)
 8002154:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002156:	e0d8      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002158:	4b6f      	ldr	r3, [pc, #444]	; (8002318 <HAL_RCC_GetSysClockFreq+0x200>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002160:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002162:	4b6d      	ldr	r3, [pc, #436]	; (8002318 <HAL_RCC_GetSysClockFreq+0x200>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d063      	beq.n	8002236 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800216e:	4b6a      	ldr	r3, [pc, #424]	; (8002318 <HAL_RCC_GetSysClockFreq+0x200>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	099b      	lsrs	r3, r3, #6
 8002174:	2200      	movs	r2, #0
 8002176:	63bb      	str	r3, [r7, #56]	; 0x38
 8002178:	63fa      	str	r2, [r7, #60]	; 0x3c
 800217a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002180:	633b      	str	r3, [r7, #48]	; 0x30
 8002182:	2300      	movs	r3, #0
 8002184:	637b      	str	r3, [r7, #52]	; 0x34
 8002186:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800218a:	4622      	mov	r2, r4
 800218c:	462b      	mov	r3, r5
 800218e:	f04f 0000 	mov.w	r0, #0
 8002192:	f04f 0100 	mov.w	r1, #0
 8002196:	0159      	lsls	r1, r3, #5
 8002198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800219c:	0150      	lsls	r0, r2, #5
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4621      	mov	r1, r4
 80021a4:	1a51      	subs	r1, r2, r1
 80021a6:	6139      	str	r1, [r7, #16]
 80021a8:	4629      	mov	r1, r5
 80021aa:	eb63 0301 	sbc.w	r3, r3, r1
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021bc:	4659      	mov	r1, fp
 80021be:	018b      	lsls	r3, r1, #6
 80021c0:	4651      	mov	r1, sl
 80021c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021c6:	4651      	mov	r1, sl
 80021c8:	018a      	lsls	r2, r1, #6
 80021ca:	4651      	mov	r1, sl
 80021cc:	ebb2 0801 	subs.w	r8, r2, r1
 80021d0:	4659      	mov	r1, fp
 80021d2:	eb63 0901 	sbc.w	r9, r3, r1
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ea:	4690      	mov	r8, r2
 80021ec:	4699      	mov	r9, r3
 80021ee:	4623      	mov	r3, r4
 80021f0:	eb18 0303 	adds.w	r3, r8, r3
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	462b      	mov	r3, r5
 80021f8:	eb49 0303 	adc.w	r3, r9, r3
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800220a:	4629      	mov	r1, r5
 800220c:	024b      	lsls	r3, r1, #9
 800220e:	4621      	mov	r1, r4
 8002210:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002214:	4621      	mov	r1, r4
 8002216:	024a      	lsls	r2, r1, #9
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800221e:	2200      	movs	r2, #0
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
 8002222:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002224:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002228:	f7fe f822 	bl	8000270 <__aeabi_uldivmod>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4613      	mov	r3, r2
 8002232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002234:	e058      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002236:	4b38      	ldr	r3, [pc, #224]	; (8002318 <HAL_RCC_GetSysClockFreq+0x200>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	099b      	lsrs	r3, r3, #6
 800223c:	2200      	movs	r2, #0
 800223e:	4618      	mov	r0, r3
 8002240:	4611      	mov	r1, r2
 8002242:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002246:	623b      	str	r3, [r7, #32]
 8002248:	2300      	movs	r3, #0
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
 800224c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002250:	4642      	mov	r2, r8
 8002252:	464b      	mov	r3, r9
 8002254:	f04f 0000 	mov.w	r0, #0
 8002258:	f04f 0100 	mov.w	r1, #0
 800225c:	0159      	lsls	r1, r3, #5
 800225e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002262:	0150      	lsls	r0, r2, #5
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4641      	mov	r1, r8
 800226a:	ebb2 0a01 	subs.w	sl, r2, r1
 800226e:	4649      	mov	r1, r9
 8002270:	eb63 0b01 	sbc.w	fp, r3, r1
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002280:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002284:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002288:	ebb2 040a 	subs.w	r4, r2, sl
 800228c:	eb63 050b 	sbc.w	r5, r3, fp
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	00eb      	lsls	r3, r5, #3
 800229a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800229e:	00e2      	lsls	r2, r4, #3
 80022a0:	4614      	mov	r4, r2
 80022a2:	461d      	mov	r5, r3
 80022a4:	4643      	mov	r3, r8
 80022a6:	18e3      	adds	r3, r4, r3
 80022a8:	603b      	str	r3, [r7, #0]
 80022aa:	464b      	mov	r3, r9
 80022ac:	eb45 0303 	adc.w	r3, r5, r3
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022be:	4629      	mov	r1, r5
 80022c0:	028b      	lsls	r3, r1, #10
 80022c2:	4621      	mov	r1, r4
 80022c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022c8:	4621      	mov	r1, r4
 80022ca:	028a      	lsls	r2, r1, #10
 80022cc:	4610      	mov	r0, r2
 80022ce:	4619      	mov	r1, r3
 80022d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d2:	2200      	movs	r2, #0
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	61fa      	str	r2, [r7, #28]
 80022d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022dc:	f7fd ffc8 	bl	8000270 <__aeabi_uldivmod>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4613      	mov	r3, r2
 80022e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	3301      	adds	r3, #1
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80022f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002300:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002302:	e002      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <HAL_RCC_GetSysClockFreq+0x204>)
 8002306:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800230a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800230c:	4618      	mov	r0, r3
 800230e:	3750      	adds	r7, #80	; 0x50
 8002310:	46bd      	mov	sp, r7
 8002312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800
 800231c:	00f42400 	.word	0x00f42400
 8002320:	007a1200 	.word	0x007a1200

08002324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <HAL_RCC_GetHCLKFreq+0x14>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000000 	.word	0x20000000

0800233c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002340:	f7ff fff0 	bl	8002324 <HAL_RCC_GetHCLKFreq>
 8002344:	4602      	mov	r2, r0
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	0a9b      	lsrs	r3, r3, #10
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	4903      	ldr	r1, [pc, #12]	; (8002360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002352:	5ccb      	ldrb	r3, [r1, r3]
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002358:	4618      	mov	r0, r3
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40023800 	.word	0x40023800
 8002360:	08005d50 	.word	0x08005d50

08002364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002368:	f7ff ffdc 	bl	8002324 <HAL_RCC_GetHCLKFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	0b5b      	lsrs	r3, r3, #13
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4903      	ldr	r1, [pc, #12]	; (8002388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40023800 	.word	0x40023800
 8002388:	08005d50 	.word	0x08005d50

0800238c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	220f      	movs	r2, #15
 800239a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_RCC_GetClockConfig+0x5c>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0203 	and.w	r2, r3, #3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <HAL_RCC_GetClockConfig+0x5c>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_RCC_GetClockConfig+0x5c>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_RCC_GetClockConfig+0x5c>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	08db      	lsrs	r3, r3, #3
 80023c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <HAL_RCC_GetClockConfig+0x60>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0207 	and.w	r2, r3, #7
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	601a      	str	r2, [r3, #0]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40023c00 	.word	0x40023c00

080023f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e041      	b.n	8002486 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f839 	bl	800248e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3304      	adds	r3, #4
 800242c:	4619      	mov	r1, r3
 800242e:	4610      	mov	r0, r2
 8002430:	f000 f9d8 	bl	80027e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d001      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e04e      	b.n	800255a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a23      	ldr	r2, [pc, #140]	; (8002568 <HAL_TIM_Base_Start_IT+0xc4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d022      	beq.n	8002524 <HAL_TIM_Base_Start_IT+0x80>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e6:	d01d      	beq.n	8002524 <HAL_TIM_Base_Start_IT+0x80>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1f      	ldr	r2, [pc, #124]	; (800256c <HAL_TIM_Base_Start_IT+0xc8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d018      	beq.n	8002524 <HAL_TIM_Base_Start_IT+0x80>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1e      	ldr	r2, [pc, #120]	; (8002570 <HAL_TIM_Base_Start_IT+0xcc>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d013      	beq.n	8002524 <HAL_TIM_Base_Start_IT+0x80>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a1c      	ldr	r2, [pc, #112]	; (8002574 <HAL_TIM_Base_Start_IT+0xd0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00e      	beq.n	8002524 <HAL_TIM_Base_Start_IT+0x80>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a1b      	ldr	r2, [pc, #108]	; (8002578 <HAL_TIM_Base_Start_IT+0xd4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d009      	beq.n	8002524 <HAL_TIM_Base_Start_IT+0x80>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a19      	ldr	r2, [pc, #100]	; (800257c <HAL_TIM_Base_Start_IT+0xd8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d004      	beq.n	8002524 <HAL_TIM_Base_Start_IT+0x80>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a18      	ldr	r2, [pc, #96]	; (8002580 <HAL_TIM_Base_Start_IT+0xdc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d111      	bne.n	8002548 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b06      	cmp	r3, #6
 8002534:	d010      	beq.n	8002558 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0201 	orr.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002546:	e007      	b.n	8002558 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40010000 	.word	0x40010000
 800256c:	40000400 	.word	0x40000400
 8002570:	40000800 	.word	0x40000800
 8002574:	40000c00 	.word	0x40000c00
 8002578:	40010400 	.word	0x40010400
 800257c:	40014000 	.word	0x40014000
 8002580:	40001800 	.word	0x40001800

08002584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b02      	cmp	r3, #2
 8002598:	d122      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d11b      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0202 	mvn.w	r2, #2
 80025b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f8ee 	bl	80027a8 <HAL_TIM_IC_CaptureCallback>
 80025cc:	e005      	b.n	80025da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f8e0 	bl	8002794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f8f1 	bl	80027bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d122      	bne.n	8002634 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d11b      	bne.n	8002634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0204 	mvn.w	r2, #4
 8002604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2202      	movs	r2, #2
 800260a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f8c4 	bl	80027a8 <HAL_TIM_IC_CaptureCallback>
 8002620:	e005      	b.n	800262e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f8b6 	bl	8002794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f8c7 	bl	80027bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b08      	cmp	r3, #8
 8002640:	d122      	bne.n	8002688 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b08      	cmp	r3, #8
 800264e:	d11b      	bne.n	8002688 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0208 	mvn.w	r2, #8
 8002658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2204      	movs	r2, #4
 800265e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f89a 	bl	80027a8 <HAL_TIM_IC_CaptureCallback>
 8002674:	e005      	b.n	8002682 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f88c 	bl	8002794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f89d 	bl	80027bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b10      	cmp	r3, #16
 8002694:	d122      	bne.n	80026dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	d11b      	bne.n	80026dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0210 	mvn.w	r2, #16
 80026ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2208      	movs	r2, #8
 80026b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f870 	bl	80027a8 <HAL_TIM_IC_CaptureCallback>
 80026c8:	e005      	b.n	80026d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f862 	bl	8002794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f873 	bl	80027bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d10e      	bne.n	8002708 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d107      	bne.n	8002708 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0201 	mvn.w	r2, #1
 8002700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe f914 	bl	8000930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	2b80      	cmp	r3, #128	; 0x80
 8002714:	d10e      	bne.n	8002734 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002720:	2b80      	cmp	r3, #128	; 0x80
 8002722:	d107      	bne.n	8002734 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800272c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f902 	bl	8002938 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273e:	2b40      	cmp	r3, #64	; 0x40
 8002740:	d10e      	bne.n	8002760 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274c:	2b40      	cmp	r3, #64	; 0x40
 800274e:	d107      	bne.n	8002760 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f838 	bl	80027d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b20      	cmp	r3, #32
 800276c:	d10e      	bne.n	800278c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0320 	and.w	r3, r3, #32
 8002778:	2b20      	cmp	r3, #32
 800277a:	d107      	bne.n	800278c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0220 	mvn.w	r2, #32
 8002784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f8cc 	bl	8002924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a40      	ldr	r2, [pc, #256]	; (80028f8 <TIM_Base_SetConfig+0x114>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d013      	beq.n	8002824 <TIM_Base_SetConfig+0x40>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002802:	d00f      	beq.n	8002824 <TIM_Base_SetConfig+0x40>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a3d      	ldr	r2, [pc, #244]	; (80028fc <TIM_Base_SetConfig+0x118>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d00b      	beq.n	8002824 <TIM_Base_SetConfig+0x40>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a3c      	ldr	r2, [pc, #240]	; (8002900 <TIM_Base_SetConfig+0x11c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d007      	beq.n	8002824 <TIM_Base_SetConfig+0x40>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a3b      	ldr	r2, [pc, #236]	; (8002904 <TIM_Base_SetConfig+0x120>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d003      	beq.n	8002824 <TIM_Base_SetConfig+0x40>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a3a      	ldr	r2, [pc, #232]	; (8002908 <TIM_Base_SetConfig+0x124>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d108      	bne.n	8002836 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a2f      	ldr	r2, [pc, #188]	; (80028f8 <TIM_Base_SetConfig+0x114>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d02b      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002844:	d027      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a2c      	ldr	r2, [pc, #176]	; (80028fc <TIM_Base_SetConfig+0x118>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d023      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a2b      	ldr	r2, [pc, #172]	; (8002900 <TIM_Base_SetConfig+0x11c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d01f      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a2a      	ldr	r2, [pc, #168]	; (8002904 <TIM_Base_SetConfig+0x120>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d01b      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a29      	ldr	r2, [pc, #164]	; (8002908 <TIM_Base_SetConfig+0x124>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d017      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a28      	ldr	r2, [pc, #160]	; (800290c <TIM_Base_SetConfig+0x128>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d013      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a27      	ldr	r2, [pc, #156]	; (8002910 <TIM_Base_SetConfig+0x12c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00f      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a26      	ldr	r2, [pc, #152]	; (8002914 <TIM_Base_SetConfig+0x130>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00b      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a25      	ldr	r2, [pc, #148]	; (8002918 <TIM_Base_SetConfig+0x134>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d007      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a24      	ldr	r2, [pc, #144]	; (800291c <TIM_Base_SetConfig+0x138>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d003      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a23      	ldr	r2, [pc, #140]	; (8002920 <TIM_Base_SetConfig+0x13c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d108      	bne.n	80028a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800289c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <TIM_Base_SetConfig+0x114>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d003      	beq.n	80028dc <TIM_Base_SetConfig+0xf8>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a0c      	ldr	r2, [pc, #48]	; (8002908 <TIM_Base_SetConfig+0x124>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d103      	bne.n	80028e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	615a      	str	r2, [r3, #20]
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40010000 	.word	0x40010000
 80028fc:	40000400 	.word	0x40000400
 8002900:	40000800 	.word	0x40000800
 8002904:	40000c00 	.word	0x40000c00
 8002908:	40010400 	.word	0x40010400
 800290c:	40014000 	.word	0x40014000
 8002910:	40014400 	.word	0x40014400
 8002914:	40014800 	.word	0x40014800
 8002918:	40001800 	.word	0x40001800
 800291c:	40001c00 	.word	0x40001c00
 8002920:	40002000 	.word	0x40002000

08002924 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e03f      	b.n	80029de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fe f864 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2224      	movs	r2, #36	; 0x24
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800298e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f929 	bl	8002be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b08a      	sub	sp, #40	; 0x28
 80029ea:	af02      	add	r7, sp, #8
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	603b      	str	r3, [r7, #0]
 80029f2:	4613      	mov	r3, r2
 80029f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	d17c      	bne.n	8002b00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <HAL_UART_Transmit+0x2c>
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e075      	b.n	8002b02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_UART_Transmit+0x3e>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e06e      	b.n	8002b02 <HAL_UART_Transmit+0x11c>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2221      	movs	r2, #33	; 0x21
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a3a:	f7fe f985 	bl	8000d48 <HAL_GetTick>
 8002a3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	88fa      	ldrh	r2, [r7, #6]
 8002a44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	88fa      	ldrh	r2, [r7, #6]
 8002a4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a54:	d108      	bne.n	8002a68 <HAL_UART_Transmit+0x82>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d104      	bne.n	8002a68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	e003      	b.n	8002a70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a78:	e02a      	b.n	8002ad0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2200      	movs	r2, #0
 8002a82:	2180      	movs	r1, #128	; 0x80
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f840 	bl	8002b0a <UART_WaitOnFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e036      	b.n	8002b02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10b      	bne.n	8002ab2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	3302      	adds	r3, #2
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	e007      	b.n	8002ac2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	781a      	ldrb	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1cf      	bne.n	8002a7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2140      	movs	r1, #64	; 0x40
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f810 	bl	8002b0a <UART_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e006      	b.n	8002b02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e000      	b.n	8002b02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b00:	2302      	movs	r3, #2
  }
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3720      	adds	r7, #32
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b090      	sub	sp, #64	; 0x40
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	603b      	str	r3, [r7, #0]
 8002b16:	4613      	mov	r3, r2
 8002b18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b1a:	e050      	b.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b22:	d04c      	beq.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <UART_WaitOnFlagUntilTimeout+0x30>
 8002b2a:	f7fe f90d 	bl	8000d48 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d241      	bcs.n	8002bbe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	330c      	adds	r3, #12
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	e853 3f00 	ldrex	r3, [r3]
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	330c      	adds	r3, #12
 8002b58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b5a:	637a      	str	r2, [r7, #52]	; 0x34
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b62:	e841 2300 	strex	r3, r2, [r1]
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1e5      	bne.n	8002b3a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3314      	adds	r3, #20
 8002b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	e853 3f00 	ldrex	r3, [r3]
 8002b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f023 0301 	bic.w	r3, r3, #1
 8002b84:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3314      	adds	r3, #20
 8002b8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b8e:	623a      	str	r2, [r7, #32]
 8002b90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b92:	69f9      	ldr	r1, [r7, #28]
 8002b94:	6a3a      	ldr	r2, [r7, #32]
 8002b96:	e841 2300 	strex	r3, r2, [r1]
 8002b9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1e5      	bne.n	8002b6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e00f      	b.n	8002bde <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d09f      	beq.n	8002b1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3740      	adds	r7, #64	; 0x40
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bec:	b0c0      	sub	sp, #256	; 0x100
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c04:	68d9      	ldr	r1, [r3, #12]
 8002c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	ea40 0301 	orr.w	r3, r0, r1
 8002c10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c40:	f021 010c 	bic.w	r1, r1, #12
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c62:	6999      	ldr	r1, [r3, #24]
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	ea40 0301 	orr.w	r3, r0, r1
 8002c6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4b8f      	ldr	r3, [pc, #572]	; (8002eb4 <UART_SetConfig+0x2cc>)
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d005      	beq.n	8002c88 <UART_SetConfig+0xa0>
 8002c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4b8d      	ldr	r3, [pc, #564]	; (8002eb8 <UART_SetConfig+0x2d0>)
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d104      	bne.n	8002c92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c88:	f7ff fb6c 	bl	8002364 <HAL_RCC_GetPCLK2Freq>
 8002c8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c90:	e003      	b.n	8002c9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c92:	f7ff fb53 	bl	800233c <HAL_RCC_GetPCLK1Freq>
 8002c96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca4:	f040 810c 	bne.w	8002ec0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cac:	2200      	movs	r2, #0
 8002cae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002cb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002cba:	4622      	mov	r2, r4
 8002cbc:	462b      	mov	r3, r5
 8002cbe:	1891      	adds	r1, r2, r2
 8002cc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cc2:	415b      	adcs	r3, r3
 8002cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cca:	4621      	mov	r1, r4
 8002ccc:	eb12 0801 	adds.w	r8, r2, r1
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	eb43 0901 	adc.w	r9, r3, r1
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cea:	4690      	mov	r8, r2
 8002cec:	4699      	mov	r9, r3
 8002cee:	4623      	mov	r3, r4
 8002cf0:	eb18 0303 	adds.w	r3, r8, r3
 8002cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cf8:	462b      	mov	r3, r5
 8002cfa:	eb49 0303 	adc.w	r3, r9, r3
 8002cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d16:	460b      	mov	r3, r1
 8002d18:	18db      	adds	r3, r3, r3
 8002d1a:	653b      	str	r3, [r7, #80]	; 0x50
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	eb42 0303 	adc.w	r3, r2, r3
 8002d22:	657b      	str	r3, [r7, #84]	; 0x54
 8002d24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d2c:	f7fd faa0 	bl	8000270 <__aeabi_uldivmod>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4b61      	ldr	r3, [pc, #388]	; (8002ebc <UART_SetConfig+0x2d4>)
 8002d36:	fba3 2302 	umull	r2, r3, r3, r2
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	011c      	lsls	r4, r3, #4
 8002d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d50:	4642      	mov	r2, r8
 8002d52:	464b      	mov	r3, r9
 8002d54:	1891      	adds	r1, r2, r2
 8002d56:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d58:	415b      	adcs	r3, r3
 8002d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d60:	4641      	mov	r1, r8
 8002d62:	eb12 0a01 	adds.w	sl, r2, r1
 8002d66:	4649      	mov	r1, r9
 8002d68:	eb43 0b01 	adc.w	fp, r3, r1
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d80:	4692      	mov	sl, r2
 8002d82:	469b      	mov	fp, r3
 8002d84:	4643      	mov	r3, r8
 8002d86:	eb1a 0303 	adds.w	r3, sl, r3
 8002d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d8e:	464b      	mov	r3, r9
 8002d90:	eb4b 0303 	adc.w	r3, fp, r3
 8002d94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002da4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002da8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002dac:	460b      	mov	r3, r1
 8002dae:	18db      	adds	r3, r3, r3
 8002db0:	643b      	str	r3, [r7, #64]	; 0x40
 8002db2:	4613      	mov	r3, r2
 8002db4:	eb42 0303 	adc.w	r3, r2, r3
 8002db8:	647b      	str	r3, [r7, #68]	; 0x44
 8002dba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002dbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002dc2:	f7fd fa55 	bl	8000270 <__aeabi_uldivmod>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4b3b      	ldr	r3, [pc, #236]	; (8002ebc <UART_SetConfig+0x2d4>)
 8002dce:	fba3 2301 	umull	r2, r3, r3, r1
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	2264      	movs	r2, #100	; 0x64
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	1acb      	subs	r3, r1, r3
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002de2:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <UART_SetConfig+0x2d4>)
 8002de4:	fba3 2302 	umull	r2, r3, r3, r2
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002df0:	441c      	add	r4, r3
 8002df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002df6:	2200      	movs	r2, #0
 8002df8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dfc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e04:	4642      	mov	r2, r8
 8002e06:	464b      	mov	r3, r9
 8002e08:	1891      	adds	r1, r2, r2
 8002e0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e0c:	415b      	adcs	r3, r3
 8002e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e14:	4641      	mov	r1, r8
 8002e16:	1851      	adds	r1, r2, r1
 8002e18:	6339      	str	r1, [r7, #48]	; 0x30
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	414b      	adcs	r3, r1
 8002e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e2c:	4659      	mov	r1, fp
 8002e2e:	00cb      	lsls	r3, r1, #3
 8002e30:	4651      	mov	r1, sl
 8002e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e36:	4651      	mov	r1, sl
 8002e38:	00ca      	lsls	r2, r1, #3
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4642      	mov	r2, r8
 8002e42:	189b      	adds	r3, r3, r2
 8002e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e48:	464b      	mov	r3, r9
 8002e4a:	460a      	mov	r2, r1
 8002e4c:	eb42 0303 	adc.w	r3, r2, r3
 8002e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e68:	460b      	mov	r3, r1
 8002e6a:	18db      	adds	r3, r3, r3
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e6e:	4613      	mov	r3, r2
 8002e70:	eb42 0303 	adc.w	r3, r2, r3
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e7e:	f7fd f9f7 	bl	8000270 <__aeabi_uldivmod>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <UART_SetConfig+0x2d4>)
 8002e88:	fba3 1302 	umull	r1, r3, r3, r2
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	2164      	movs	r1, #100	; 0x64
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	3332      	adds	r3, #50	; 0x32
 8002e9a:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <UART_SetConfig+0x2d4>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	095b      	lsrs	r3, r3, #5
 8002ea2:	f003 0207 	and.w	r2, r3, #7
 8002ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4422      	add	r2, r4
 8002eae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002eb0:	e105      	b.n	80030be <UART_SetConfig+0x4d6>
 8002eb2:	bf00      	nop
 8002eb4:	40011000 	.word	0x40011000
 8002eb8:	40011400 	.word	0x40011400
 8002ebc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002eca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ece:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ed2:	4642      	mov	r2, r8
 8002ed4:	464b      	mov	r3, r9
 8002ed6:	1891      	adds	r1, r2, r2
 8002ed8:	6239      	str	r1, [r7, #32]
 8002eda:	415b      	adcs	r3, r3
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ede:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ee2:	4641      	mov	r1, r8
 8002ee4:	1854      	adds	r4, r2, r1
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	eb43 0501 	adc.w	r5, r3, r1
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	00eb      	lsls	r3, r5, #3
 8002ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002efa:	00e2      	lsls	r2, r4, #3
 8002efc:	4614      	mov	r4, r2
 8002efe:	461d      	mov	r5, r3
 8002f00:	4643      	mov	r3, r8
 8002f02:	18e3      	adds	r3, r4, r3
 8002f04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f08:	464b      	mov	r3, r9
 8002f0a:	eb45 0303 	adc.w	r3, r5, r3
 8002f0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f2e:	4629      	mov	r1, r5
 8002f30:	008b      	lsls	r3, r1, #2
 8002f32:	4621      	mov	r1, r4
 8002f34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f38:	4621      	mov	r1, r4
 8002f3a:	008a      	lsls	r2, r1, #2
 8002f3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f40:	f7fd f996 	bl	8000270 <__aeabi_uldivmod>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4b60      	ldr	r3, [pc, #384]	; (80030cc <UART_SetConfig+0x4e4>)
 8002f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	011c      	lsls	r4, r3, #4
 8002f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f64:	4642      	mov	r2, r8
 8002f66:	464b      	mov	r3, r9
 8002f68:	1891      	adds	r1, r2, r2
 8002f6a:	61b9      	str	r1, [r7, #24]
 8002f6c:	415b      	adcs	r3, r3
 8002f6e:	61fb      	str	r3, [r7, #28]
 8002f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f74:	4641      	mov	r1, r8
 8002f76:	1851      	adds	r1, r2, r1
 8002f78:	6139      	str	r1, [r7, #16]
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	414b      	adcs	r3, r1
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f8c:	4659      	mov	r1, fp
 8002f8e:	00cb      	lsls	r3, r1, #3
 8002f90:	4651      	mov	r1, sl
 8002f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f96:	4651      	mov	r1, sl
 8002f98:	00ca      	lsls	r2, r1, #3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4642      	mov	r2, r8
 8002fa2:	189b      	adds	r3, r3, r2
 8002fa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fa8:	464b      	mov	r3, r9
 8002faa:	460a      	mov	r2, r1
 8002fac:	eb42 0303 	adc.w	r3, r2, r3
 8002fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002fcc:	4649      	mov	r1, r9
 8002fce:	008b      	lsls	r3, r1, #2
 8002fd0:	4641      	mov	r1, r8
 8002fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fd6:	4641      	mov	r1, r8
 8002fd8:	008a      	lsls	r2, r1, #2
 8002fda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002fde:	f7fd f947 	bl	8000270 <__aeabi_uldivmod>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4b39      	ldr	r3, [pc, #228]	; (80030cc <UART_SetConfig+0x4e4>)
 8002fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	2164      	movs	r1, #100	; 0x64
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	3332      	adds	r3, #50	; 0x32
 8002ffa:	4a34      	ldr	r2, [pc, #208]	; (80030cc <UART_SetConfig+0x4e4>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003006:	441c      	add	r4, r3
 8003008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800300c:	2200      	movs	r2, #0
 800300e:	673b      	str	r3, [r7, #112]	; 0x70
 8003010:	677a      	str	r2, [r7, #116]	; 0x74
 8003012:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003016:	4642      	mov	r2, r8
 8003018:	464b      	mov	r3, r9
 800301a:	1891      	adds	r1, r2, r2
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	415b      	adcs	r3, r3
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003026:	4641      	mov	r1, r8
 8003028:	1851      	adds	r1, r2, r1
 800302a:	6039      	str	r1, [r7, #0]
 800302c:	4649      	mov	r1, r9
 800302e:	414b      	adcs	r3, r1
 8003030:	607b      	str	r3, [r7, #4]
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800303e:	4659      	mov	r1, fp
 8003040:	00cb      	lsls	r3, r1, #3
 8003042:	4651      	mov	r1, sl
 8003044:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003048:	4651      	mov	r1, sl
 800304a:	00ca      	lsls	r2, r1, #3
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	4603      	mov	r3, r0
 8003052:	4642      	mov	r2, r8
 8003054:	189b      	adds	r3, r3, r2
 8003056:	66bb      	str	r3, [r7, #104]	; 0x68
 8003058:	464b      	mov	r3, r9
 800305a:	460a      	mov	r2, r1
 800305c:	eb42 0303 	adc.w	r3, r2, r3
 8003060:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	663b      	str	r3, [r7, #96]	; 0x60
 800306c:	667a      	str	r2, [r7, #100]	; 0x64
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800307a:	4649      	mov	r1, r9
 800307c:	008b      	lsls	r3, r1, #2
 800307e:	4641      	mov	r1, r8
 8003080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003084:	4641      	mov	r1, r8
 8003086:	008a      	lsls	r2, r1, #2
 8003088:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800308c:	f7fd f8f0 	bl	8000270 <__aeabi_uldivmod>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <UART_SetConfig+0x4e4>)
 8003096:	fba3 1302 	umull	r1, r3, r3, r2
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2164      	movs	r1, #100	; 0x64
 800309e:	fb01 f303 	mul.w	r3, r1, r3
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	3332      	adds	r3, #50	; 0x32
 80030a8:	4a08      	ldr	r2, [pc, #32]	; (80030cc <UART_SetConfig+0x4e4>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	f003 020f 	and.w	r2, r3, #15
 80030b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4422      	add	r2, r4
 80030bc:	609a      	str	r2, [r3, #8]
}
 80030be:	bf00      	nop
 80030c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030c4:	46bd      	mov	sp, r7
 80030c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ca:	bf00      	nop
 80030cc:	51eb851f 	.word	0x51eb851f

080030d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80030de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030e2:	2b84      	cmp	r3, #132	; 0x84
 80030e4:	d005      	beq.n	80030f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80030e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	3303      	adds	r3, #3
 80030f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80030f2:	68fb      	ldr	r3, [r7, #12]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003104:	f000 ffb4 	bl	8004070 <vTaskStartScheduler>
  
  return osOK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	bd80      	pop	{r7, pc}

0800310e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800310e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003110:	b089      	sub	sp, #36	; 0x24
 8003112:	af04      	add	r7, sp, #16
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d020      	beq.n	8003162 <osThreadCreate+0x54>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01c      	beq.n	8003162 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685c      	ldr	r4, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681d      	ldr	r5, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691e      	ldr	r6, [r3, #16]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff ffc8 	bl	80030d0 <makeFreeRtosPriority>
 8003140:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800314a:	9202      	str	r2, [sp, #8]
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	9100      	str	r1, [sp, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4632      	mov	r2, r6
 8003154:	4629      	mov	r1, r5
 8003156:	4620      	mov	r0, r4
 8003158:	f000 fc9e 	bl	8003a98 <xTaskCreateStatic>
 800315c:	4603      	mov	r3, r0
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	e01c      	b.n	800319c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685c      	ldr	r4, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800316e:	b29e      	uxth	r6, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff ffaa 	bl	80030d0 <makeFreeRtosPriority>
 800317c:	4602      	mov	r2, r0
 800317e:	f107 030c 	add.w	r3, r7, #12
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	9200      	str	r2, [sp, #0]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	4632      	mov	r2, r6
 800318a:	4629      	mov	r1, r5
 800318c:	4620      	mov	r0, r4
 800318e:	f000 fce0 	bl	8003b52 <xTaskCreate>
 8003192:	4603      	mov	r3, r0
 8003194:	2b01      	cmp	r3, #1
 8003196:	d001      	beq.n	800319c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800319c:	68fb      	ldr	r3, [r7, #12]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <osDelay+0x16>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	e000      	b.n	80031be <osDelay+0x18>
 80031bc:	2301      	movs	r3, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 ff22 	bl	8004008 <vTaskDelay>
  
  return osOK;
 80031c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f103 0208 	add.w	r2, r3, #8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f04f 32ff 	mov.w	r2, #4294967295
 80031e6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f103 0208 	add.w	r2, r3, #8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f103 0208 	add.w	r2, r3, #8
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	601a      	str	r2, [r3, #0]
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d103      	bne.n	8003290 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	e00c      	b.n	80032aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3308      	adds	r3, #8
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	e002      	b.n	800329e <vListInsert+0x2e>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d2f6      	bcs.n	8003298 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	601a      	str	r2, [r3, #0]
}
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6892      	ldr	r2, [r2, #8]
 80032f8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6852      	ldr	r2, [r2, #4]
 8003302:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	429a      	cmp	r2, r3
 800330c:	d103      	bne.n	8003316 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	1e5a      	subs	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800335e:	bf00      	nop
 8003360:	e7fe      	b.n	8003360 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003362:	f001 fcdf 	bl	8004d24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336e:	68f9      	ldr	r1, [r7, #12]
 8003370:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003372:	fb01 f303 	mul.w	r3, r1, r3
 8003376:	441a      	add	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003392:	3b01      	subs	r3, #1
 8003394:	68f9      	ldr	r1, [r7, #12]
 8003396:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	441a      	add	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	22ff      	movs	r2, #255	; 0xff
 80033a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	22ff      	movs	r2, #255	; 0xff
 80033ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d114      	bne.n	80033e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01a      	beq.n	80033f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	3310      	adds	r3, #16
 80033c4:	4618      	mov	r0, r3
 80033c6:	f001 f8b5 	bl	8004534 <xTaskRemoveFromEventList>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d012      	beq.n	80033f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <xQueueGenericReset+0xcc>)
 80033d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	e009      	b.n	80033f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3310      	adds	r3, #16
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fef1 	bl	80031ce <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	3324      	adds	r3, #36	; 0x24
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff feec 	bl	80031ce <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80033f6:	f001 fcc5 	bl	8004d84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80033fa:	2301      	movs	r3, #1
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	e000ed04 	.word	0xe000ed04

08003408 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	; 0x28
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	4613      	mov	r3, r2
 8003414:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <xQueueGenericCreate+0x2a>
	__asm volatile
 800341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	613b      	str	r3, [r7, #16]
}
 800342e:	bf00      	nop
 8003430:	e7fe      	b.n	8003430 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	fb02 f303 	mul.w	r3, r2, r3
 800343a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	3348      	adds	r3, #72	; 0x48
 8003440:	4618      	mov	r0, r3
 8003442:	f001 fd51 	bl	8004ee8 <pvPortMalloc>
 8003446:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d011      	beq.n	8003472 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	3348      	adds	r3, #72	; 0x48
 8003456:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003460:	79fa      	ldrb	r2, [r7, #7]
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	4613      	mov	r3, r2
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f805 	bl	800347c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003472:	69bb      	ldr	r3, [r7, #24]
	}
 8003474:	4618      	mov	r0, r3
 8003476:	3720      	adds	r7, #32
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d103      	bne.n	8003498 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e002      	b.n	800349e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80034aa:	2101      	movs	r1, #1
 80034ac:	69b8      	ldr	r0, [r7, #24]
 80034ae:	f7ff ff43 	bl	8003338 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80034b2:	bf00      	nop
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08e      	sub	sp, #56	; 0x38
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80034ca:	2300      	movs	r3, #0
 80034cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80034d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <xQueueGenericSend+0x32>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80034ea:	bf00      	nop
 80034ec:	e7fe      	b.n	80034ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d103      	bne.n	80034fc <xQueueGenericSend+0x40>
 80034f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <xQueueGenericSend+0x44>
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <xQueueGenericSend+0x46>
 8003500:	2300      	movs	r3, #0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <xQueueGenericSend+0x60>
	__asm volatile
 8003506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350a:	f383 8811 	msr	BASEPRI, r3
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003518:	bf00      	nop
 800351a:	e7fe      	b.n	800351a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d103      	bne.n	800352a <xQueueGenericSend+0x6e>
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <xQueueGenericSend+0x72>
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <xQueueGenericSend+0x74>
 800352e:	2300      	movs	r3, #0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10a      	bne.n	800354a <xQueueGenericSend+0x8e>
	__asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	623b      	str	r3, [r7, #32]
}
 8003546:	bf00      	nop
 8003548:	e7fe      	b.n	8003548 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800354a:	f001 f9b3 	bl	80048b4 <xTaskGetSchedulerState>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d102      	bne.n	800355a <xQueueGenericSend+0x9e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <xQueueGenericSend+0xa2>
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <xQueueGenericSend+0xa4>
 800355e:	2300      	movs	r3, #0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <xQueueGenericSend+0xbe>
	__asm volatile
 8003564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	61fb      	str	r3, [r7, #28]
}
 8003576:	bf00      	nop
 8003578:	e7fe      	b.n	8003578 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800357a:	f001 fbd3 	bl	8004d24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	429a      	cmp	r2, r3
 8003588:	d302      	bcc.n	8003590 <xQueueGenericSend+0xd4>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d129      	bne.n	80035e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003596:	f000 f96f 	bl	8003878 <prvCopyDataToQueue>
 800359a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d010      	beq.n	80035c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	3324      	adds	r3, #36	; 0x24
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 ffc3 	bl	8004534 <xTaskRemoveFromEventList>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d013      	beq.n	80035dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80035b4:	4b3f      	ldr	r3, [pc, #252]	; (80036b4 <xQueueGenericSend+0x1f8>)
 80035b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	e00a      	b.n	80035dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80035c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d007      	beq.n	80035dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80035cc:	4b39      	ldr	r3, [pc, #228]	; (80036b4 <xQueueGenericSend+0x1f8>)
 80035ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80035dc:	f001 fbd2 	bl	8004d84 <vPortExitCritical>
				return pdPASS;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e063      	b.n	80036ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d103      	bne.n	80035f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035ea:	f001 fbcb 	bl	8004d84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	e05c      	b.n	80036ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d106      	bne.n	8003606 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fffb 	bl	80045f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003602:	2301      	movs	r3, #1
 8003604:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003606:	f001 fbbd 	bl	8004d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800360a:	f000 fd9b 	bl	8004144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800360e:	f001 fb89 	bl	8004d24 <vPortEnterCritical>
 8003612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003614:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003618:	b25b      	sxtb	r3, r3
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d103      	bne.n	8003628 <xQueueGenericSend+0x16c>
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800362e:	b25b      	sxtb	r3, r3
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003634:	d103      	bne.n	800363e <xQueueGenericSend+0x182>
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800363e:	f001 fba1 	bl	8004d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003642:	1d3a      	adds	r2, r7, #4
 8003644:	f107 0314 	add.w	r3, r7, #20
 8003648:	4611      	mov	r1, r2
 800364a:	4618      	mov	r0, r3
 800364c:	f000 ffea 	bl	8004624 <xTaskCheckForTimeOut>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d124      	bne.n	80036a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003656:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003658:	f000 fa06 	bl	8003a68 <prvIsQueueFull>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d018      	beq.n	8003694 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003664:	3310      	adds	r3, #16
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f000 ff3e 	bl	80044ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003672:	f000 f991 	bl	8003998 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003676:	f000 fd73 	bl	8004160 <xTaskResumeAll>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	f47f af7c 	bne.w	800357a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003682:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <xQueueGenericSend+0x1f8>)
 8003684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	e772      	b.n	800357a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003696:	f000 f97f 	bl	8003998 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800369a:	f000 fd61 	bl	8004160 <xTaskResumeAll>
 800369e:	e76c      	b.n	800357a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80036a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036a2:	f000 f979 	bl	8003998 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036a6:	f000 fd5b 	bl	8004160 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80036aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3738      	adds	r7, #56	; 0x38
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	e000ed04 	.word	0xe000ed04

080036b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08c      	sub	sp, #48	; 0x30
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <xQueueReceive+0x30>
	__asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	623b      	str	r3, [r7, #32]
}
 80036e4:	bf00      	nop
 80036e6:	e7fe      	b.n	80036e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d103      	bne.n	80036f6 <xQueueReceive+0x3e>
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <xQueueReceive+0x42>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <xQueueReceive+0x44>
 80036fa:	2300      	movs	r3, #0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <xQueueReceive+0x5e>
	__asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	61fb      	str	r3, [r7, #28]
}
 8003712:	bf00      	nop
 8003714:	e7fe      	b.n	8003714 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003716:	f001 f8cd 	bl	80048b4 <xTaskGetSchedulerState>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <xQueueReceive+0x6e>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <xQueueReceive+0x72>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <xQueueReceive+0x74>
 800372a:	2300      	movs	r3, #0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10a      	bne.n	8003746 <xQueueReceive+0x8e>
	__asm volatile
 8003730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	61bb      	str	r3, [r7, #24]
}
 8003742:	bf00      	nop
 8003744:	e7fe      	b.n	8003744 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003746:	f001 faed 	bl	8004d24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	2b00      	cmp	r3, #0
 8003754:	d01f      	beq.n	8003796 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800375a:	f000 f8f7 	bl	800394c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	1e5a      	subs	r2, r3, #1
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00f      	beq.n	800378e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	3310      	adds	r3, #16
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fede 	bl	8004534 <xTaskRemoveFromEventList>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d007      	beq.n	800378e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800377e:	4b3d      	ldr	r3, [pc, #244]	; (8003874 <xQueueReceive+0x1bc>)
 8003780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800378e:	f001 faf9 	bl	8004d84 <vPortExitCritical>
				return pdPASS;
 8003792:	2301      	movs	r3, #1
 8003794:	e069      	b.n	800386a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d103      	bne.n	80037a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800379c:	f001 faf2 	bl	8004d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037a0:	2300      	movs	r3, #0
 80037a2:	e062      	b.n	800386a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037aa:	f107 0310 	add.w	r3, r7, #16
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 ff22 	bl	80045f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037b4:	2301      	movs	r3, #1
 80037b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037b8:	f001 fae4 	bl	8004d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037bc:	f000 fcc2 	bl	8004144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037c0:	f001 fab0 	bl	8004d24 <vPortEnterCritical>
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ca:	b25b      	sxtb	r3, r3
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d103      	bne.n	80037da <xQueueReceive+0x122>
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037e0:	b25b      	sxtb	r3, r3
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e6:	d103      	bne.n	80037f0 <xQueueReceive+0x138>
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037f0:	f001 fac8 	bl	8004d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037f4:	1d3a      	adds	r2, r7, #4
 80037f6:	f107 0310 	add.w	r3, r7, #16
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 ff11 	bl	8004624 <xTaskCheckForTimeOut>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d123      	bne.n	8003850 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800380a:	f000 f917 	bl	8003a3c <prvIsQueueEmpty>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d017      	beq.n	8003844 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	3324      	adds	r3, #36	; 0x24
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fe65 	bl	80044ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003824:	f000 f8b8 	bl	8003998 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003828:	f000 fc9a 	bl	8004160 <xTaskResumeAll>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d189      	bne.n	8003746 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003832:	4b10      	ldr	r3, [pc, #64]	; (8003874 <xQueueReceive+0x1bc>)
 8003834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	e780      	b.n	8003746 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003846:	f000 f8a7 	bl	8003998 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800384a:	f000 fc89 	bl	8004160 <xTaskResumeAll>
 800384e:	e77a      	b.n	8003746 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003852:	f000 f8a1 	bl	8003998 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003856:	f000 fc83 	bl	8004160 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800385a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800385c:	f000 f8ee 	bl	8003a3c <prvIsQueueEmpty>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	f43f af6f 	beq.w	8003746 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003868:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800386a:	4618      	mov	r0, r3
 800386c:	3730      	adds	r7, #48	; 0x30
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	e000ed04 	.word	0xe000ed04

08003878 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10d      	bne.n	80038b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d14d      	bne.n	800393a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 f824 	bl	80048f0 <xTaskPriorityDisinherit>
 80038a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	e043      	b.n	800393a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d119      	bne.n	80038ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6858      	ldr	r0, [r3, #4]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	461a      	mov	r2, r3
 80038c2:	68b9      	ldr	r1, [r7, #8]
 80038c4:	f001 fd26 	bl	8005314 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	441a      	add	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d32b      	bcc.n	800393a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	e026      	b.n	800393a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	68d8      	ldr	r0, [r3, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	461a      	mov	r2, r3
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	f001 fd0c 	bl	8005314 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	425b      	negs	r3, r3
 8003906:	441a      	add	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d207      	bcs.n	8003928 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	425b      	negs	r3, r3
 8003922:	441a      	add	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d105      	bne.n	800393a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	3b01      	subs	r3, #1
 8003938:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003942:	697b      	ldr	r3, [r7, #20]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d018      	beq.n	8003990 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	441a      	add	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	429a      	cmp	r2, r3
 8003976:	d303      	bcc.n	8003980 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68d9      	ldr	r1, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	461a      	mov	r2, r3
 800398a:	6838      	ldr	r0, [r7, #0]
 800398c:	f001 fcc2 	bl	8005314 <memcpy>
	}
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80039a0:	f001 f9c0 	bl	8004d24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039ac:	e011      	b.n	80039d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d012      	beq.n	80039dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3324      	adds	r3, #36	; 0x24
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fdba 	bl	8004534 <xTaskRemoveFromEventList>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039c6:	f000 fe8f 	bl	80046e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	dce9      	bgt.n	80039ae <prvUnlockQueue+0x16>
 80039da:	e000      	b.n	80039de <prvUnlockQueue+0x46>
					break;
 80039dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	22ff      	movs	r2, #255	; 0xff
 80039e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80039e6:	f001 f9cd 	bl	8004d84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039ea:	f001 f99b 	bl	8004d24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039f6:	e011      	b.n	8003a1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d012      	beq.n	8003a26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3310      	adds	r3, #16
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fd95 	bl	8004534 <xTaskRemoveFromEventList>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a10:	f000 fe6a 	bl	80046e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a14:	7bbb      	ldrb	r3, [r7, #14]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	dce9      	bgt.n	80039f8 <prvUnlockQueue+0x60>
 8003a24:	e000      	b.n	8003a28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	22ff      	movs	r2, #255	; 0xff
 8003a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a30:	f001 f9a8 	bl	8004d84 <vPortExitCritical>
}
 8003a34:	bf00      	nop
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a44:	f001 f96e 	bl	8004d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a50:	2301      	movs	r3, #1
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	e001      	b.n	8003a5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a5a:	f001 f993 	bl	8004d84 <vPortExitCritical>

	return xReturn;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a70:	f001 f958 	bl	8004d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d102      	bne.n	8003a86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a80:	2301      	movs	r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	e001      	b.n	8003a8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a8a:	f001 f97b 	bl	8004d84 <vPortExitCritical>

	return xReturn;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08e      	sub	sp, #56	; 0x38
 8003a9c:	af04      	add	r7, sp, #16
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	623b      	str	r3, [r7, #32]
}
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10a      	bne.n	8003ade <xTaskCreateStatic+0x46>
	__asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	61fb      	str	r3, [r7, #28]
}
 8003ada:	bf00      	nop
 8003adc:	e7fe      	b.n	8003adc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ade:	23b4      	movs	r3, #180	; 0xb4
 8003ae0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2bb4      	cmp	r3, #180	; 0xb4
 8003ae6:	d00a      	beq.n	8003afe <xTaskCreateStatic+0x66>
	__asm volatile
 8003ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	61bb      	str	r3, [r7, #24]
}
 8003afa:	bf00      	nop
 8003afc:	e7fe      	b.n	8003afc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003afe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01e      	beq.n	8003b44 <xTaskCreateStatic+0xac>
 8003b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d01b      	beq.n	8003b44 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	2202      	movs	r2, #2
 8003b1a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b1e:	2300      	movs	r3, #0
 8003b20:	9303      	str	r3, [sp, #12]
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	9302      	str	r3, [sp, #8]
 8003b26:	f107 0314 	add.w	r3, r7, #20
 8003b2a:	9301      	str	r3, [sp, #4]
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f850 	bl	8003bdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b3e:	f000 f8eb 	bl	8003d18 <prvAddNewTaskToReadyList>
 8003b42:	e001      	b.n	8003b48 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b48:	697b      	ldr	r3, [r7, #20]
	}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3728      	adds	r7, #40	; 0x28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b08c      	sub	sp, #48	; 0x30
 8003b56:	af04      	add	r7, sp, #16
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	603b      	str	r3, [r7, #0]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f001 f9be 	bl	8004ee8 <pvPortMalloc>
 8003b6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00e      	beq.n	8003b92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b74:	20b4      	movs	r0, #180	; 0xb4
 8003b76:	f001 f9b7 	bl	8004ee8 <pvPortMalloc>
 8003b7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
 8003b88:	e005      	b.n	8003b96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b8a:	6978      	ldr	r0, [r7, #20]
 8003b8c:	f001 fa78 	bl	8005080 <vPortFree>
 8003b90:	e001      	b.n	8003b96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d017      	beq.n	8003bcc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ba4:	88fa      	ldrh	r2, [r7, #6]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	9303      	str	r3, [sp, #12]
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	9302      	str	r3, [sp, #8]
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f80e 	bl	8003bdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bc0:	69f8      	ldr	r0, [r7, #28]
 8003bc2:	f000 f8a9 	bl	8003d18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	e002      	b.n	8003bd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003bd2:	69bb      	ldr	r3, [r7, #24]
	}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3720      	adds	r7, #32
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f023 0307 	bic.w	r3, r3, #7
 8003c02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	617b      	str	r3, [r7, #20]
}
 8003c20:	bf00      	nop
 8003c22:	e7fe      	b.n	8003c22 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d01f      	beq.n	8003c6a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	e012      	b.n	8003c56 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	4413      	add	r3, r2
 8003c36:	7819      	ldrb	r1, [r3, #0]
 8003c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3334      	adds	r3, #52	; 0x34
 8003c40:	460a      	mov	r2, r1
 8003c42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d006      	beq.n	8003c5e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	3301      	adds	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	2b0f      	cmp	r3, #15
 8003c5a:	d9e9      	bls.n	8003c30 <prvInitialiseNewTask+0x54>
 8003c5c:	e000      	b.n	8003c60 <prvInitialiseNewTask+0x84>
			{
				break;
 8003c5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c68:	e003      	b.n	8003c72 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c74:	2b06      	cmp	r3, #6
 8003c76:	d901      	bls.n	8003c7c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c78:	2306      	movs	r3, #6
 8003c7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c86:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	3304      	adds	r3, #4
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fabb 	bl	800320e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	3318      	adds	r3, #24
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff fab6 	bl	800320e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003caa:	f1c3 0207 	rsb	r2, r3, #7
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	334c      	adds	r3, #76	; 0x4c
 8003ccc:	2260      	movs	r2, #96	; 0x60
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f001 fb2d 	bl	8005330 <memset>
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	4a0c      	ldr	r2, [pc, #48]	; (8003d0c <prvInitialiseNewTask+0x130>)
 8003cda:	651a      	str	r2, [r3, #80]	; 0x50
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	4a0c      	ldr	r2, [pc, #48]	; (8003d10 <prvInitialiseNewTask+0x134>)
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce4:	4a0b      	ldr	r2, [pc, #44]	; (8003d14 <prvInitialiseNewTask+0x138>)
 8003ce6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	68f9      	ldr	r1, [r7, #12]
 8003cec:	69b8      	ldr	r0, [r7, #24]
 8003cee:	f000 feeb 	bl	8004ac8 <pxPortInitialiseStack>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d04:	bf00      	nop
 8003d06:	3720      	adds	r7, #32
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	08005d78 	.word	0x08005d78
 8003d10:	08005d98 	.word	0x08005d98
 8003d14:	08005d58 	.word	0x08005d58

08003d18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d20:	f001 f800 	bl	8004d24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d24:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <prvAddNewTaskToReadyList+0xb8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	4a29      	ldr	r2, [pc, #164]	; (8003dd0 <prvAddNewTaskToReadyList+0xb8>)
 8003d2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d2e:	4b29      	ldr	r3, [pc, #164]	; (8003dd4 <prvAddNewTaskToReadyList+0xbc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d36:	4a27      	ldr	r2, [pc, #156]	; (8003dd4 <prvAddNewTaskToReadyList+0xbc>)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d3c:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <prvAddNewTaskToReadyList+0xb8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d110      	bne.n	8003d66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d44:	f000 fcf4 	bl	8004730 <prvInitialiseTaskLists>
 8003d48:	e00d      	b.n	8003d66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d4a:	4b23      	ldr	r3, [pc, #140]	; (8003dd8 <prvAddNewTaskToReadyList+0xc0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d52:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <prvAddNewTaskToReadyList+0xbc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d802      	bhi.n	8003d66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d60:	4a1c      	ldr	r2, [pc, #112]	; (8003dd4 <prvAddNewTaskToReadyList+0xbc>)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d66:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <prvAddNewTaskToReadyList+0xc4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	4a1b      	ldr	r2, [pc, #108]	; (8003ddc <prvAddNewTaskToReadyList+0xc4>)
 8003d6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	2201      	movs	r2, #1
 8003d76:	409a      	lsls	r2, r3
 8003d78:	4b19      	ldr	r3, [pc, #100]	; (8003de0 <prvAddNewTaskToReadyList+0xc8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	4a18      	ldr	r2, [pc, #96]	; (8003de0 <prvAddNewTaskToReadyList+0xc8>)
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <prvAddNewTaskToReadyList+0xcc>)
 8003d90:	441a      	add	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3304      	adds	r3, #4
 8003d96:	4619      	mov	r1, r3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	f7ff fa45 	bl	8003228 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d9e:	f000 fff1 	bl	8004d84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003da2:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <prvAddNewTaskToReadyList+0xc0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00e      	beq.n	8003dc8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <prvAddNewTaskToReadyList+0xbc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d207      	bcs.n	8003dc8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003db8:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <prvAddNewTaskToReadyList+0xd0>)
 8003dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dc8:	bf00      	nop
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000528 	.word	0x20000528
 8003dd4:	20000428 	.word	0x20000428
 8003dd8:	20000534 	.word	0x20000534
 8003ddc:	20000544 	.word	0x20000544
 8003de0:	20000530 	.word	0x20000530
 8003de4:	2000042c 	.word	0x2000042c
 8003de8:	e000ed04 	.word	0xe000ed04

08003dec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003df4:	f000 ff96 	bl	8004d24 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <vTaskDelete+0x18>
 8003dfe:	4b39      	ldr	r3, [pc, #228]	; (8003ee4 <vTaskDelete+0xf8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	e000      	b.n	8003e06 <vTaskDelete+0x1a>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fa68 	bl	80032e2 <uxListRemove>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d115      	bne.n	8003e44 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1c:	4932      	ldr	r1, [pc, #200]	; (8003ee8 <vTaskDelete+0xfc>)
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <vTaskDelete+0x58>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	2201      	movs	r2, #1
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	43da      	mvns	r2, r3
 8003e3a:	4b2c      	ldr	r3, [pc, #176]	; (8003eec <vTaskDelete+0x100>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	4a2a      	ldr	r2, [pc, #168]	; (8003eec <vTaskDelete+0x100>)
 8003e42:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d004      	beq.n	8003e56 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3318      	adds	r3, #24
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fa46 	bl	80032e2 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003e56:	4b26      	ldr	r3, [pc, #152]	; (8003ef0 <vTaskDelete+0x104>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	4a24      	ldr	r2, [pc, #144]	; (8003ef0 <vTaskDelete+0x104>)
 8003e5e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003e60:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <vTaskDelete+0xf8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d10b      	bne.n	8003e82 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4820      	ldr	r0, [pc, #128]	; (8003ef4 <vTaskDelete+0x108>)
 8003e72:	f7ff f9d9 	bl	8003228 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003e76:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <vTaskDelete+0x10c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	4a1e      	ldr	r2, [pc, #120]	; (8003ef8 <vTaskDelete+0x10c>)
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	e009      	b.n	8003e96 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003e82:	4b1e      	ldr	r3, [pc, #120]	; (8003efc <vTaskDelete+0x110>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	4a1c      	ldr	r2, [pc, #112]	; (8003efc <vTaskDelete+0x110>)
 8003e8a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 fcbd 	bl	800480c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003e92:	f000 fcef 	bl	8004874 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003e96:	f000 ff75 	bl	8004d84 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003e9a:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <vTaskDelete+0x114>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d01b      	beq.n	8003eda <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <vTaskDelete+0xf8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d116      	bne.n	8003eda <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003eac:	4b15      	ldr	r3, [pc, #84]	; (8003f04 <vTaskDelete+0x118>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <vTaskDelete+0xde>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	60bb      	str	r3, [r7, #8]
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8003eca:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <vTaskDelete+0x11c>)
 8003ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003eda:	bf00      	nop
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000428 	.word	0x20000428
 8003ee8:	2000042c 	.word	0x2000042c
 8003eec:	20000530 	.word	0x20000530
 8003ef0:	20000544 	.word	0x20000544
 8003ef4:	200004fc 	.word	0x200004fc
 8003ef8:	20000510 	.word	0x20000510
 8003efc:	20000528 	.word	0x20000528
 8003f00:	20000534 	.word	0x20000534
 8003f04:	20000550 	.word	0x20000550
 8003f08:	e000ed04 	.word	0xe000ed04

08003f0c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <vTaskDelayUntil+0x2a>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	617b      	str	r3, [r7, #20]
}
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10a      	bne.n	8003f52 <vTaskDelayUntil+0x46>
	__asm volatile
 8003f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f40:	f383 8811 	msr	BASEPRI, r3
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	613b      	str	r3, [r7, #16]
}
 8003f4e:	bf00      	nop
 8003f50:	e7fe      	b.n	8003f50 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8003f52:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <vTaskDelayUntil+0xf0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <vTaskDelayUntil+0x64>
	__asm volatile
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	60fb      	str	r3, [r7, #12]
}
 8003f6c:	bf00      	nop
 8003f6e:	e7fe      	b.n	8003f6e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8003f70:	f000 f8e8 	bl	8004144 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003f74:	4b22      	ldr	r3, [pc, #136]	; (8004000 <vTaskDelayUntil+0xf4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	4413      	add	r3, r2
 8003f82:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6a3a      	ldr	r2, [r7, #32]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d20b      	bcs.n	8003fa6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d211      	bcs.n	8003fbc <vTaskDelayUntil+0xb0>
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d90d      	bls.n	8003fbc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa4:	e00a      	b.n	8003fbc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d303      	bcc.n	8003fb8 <vTaskDelayUntil+0xac>
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d901      	bls.n	8003fbc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d006      	beq.n	8003fd6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2100      	movs	r1, #0
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fd13 	bl	80049fc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003fd6:	f000 f8c3 	bl	8004160 <xTaskResumeAll>
 8003fda:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d107      	bne.n	8003ff2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8003fe2:	4b08      	ldr	r3, [pc, #32]	; (8004004 <vTaskDelayUntil+0xf8>)
 8003fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ff2:	bf00      	nop
 8003ff4:	3728      	adds	r7, #40	; 0x28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000550 	.word	0x20000550
 8004000:	2000052c 	.word	0x2000052c
 8004004:	e000ed04 	.word	0xe000ed04

08004008 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d017      	beq.n	800404a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800401a:	4b13      	ldr	r3, [pc, #76]	; (8004068 <vTaskDelay+0x60>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <vTaskDelay+0x30>
	__asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	60bb      	str	r3, [r7, #8]
}
 8004034:	bf00      	nop
 8004036:	e7fe      	b.n	8004036 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004038:	f000 f884 	bl	8004144 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800403c:	2100      	movs	r1, #0
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fcdc 	bl	80049fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004044:	f000 f88c 	bl	8004160 <xTaskResumeAll>
 8004048:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d107      	bne.n	8004060 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004050:	4b06      	ldr	r3, [pc, #24]	; (800406c <vTaskDelay+0x64>)
 8004052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004060:	bf00      	nop
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	20000550 	.word	0x20000550
 800406c:	e000ed04 	.word	0xe000ed04

08004070 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	; 0x28
 8004074:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800407a:	2300      	movs	r3, #0
 800407c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800407e:	463a      	mov	r2, r7
 8004080:	1d39      	adds	r1, r7, #4
 8004082:	f107 0308 	add.w	r3, r7, #8
 8004086:	4618      	mov	r0, r3
 8004088:	f7fc fa74 	bl	8000574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800408c:	6839      	ldr	r1, [r7, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	9202      	str	r2, [sp, #8]
 8004094:	9301      	str	r3, [sp, #4]
 8004096:	2300      	movs	r3, #0
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	2300      	movs	r3, #0
 800409c:	460a      	mov	r2, r1
 800409e:	4921      	ldr	r1, [pc, #132]	; (8004124 <vTaskStartScheduler+0xb4>)
 80040a0:	4821      	ldr	r0, [pc, #132]	; (8004128 <vTaskStartScheduler+0xb8>)
 80040a2:	f7ff fcf9 	bl	8003a98 <xTaskCreateStatic>
 80040a6:	4603      	mov	r3, r0
 80040a8:	4a20      	ldr	r2, [pc, #128]	; (800412c <vTaskStartScheduler+0xbc>)
 80040aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80040ac:	4b1f      	ldr	r3, [pc, #124]	; (800412c <vTaskStartScheduler+0xbc>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80040b4:	2301      	movs	r3, #1
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	e001      	b.n	80040be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d11b      	bne.n	80040fc <vTaskStartScheduler+0x8c>
	__asm volatile
 80040c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	613b      	str	r3, [r7, #16]
}
 80040d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80040d8:	4b15      	ldr	r3, [pc, #84]	; (8004130 <vTaskStartScheduler+0xc0>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	334c      	adds	r3, #76	; 0x4c
 80040de:	4a15      	ldr	r2, [pc, #84]	; (8004134 <vTaskStartScheduler+0xc4>)
 80040e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80040e2:	4b15      	ldr	r3, [pc, #84]	; (8004138 <vTaskStartScheduler+0xc8>)
 80040e4:	f04f 32ff 	mov.w	r2, #4294967295
 80040e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040ea:	4b14      	ldr	r3, [pc, #80]	; (800413c <vTaskStartScheduler+0xcc>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040f0:	4b13      	ldr	r3, [pc, #76]	; (8004140 <vTaskStartScheduler+0xd0>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040f6:	f000 fd73 	bl	8004be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040fa:	e00e      	b.n	800411a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004102:	d10a      	bne.n	800411a <vTaskStartScheduler+0xaa>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	60fb      	str	r3, [r7, #12]
}
 8004116:	bf00      	nop
 8004118:	e7fe      	b.n	8004118 <vTaskStartScheduler+0xa8>
}
 800411a:	bf00      	nop
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	08005d38 	.word	0x08005d38
 8004128:	08004701 	.word	0x08004701
 800412c:	2000054c 	.word	0x2000054c
 8004130:	20000428 	.word	0x20000428
 8004134:	20000010 	.word	0x20000010
 8004138:	20000548 	.word	0x20000548
 800413c:	20000534 	.word	0x20000534
 8004140:	2000052c 	.word	0x2000052c

08004144 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004148:	4b04      	ldr	r3, [pc, #16]	; (800415c <vTaskSuspendAll+0x18>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	4a03      	ldr	r2, [pc, #12]	; (800415c <vTaskSuspendAll+0x18>)
 8004150:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004152:	bf00      	nop
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	20000550 	.word	0x20000550

08004160 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800416a:	2300      	movs	r3, #0
 800416c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800416e:	4b41      	ldr	r3, [pc, #260]	; (8004274 <xTaskResumeAll+0x114>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <xTaskResumeAll+0x2c>
	__asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	603b      	str	r3, [r7, #0]
}
 8004188:	bf00      	nop
 800418a:	e7fe      	b.n	800418a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800418c:	f000 fdca 	bl	8004d24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004190:	4b38      	ldr	r3, [pc, #224]	; (8004274 <xTaskResumeAll+0x114>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3b01      	subs	r3, #1
 8004196:	4a37      	ldr	r2, [pc, #220]	; (8004274 <xTaskResumeAll+0x114>)
 8004198:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800419a:	4b36      	ldr	r3, [pc, #216]	; (8004274 <xTaskResumeAll+0x114>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d161      	bne.n	8004266 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041a2:	4b35      	ldr	r3, [pc, #212]	; (8004278 <xTaskResumeAll+0x118>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d05d      	beq.n	8004266 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041aa:	e02e      	b.n	800420a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ac:	4b33      	ldr	r3, [pc, #204]	; (800427c <xTaskResumeAll+0x11c>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3318      	adds	r3, #24
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff f892 	bl	80032e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3304      	adds	r3, #4
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff f88d 	bl	80032e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	2201      	movs	r2, #1
 80041ce:	409a      	lsls	r2, r3
 80041d0:	4b2b      	ldr	r3, [pc, #172]	; (8004280 <xTaskResumeAll+0x120>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	4a2a      	ldr	r2, [pc, #168]	; (8004280 <xTaskResumeAll+0x120>)
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4a27      	ldr	r2, [pc, #156]	; (8004284 <xTaskResumeAll+0x124>)
 80041e8:	441a      	add	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3304      	adds	r3, #4
 80041ee:	4619      	mov	r1, r3
 80041f0:	4610      	mov	r0, r2
 80041f2:	f7ff f819 	bl	8003228 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fa:	4b23      	ldr	r3, [pc, #140]	; (8004288 <xTaskResumeAll+0x128>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	429a      	cmp	r2, r3
 8004202:	d302      	bcc.n	800420a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004204:	4b21      	ldr	r3, [pc, #132]	; (800428c <xTaskResumeAll+0x12c>)
 8004206:	2201      	movs	r2, #1
 8004208:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800420a:	4b1c      	ldr	r3, [pc, #112]	; (800427c <xTaskResumeAll+0x11c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1cc      	bne.n	80041ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004218:	f000 fb2c 	bl	8004874 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800421c:	4b1c      	ldr	r3, [pc, #112]	; (8004290 <xTaskResumeAll+0x130>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d010      	beq.n	800424a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004228:	f000 f846 	bl	80042b8 <xTaskIncrementTick>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004232:	4b16      	ldr	r3, [pc, #88]	; (800428c <xTaskResumeAll+0x12c>)
 8004234:	2201      	movs	r2, #1
 8004236:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3b01      	subs	r3, #1
 800423c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f1      	bne.n	8004228 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004244:	4b12      	ldr	r3, [pc, #72]	; (8004290 <xTaskResumeAll+0x130>)
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800424a:	4b10      	ldr	r3, [pc, #64]	; (800428c <xTaskResumeAll+0x12c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004252:	2301      	movs	r3, #1
 8004254:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004256:	4b0f      	ldr	r3, [pc, #60]	; (8004294 <xTaskResumeAll+0x134>)
 8004258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004266:	f000 fd8d 	bl	8004d84 <vPortExitCritical>

	return xAlreadyYielded;
 800426a:	68bb      	ldr	r3, [r7, #8]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20000550 	.word	0x20000550
 8004278:	20000528 	.word	0x20000528
 800427c:	200004e8 	.word	0x200004e8
 8004280:	20000530 	.word	0x20000530
 8004284:	2000042c 	.word	0x2000042c
 8004288:	20000428 	.word	0x20000428
 800428c:	2000053c 	.word	0x2000053c
 8004290:	20000538 	.word	0x20000538
 8004294:	e000ed04 	.word	0xe000ed04

08004298 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800429e:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <xTaskGetTickCount+0x1c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80042a4:	687b      	ldr	r3, [r7, #4]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	2000052c 	.word	0x2000052c

080042b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042c2:	4b4e      	ldr	r3, [pc, #312]	; (80043fc <xTaskIncrementTick+0x144>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f040 808e 	bne.w	80043e8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042cc:	4b4c      	ldr	r3, [pc, #304]	; (8004400 <xTaskIncrementTick+0x148>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3301      	adds	r3, #1
 80042d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042d4:	4a4a      	ldr	r2, [pc, #296]	; (8004400 <xTaskIncrementTick+0x148>)
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d120      	bne.n	8004322 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80042e0:	4b48      	ldr	r3, [pc, #288]	; (8004404 <xTaskIncrementTick+0x14c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <xTaskIncrementTick+0x48>
	__asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	603b      	str	r3, [r7, #0]
}
 80042fc:	bf00      	nop
 80042fe:	e7fe      	b.n	80042fe <xTaskIncrementTick+0x46>
 8004300:	4b40      	ldr	r3, [pc, #256]	; (8004404 <xTaskIncrementTick+0x14c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	4b40      	ldr	r3, [pc, #256]	; (8004408 <xTaskIncrementTick+0x150>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a3e      	ldr	r2, [pc, #248]	; (8004404 <xTaskIncrementTick+0x14c>)
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	4a3e      	ldr	r2, [pc, #248]	; (8004408 <xTaskIncrementTick+0x150>)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	4b3d      	ldr	r3, [pc, #244]	; (800440c <xTaskIncrementTick+0x154>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3301      	adds	r3, #1
 800431a:	4a3c      	ldr	r2, [pc, #240]	; (800440c <xTaskIncrementTick+0x154>)
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	f000 faa9 	bl	8004874 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004322:	4b3b      	ldr	r3, [pc, #236]	; (8004410 <xTaskIncrementTick+0x158>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	429a      	cmp	r2, r3
 800432a:	d348      	bcc.n	80043be <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800432c:	4b35      	ldr	r3, [pc, #212]	; (8004404 <xTaskIncrementTick+0x14c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d104      	bne.n	8004340 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004336:	4b36      	ldr	r3, [pc, #216]	; (8004410 <xTaskIncrementTick+0x158>)
 8004338:	f04f 32ff 	mov.w	r2, #4294967295
 800433c:	601a      	str	r2, [r3, #0]
					break;
 800433e:	e03e      	b.n	80043be <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004340:	4b30      	ldr	r3, [pc, #192]	; (8004404 <xTaskIncrementTick+0x14c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	429a      	cmp	r2, r3
 8004356:	d203      	bcs.n	8004360 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004358:	4a2d      	ldr	r2, [pc, #180]	; (8004410 <xTaskIncrementTick+0x158>)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800435e:	e02e      	b.n	80043be <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	3304      	adds	r3, #4
 8004364:	4618      	mov	r0, r3
 8004366:	f7fe ffbc 	bl	80032e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	3318      	adds	r3, #24
 8004376:	4618      	mov	r0, r3
 8004378:	f7fe ffb3 	bl	80032e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	2201      	movs	r2, #1
 8004382:	409a      	lsls	r2, r3
 8004384:	4b23      	ldr	r3, [pc, #140]	; (8004414 <xTaskIncrementTick+0x15c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4313      	orrs	r3, r2
 800438a:	4a22      	ldr	r2, [pc, #136]	; (8004414 <xTaskIncrementTick+0x15c>)
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4a1f      	ldr	r2, [pc, #124]	; (8004418 <xTaskIncrementTick+0x160>)
 800439c:	441a      	add	r2, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	3304      	adds	r3, #4
 80043a2:	4619      	mov	r1, r3
 80043a4:	4610      	mov	r0, r2
 80043a6:	f7fe ff3f 	bl	8003228 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ae:	4b1b      	ldr	r3, [pc, #108]	; (800441c <xTaskIncrementTick+0x164>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d3b9      	bcc.n	800432c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80043b8:	2301      	movs	r3, #1
 80043ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043bc:	e7b6      	b.n	800432c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043be:	4b17      	ldr	r3, [pc, #92]	; (800441c <xTaskIncrementTick+0x164>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c4:	4914      	ldr	r1, [pc, #80]	; (8004418 <xTaskIncrementTick+0x160>)
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d901      	bls.n	80043da <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80043d6:	2301      	movs	r3, #1
 80043d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80043da:	4b11      	ldr	r3, [pc, #68]	; (8004420 <xTaskIncrementTick+0x168>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d007      	beq.n	80043f2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80043e2:	2301      	movs	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	e004      	b.n	80043f2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80043e8:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <xTaskIncrementTick+0x16c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3301      	adds	r3, #1
 80043ee:	4a0d      	ldr	r2, [pc, #52]	; (8004424 <xTaskIncrementTick+0x16c>)
 80043f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80043f2:	697b      	ldr	r3, [r7, #20]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20000550 	.word	0x20000550
 8004400:	2000052c 	.word	0x2000052c
 8004404:	200004e0 	.word	0x200004e0
 8004408:	200004e4 	.word	0x200004e4
 800440c:	20000540 	.word	0x20000540
 8004410:	20000548 	.word	0x20000548
 8004414:	20000530 	.word	0x20000530
 8004418:	2000042c 	.word	0x2000042c
 800441c:	20000428 	.word	0x20000428
 8004420:	2000053c 	.word	0x2000053c
 8004424:	20000538 	.word	0x20000538

08004428 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800442e:	4b29      	ldr	r3, [pc, #164]	; (80044d4 <vTaskSwitchContext+0xac>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004436:	4b28      	ldr	r3, [pc, #160]	; (80044d8 <vTaskSwitchContext+0xb0>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800443c:	e044      	b.n	80044c8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800443e:	4b26      	ldr	r3, [pc, #152]	; (80044d8 <vTaskSwitchContext+0xb0>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004444:	4b25      	ldr	r3, [pc, #148]	; (80044dc <vTaskSwitchContext+0xb4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	fab3 f383 	clz	r3, r3
 8004450:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004452:	7afb      	ldrb	r3, [r7, #11]
 8004454:	f1c3 031f 	rsb	r3, r3, #31
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	4921      	ldr	r1, [pc, #132]	; (80044e0 <vTaskSwitchContext+0xb8>)
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10a      	bne.n	8004484 <vTaskSwitchContext+0x5c>
	__asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	607b      	str	r3, [r7, #4]
}
 8004480:	bf00      	nop
 8004482:	e7fe      	b.n	8004482 <vTaskSwitchContext+0x5a>
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4a14      	ldr	r2, [pc, #80]	; (80044e0 <vTaskSwitchContext+0xb8>)
 8004490:	4413      	add	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	3308      	adds	r3, #8
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d104      	bne.n	80044b4 <vTaskSwitchContext+0x8c>
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	605a      	str	r2, [r3, #4]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <vTaskSwitchContext+0xbc>)
 80044bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044be:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <vTaskSwitchContext+0xbc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	334c      	adds	r3, #76	; 0x4c
 80044c4:	4a08      	ldr	r2, [pc, #32]	; (80044e8 <vTaskSwitchContext+0xc0>)
 80044c6:	6013      	str	r3, [r2, #0]
}
 80044c8:	bf00      	nop
 80044ca:	371c      	adds	r7, #28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	20000550 	.word	0x20000550
 80044d8:	2000053c 	.word	0x2000053c
 80044dc:	20000530 	.word	0x20000530
 80044e0:	2000042c 	.word	0x2000042c
 80044e4:	20000428 	.word	0x20000428
 80044e8:	20000010 	.word	0x20000010

080044ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10a      	bne.n	8004512 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	60fb      	str	r3, [r7, #12]
}
 800450e:	bf00      	nop
 8004510:	e7fe      	b.n	8004510 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004512:	4b07      	ldr	r3, [pc, #28]	; (8004530 <vTaskPlaceOnEventList+0x44>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3318      	adds	r3, #24
 8004518:	4619      	mov	r1, r3
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fe fea8 	bl	8003270 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004520:	2101      	movs	r1, #1
 8004522:	6838      	ldr	r0, [r7, #0]
 8004524:	f000 fa6a 	bl	80049fc <prvAddCurrentTaskToDelayedList>
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20000428 	.word	0x20000428

08004534 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	60fb      	str	r3, [r7, #12]
}
 800455c:	bf00      	nop
 800455e:	e7fe      	b.n	800455e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	3318      	adds	r3, #24
 8004564:	4618      	mov	r0, r3
 8004566:	f7fe febc 	bl	80032e2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800456a:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <xTaskRemoveFromEventList+0xac>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d11c      	bne.n	80045ac <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	3304      	adds	r3, #4
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe feb3 	bl	80032e2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	2201      	movs	r2, #1
 8004582:	409a      	lsls	r2, r3
 8004584:	4b17      	ldr	r3, [pc, #92]	; (80045e4 <xTaskRemoveFromEventList+0xb0>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4313      	orrs	r3, r2
 800458a:	4a16      	ldr	r2, [pc, #88]	; (80045e4 <xTaskRemoveFromEventList+0xb0>)
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4a13      	ldr	r2, [pc, #76]	; (80045e8 <xTaskRemoveFromEventList+0xb4>)
 800459c:	441a      	add	r2, r3
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	3304      	adds	r3, #4
 80045a2:	4619      	mov	r1, r3
 80045a4:	4610      	mov	r0, r2
 80045a6:	f7fe fe3f 	bl	8003228 <vListInsertEnd>
 80045aa:	e005      	b.n	80045b8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	3318      	adds	r3, #24
 80045b0:	4619      	mov	r1, r3
 80045b2:	480e      	ldr	r0, [pc, #56]	; (80045ec <xTaskRemoveFromEventList+0xb8>)
 80045b4:	f7fe fe38 	bl	8003228 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045bc:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <xTaskRemoveFromEventList+0xbc>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d905      	bls.n	80045d2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80045c6:	2301      	movs	r3, #1
 80045c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80045ca:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <xTaskRemoveFromEventList+0xc0>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	e001      	b.n	80045d6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80045d6:	697b      	ldr	r3, [r7, #20]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20000550 	.word	0x20000550
 80045e4:	20000530 	.word	0x20000530
 80045e8:	2000042c 	.word	0x2000042c
 80045ec:	200004e8 	.word	0x200004e8
 80045f0:	20000428 	.word	0x20000428
 80045f4:	2000053c 	.word	0x2000053c

080045f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004600:	4b06      	ldr	r3, [pc, #24]	; (800461c <vTaskInternalSetTimeOutState+0x24>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <vTaskInternalSetTimeOutState+0x28>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	605a      	str	r2, [r3, #4]
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	20000540 	.word	0x20000540
 8004620:	2000052c 	.word	0x2000052c

08004624 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10a      	bne.n	800464a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	613b      	str	r3, [r7, #16]
}
 8004646:	bf00      	nop
 8004648:	e7fe      	b.n	8004648 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	60fb      	str	r3, [r7, #12]
}
 8004662:	bf00      	nop
 8004664:	e7fe      	b.n	8004664 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004666:	f000 fb5d 	bl	8004d24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800466a:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <xTaskCheckForTimeOut+0xbc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004682:	d102      	bne.n	800468a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]
 8004688:	e023      	b.n	80046d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <xTaskCheckForTimeOut+0xc0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d007      	beq.n	80046a6 <xTaskCheckForTimeOut+0x82>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	429a      	cmp	r2, r3
 800469e:	d302      	bcc.n	80046a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80046a0:	2301      	movs	r3, #1
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	e015      	b.n	80046d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d20b      	bcs.n	80046c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	1ad2      	subs	r2, r2, r3
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff ff9b 	bl	80045f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	e004      	b.n	80046d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80046ce:	2301      	movs	r3, #1
 80046d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80046d2:	f000 fb57 	bl	8004d84 <vPortExitCritical>

	return xReturn;
 80046d6:	69fb      	ldr	r3, [r7, #28]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3720      	adds	r7, #32
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	2000052c 	.word	0x2000052c
 80046e4:	20000540 	.word	0x20000540

080046e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80046ec:	4b03      	ldr	r3, [pc, #12]	; (80046fc <vTaskMissedYield+0x14>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	601a      	str	r2, [r3, #0]
}
 80046f2:	bf00      	nop
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	2000053c 	.word	0x2000053c

08004700 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004708:	f000 f852 	bl	80047b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <prvIdleTask+0x28>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d9f9      	bls.n	8004708 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <prvIdleTask+0x2c>)
 8004716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004724:	e7f0      	b.n	8004708 <prvIdleTask+0x8>
 8004726:	bf00      	nop
 8004728:	2000042c 	.word	0x2000042c
 800472c:	e000ed04 	.word	0xe000ed04

08004730 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004736:	2300      	movs	r3, #0
 8004738:	607b      	str	r3, [r7, #4]
 800473a:	e00c      	b.n	8004756 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4a12      	ldr	r2, [pc, #72]	; (8004790 <prvInitialiseTaskLists+0x60>)
 8004748:	4413      	add	r3, r2
 800474a:	4618      	mov	r0, r3
 800474c:	f7fe fd3f 	bl	80031ce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3301      	adds	r3, #1
 8004754:	607b      	str	r3, [r7, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b06      	cmp	r3, #6
 800475a:	d9ef      	bls.n	800473c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800475c:	480d      	ldr	r0, [pc, #52]	; (8004794 <prvInitialiseTaskLists+0x64>)
 800475e:	f7fe fd36 	bl	80031ce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004762:	480d      	ldr	r0, [pc, #52]	; (8004798 <prvInitialiseTaskLists+0x68>)
 8004764:	f7fe fd33 	bl	80031ce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004768:	480c      	ldr	r0, [pc, #48]	; (800479c <prvInitialiseTaskLists+0x6c>)
 800476a:	f7fe fd30 	bl	80031ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800476e:	480c      	ldr	r0, [pc, #48]	; (80047a0 <prvInitialiseTaskLists+0x70>)
 8004770:	f7fe fd2d 	bl	80031ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004774:	480b      	ldr	r0, [pc, #44]	; (80047a4 <prvInitialiseTaskLists+0x74>)
 8004776:	f7fe fd2a 	bl	80031ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800477a:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <prvInitialiseTaskLists+0x78>)
 800477c:	4a05      	ldr	r2, [pc, #20]	; (8004794 <prvInitialiseTaskLists+0x64>)
 800477e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004780:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <prvInitialiseTaskLists+0x7c>)
 8004782:	4a05      	ldr	r2, [pc, #20]	; (8004798 <prvInitialiseTaskLists+0x68>)
 8004784:	601a      	str	r2, [r3, #0]
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	2000042c 	.word	0x2000042c
 8004794:	200004b8 	.word	0x200004b8
 8004798:	200004cc 	.word	0x200004cc
 800479c:	200004e8 	.word	0x200004e8
 80047a0:	200004fc 	.word	0x200004fc
 80047a4:	20000514 	.word	0x20000514
 80047a8:	200004e0 	.word	0x200004e0
 80047ac:	200004e4 	.word	0x200004e4

080047b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047b6:	e019      	b.n	80047ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047b8:	f000 fab4 	bl	8004d24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047bc:	4b10      	ldr	r3, [pc, #64]	; (8004800 <prvCheckTasksWaitingTermination+0x50>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fe fd8a 	bl	80032e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047ce:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <prvCheckTasksWaitingTermination+0x54>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	4a0b      	ldr	r2, [pc, #44]	; (8004804 <prvCheckTasksWaitingTermination+0x54>)
 80047d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <prvCheckTasksWaitingTermination+0x58>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3b01      	subs	r3, #1
 80047de:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <prvCheckTasksWaitingTermination+0x58>)
 80047e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80047e2:	f000 facf 	bl	8004d84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f810 	bl	800480c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047ec:	4b06      	ldr	r3, [pc, #24]	; (8004808 <prvCheckTasksWaitingTermination+0x58>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1e1      	bne.n	80047b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	200004fc 	.word	0x200004fc
 8004804:	20000528 	.word	0x20000528
 8004808:	20000510 	.word	0x20000510

0800480c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	334c      	adds	r3, #76	; 0x4c
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fe33 	bl	8005484 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d108      	bne.n	800483a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fc27 	bl	8005080 <vPortFree>
				vPortFree( pxTCB );
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fc24 	bl	8005080 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004838:	e018      	b.n	800486c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004840:	2b01      	cmp	r3, #1
 8004842:	d103      	bne.n	800484c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fc1b 	bl	8005080 <vPortFree>
	}
 800484a:	e00f      	b.n	800486c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004852:	2b02      	cmp	r3, #2
 8004854:	d00a      	beq.n	800486c <prvDeleteTCB+0x60>
	__asm volatile
 8004856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	60fb      	str	r3, [r7, #12]
}
 8004868:	bf00      	nop
 800486a:	e7fe      	b.n	800486a <prvDeleteTCB+0x5e>
	}
 800486c:	bf00      	nop
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800487a:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <prvResetNextTaskUnblockTime+0x38>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d104      	bne.n	800488e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004884:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <prvResetNextTaskUnblockTime+0x3c>)
 8004886:	f04f 32ff 	mov.w	r2, #4294967295
 800488a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800488c:	e008      	b.n	80048a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800488e:	4b07      	ldr	r3, [pc, #28]	; (80048ac <prvResetNextTaskUnblockTime+0x38>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	4a04      	ldr	r2, [pc, #16]	; (80048b0 <prvResetNextTaskUnblockTime+0x3c>)
 800489e:	6013      	str	r3, [r2, #0]
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	200004e0 	.word	0x200004e0
 80048b0:	20000548 	.word	0x20000548

080048b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048ba:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <xTaskGetSchedulerState+0x34>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80048c2:	2301      	movs	r3, #1
 80048c4:	607b      	str	r3, [r7, #4]
 80048c6:	e008      	b.n	80048da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048c8:	4b08      	ldr	r3, [pc, #32]	; (80048ec <xTaskGetSchedulerState+0x38>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80048d0:	2302      	movs	r3, #2
 80048d2:	607b      	str	r3, [r7, #4]
 80048d4:	e001      	b.n	80048da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048d6:	2300      	movs	r3, #0
 80048d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048da:	687b      	ldr	r3, [r7, #4]
	}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	20000534 	.word	0x20000534
 80048ec:	20000550 	.word	0x20000550

080048f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d06e      	beq.n	80049e4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004906:	4b3a      	ldr	r3, [pc, #232]	; (80049f0 <xTaskPriorityDisinherit+0x100>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	429a      	cmp	r2, r3
 800490e:	d00a      	beq.n	8004926 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	60fb      	str	r3, [r7, #12]
}
 8004922:	bf00      	nop
 8004924:	e7fe      	b.n	8004924 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10a      	bne.n	8004944 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	60bb      	str	r3, [r7, #8]
}
 8004940:	bf00      	nop
 8004942:	e7fe      	b.n	8004942 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004948:	1e5a      	subs	r2, r3, #1
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	429a      	cmp	r2, r3
 8004958:	d044      	beq.n	80049e4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800495e:	2b00      	cmp	r3, #0
 8004960:	d140      	bne.n	80049e4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	3304      	adds	r3, #4
 8004966:	4618      	mov	r0, r3
 8004968:	f7fe fcbb 	bl	80032e2 <uxListRemove>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d115      	bne.n	800499e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004976:	491f      	ldr	r1, [pc, #124]	; (80049f4 <xTaskPriorityDisinherit+0x104>)
 8004978:	4613      	mov	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10a      	bne.n	800499e <xTaskPriorityDisinherit+0xae>
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	2201      	movs	r2, #1
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43da      	mvns	r2, r3
 8004994:	4b18      	ldr	r3, [pc, #96]	; (80049f8 <xTaskPriorityDisinherit+0x108>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4013      	ands	r3, r2
 800499a:	4a17      	ldr	r2, [pc, #92]	; (80049f8 <xTaskPriorityDisinherit+0x108>)
 800499c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	f1c3 0207 	rsb	r2, r3, #7
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	2201      	movs	r2, #1
 80049b8:	409a      	lsls	r2, r3
 80049ba:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <xTaskPriorityDisinherit+0x108>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4313      	orrs	r3, r2
 80049c0:	4a0d      	ldr	r2, [pc, #52]	; (80049f8 <xTaskPriorityDisinherit+0x108>)
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4a08      	ldr	r2, [pc, #32]	; (80049f4 <xTaskPriorityDisinherit+0x104>)
 80049d2:	441a      	add	r2, r3
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	3304      	adds	r3, #4
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f7fe fc24 	bl	8003228 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049e0:	2301      	movs	r3, #1
 80049e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049e4:	697b      	ldr	r3, [r7, #20]
	}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000428 	.word	0x20000428
 80049f4:	2000042c 	.word	0x2000042c
 80049f8:	20000530 	.word	0x20000530

080049fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a06:	4b29      	ldr	r3, [pc, #164]	; (8004aac <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a0c:	4b28      	ldr	r3, [pc, #160]	; (8004ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3304      	adds	r3, #4
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe fc65 	bl	80032e2 <uxListRemove>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10b      	bne.n	8004a36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a1e:	4b24      	ldr	r3, [pc, #144]	; (8004ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	2201      	movs	r2, #1
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	43da      	mvns	r2, r3
 8004a2c:	4b21      	ldr	r3, [pc, #132]	; (8004ab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4013      	ands	r3, r2
 8004a32:	4a20      	ldr	r2, [pc, #128]	; (8004ab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3c:	d10a      	bne.n	8004a54 <prvAddCurrentTaskToDelayedList+0x58>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d007      	beq.n	8004a54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a44:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	481a      	ldr	r0, [pc, #104]	; (8004ab8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a4e:	f7fe fbeb 	bl	8003228 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a52:	e026      	b.n	8004aa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4413      	add	r3, r2
 8004a5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a5c:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d209      	bcs.n	8004a80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a6c:	4b13      	ldr	r3, [pc, #76]	; (8004abc <prvAddCurrentTaskToDelayedList+0xc0>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3304      	adds	r3, #4
 8004a76:	4619      	mov	r1, r3
 8004a78:	4610      	mov	r0, r2
 8004a7a:	f7fe fbf9 	bl	8003270 <vListInsert>
}
 8004a7e:	e010      	b.n	8004aa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a80:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	f7fe fbef 	bl	8003270 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a92:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d202      	bcs.n	8004aa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004a9c:	4a09      	ldr	r2, [pc, #36]	; (8004ac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	6013      	str	r3, [r2, #0]
}
 8004aa2:	bf00      	nop
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	2000052c 	.word	0x2000052c
 8004ab0:	20000428 	.word	0x20000428
 8004ab4:	20000530 	.word	0x20000530
 8004ab8:	20000514 	.word	0x20000514
 8004abc:	200004e4 	.word	0x200004e4
 8004ac0:	200004e0 	.word	0x200004e0
 8004ac4:	20000548 	.word	0x20000548

08004ac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3b04      	subs	r3, #4
 8004ad8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3b04      	subs	r3, #4
 8004ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f023 0201 	bic.w	r2, r3, #1
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3b04      	subs	r3, #4
 8004af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004af8:	4a0c      	ldr	r2, [pc, #48]	; (8004b2c <pxPortInitialiseStack+0x64>)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3b14      	subs	r3, #20
 8004b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3b04      	subs	r3, #4
 8004b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f06f 0202 	mvn.w	r2, #2
 8004b16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3b20      	subs	r3, #32
 8004b1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	08004b31 	.word	0x08004b31

08004b30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b36:	2300      	movs	r3, #0
 8004b38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b3a:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <prvTaskExitError+0x54>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b42:	d00a      	beq.n	8004b5a <prvTaskExitError+0x2a>
	__asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	60fb      	str	r3, [r7, #12]
}
 8004b56:	bf00      	nop
 8004b58:	e7fe      	b.n	8004b58 <prvTaskExitError+0x28>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	60bb      	str	r3, [r7, #8]
}
 8004b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b6e:	bf00      	nop
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0fc      	beq.n	8004b70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b76:	bf00      	nop
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	2000000c 	.word	0x2000000c
	...

08004b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b90:	4b07      	ldr	r3, [pc, #28]	; (8004bb0 <pxCurrentTCBConst2>)
 8004b92:	6819      	ldr	r1, [r3, #0]
 8004b94:	6808      	ldr	r0, [r1, #0]
 8004b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b9a:	f380 8809 	msr	PSP, r0
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f04f 0000 	mov.w	r0, #0
 8004ba6:	f380 8811 	msr	BASEPRI, r0
 8004baa:	4770      	bx	lr
 8004bac:	f3af 8000 	nop.w

08004bb0 <pxCurrentTCBConst2>:
 8004bb0:	20000428 	.word	0x20000428
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop

08004bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004bb8:	4808      	ldr	r0, [pc, #32]	; (8004bdc <prvPortStartFirstTask+0x24>)
 8004bba:	6800      	ldr	r0, [r0, #0]
 8004bbc:	6800      	ldr	r0, [r0, #0]
 8004bbe:	f380 8808 	msr	MSP, r0
 8004bc2:	f04f 0000 	mov.w	r0, #0
 8004bc6:	f380 8814 	msr	CONTROL, r0
 8004bca:	b662      	cpsie	i
 8004bcc:	b661      	cpsie	f
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	df00      	svc	0
 8004bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bda:	bf00      	nop
 8004bdc:	e000ed08 	.word	0xe000ed08

08004be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004be6:	4b46      	ldr	r3, [pc, #280]	; (8004d00 <xPortStartScheduler+0x120>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a46      	ldr	r2, [pc, #280]	; (8004d04 <xPortStartScheduler+0x124>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d10a      	bne.n	8004c06 <xPortStartScheduler+0x26>
	__asm volatile
 8004bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	613b      	str	r3, [r7, #16]
}
 8004c02:	bf00      	nop
 8004c04:	e7fe      	b.n	8004c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c06:	4b3e      	ldr	r3, [pc, #248]	; (8004d00 <xPortStartScheduler+0x120>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a3f      	ldr	r2, [pc, #252]	; (8004d08 <xPortStartScheduler+0x128>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d10a      	bne.n	8004c26 <xPortStartScheduler+0x46>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	60fb      	str	r3, [r7, #12]
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c26:	4b39      	ldr	r3, [pc, #228]	; (8004d0c <xPortStartScheduler+0x12c>)
 8004c28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	22ff      	movs	r2, #255	; 0xff
 8004c36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	4b31      	ldr	r3, [pc, #196]	; (8004d10 <xPortStartScheduler+0x130>)
 8004c4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c4e:	4b31      	ldr	r3, [pc, #196]	; (8004d14 <xPortStartScheduler+0x134>)
 8004c50:	2207      	movs	r2, #7
 8004c52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c54:	e009      	b.n	8004c6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004c56:	4b2f      	ldr	r3, [pc, #188]	; (8004d14 <xPortStartScheduler+0x134>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	4a2d      	ldr	r2, [pc, #180]	; (8004d14 <xPortStartScheduler+0x134>)
 8004c5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c6a:	78fb      	ldrb	r3, [r7, #3]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c72:	2b80      	cmp	r3, #128	; 0x80
 8004c74:	d0ef      	beq.n	8004c56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c76:	4b27      	ldr	r3, [pc, #156]	; (8004d14 <xPortStartScheduler+0x134>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f1c3 0307 	rsb	r3, r3, #7
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d00a      	beq.n	8004c98 <xPortStartScheduler+0xb8>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	60bb      	str	r3, [r7, #8]
}
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c98:	4b1e      	ldr	r3, [pc, #120]	; (8004d14 <xPortStartScheduler+0x134>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	021b      	lsls	r3, r3, #8
 8004c9e:	4a1d      	ldr	r2, [pc, #116]	; (8004d14 <xPortStartScheduler+0x134>)
 8004ca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ca2:	4b1c      	ldr	r3, [pc, #112]	; (8004d14 <xPortStartScheduler+0x134>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004caa:	4a1a      	ldr	r2, [pc, #104]	; (8004d14 <xPortStartScheduler+0x134>)
 8004cac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cb6:	4b18      	ldr	r3, [pc, #96]	; (8004d18 <xPortStartScheduler+0x138>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a17      	ldr	r2, [pc, #92]	; (8004d18 <xPortStartScheduler+0x138>)
 8004cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cc2:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <xPortStartScheduler+0x138>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <xPortStartScheduler+0x138>)
 8004cc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cce:	f000 f8dd 	bl	8004e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004cd2:	4b12      	ldr	r3, [pc, #72]	; (8004d1c <xPortStartScheduler+0x13c>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004cd8:	f000 f8fc 	bl	8004ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cdc:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <xPortStartScheduler+0x140>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <xPortStartScheduler+0x140>)
 8004ce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ce8:	f7ff ff66 	bl	8004bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004cec:	f7ff fb9c 	bl	8004428 <vTaskSwitchContext>
	prvTaskExitError();
 8004cf0:	f7ff ff1e 	bl	8004b30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	e000ed00 	.word	0xe000ed00
 8004d04:	410fc271 	.word	0x410fc271
 8004d08:	410fc270 	.word	0x410fc270
 8004d0c:	e000e400 	.word	0xe000e400
 8004d10:	20000554 	.word	0x20000554
 8004d14:	20000558 	.word	0x20000558
 8004d18:	e000ed20 	.word	0xe000ed20
 8004d1c:	2000000c 	.word	0x2000000c
 8004d20:	e000ef34 	.word	0xe000ef34

08004d24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
	__asm volatile
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	607b      	str	r3, [r7, #4]
}
 8004d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d3e:	4b0f      	ldr	r3, [pc, #60]	; (8004d7c <vPortEnterCritical+0x58>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3301      	adds	r3, #1
 8004d44:	4a0d      	ldr	r2, [pc, #52]	; (8004d7c <vPortEnterCritical+0x58>)
 8004d46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d48:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <vPortEnterCritical+0x58>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d10f      	bne.n	8004d70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <vPortEnterCritical+0x5c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	603b      	str	r3, [r7, #0]
}
 8004d6c:	bf00      	nop
 8004d6e:	e7fe      	b.n	8004d6e <vPortEnterCritical+0x4a>
	}
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	2000000c 	.word	0x2000000c
 8004d80:	e000ed04 	.word	0xe000ed04

08004d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d8a:	4b12      	ldr	r3, [pc, #72]	; (8004dd4 <vPortExitCritical+0x50>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10a      	bne.n	8004da8 <vPortExitCritical+0x24>
	__asm volatile
 8004d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	607b      	str	r3, [r7, #4]
}
 8004da4:	bf00      	nop
 8004da6:	e7fe      	b.n	8004da6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004da8:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <vPortExitCritical+0x50>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	4a09      	ldr	r2, [pc, #36]	; (8004dd4 <vPortExitCritical+0x50>)
 8004db0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004db2:	4b08      	ldr	r3, [pc, #32]	; (8004dd4 <vPortExitCritical+0x50>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d105      	bne.n	8004dc6 <vPortExitCritical+0x42>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004dc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	2000000c 	.word	0x2000000c
	...

08004de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004de0:	f3ef 8009 	mrs	r0, PSP
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	4b15      	ldr	r3, [pc, #84]	; (8004e40 <pxCurrentTCBConst>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	f01e 0f10 	tst.w	lr, #16
 8004df0:	bf08      	it	eq
 8004df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfa:	6010      	str	r0, [r2, #0]
 8004dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e04:	f380 8811 	msr	BASEPRI, r0
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f7ff fb0a 	bl	8004428 <vTaskSwitchContext>
 8004e14:	f04f 0000 	mov.w	r0, #0
 8004e18:	f380 8811 	msr	BASEPRI, r0
 8004e1c:	bc09      	pop	{r0, r3}
 8004e1e:	6819      	ldr	r1, [r3, #0]
 8004e20:	6808      	ldr	r0, [r1, #0]
 8004e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e26:	f01e 0f10 	tst.w	lr, #16
 8004e2a:	bf08      	it	eq
 8004e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e30:	f380 8809 	msr	PSP, r0
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	f3af 8000 	nop.w

08004e40 <pxCurrentTCBConst>:
 8004e40:	20000428 	.word	0x20000428
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop

08004e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	607b      	str	r3, [r7, #4]
}
 8004e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e62:	f7ff fa29 	bl	80042b8 <xTaskIncrementTick>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e6c:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <SysTick_Handler+0x40>)
 8004e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	2300      	movs	r3, #0
 8004e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	f383 8811 	msr	BASEPRI, r3
}
 8004e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	e000ed04 	.word	0xe000ed04

08004e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e90:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <vPortSetupTimerInterrupt+0x34>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e96:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <vPortSetupTimerInterrupt+0x38>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <vPortSetupTimerInterrupt+0x3c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a0a      	ldr	r2, [pc, #40]	; (8004ecc <vPortSetupTimerInterrupt+0x40>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	099b      	lsrs	r3, r3, #6
 8004ea8:	4a09      	ldr	r2, [pc, #36]	; (8004ed0 <vPortSetupTimerInterrupt+0x44>)
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004eae:	4b04      	ldr	r3, [pc, #16]	; (8004ec0 <vPortSetupTimerInterrupt+0x34>)
 8004eb0:	2207      	movs	r2, #7
 8004eb2:	601a      	str	r2, [r3, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	e000e010 	.word	0xe000e010
 8004ec4:	e000e018 	.word	0xe000e018
 8004ec8:	20000000 	.word	0x20000000
 8004ecc:	10624dd3 	.word	0x10624dd3
 8004ed0:	e000e014 	.word	0xe000e014

08004ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ee4 <vPortEnableVFP+0x10>
 8004ed8:	6801      	ldr	r1, [r0, #0]
 8004eda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004ede:	6001      	str	r1, [r0, #0]
 8004ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ee2:	bf00      	nop
 8004ee4:	e000ed88 	.word	0xe000ed88

08004ee8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	; 0x28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ef4:	f7ff f926 	bl	8004144 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ef8:	4b5b      	ldr	r3, [pc, #364]	; (8005068 <pvPortMalloc+0x180>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f00:	f000 f920 	bl	8005144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f04:	4b59      	ldr	r3, [pc, #356]	; (800506c <pvPortMalloc+0x184>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f040 8093 	bne.w	8005038 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d01d      	beq.n	8004f54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f18:	2208      	movs	r2, #8
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d014      	beq.n	8004f54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f023 0307 	bic.w	r3, r3, #7
 8004f30:	3308      	adds	r3, #8
 8004f32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <pvPortMalloc+0x6c>
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	617b      	str	r3, [r7, #20]
}
 8004f50:	bf00      	nop
 8004f52:	e7fe      	b.n	8004f52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d06e      	beq.n	8005038 <pvPortMalloc+0x150>
 8004f5a:	4b45      	ldr	r3, [pc, #276]	; (8005070 <pvPortMalloc+0x188>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d869      	bhi.n	8005038 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f64:	4b43      	ldr	r3, [pc, #268]	; (8005074 <pvPortMalloc+0x18c>)
 8004f66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f68:	4b42      	ldr	r3, [pc, #264]	; (8005074 <pvPortMalloc+0x18c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f6e:	e004      	b.n	8004f7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d903      	bls.n	8004f8c <pvPortMalloc+0xa4>
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f1      	bne.n	8004f70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f8c:	4b36      	ldr	r3, [pc, #216]	; (8005068 <pvPortMalloc+0x180>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d050      	beq.n	8005038 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2208      	movs	r2, #8
 8004f9c:	4413      	add	r3, r2
 8004f9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	1ad2      	subs	r2, r2, r3
 8004fb0:	2308      	movs	r3, #8
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d91f      	bls.n	8004ff8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <pvPortMalloc+0xf8>
	__asm volatile
 8004fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	613b      	str	r3, [r7, #16]
}
 8004fdc:	bf00      	nop
 8004fde:	e7fe      	b.n	8004fde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	1ad2      	subs	r2, r2, r3
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ff2:	69b8      	ldr	r0, [r7, #24]
 8004ff4:	f000 f908 	bl	8005208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ff8:	4b1d      	ldr	r3, [pc, #116]	; (8005070 <pvPortMalloc+0x188>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	4a1b      	ldr	r2, [pc, #108]	; (8005070 <pvPortMalloc+0x188>)
 8005004:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005006:	4b1a      	ldr	r3, [pc, #104]	; (8005070 <pvPortMalloc+0x188>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4b1b      	ldr	r3, [pc, #108]	; (8005078 <pvPortMalloc+0x190>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d203      	bcs.n	800501a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005012:	4b17      	ldr	r3, [pc, #92]	; (8005070 <pvPortMalloc+0x188>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a18      	ldr	r2, [pc, #96]	; (8005078 <pvPortMalloc+0x190>)
 8005018:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	4b13      	ldr	r3, [pc, #76]	; (800506c <pvPortMalloc+0x184>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	431a      	orrs	r2, r3
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800502e:	4b13      	ldr	r3, [pc, #76]	; (800507c <pvPortMalloc+0x194>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3301      	adds	r3, #1
 8005034:	4a11      	ldr	r2, [pc, #68]	; (800507c <pvPortMalloc+0x194>)
 8005036:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005038:	f7ff f892 	bl	8004160 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <pvPortMalloc+0x174>
	__asm volatile
 8005046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	60fb      	str	r3, [r7, #12]
}
 8005058:	bf00      	nop
 800505a:	e7fe      	b.n	800505a <pvPortMalloc+0x172>
	return pvReturn;
 800505c:	69fb      	ldr	r3, [r7, #28]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3728      	adds	r7, #40	; 0x28
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20004164 	.word	0x20004164
 800506c:	20004178 	.word	0x20004178
 8005070:	20004168 	.word	0x20004168
 8005074:	2000415c 	.word	0x2000415c
 8005078:	2000416c 	.word	0x2000416c
 800507c:	20004170 	.word	0x20004170

08005080 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d04d      	beq.n	800512e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005092:	2308      	movs	r3, #8
 8005094:	425b      	negs	r3, r3
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4413      	add	r3, r2
 800509a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	4b24      	ldr	r3, [pc, #144]	; (8005138 <vPortFree+0xb8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4013      	ands	r3, r2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10a      	bne.n	80050c4 <vPortFree+0x44>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	60fb      	str	r3, [r7, #12]
}
 80050c0:	bf00      	nop
 80050c2:	e7fe      	b.n	80050c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <vPortFree+0x62>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	60bb      	str	r3, [r7, #8]
}
 80050de:	bf00      	nop
 80050e0:	e7fe      	b.n	80050e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	4b14      	ldr	r3, [pc, #80]	; (8005138 <vPortFree+0xb8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01e      	beq.n	800512e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d11a      	bne.n	800512e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	4b0e      	ldr	r3, [pc, #56]	; (8005138 <vPortFree+0xb8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	43db      	mvns	r3, r3
 8005102:	401a      	ands	r2, r3
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005108:	f7ff f81c 	bl	8004144 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	4b0a      	ldr	r3, [pc, #40]	; (800513c <vPortFree+0xbc>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4413      	add	r3, r2
 8005116:	4a09      	ldr	r2, [pc, #36]	; (800513c <vPortFree+0xbc>)
 8005118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800511a:	6938      	ldr	r0, [r7, #16]
 800511c:	f000 f874 	bl	8005208 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005120:	4b07      	ldr	r3, [pc, #28]	; (8005140 <vPortFree+0xc0>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3301      	adds	r3, #1
 8005126:	4a06      	ldr	r2, [pc, #24]	; (8005140 <vPortFree+0xc0>)
 8005128:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800512a:	f7ff f819 	bl	8004160 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800512e:	bf00      	nop
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	20004178 	.word	0x20004178
 800513c:	20004168 	.word	0x20004168
 8005140:	20004174 	.word	0x20004174

08005144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800514a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800514e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005150:	4b27      	ldr	r3, [pc, #156]	; (80051f0 <prvHeapInit+0xac>)
 8005152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00c      	beq.n	8005178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3307      	adds	r3, #7
 8005162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0307 	bic.w	r3, r3, #7
 800516a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	4a1f      	ldr	r2, [pc, #124]	; (80051f0 <prvHeapInit+0xac>)
 8005174:	4413      	add	r3, r2
 8005176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800517c:	4a1d      	ldr	r2, [pc, #116]	; (80051f4 <prvHeapInit+0xb0>)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005182:	4b1c      	ldr	r3, [pc, #112]	; (80051f4 <prvHeapInit+0xb0>)
 8005184:	2200      	movs	r2, #0
 8005186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	4413      	add	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005190:	2208      	movs	r2, #8
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	1a9b      	subs	r3, r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0307 	bic.w	r3, r3, #7
 800519e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4a15      	ldr	r2, [pc, #84]	; (80051f8 <prvHeapInit+0xb4>)
 80051a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051a6:	4b14      	ldr	r3, [pc, #80]	; (80051f8 <prvHeapInit+0xb4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2200      	movs	r2, #0
 80051ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051ae:	4b12      	ldr	r3, [pc, #72]	; (80051f8 <prvHeapInit+0xb4>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	1ad2      	subs	r2, r2, r3
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051c4:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <prvHeapInit+0xb4>)
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <prvHeapInit+0xb8>)
 80051d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	4a09      	ldr	r2, [pc, #36]	; (8005200 <prvHeapInit+0xbc>)
 80051da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051dc:	4b09      	ldr	r3, [pc, #36]	; (8005204 <prvHeapInit+0xc0>)
 80051de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051e2:	601a      	str	r2, [r3, #0]
}
 80051e4:	bf00      	nop
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	2000055c 	.word	0x2000055c
 80051f4:	2000415c 	.word	0x2000415c
 80051f8:	20004164 	.word	0x20004164
 80051fc:	2000416c 	.word	0x2000416c
 8005200:	20004168 	.word	0x20004168
 8005204:	20004178 	.word	0x20004178

08005208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005210:	4b28      	ldr	r3, [pc, #160]	; (80052b4 <prvInsertBlockIntoFreeList+0xac>)
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	e002      	b.n	800521c <prvInsertBlockIntoFreeList+0x14>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	429a      	cmp	r2, r3
 8005224:	d8f7      	bhi.n	8005216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	4413      	add	r3, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	429a      	cmp	r2, r3
 8005236:	d108      	bne.n	800524a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	441a      	add	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	441a      	add	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d118      	bne.n	8005290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4b15      	ldr	r3, [pc, #84]	; (80052b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d00d      	beq.n	8005286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	441a      	add	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	e008      	b.n	8005298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005286:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	e003      	b.n	8005298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	429a      	cmp	r2, r3
 800529e:	d002      	beq.n	80052a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052a6:	bf00      	nop
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	2000415c 	.word	0x2000415c
 80052b8:	20004164 	.word	0x20004164

080052bc <__errno>:
 80052bc:	4b01      	ldr	r3, [pc, #4]	; (80052c4 <__errno+0x8>)
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	20000010 	.word	0x20000010

080052c8 <__libc_init_array>:
 80052c8:	b570      	push	{r4, r5, r6, lr}
 80052ca:	4d0d      	ldr	r5, [pc, #52]	; (8005300 <__libc_init_array+0x38>)
 80052cc:	4c0d      	ldr	r4, [pc, #52]	; (8005304 <__libc_init_array+0x3c>)
 80052ce:	1b64      	subs	r4, r4, r5
 80052d0:	10a4      	asrs	r4, r4, #2
 80052d2:	2600      	movs	r6, #0
 80052d4:	42a6      	cmp	r6, r4
 80052d6:	d109      	bne.n	80052ec <__libc_init_array+0x24>
 80052d8:	4d0b      	ldr	r5, [pc, #44]	; (8005308 <__libc_init_array+0x40>)
 80052da:	4c0c      	ldr	r4, [pc, #48]	; (800530c <__libc_init_array+0x44>)
 80052dc:	f000 fcf8 	bl	8005cd0 <_init>
 80052e0:	1b64      	subs	r4, r4, r5
 80052e2:	10a4      	asrs	r4, r4, #2
 80052e4:	2600      	movs	r6, #0
 80052e6:	42a6      	cmp	r6, r4
 80052e8:	d105      	bne.n	80052f6 <__libc_init_array+0x2e>
 80052ea:	bd70      	pop	{r4, r5, r6, pc}
 80052ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80052f0:	4798      	blx	r3
 80052f2:	3601      	adds	r6, #1
 80052f4:	e7ee      	b.n	80052d4 <__libc_init_array+0xc>
 80052f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052fa:	4798      	blx	r3
 80052fc:	3601      	adds	r6, #1
 80052fe:	e7f2      	b.n	80052e6 <__libc_init_array+0x1e>
 8005300:	08005df4 	.word	0x08005df4
 8005304:	08005df4 	.word	0x08005df4
 8005308:	08005df4 	.word	0x08005df4
 800530c:	08005df8 	.word	0x08005df8

08005310 <__retarget_lock_acquire_recursive>:
 8005310:	4770      	bx	lr

08005312 <__retarget_lock_release_recursive>:
 8005312:	4770      	bx	lr

08005314 <memcpy>:
 8005314:	440a      	add	r2, r1
 8005316:	4291      	cmp	r1, r2
 8005318:	f100 33ff 	add.w	r3, r0, #4294967295
 800531c:	d100      	bne.n	8005320 <memcpy+0xc>
 800531e:	4770      	bx	lr
 8005320:	b510      	push	{r4, lr}
 8005322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005326:	f803 4f01 	strb.w	r4, [r3, #1]!
 800532a:	4291      	cmp	r1, r2
 800532c:	d1f9      	bne.n	8005322 <memcpy+0xe>
 800532e:	bd10      	pop	{r4, pc}

08005330 <memset>:
 8005330:	4402      	add	r2, r0
 8005332:	4603      	mov	r3, r0
 8005334:	4293      	cmp	r3, r2
 8005336:	d100      	bne.n	800533a <memset+0xa>
 8005338:	4770      	bx	lr
 800533a:	f803 1b01 	strb.w	r1, [r3], #1
 800533e:	e7f9      	b.n	8005334 <memset+0x4>

08005340 <sbrk_aligned>:
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	4e0e      	ldr	r6, [pc, #56]	; (800537c <sbrk_aligned+0x3c>)
 8005344:	460c      	mov	r4, r1
 8005346:	6831      	ldr	r1, [r6, #0]
 8005348:	4605      	mov	r5, r0
 800534a:	b911      	cbnz	r1, 8005352 <sbrk_aligned+0x12>
 800534c:	f000 f8f6 	bl	800553c <_sbrk_r>
 8005350:	6030      	str	r0, [r6, #0]
 8005352:	4621      	mov	r1, r4
 8005354:	4628      	mov	r0, r5
 8005356:	f000 f8f1 	bl	800553c <_sbrk_r>
 800535a:	1c43      	adds	r3, r0, #1
 800535c:	d00a      	beq.n	8005374 <sbrk_aligned+0x34>
 800535e:	1cc4      	adds	r4, r0, #3
 8005360:	f024 0403 	bic.w	r4, r4, #3
 8005364:	42a0      	cmp	r0, r4
 8005366:	d007      	beq.n	8005378 <sbrk_aligned+0x38>
 8005368:	1a21      	subs	r1, r4, r0
 800536a:	4628      	mov	r0, r5
 800536c:	f000 f8e6 	bl	800553c <_sbrk_r>
 8005370:	3001      	adds	r0, #1
 8005372:	d101      	bne.n	8005378 <sbrk_aligned+0x38>
 8005374:	f04f 34ff 	mov.w	r4, #4294967295
 8005378:	4620      	mov	r0, r4
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	20004184 	.word	0x20004184

08005380 <_malloc_r>:
 8005380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005384:	1ccd      	adds	r5, r1, #3
 8005386:	f025 0503 	bic.w	r5, r5, #3
 800538a:	3508      	adds	r5, #8
 800538c:	2d0c      	cmp	r5, #12
 800538e:	bf38      	it	cc
 8005390:	250c      	movcc	r5, #12
 8005392:	2d00      	cmp	r5, #0
 8005394:	4607      	mov	r7, r0
 8005396:	db01      	blt.n	800539c <_malloc_r+0x1c>
 8005398:	42a9      	cmp	r1, r5
 800539a:	d905      	bls.n	80053a8 <_malloc_r+0x28>
 800539c:	230c      	movs	r3, #12
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	2600      	movs	r6, #0
 80053a2:	4630      	mov	r0, r6
 80053a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053a8:	4e2e      	ldr	r6, [pc, #184]	; (8005464 <_malloc_r+0xe4>)
 80053aa:	f000 f8f7 	bl	800559c <__malloc_lock>
 80053ae:	6833      	ldr	r3, [r6, #0]
 80053b0:	461c      	mov	r4, r3
 80053b2:	bb34      	cbnz	r4, 8005402 <_malloc_r+0x82>
 80053b4:	4629      	mov	r1, r5
 80053b6:	4638      	mov	r0, r7
 80053b8:	f7ff ffc2 	bl	8005340 <sbrk_aligned>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	4604      	mov	r4, r0
 80053c0:	d14d      	bne.n	800545e <_malloc_r+0xde>
 80053c2:	6834      	ldr	r4, [r6, #0]
 80053c4:	4626      	mov	r6, r4
 80053c6:	2e00      	cmp	r6, #0
 80053c8:	d140      	bne.n	800544c <_malloc_r+0xcc>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	4631      	mov	r1, r6
 80053ce:	4638      	mov	r0, r7
 80053d0:	eb04 0803 	add.w	r8, r4, r3
 80053d4:	f000 f8b2 	bl	800553c <_sbrk_r>
 80053d8:	4580      	cmp	r8, r0
 80053da:	d13a      	bne.n	8005452 <_malloc_r+0xd2>
 80053dc:	6821      	ldr	r1, [r4, #0]
 80053de:	3503      	adds	r5, #3
 80053e0:	1a6d      	subs	r5, r5, r1
 80053e2:	f025 0503 	bic.w	r5, r5, #3
 80053e6:	3508      	adds	r5, #8
 80053e8:	2d0c      	cmp	r5, #12
 80053ea:	bf38      	it	cc
 80053ec:	250c      	movcc	r5, #12
 80053ee:	4629      	mov	r1, r5
 80053f0:	4638      	mov	r0, r7
 80053f2:	f7ff ffa5 	bl	8005340 <sbrk_aligned>
 80053f6:	3001      	adds	r0, #1
 80053f8:	d02b      	beq.n	8005452 <_malloc_r+0xd2>
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	442b      	add	r3, r5
 80053fe:	6023      	str	r3, [r4, #0]
 8005400:	e00e      	b.n	8005420 <_malloc_r+0xa0>
 8005402:	6822      	ldr	r2, [r4, #0]
 8005404:	1b52      	subs	r2, r2, r5
 8005406:	d41e      	bmi.n	8005446 <_malloc_r+0xc6>
 8005408:	2a0b      	cmp	r2, #11
 800540a:	d916      	bls.n	800543a <_malloc_r+0xba>
 800540c:	1961      	adds	r1, r4, r5
 800540e:	42a3      	cmp	r3, r4
 8005410:	6025      	str	r5, [r4, #0]
 8005412:	bf18      	it	ne
 8005414:	6059      	strne	r1, [r3, #4]
 8005416:	6863      	ldr	r3, [r4, #4]
 8005418:	bf08      	it	eq
 800541a:	6031      	streq	r1, [r6, #0]
 800541c:	5162      	str	r2, [r4, r5]
 800541e:	604b      	str	r3, [r1, #4]
 8005420:	4638      	mov	r0, r7
 8005422:	f104 060b 	add.w	r6, r4, #11
 8005426:	f000 f8bf 	bl	80055a8 <__malloc_unlock>
 800542a:	f026 0607 	bic.w	r6, r6, #7
 800542e:	1d23      	adds	r3, r4, #4
 8005430:	1af2      	subs	r2, r6, r3
 8005432:	d0b6      	beq.n	80053a2 <_malloc_r+0x22>
 8005434:	1b9b      	subs	r3, r3, r6
 8005436:	50a3      	str	r3, [r4, r2]
 8005438:	e7b3      	b.n	80053a2 <_malloc_r+0x22>
 800543a:	6862      	ldr	r2, [r4, #4]
 800543c:	42a3      	cmp	r3, r4
 800543e:	bf0c      	ite	eq
 8005440:	6032      	streq	r2, [r6, #0]
 8005442:	605a      	strne	r2, [r3, #4]
 8005444:	e7ec      	b.n	8005420 <_malloc_r+0xa0>
 8005446:	4623      	mov	r3, r4
 8005448:	6864      	ldr	r4, [r4, #4]
 800544a:	e7b2      	b.n	80053b2 <_malloc_r+0x32>
 800544c:	4634      	mov	r4, r6
 800544e:	6876      	ldr	r6, [r6, #4]
 8005450:	e7b9      	b.n	80053c6 <_malloc_r+0x46>
 8005452:	230c      	movs	r3, #12
 8005454:	603b      	str	r3, [r7, #0]
 8005456:	4638      	mov	r0, r7
 8005458:	f000 f8a6 	bl	80055a8 <__malloc_unlock>
 800545c:	e7a1      	b.n	80053a2 <_malloc_r+0x22>
 800545e:	6025      	str	r5, [r4, #0]
 8005460:	e7de      	b.n	8005420 <_malloc_r+0xa0>
 8005462:	bf00      	nop
 8005464:	20004180 	.word	0x20004180

08005468 <cleanup_glue>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	460c      	mov	r4, r1
 800546c:	6809      	ldr	r1, [r1, #0]
 800546e:	4605      	mov	r5, r0
 8005470:	b109      	cbz	r1, 8005476 <cleanup_glue+0xe>
 8005472:	f7ff fff9 	bl	8005468 <cleanup_glue>
 8005476:	4621      	mov	r1, r4
 8005478:	4628      	mov	r0, r5
 800547a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800547e:	f000 b899 	b.w	80055b4 <_free_r>
	...

08005484 <_reclaim_reent>:
 8005484:	4b2c      	ldr	r3, [pc, #176]	; (8005538 <_reclaim_reent+0xb4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4283      	cmp	r3, r0
 800548a:	b570      	push	{r4, r5, r6, lr}
 800548c:	4604      	mov	r4, r0
 800548e:	d051      	beq.n	8005534 <_reclaim_reent+0xb0>
 8005490:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005492:	b143      	cbz	r3, 80054a6 <_reclaim_reent+0x22>
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d14a      	bne.n	8005530 <_reclaim_reent+0xac>
 800549a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800549c:	6819      	ldr	r1, [r3, #0]
 800549e:	b111      	cbz	r1, 80054a6 <_reclaim_reent+0x22>
 80054a0:	4620      	mov	r0, r4
 80054a2:	f000 f887 	bl	80055b4 <_free_r>
 80054a6:	6961      	ldr	r1, [r4, #20]
 80054a8:	b111      	cbz	r1, 80054b0 <_reclaim_reent+0x2c>
 80054aa:	4620      	mov	r0, r4
 80054ac:	f000 f882 	bl	80055b4 <_free_r>
 80054b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80054b2:	b111      	cbz	r1, 80054ba <_reclaim_reent+0x36>
 80054b4:	4620      	mov	r0, r4
 80054b6:	f000 f87d 	bl	80055b4 <_free_r>
 80054ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054bc:	b111      	cbz	r1, 80054c4 <_reclaim_reent+0x40>
 80054be:	4620      	mov	r0, r4
 80054c0:	f000 f878 	bl	80055b4 <_free_r>
 80054c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80054c6:	b111      	cbz	r1, 80054ce <_reclaim_reent+0x4a>
 80054c8:	4620      	mov	r0, r4
 80054ca:	f000 f873 	bl	80055b4 <_free_r>
 80054ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80054d0:	b111      	cbz	r1, 80054d8 <_reclaim_reent+0x54>
 80054d2:	4620      	mov	r0, r4
 80054d4:	f000 f86e 	bl	80055b4 <_free_r>
 80054d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80054da:	b111      	cbz	r1, 80054e2 <_reclaim_reent+0x5e>
 80054dc:	4620      	mov	r0, r4
 80054de:	f000 f869 	bl	80055b4 <_free_r>
 80054e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80054e4:	b111      	cbz	r1, 80054ec <_reclaim_reent+0x68>
 80054e6:	4620      	mov	r0, r4
 80054e8:	f000 f864 	bl	80055b4 <_free_r>
 80054ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054ee:	b111      	cbz	r1, 80054f6 <_reclaim_reent+0x72>
 80054f0:	4620      	mov	r0, r4
 80054f2:	f000 f85f 	bl	80055b4 <_free_r>
 80054f6:	69a3      	ldr	r3, [r4, #24]
 80054f8:	b1e3      	cbz	r3, 8005534 <_reclaim_reent+0xb0>
 80054fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80054fc:	4620      	mov	r0, r4
 80054fe:	4798      	blx	r3
 8005500:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005502:	b1b9      	cbz	r1, 8005534 <_reclaim_reent+0xb0>
 8005504:	4620      	mov	r0, r4
 8005506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800550a:	f7ff bfad 	b.w	8005468 <cleanup_glue>
 800550e:	5949      	ldr	r1, [r1, r5]
 8005510:	b941      	cbnz	r1, 8005524 <_reclaim_reent+0xa0>
 8005512:	3504      	adds	r5, #4
 8005514:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005516:	2d80      	cmp	r5, #128	; 0x80
 8005518:	68d9      	ldr	r1, [r3, #12]
 800551a:	d1f8      	bne.n	800550e <_reclaim_reent+0x8a>
 800551c:	4620      	mov	r0, r4
 800551e:	f000 f849 	bl	80055b4 <_free_r>
 8005522:	e7ba      	b.n	800549a <_reclaim_reent+0x16>
 8005524:	680e      	ldr	r6, [r1, #0]
 8005526:	4620      	mov	r0, r4
 8005528:	f000 f844 	bl	80055b4 <_free_r>
 800552c:	4631      	mov	r1, r6
 800552e:	e7ef      	b.n	8005510 <_reclaim_reent+0x8c>
 8005530:	2500      	movs	r5, #0
 8005532:	e7ef      	b.n	8005514 <_reclaim_reent+0x90>
 8005534:	bd70      	pop	{r4, r5, r6, pc}
 8005536:	bf00      	nop
 8005538:	20000010 	.word	0x20000010

0800553c <_sbrk_r>:
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	4d06      	ldr	r5, [pc, #24]	; (8005558 <_sbrk_r+0x1c>)
 8005540:	2300      	movs	r3, #0
 8005542:	4604      	mov	r4, r0
 8005544:	4608      	mov	r0, r1
 8005546:	602b      	str	r3, [r5, #0]
 8005548:	f7fb fb56 	bl	8000bf8 <_sbrk>
 800554c:	1c43      	adds	r3, r0, #1
 800554e:	d102      	bne.n	8005556 <_sbrk_r+0x1a>
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	b103      	cbz	r3, 8005556 <_sbrk_r+0x1a>
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	bd38      	pop	{r3, r4, r5, pc}
 8005558:	20004188 	.word	0x20004188

0800555c <siprintf>:
 800555c:	b40e      	push	{r1, r2, r3}
 800555e:	b500      	push	{lr}
 8005560:	b09c      	sub	sp, #112	; 0x70
 8005562:	ab1d      	add	r3, sp, #116	; 0x74
 8005564:	9002      	str	r0, [sp, #8]
 8005566:	9006      	str	r0, [sp, #24]
 8005568:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800556c:	4809      	ldr	r0, [pc, #36]	; (8005594 <siprintf+0x38>)
 800556e:	9107      	str	r1, [sp, #28]
 8005570:	9104      	str	r1, [sp, #16]
 8005572:	4909      	ldr	r1, [pc, #36]	; (8005598 <siprintf+0x3c>)
 8005574:	f853 2b04 	ldr.w	r2, [r3], #4
 8005578:	9105      	str	r1, [sp, #20]
 800557a:	6800      	ldr	r0, [r0, #0]
 800557c:	9301      	str	r3, [sp, #4]
 800557e:	a902      	add	r1, sp, #8
 8005580:	f000 f8c0 	bl	8005704 <_svfiprintf_r>
 8005584:	9b02      	ldr	r3, [sp, #8]
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	b01c      	add	sp, #112	; 0x70
 800558c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005590:	b003      	add	sp, #12
 8005592:	4770      	bx	lr
 8005594:	20000010 	.word	0x20000010
 8005598:	ffff0208 	.word	0xffff0208

0800559c <__malloc_lock>:
 800559c:	4801      	ldr	r0, [pc, #4]	; (80055a4 <__malloc_lock+0x8>)
 800559e:	f7ff beb7 	b.w	8005310 <__retarget_lock_acquire_recursive>
 80055a2:	bf00      	nop
 80055a4:	2000417c 	.word	0x2000417c

080055a8 <__malloc_unlock>:
 80055a8:	4801      	ldr	r0, [pc, #4]	; (80055b0 <__malloc_unlock+0x8>)
 80055aa:	f7ff beb2 	b.w	8005312 <__retarget_lock_release_recursive>
 80055ae:	bf00      	nop
 80055b0:	2000417c 	.word	0x2000417c

080055b4 <_free_r>:
 80055b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055b6:	2900      	cmp	r1, #0
 80055b8:	d044      	beq.n	8005644 <_free_r+0x90>
 80055ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055be:	9001      	str	r0, [sp, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f1a1 0404 	sub.w	r4, r1, #4
 80055c6:	bfb8      	it	lt
 80055c8:	18e4      	addlt	r4, r4, r3
 80055ca:	f7ff ffe7 	bl	800559c <__malloc_lock>
 80055ce:	4a1e      	ldr	r2, [pc, #120]	; (8005648 <_free_r+0x94>)
 80055d0:	9801      	ldr	r0, [sp, #4]
 80055d2:	6813      	ldr	r3, [r2, #0]
 80055d4:	b933      	cbnz	r3, 80055e4 <_free_r+0x30>
 80055d6:	6063      	str	r3, [r4, #4]
 80055d8:	6014      	str	r4, [r2, #0]
 80055da:	b003      	add	sp, #12
 80055dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055e0:	f7ff bfe2 	b.w	80055a8 <__malloc_unlock>
 80055e4:	42a3      	cmp	r3, r4
 80055e6:	d908      	bls.n	80055fa <_free_r+0x46>
 80055e8:	6825      	ldr	r5, [r4, #0]
 80055ea:	1961      	adds	r1, r4, r5
 80055ec:	428b      	cmp	r3, r1
 80055ee:	bf01      	itttt	eq
 80055f0:	6819      	ldreq	r1, [r3, #0]
 80055f2:	685b      	ldreq	r3, [r3, #4]
 80055f4:	1949      	addeq	r1, r1, r5
 80055f6:	6021      	streq	r1, [r4, #0]
 80055f8:	e7ed      	b.n	80055d6 <_free_r+0x22>
 80055fa:	461a      	mov	r2, r3
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	b10b      	cbz	r3, 8005604 <_free_r+0x50>
 8005600:	42a3      	cmp	r3, r4
 8005602:	d9fa      	bls.n	80055fa <_free_r+0x46>
 8005604:	6811      	ldr	r1, [r2, #0]
 8005606:	1855      	adds	r5, r2, r1
 8005608:	42a5      	cmp	r5, r4
 800560a:	d10b      	bne.n	8005624 <_free_r+0x70>
 800560c:	6824      	ldr	r4, [r4, #0]
 800560e:	4421      	add	r1, r4
 8005610:	1854      	adds	r4, r2, r1
 8005612:	42a3      	cmp	r3, r4
 8005614:	6011      	str	r1, [r2, #0]
 8005616:	d1e0      	bne.n	80055da <_free_r+0x26>
 8005618:	681c      	ldr	r4, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	6053      	str	r3, [r2, #4]
 800561e:	4421      	add	r1, r4
 8005620:	6011      	str	r1, [r2, #0]
 8005622:	e7da      	b.n	80055da <_free_r+0x26>
 8005624:	d902      	bls.n	800562c <_free_r+0x78>
 8005626:	230c      	movs	r3, #12
 8005628:	6003      	str	r3, [r0, #0]
 800562a:	e7d6      	b.n	80055da <_free_r+0x26>
 800562c:	6825      	ldr	r5, [r4, #0]
 800562e:	1961      	adds	r1, r4, r5
 8005630:	428b      	cmp	r3, r1
 8005632:	bf04      	itt	eq
 8005634:	6819      	ldreq	r1, [r3, #0]
 8005636:	685b      	ldreq	r3, [r3, #4]
 8005638:	6063      	str	r3, [r4, #4]
 800563a:	bf04      	itt	eq
 800563c:	1949      	addeq	r1, r1, r5
 800563e:	6021      	streq	r1, [r4, #0]
 8005640:	6054      	str	r4, [r2, #4]
 8005642:	e7ca      	b.n	80055da <_free_r+0x26>
 8005644:	b003      	add	sp, #12
 8005646:	bd30      	pop	{r4, r5, pc}
 8005648:	20004180 	.word	0x20004180

0800564c <__ssputs_r>:
 800564c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005650:	688e      	ldr	r6, [r1, #8]
 8005652:	429e      	cmp	r6, r3
 8005654:	4682      	mov	sl, r0
 8005656:	460c      	mov	r4, r1
 8005658:	4690      	mov	r8, r2
 800565a:	461f      	mov	r7, r3
 800565c:	d838      	bhi.n	80056d0 <__ssputs_r+0x84>
 800565e:	898a      	ldrh	r2, [r1, #12]
 8005660:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005664:	d032      	beq.n	80056cc <__ssputs_r+0x80>
 8005666:	6825      	ldr	r5, [r4, #0]
 8005668:	6909      	ldr	r1, [r1, #16]
 800566a:	eba5 0901 	sub.w	r9, r5, r1
 800566e:	6965      	ldr	r5, [r4, #20]
 8005670:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005674:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005678:	3301      	adds	r3, #1
 800567a:	444b      	add	r3, r9
 800567c:	106d      	asrs	r5, r5, #1
 800567e:	429d      	cmp	r5, r3
 8005680:	bf38      	it	cc
 8005682:	461d      	movcc	r5, r3
 8005684:	0553      	lsls	r3, r2, #21
 8005686:	d531      	bpl.n	80056ec <__ssputs_r+0xa0>
 8005688:	4629      	mov	r1, r5
 800568a:	f7ff fe79 	bl	8005380 <_malloc_r>
 800568e:	4606      	mov	r6, r0
 8005690:	b950      	cbnz	r0, 80056a8 <__ssputs_r+0x5c>
 8005692:	230c      	movs	r3, #12
 8005694:	f8ca 3000 	str.w	r3, [sl]
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800569e:	81a3      	strh	r3, [r4, #12]
 80056a0:	f04f 30ff 	mov.w	r0, #4294967295
 80056a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a8:	6921      	ldr	r1, [r4, #16]
 80056aa:	464a      	mov	r2, r9
 80056ac:	f7ff fe32 	bl	8005314 <memcpy>
 80056b0:	89a3      	ldrh	r3, [r4, #12]
 80056b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80056b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ba:	81a3      	strh	r3, [r4, #12]
 80056bc:	6126      	str	r6, [r4, #16]
 80056be:	6165      	str	r5, [r4, #20]
 80056c0:	444e      	add	r6, r9
 80056c2:	eba5 0509 	sub.w	r5, r5, r9
 80056c6:	6026      	str	r6, [r4, #0]
 80056c8:	60a5      	str	r5, [r4, #8]
 80056ca:	463e      	mov	r6, r7
 80056cc:	42be      	cmp	r6, r7
 80056ce:	d900      	bls.n	80056d2 <__ssputs_r+0x86>
 80056d0:	463e      	mov	r6, r7
 80056d2:	6820      	ldr	r0, [r4, #0]
 80056d4:	4632      	mov	r2, r6
 80056d6:	4641      	mov	r1, r8
 80056d8:	f000 faa8 	bl	8005c2c <memmove>
 80056dc:	68a3      	ldr	r3, [r4, #8]
 80056de:	1b9b      	subs	r3, r3, r6
 80056e0:	60a3      	str	r3, [r4, #8]
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	4433      	add	r3, r6
 80056e6:	6023      	str	r3, [r4, #0]
 80056e8:	2000      	movs	r0, #0
 80056ea:	e7db      	b.n	80056a4 <__ssputs_r+0x58>
 80056ec:	462a      	mov	r2, r5
 80056ee:	f000 fab7 	bl	8005c60 <_realloc_r>
 80056f2:	4606      	mov	r6, r0
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d1e1      	bne.n	80056bc <__ssputs_r+0x70>
 80056f8:	6921      	ldr	r1, [r4, #16]
 80056fa:	4650      	mov	r0, sl
 80056fc:	f7ff ff5a 	bl	80055b4 <_free_r>
 8005700:	e7c7      	b.n	8005692 <__ssputs_r+0x46>
	...

08005704 <_svfiprintf_r>:
 8005704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005708:	4698      	mov	r8, r3
 800570a:	898b      	ldrh	r3, [r1, #12]
 800570c:	061b      	lsls	r3, r3, #24
 800570e:	b09d      	sub	sp, #116	; 0x74
 8005710:	4607      	mov	r7, r0
 8005712:	460d      	mov	r5, r1
 8005714:	4614      	mov	r4, r2
 8005716:	d50e      	bpl.n	8005736 <_svfiprintf_r+0x32>
 8005718:	690b      	ldr	r3, [r1, #16]
 800571a:	b963      	cbnz	r3, 8005736 <_svfiprintf_r+0x32>
 800571c:	2140      	movs	r1, #64	; 0x40
 800571e:	f7ff fe2f 	bl	8005380 <_malloc_r>
 8005722:	6028      	str	r0, [r5, #0]
 8005724:	6128      	str	r0, [r5, #16]
 8005726:	b920      	cbnz	r0, 8005732 <_svfiprintf_r+0x2e>
 8005728:	230c      	movs	r3, #12
 800572a:	603b      	str	r3, [r7, #0]
 800572c:	f04f 30ff 	mov.w	r0, #4294967295
 8005730:	e0d1      	b.n	80058d6 <_svfiprintf_r+0x1d2>
 8005732:	2340      	movs	r3, #64	; 0x40
 8005734:	616b      	str	r3, [r5, #20]
 8005736:	2300      	movs	r3, #0
 8005738:	9309      	str	r3, [sp, #36]	; 0x24
 800573a:	2320      	movs	r3, #32
 800573c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005740:	f8cd 800c 	str.w	r8, [sp, #12]
 8005744:	2330      	movs	r3, #48	; 0x30
 8005746:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80058f0 <_svfiprintf_r+0x1ec>
 800574a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800574e:	f04f 0901 	mov.w	r9, #1
 8005752:	4623      	mov	r3, r4
 8005754:	469a      	mov	sl, r3
 8005756:	f813 2b01 	ldrb.w	r2, [r3], #1
 800575a:	b10a      	cbz	r2, 8005760 <_svfiprintf_r+0x5c>
 800575c:	2a25      	cmp	r2, #37	; 0x25
 800575e:	d1f9      	bne.n	8005754 <_svfiprintf_r+0x50>
 8005760:	ebba 0b04 	subs.w	fp, sl, r4
 8005764:	d00b      	beq.n	800577e <_svfiprintf_r+0x7a>
 8005766:	465b      	mov	r3, fp
 8005768:	4622      	mov	r2, r4
 800576a:	4629      	mov	r1, r5
 800576c:	4638      	mov	r0, r7
 800576e:	f7ff ff6d 	bl	800564c <__ssputs_r>
 8005772:	3001      	adds	r0, #1
 8005774:	f000 80aa 	beq.w	80058cc <_svfiprintf_r+0x1c8>
 8005778:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800577a:	445a      	add	r2, fp
 800577c:	9209      	str	r2, [sp, #36]	; 0x24
 800577e:	f89a 3000 	ldrb.w	r3, [sl]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 80a2 	beq.w	80058cc <_svfiprintf_r+0x1c8>
 8005788:	2300      	movs	r3, #0
 800578a:	f04f 32ff 	mov.w	r2, #4294967295
 800578e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005792:	f10a 0a01 	add.w	sl, sl, #1
 8005796:	9304      	str	r3, [sp, #16]
 8005798:	9307      	str	r3, [sp, #28]
 800579a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800579e:	931a      	str	r3, [sp, #104]	; 0x68
 80057a0:	4654      	mov	r4, sl
 80057a2:	2205      	movs	r2, #5
 80057a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057a8:	4851      	ldr	r0, [pc, #324]	; (80058f0 <_svfiprintf_r+0x1ec>)
 80057aa:	f7fa fd11 	bl	80001d0 <memchr>
 80057ae:	9a04      	ldr	r2, [sp, #16]
 80057b0:	b9d8      	cbnz	r0, 80057ea <_svfiprintf_r+0xe6>
 80057b2:	06d0      	lsls	r0, r2, #27
 80057b4:	bf44      	itt	mi
 80057b6:	2320      	movmi	r3, #32
 80057b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057bc:	0711      	lsls	r1, r2, #28
 80057be:	bf44      	itt	mi
 80057c0:	232b      	movmi	r3, #43	; 0x2b
 80057c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057c6:	f89a 3000 	ldrb.w	r3, [sl]
 80057ca:	2b2a      	cmp	r3, #42	; 0x2a
 80057cc:	d015      	beq.n	80057fa <_svfiprintf_r+0xf6>
 80057ce:	9a07      	ldr	r2, [sp, #28]
 80057d0:	4654      	mov	r4, sl
 80057d2:	2000      	movs	r0, #0
 80057d4:	f04f 0c0a 	mov.w	ip, #10
 80057d8:	4621      	mov	r1, r4
 80057da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057de:	3b30      	subs	r3, #48	; 0x30
 80057e0:	2b09      	cmp	r3, #9
 80057e2:	d94e      	bls.n	8005882 <_svfiprintf_r+0x17e>
 80057e4:	b1b0      	cbz	r0, 8005814 <_svfiprintf_r+0x110>
 80057e6:	9207      	str	r2, [sp, #28]
 80057e8:	e014      	b.n	8005814 <_svfiprintf_r+0x110>
 80057ea:	eba0 0308 	sub.w	r3, r0, r8
 80057ee:	fa09 f303 	lsl.w	r3, r9, r3
 80057f2:	4313      	orrs	r3, r2
 80057f4:	9304      	str	r3, [sp, #16]
 80057f6:	46a2      	mov	sl, r4
 80057f8:	e7d2      	b.n	80057a0 <_svfiprintf_r+0x9c>
 80057fa:	9b03      	ldr	r3, [sp, #12]
 80057fc:	1d19      	adds	r1, r3, #4
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	9103      	str	r1, [sp, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	bfbb      	ittet	lt
 8005806:	425b      	neglt	r3, r3
 8005808:	f042 0202 	orrlt.w	r2, r2, #2
 800580c:	9307      	strge	r3, [sp, #28]
 800580e:	9307      	strlt	r3, [sp, #28]
 8005810:	bfb8      	it	lt
 8005812:	9204      	strlt	r2, [sp, #16]
 8005814:	7823      	ldrb	r3, [r4, #0]
 8005816:	2b2e      	cmp	r3, #46	; 0x2e
 8005818:	d10c      	bne.n	8005834 <_svfiprintf_r+0x130>
 800581a:	7863      	ldrb	r3, [r4, #1]
 800581c:	2b2a      	cmp	r3, #42	; 0x2a
 800581e:	d135      	bne.n	800588c <_svfiprintf_r+0x188>
 8005820:	9b03      	ldr	r3, [sp, #12]
 8005822:	1d1a      	adds	r2, r3, #4
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	9203      	str	r2, [sp, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	bfb8      	it	lt
 800582c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005830:	3402      	adds	r4, #2
 8005832:	9305      	str	r3, [sp, #20]
 8005834:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005900 <_svfiprintf_r+0x1fc>
 8005838:	7821      	ldrb	r1, [r4, #0]
 800583a:	2203      	movs	r2, #3
 800583c:	4650      	mov	r0, sl
 800583e:	f7fa fcc7 	bl	80001d0 <memchr>
 8005842:	b140      	cbz	r0, 8005856 <_svfiprintf_r+0x152>
 8005844:	2340      	movs	r3, #64	; 0x40
 8005846:	eba0 000a 	sub.w	r0, r0, sl
 800584a:	fa03 f000 	lsl.w	r0, r3, r0
 800584e:	9b04      	ldr	r3, [sp, #16]
 8005850:	4303      	orrs	r3, r0
 8005852:	3401      	adds	r4, #1
 8005854:	9304      	str	r3, [sp, #16]
 8005856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800585a:	4826      	ldr	r0, [pc, #152]	; (80058f4 <_svfiprintf_r+0x1f0>)
 800585c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005860:	2206      	movs	r2, #6
 8005862:	f7fa fcb5 	bl	80001d0 <memchr>
 8005866:	2800      	cmp	r0, #0
 8005868:	d038      	beq.n	80058dc <_svfiprintf_r+0x1d8>
 800586a:	4b23      	ldr	r3, [pc, #140]	; (80058f8 <_svfiprintf_r+0x1f4>)
 800586c:	bb1b      	cbnz	r3, 80058b6 <_svfiprintf_r+0x1b2>
 800586e:	9b03      	ldr	r3, [sp, #12]
 8005870:	3307      	adds	r3, #7
 8005872:	f023 0307 	bic.w	r3, r3, #7
 8005876:	3308      	adds	r3, #8
 8005878:	9303      	str	r3, [sp, #12]
 800587a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800587c:	4433      	add	r3, r6
 800587e:	9309      	str	r3, [sp, #36]	; 0x24
 8005880:	e767      	b.n	8005752 <_svfiprintf_r+0x4e>
 8005882:	fb0c 3202 	mla	r2, ip, r2, r3
 8005886:	460c      	mov	r4, r1
 8005888:	2001      	movs	r0, #1
 800588a:	e7a5      	b.n	80057d8 <_svfiprintf_r+0xd4>
 800588c:	2300      	movs	r3, #0
 800588e:	3401      	adds	r4, #1
 8005890:	9305      	str	r3, [sp, #20]
 8005892:	4619      	mov	r1, r3
 8005894:	f04f 0c0a 	mov.w	ip, #10
 8005898:	4620      	mov	r0, r4
 800589a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800589e:	3a30      	subs	r2, #48	; 0x30
 80058a0:	2a09      	cmp	r2, #9
 80058a2:	d903      	bls.n	80058ac <_svfiprintf_r+0x1a8>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0c5      	beq.n	8005834 <_svfiprintf_r+0x130>
 80058a8:	9105      	str	r1, [sp, #20]
 80058aa:	e7c3      	b.n	8005834 <_svfiprintf_r+0x130>
 80058ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80058b0:	4604      	mov	r4, r0
 80058b2:	2301      	movs	r3, #1
 80058b4:	e7f0      	b.n	8005898 <_svfiprintf_r+0x194>
 80058b6:	ab03      	add	r3, sp, #12
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	462a      	mov	r2, r5
 80058bc:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <_svfiprintf_r+0x1f8>)
 80058be:	a904      	add	r1, sp, #16
 80058c0:	4638      	mov	r0, r7
 80058c2:	f3af 8000 	nop.w
 80058c6:	1c42      	adds	r2, r0, #1
 80058c8:	4606      	mov	r6, r0
 80058ca:	d1d6      	bne.n	800587a <_svfiprintf_r+0x176>
 80058cc:	89ab      	ldrh	r3, [r5, #12]
 80058ce:	065b      	lsls	r3, r3, #25
 80058d0:	f53f af2c 	bmi.w	800572c <_svfiprintf_r+0x28>
 80058d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058d6:	b01d      	add	sp, #116	; 0x74
 80058d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058dc:	ab03      	add	r3, sp, #12
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	462a      	mov	r2, r5
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <_svfiprintf_r+0x1f8>)
 80058e4:	a904      	add	r1, sp, #16
 80058e6:	4638      	mov	r0, r7
 80058e8:	f000 f87a 	bl	80059e0 <_printf_i>
 80058ec:	e7eb      	b.n	80058c6 <_svfiprintf_r+0x1c2>
 80058ee:	bf00      	nop
 80058f0:	08005db8 	.word	0x08005db8
 80058f4:	08005dc2 	.word	0x08005dc2
 80058f8:	00000000 	.word	0x00000000
 80058fc:	0800564d 	.word	0x0800564d
 8005900:	08005dbe 	.word	0x08005dbe

08005904 <_printf_common>:
 8005904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005908:	4616      	mov	r6, r2
 800590a:	4699      	mov	r9, r3
 800590c:	688a      	ldr	r2, [r1, #8]
 800590e:	690b      	ldr	r3, [r1, #16]
 8005910:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005914:	4293      	cmp	r3, r2
 8005916:	bfb8      	it	lt
 8005918:	4613      	movlt	r3, r2
 800591a:	6033      	str	r3, [r6, #0]
 800591c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005920:	4607      	mov	r7, r0
 8005922:	460c      	mov	r4, r1
 8005924:	b10a      	cbz	r2, 800592a <_printf_common+0x26>
 8005926:	3301      	adds	r3, #1
 8005928:	6033      	str	r3, [r6, #0]
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	0699      	lsls	r1, r3, #26
 800592e:	bf42      	ittt	mi
 8005930:	6833      	ldrmi	r3, [r6, #0]
 8005932:	3302      	addmi	r3, #2
 8005934:	6033      	strmi	r3, [r6, #0]
 8005936:	6825      	ldr	r5, [r4, #0]
 8005938:	f015 0506 	ands.w	r5, r5, #6
 800593c:	d106      	bne.n	800594c <_printf_common+0x48>
 800593e:	f104 0a19 	add.w	sl, r4, #25
 8005942:	68e3      	ldr	r3, [r4, #12]
 8005944:	6832      	ldr	r2, [r6, #0]
 8005946:	1a9b      	subs	r3, r3, r2
 8005948:	42ab      	cmp	r3, r5
 800594a:	dc26      	bgt.n	800599a <_printf_common+0x96>
 800594c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005950:	1e13      	subs	r3, r2, #0
 8005952:	6822      	ldr	r2, [r4, #0]
 8005954:	bf18      	it	ne
 8005956:	2301      	movne	r3, #1
 8005958:	0692      	lsls	r2, r2, #26
 800595a:	d42b      	bmi.n	80059b4 <_printf_common+0xb0>
 800595c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005960:	4649      	mov	r1, r9
 8005962:	4638      	mov	r0, r7
 8005964:	47c0      	blx	r8
 8005966:	3001      	adds	r0, #1
 8005968:	d01e      	beq.n	80059a8 <_printf_common+0xa4>
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	68e5      	ldr	r5, [r4, #12]
 800596e:	6832      	ldr	r2, [r6, #0]
 8005970:	f003 0306 	and.w	r3, r3, #6
 8005974:	2b04      	cmp	r3, #4
 8005976:	bf08      	it	eq
 8005978:	1aad      	subeq	r5, r5, r2
 800597a:	68a3      	ldr	r3, [r4, #8]
 800597c:	6922      	ldr	r2, [r4, #16]
 800597e:	bf0c      	ite	eq
 8005980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005984:	2500      	movne	r5, #0
 8005986:	4293      	cmp	r3, r2
 8005988:	bfc4      	itt	gt
 800598a:	1a9b      	subgt	r3, r3, r2
 800598c:	18ed      	addgt	r5, r5, r3
 800598e:	2600      	movs	r6, #0
 8005990:	341a      	adds	r4, #26
 8005992:	42b5      	cmp	r5, r6
 8005994:	d11a      	bne.n	80059cc <_printf_common+0xc8>
 8005996:	2000      	movs	r0, #0
 8005998:	e008      	b.n	80059ac <_printf_common+0xa8>
 800599a:	2301      	movs	r3, #1
 800599c:	4652      	mov	r2, sl
 800599e:	4649      	mov	r1, r9
 80059a0:	4638      	mov	r0, r7
 80059a2:	47c0      	blx	r8
 80059a4:	3001      	adds	r0, #1
 80059a6:	d103      	bne.n	80059b0 <_printf_common+0xac>
 80059a8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b0:	3501      	adds	r5, #1
 80059b2:	e7c6      	b.n	8005942 <_printf_common+0x3e>
 80059b4:	18e1      	adds	r1, r4, r3
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	2030      	movs	r0, #48	; 0x30
 80059ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059be:	4422      	add	r2, r4
 80059c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059c8:	3302      	adds	r3, #2
 80059ca:	e7c7      	b.n	800595c <_printf_common+0x58>
 80059cc:	2301      	movs	r3, #1
 80059ce:	4622      	mov	r2, r4
 80059d0:	4649      	mov	r1, r9
 80059d2:	4638      	mov	r0, r7
 80059d4:	47c0      	blx	r8
 80059d6:	3001      	adds	r0, #1
 80059d8:	d0e6      	beq.n	80059a8 <_printf_common+0xa4>
 80059da:	3601      	adds	r6, #1
 80059dc:	e7d9      	b.n	8005992 <_printf_common+0x8e>
	...

080059e0 <_printf_i>:
 80059e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059e4:	7e0f      	ldrb	r7, [r1, #24]
 80059e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059e8:	2f78      	cmp	r7, #120	; 0x78
 80059ea:	4691      	mov	r9, r2
 80059ec:	4680      	mov	r8, r0
 80059ee:	460c      	mov	r4, r1
 80059f0:	469a      	mov	sl, r3
 80059f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059f6:	d807      	bhi.n	8005a08 <_printf_i+0x28>
 80059f8:	2f62      	cmp	r7, #98	; 0x62
 80059fa:	d80a      	bhi.n	8005a12 <_printf_i+0x32>
 80059fc:	2f00      	cmp	r7, #0
 80059fe:	f000 80d8 	beq.w	8005bb2 <_printf_i+0x1d2>
 8005a02:	2f58      	cmp	r7, #88	; 0x58
 8005a04:	f000 80a3 	beq.w	8005b4e <_printf_i+0x16e>
 8005a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a10:	e03a      	b.n	8005a88 <_printf_i+0xa8>
 8005a12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a16:	2b15      	cmp	r3, #21
 8005a18:	d8f6      	bhi.n	8005a08 <_printf_i+0x28>
 8005a1a:	a101      	add	r1, pc, #4	; (adr r1, 8005a20 <_printf_i+0x40>)
 8005a1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a20:	08005a79 	.word	0x08005a79
 8005a24:	08005a8d 	.word	0x08005a8d
 8005a28:	08005a09 	.word	0x08005a09
 8005a2c:	08005a09 	.word	0x08005a09
 8005a30:	08005a09 	.word	0x08005a09
 8005a34:	08005a09 	.word	0x08005a09
 8005a38:	08005a8d 	.word	0x08005a8d
 8005a3c:	08005a09 	.word	0x08005a09
 8005a40:	08005a09 	.word	0x08005a09
 8005a44:	08005a09 	.word	0x08005a09
 8005a48:	08005a09 	.word	0x08005a09
 8005a4c:	08005b99 	.word	0x08005b99
 8005a50:	08005abd 	.word	0x08005abd
 8005a54:	08005b7b 	.word	0x08005b7b
 8005a58:	08005a09 	.word	0x08005a09
 8005a5c:	08005a09 	.word	0x08005a09
 8005a60:	08005bbb 	.word	0x08005bbb
 8005a64:	08005a09 	.word	0x08005a09
 8005a68:	08005abd 	.word	0x08005abd
 8005a6c:	08005a09 	.word	0x08005a09
 8005a70:	08005a09 	.word	0x08005a09
 8005a74:	08005b83 	.word	0x08005b83
 8005a78:	682b      	ldr	r3, [r5, #0]
 8005a7a:	1d1a      	adds	r2, r3, #4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	602a      	str	r2, [r5, #0]
 8005a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e0a3      	b.n	8005bd4 <_printf_i+0x1f4>
 8005a8c:	6820      	ldr	r0, [r4, #0]
 8005a8e:	6829      	ldr	r1, [r5, #0]
 8005a90:	0606      	lsls	r6, r0, #24
 8005a92:	f101 0304 	add.w	r3, r1, #4
 8005a96:	d50a      	bpl.n	8005aae <_printf_i+0xce>
 8005a98:	680e      	ldr	r6, [r1, #0]
 8005a9a:	602b      	str	r3, [r5, #0]
 8005a9c:	2e00      	cmp	r6, #0
 8005a9e:	da03      	bge.n	8005aa8 <_printf_i+0xc8>
 8005aa0:	232d      	movs	r3, #45	; 0x2d
 8005aa2:	4276      	negs	r6, r6
 8005aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa8:	485e      	ldr	r0, [pc, #376]	; (8005c24 <_printf_i+0x244>)
 8005aaa:	230a      	movs	r3, #10
 8005aac:	e019      	b.n	8005ae2 <_printf_i+0x102>
 8005aae:	680e      	ldr	r6, [r1, #0]
 8005ab0:	602b      	str	r3, [r5, #0]
 8005ab2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ab6:	bf18      	it	ne
 8005ab8:	b236      	sxthne	r6, r6
 8005aba:	e7ef      	b.n	8005a9c <_printf_i+0xbc>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	6820      	ldr	r0, [r4, #0]
 8005ac0:	1d19      	adds	r1, r3, #4
 8005ac2:	6029      	str	r1, [r5, #0]
 8005ac4:	0601      	lsls	r1, r0, #24
 8005ac6:	d501      	bpl.n	8005acc <_printf_i+0xec>
 8005ac8:	681e      	ldr	r6, [r3, #0]
 8005aca:	e002      	b.n	8005ad2 <_printf_i+0xf2>
 8005acc:	0646      	lsls	r6, r0, #25
 8005ace:	d5fb      	bpl.n	8005ac8 <_printf_i+0xe8>
 8005ad0:	881e      	ldrh	r6, [r3, #0]
 8005ad2:	4854      	ldr	r0, [pc, #336]	; (8005c24 <_printf_i+0x244>)
 8005ad4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ad6:	bf0c      	ite	eq
 8005ad8:	2308      	moveq	r3, #8
 8005ada:	230a      	movne	r3, #10
 8005adc:	2100      	movs	r1, #0
 8005ade:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ae2:	6865      	ldr	r5, [r4, #4]
 8005ae4:	60a5      	str	r5, [r4, #8]
 8005ae6:	2d00      	cmp	r5, #0
 8005ae8:	bfa2      	ittt	ge
 8005aea:	6821      	ldrge	r1, [r4, #0]
 8005aec:	f021 0104 	bicge.w	r1, r1, #4
 8005af0:	6021      	strge	r1, [r4, #0]
 8005af2:	b90e      	cbnz	r6, 8005af8 <_printf_i+0x118>
 8005af4:	2d00      	cmp	r5, #0
 8005af6:	d04d      	beq.n	8005b94 <_printf_i+0x1b4>
 8005af8:	4615      	mov	r5, r2
 8005afa:	fbb6 f1f3 	udiv	r1, r6, r3
 8005afe:	fb03 6711 	mls	r7, r3, r1, r6
 8005b02:	5dc7      	ldrb	r7, [r0, r7]
 8005b04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b08:	4637      	mov	r7, r6
 8005b0a:	42bb      	cmp	r3, r7
 8005b0c:	460e      	mov	r6, r1
 8005b0e:	d9f4      	bls.n	8005afa <_printf_i+0x11a>
 8005b10:	2b08      	cmp	r3, #8
 8005b12:	d10b      	bne.n	8005b2c <_printf_i+0x14c>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	07de      	lsls	r6, r3, #31
 8005b18:	d508      	bpl.n	8005b2c <_printf_i+0x14c>
 8005b1a:	6923      	ldr	r3, [r4, #16]
 8005b1c:	6861      	ldr	r1, [r4, #4]
 8005b1e:	4299      	cmp	r1, r3
 8005b20:	bfde      	ittt	le
 8005b22:	2330      	movle	r3, #48	; 0x30
 8005b24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b2c:	1b52      	subs	r2, r2, r5
 8005b2e:	6122      	str	r2, [r4, #16]
 8005b30:	f8cd a000 	str.w	sl, [sp]
 8005b34:	464b      	mov	r3, r9
 8005b36:	aa03      	add	r2, sp, #12
 8005b38:	4621      	mov	r1, r4
 8005b3a:	4640      	mov	r0, r8
 8005b3c:	f7ff fee2 	bl	8005904 <_printf_common>
 8005b40:	3001      	adds	r0, #1
 8005b42:	d14c      	bne.n	8005bde <_printf_i+0x1fe>
 8005b44:	f04f 30ff 	mov.w	r0, #4294967295
 8005b48:	b004      	add	sp, #16
 8005b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b4e:	4835      	ldr	r0, [pc, #212]	; (8005c24 <_printf_i+0x244>)
 8005b50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b54:	6829      	ldr	r1, [r5, #0]
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b5c:	6029      	str	r1, [r5, #0]
 8005b5e:	061d      	lsls	r5, r3, #24
 8005b60:	d514      	bpl.n	8005b8c <_printf_i+0x1ac>
 8005b62:	07df      	lsls	r7, r3, #31
 8005b64:	bf44      	itt	mi
 8005b66:	f043 0320 	orrmi.w	r3, r3, #32
 8005b6a:	6023      	strmi	r3, [r4, #0]
 8005b6c:	b91e      	cbnz	r6, 8005b76 <_printf_i+0x196>
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	f023 0320 	bic.w	r3, r3, #32
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	2310      	movs	r3, #16
 8005b78:	e7b0      	b.n	8005adc <_printf_i+0xfc>
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	f043 0320 	orr.w	r3, r3, #32
 8005b80:	6023      	str	r3, [r4, #0]
 8005b82:	2378      	movs	r3, #120	; 0x78
 8005b84:	4828      	ldr	r0, [pc, #160]	; (8005c28 <_printf_i+0x248>)
 8005b86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b8a:	e7e3      	b.n	8005b54 <_printf_i+0x174>
 8005b8c:	0659      	lsls	r1, r3, #25
 8005b8e:	bf48      	it	mi
 8005b90:	b2b6      	uxthmi	r6, r6
 8005b92:	e7e6      	b.n	8005b62 <_printf_i+0x182>
 8005b94:	4615      	mov	r5, r2
 8005b96:	e7bb      	b.n	8005b10 <_printf_i+0x130>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	6826      	ldr	r6, [r4, #0]
 8005b9c:	6961      	ldr	r1, [r4, #20]
 8005b9e:	1d18      	adds	r0, r3, #4
 8005ba0:	6028      	str	r0, [r5, #0]
 8005ba2:	0635      	lsls	r5, r6, #24
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	d501      	bpl.n	8005bac <_printf_i+0x1cc>
 8005ba8:	6019      	str	r1, [r3, #0]
 8005baa:	e002      	b.n	8005bb2 <_printf_i+0x1d2>
 8005bac:	0670      	lsls	r0, r6, #25
 8005bae:	d5fb      	bpl.n	8005ba8 <_printf_i+0x1c8>
 8005bb0:	8019      	strh	r1, [r3, #0]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	6123      	str	r3, [r4, #16]
 8005bb6:	4615      	mov	r5, r2
 8005bb8:	e7ba      	b.n	8005b30 <_printf_i+0x150>
 8005bba:	682b      	ldr	r3, [r5, #0]
 8005bbc:	1d1a      	adds	r2, r3, #4
 8005bbe:	602a      	str	r2, [r5, #0]
 8005bc0:	681d      	ldr	r5, [r3, #0]
 8005bc2:	6862      	ldr	r2, [r4, #4]
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f7fa fb02 	bl	80001d0 <memchr>
 8005bcc:	b108      	cbz	r0, 8005bd2 <_printf_i+0x1f2>
 8005bce:	1b40      	subs	r0, r0, r5
 8005bd0:	6060      	str	r0, [r4, #4]
 8005bd2:	6863      	ldr	r3, [r4, #4]
 8005bd4:	6123      	str	r3, [r4, #16]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bdc:	e7a8      	b.n	8005b30 <_printf_i+0x150>
 8005bde:	6923      	ldr	r3, [r4, #16]
 8005be0:	462a      	mov	r2, r5
 8005be2:	4649      	mov	r1, r9
 8005be4:	4640      	mov	r0, r8
 8005be6:	47d0      	blx	sl
 8005be8:	3001      	adds	r0, #1
 8005bea:	d0ab      	beq.n	8005b44 <_printf_i+0x164>
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	079b      	lsls	r3, r3, #30
 8005bf0:	d413      	bmi.n	8005c1a <_printf_i+0x23a>
 8005bf2:	68e0      	ldr	r0, [r4, #12]
 8005bf4:	9b03      	ldr	r3, [sp, #12]
 8005bf6:	4298      	cmp	r0, r3
 8005bf8:	bfb8      	it	lt
 8005bfa:	4618      	movlt	r0, r3
 8005bfc:	e7a4      	b.n	8005b48 <_printf_i+0x168>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	4632      	mov	r2, r6
 8005c02:	4649      	mov	r1, r9
 8005c04:	4640      	mov	r0, r8
 8005c06:	47d0      	blx	sl
 8005c08:	3001      	adds	r0, #1
 8005c0a:	d09b      	beq.n	8005b44 <_printf_i+0x164>
 8005c0c:	3501      	adds	r5, #1
 8005c0e:	68e3      	ldr	r3, [r4, #12]
 8005c10:	9903      	ldr	r1, [sp, #12]
 8005c12:	1a5b      	subs	r3, r3, r1
 8005c14:	42ab      	cmp	r3, r5
 8005c16:	dcf2      	bgt.n	8005bfe <_printf_i+0x21e>
 8005c18:	e7eb      	b.n	8005bf2 <_printf_i+0x212>
 8005c1a:	2500      	movs	r5, #0
 8005c1c:	f104 0619 	add.w	r6, r4, #25
 8005c20:	e7f5      	b.n	8005c0e <_printf_i+0x22e>
 8005c22:	bf00      	nop
 8005c24:	08005dc9 	.word	0x08005dc9
 8005c28:	08005dda 	.word	0x08005dda

08005c2c <memmove>:
 8005c2c:	4288      	cmp	r0, r1
 8005c2e:	b510      	push	{r4, lr}
 8005c30:	eb01 0402 	add.w	r4, r1, r2
 8005c34:	d902      	bls.n	8005c3c <memmove+0x10>
 8005c36:	4284      	cmp	r4, r0
 8005c38:	4623      	mov	r3, r4
 8005c3a:	d807      	bhi.n	8005c4c <memmove+0x20>
 8005c3c:	1e43      	subs	r3, r0, #1
 8005c3e:	42a1      	cmp	r1, r4
 8005c40:	d008      	beq.n	8005c54 <memmove+0x28>
 8005c42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c4a:	e7f8      	b.n	8005c3e <memmove+0x12>
 8005c4c:	4402      	add	r2, r0
 8005c4e:	4601      	mov	r1, r0
 8005c50:	428a      	cmp	r2, r1
 8005c52:	d100      	bne.n	8005c56 <memmove+0x2a>
 8005c54:	bd10      	pop	{r4, pc}
 8005c56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c5e:	e7f7      	b.n	8005c50 <memmove+0x24>

08005c60 <_realloc_r>:
 8005c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c64:	4680      	mov	r8, r0
 8005c66:	4614      	mov	r4, r2
 8005c68:	460e      	mov	r6, r1
 8005c6a:	b921      	cbnz	r1, 8005c76 <_realloc_r+0x16>
 8005c6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c70:	4611      	mov	r1, r2
 8005c72:	f7ff bb85 	b.w	8005380 <_malloc_r>
 8005c76:	b92a      	cbnz	r2, 8005c84 <_realloc_r+0x24>
 8005c78:	f7ff fc9c 	bl	80055b4 <_free_r>
 8005c7c:	4625      	mov	r5, r4
 8005c7e:	4628      	mov	r0, r5
 8005c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c84:	f000 f81b 	bl	8005cbe <_malloc_usable_size_r>
 8005c88:	4284      	cmp	r4, r0
 8005c8a:	4607      	mov	r7, r0
 8005c8c:	d802      	bhi.n	8005c94 <_realloc_r+0x34>
 8005c8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c92:	d812      	bhi.n	8005cba <_realloc_r+0x5a>
 8005c94:	4621      	mov	r1, r4
 8005c96:	4640      	mov	r0, r8
 8005c98:	f7ff fb72 	bl	8005380 <_malloc_r>
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d0ed      	beq.n	8005c7e <_realloc_r+0x1e>
 8005ca2:	42bc      	cmp	r4, r7
 8005ca4:	4622      	mov	r2, r4
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	bf28      	it	cs
 8005caa:	463a      	movcs	r2, r7
 8005cac:	f7ff fb32 	bl	8005314 <memcpy>
 8005cb0:	4631      	mov	r1, r6
 8005cb2:	4640      	mov	r0, r8
 8005cb4:	f7ff fc7e 	bl	80055b4 <_free_r>
 8005cb8:	e7e1      	b.n	8005c7e <_realloc_r+0x1e>
 8005cba:	4635      	mov	r5, r6
 8005cbc:	e7df      	b.n	8005c7e <_realloc_r+0x1e>

08005cbe <_malloc_usable_size_r>:
 8005cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cc2:	1f18      	subs	r0, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	bfbc      	itt	lt
 8005cc8:	580b      	ldrlt	r3, [r1, r0]
 8005cca:	18c0      	addlt	r0, r0, r3
 8005ccc:	4770      	bx	lr
	...

08005cd0 <_init>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	bf00      	nop
 8005cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd6:	bc08      	pop	{r3}
 8005cd8:	469e      	mov	lr, r3
 8005cda:	4770      	bx	lr

08005cdc <_fini>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	bf00      	nop
 8005ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce2:	bc08      	pop	{r3}
 8005ce4:	469e      	mov	lr, r3
 8005ce6:	4770      	bx	lr
